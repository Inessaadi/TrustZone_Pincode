
GTZC_TZSC_MPCBB_TrustZone_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac28  0c0001f8  0c0001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  0c00ae20  0c00ae20  0001ae20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c00b438  0c00b438  0002e040  2**0
                  CONTENTS
  4 .ARM          00000008  0c00b438  0c00b438  0001b438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c00b440  0c00b440  0002e040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0c00b440  0c00b440  0001b440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0c00b448  0c00b448  0001b448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  30000000  0c00b450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000040  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          000000d0  300001e8  300001e8  000301e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  300002b8  300002b8  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e040  2**0
                  CONTENTS, READONLY
 13 .debug_line   000103bf  00000000  00000000  0002e076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000e971  00000000  00000000  0003e435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002898  00000000  00000000  0004cda6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d88  00000000  00000000  0004f640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0010428e  00000000  00000000  000503c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000c70  00000000  00000000  00154658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029fda  00000000  00000000  001552c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017f2a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c48  00000000  00000000  0017f2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f8 <__do_global_dtors_aux>:
 c0001f8:	b510      	push	{r4, lr}
 c0001fa:	4c05      	ldr	r4, [pc, #20]	; (c000210 <__do_global_dtors_aux+0x18>)
 c0001fc:	7823      	ldrb	r3, [r4, #0]
 c0001fe:	b933      	cbnz	r3, c00020e <__do_global_dtors_aux+0x16>
 c000200:	4b04      	ldr	r3, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x1c>)
 c000202:	b113      	cbz	r3, c00020a <__do_global_dtors_aux+0x12>
 c000204:	4804      	ldr	r0, [pc, #16]	; (c000218 <__do_global_dtors_aux+0x20>)
 c000206:	e000      	b.n	c00020a <__do_global_dtors_aux+0x12>
 c000208:	bf00      	nop
 c00020a:	2301      	movs	r3, #1
 c00020c:	7023      	strb	r3, [r4, #0]
 c00020e:	bd10      	pop	{r4, pc}
 c000210:	300001e8 	.word	0x300001e8
 c000214:	00000000 	.word	0x00000000
 c000218:	0c00ae08 	.word	0x0c00ae08

0c00021c <frame_dummy>:
 c00021c:	b508      	push	{r3, lr}
 c00021e:	4b03      	ldr	r3, [pc, #12]	; (c00022c <frame_dummy+0x10>)
 c000220:	b11b      	cbz	r3, c00022a <frame_dummy+0xe>
 c000222:	4903      	ldr	r1, [pc, #12]	; (c000230 <frame_dummy+0x14>)
 c000224:	4803      	ldr	r0, [pc, #12]	; (c000234 <frame_dummy+0x18>)
 c000226:	e000      	b.n	c00022a <frame_dummy+0xe>
 c000228:	bf00      	nop
 c00022a:	bd08      	pop	{r3, pc}
 c00022c:	00000000 	.word	0x00000000
 c000230:	300001ec 	.word	0x300001ec
 c000234:	0c00ae08 	.word	0x0c00ae08

0c000238 <strlen>:
 c000238:	4603      	mov	r3, r0
 c00023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 c00023e:	2a00      	cmp	r2, #0
 c000240:	d1fb      	bne.n	c00023a <strlen+0x2>
 c000242:	1a18      	subs	r0, r3, r0
 c000244:	3801      	subs	r0, #1
 c000246:	4770      	bx	lr

0c000248 <cmse_check_address_range>:
 c000248:	43c3      	mvns	r3, r0
 c00024a:	428b      	cmp	r3, r1
 c00024c:	d36d      	bcc.n	c00032a <cmse_check_address_range+0xe2>
 c00024e:	f032 031f 	bics.w	r3, r2, #31
 c000252:	d16a      	bne.n	c00032a <cmse_check_address_range+0xe2>
 c000254:	3901      	subs	r1, #1
 c000256:	f002 0314 	and.w	r3, r2, #20
 c00025a:	4401      	add	r1, r0
 c00025c:	b500      	push	{lr}
 c00025e:	ea81 0c00 	eor.w	ip, r1, r0
 c000262:	2b14      	cmp	r3, #20
 c000264:	d80e      	bhi.n	c000284 <cmse_check_address_range+0x3c>
 c000266:	e8df f003 	tbb	[pc, r3]
 c00026a:	0d3f      	.short	0x0d3f
 c00026c:	0d480d0d 	.word	0x0d480d0d
 c000270:	0d0d0d0d 	.word	0x0d0d0d0d
 c000274:	0d0d0d0d 	.word	0x0d0d0d0d
 c000278:	0d510d0d 	.word	0x0d510d0d
 c00027c:	0d0d      	.short	0x0d0d
 c00027e:	10          	.byte	0x10
 c00027f:	00          	.byte	0x00
 c000280:	02db      	lsls	r3, r3, #11
 c000282:	d400      	bmi.n	c000286 <cmse_check_address_range+0x3e>
 c000284:	2000      	movs	r0, #0
 c000286:	f85d fb04 	ldr.w	pc, [sp], #4
 c00028a:	f1bc 0f1f 	cmp.w	ip, #31
 c00028e:	e840 f3c0 	ttat	r3, r0
 c000292:	d904      	bls.n	c00029e <cmse_check_address_range+0x56>
 c000294:	469c      	mov	ip, r3
 c000296:	e841 f3c0 	ttat	r3, r1
 c00029a:	459c      	cmp	ip, r3
 c00029c:	d1f2      	bne.n	c000284 <cmse_check_address_range+0x3c>
 c00029e:	f022 0214 	bic.w	r2, r2, #20
 c0002a2:	3a01      	subs	r2, #1
 c0002a4:	2a0a      	cmp	r2, #10
 c0002a6:	d8ed      	bhi.n	c000284 <cmse_check_address_range+0x3c>
 c0002a8:	a101      	add	r1, pc, #4	; (adr r1, c0002b0 <cmse_check_address_range+0x68>)
 c0002aa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 c0002ae:	bf00      	nop
 c0002b0:	0c0002e3 	.word	0x0c0002e3
 c0002b4:	0c000325 	.word	0x0c000325
 c0002b8:	0c0002dd 	.word	0x0c0002dd
 c0002bc:	0c000285 	.word	0x0c000285
 c0002c0:	0c000285 	.word	0x0c000285
 c0002c4:	0c000285 	.word	0x0c000285
 c0002c8:	0c000285 	.word	0x0c000285
 c0002cc:	0c00031f 	.word	0x0c00031f
 c0002d0:	0c0002e3 	.word	0x0c0002e3
 c0002d4:	0c000281 	.word	0x0c000281
 c0002d8:	0c0002dd 	.word	0x0c0002dd
 c0002dc:	029a      	lsls	r2, r3, #10
 c0002de:	d4d2      	bmi.n	c000286 <cmse_check_address_range+0x3e>
 c0002e0:	e7d0      	b.n	c000284 <cmse_check_address_range+0x3c>
 c0002e2:	031a      	lsls	r2, r3, #12
 c0002e4:	d4cf      	bmi.n	c000286 <cmse_check_address_range+0x3e>
 c0002e6:	e7cd      	b.n	c000284 <cmse_check_address_range+0x3c>
 c0002e8:	f1bc 0f1f 	cmp.w	ip, #31
 c0002ec:	e840 f300 	tt	r3, r0
 c0002f0:	d9d5      	bls.n	c00029e <cmse_check_address_range+0x56>
 c0002f2:	469c      	mov	ip, r3
 c0002f4:	e841 f300 	tt	r3, r1
 c0002f8:	e7cf      	b.n	c00029a <cmse_check_address_range+0x52>
 c0002fa:	f1bc 0f1f 	cmp.w	ip, #31
 c0002fe:	e840 f340 	ttt	r3, r0
 c000302:	d9cc      	bls.n	c00029e <cmse_check_address_range+0x56>
 c000304:	469c      	mov	ip, r3
 c000306:	e841 f340 	ttt	r3, r1
 c00030a:	e7c6      	b.n	c00029a <cmse_check_address_range+0x52>
 c00030c:	f1bc 0f1f 	cmp.w	ip, #31
 c000310:	e840 f380 	tta	r3, r0
 c000314:	d9c3      	bls.n	c00029e <cmse_check_address_range+0x56>
 c000316:	469c      	mov	ip, r3
 c000318:	e841 f380 	tta	r3, r1
 c00031c:	e7bd      	b.n	c00029a <cmse_check_address_range+0x52>
 c00031e:	035b      	lsls	r3, r3, #13
 c000320:	d5b0      	bpl.n	c000284 <cmse_check_address_range+0x3c>
 c000322:	e7b0      	b.n	c000286 <cmse_check_address_range+0x3e>
 c000324:	0259      	lsls	r1, r3, #9
 c000326:	d5ae      	bpl.n	c000286 <cmse_check_address_range+0x3e>
 c000328:	e7ac      	b.n	c000284 <cmse_check_address_range+0x3c>
 c00032a:	2000      	movs	r0, #0
 c00032c:	4770      	bx	lr
 c00032e:	bf00      	nop

0c000330 <__gnu_cmse_nonsecure_call>:
 c000330:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000334:	4627      	mov	r7, r4
 c000336:	46a0      	mov	r8, r4
 c000338:	46a1      	mov	r9, r4
 c00033a:	46a2      	mov	sl, r4
 c00033c:	46a3      	mov	fp, r4
 c00033e:	46a4      	mov	ip, r4
 c000340:	ed2d 8b10 	vpush	{d8-d15}
 c000344:	f04f 0500 	mov.w	r5, #0
 c000348:	ec45 5b18 	vmov	d8, r5, r5
 c00034c:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000350:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000354:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c000358:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c00035c:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000360:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000364:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c000368:	eef1 5a10 	vmrs	r5, fpscr
 c00036c:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000370:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000374:	4035      	ands	r5, r6
 c000376:	eee1 5a10 	vmsr	fpscr, r5
 c00037a:	f384 8800 	msr	CPSR_f, r4
 c00037e:	4625      	mov	r5, r4
 c000380:	4626      	mov	r6, r4
 c000382:	47a4      	blxns	r4
 c000384:	ecbd 8b10 	vpop	{d8-d15}
 c000388:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c00038c <__aeabi_drsub>:
 c00038c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 c000390:	e002      	b.n	c000398 <__adddf3>
 c000392:	bf00      	nop

0c000394 <__aeabi_dsub>:
 c000394:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0c000398 <__adddf3>:
 c000398:	b530      	push	{r4, r5, lr}
 c00039a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 c00039e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 c0003a2:	ea94 0f05 	teq	r4, r5
 c0003a6:	bf08      	it	eq
 c0003a8:	ea90 0f02 	teqeq	r0, r2
 c0003ac:	bf1f      	itttt	ne
 c0003ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 c0003b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 c0003b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 c0003ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 c0003be:	f000 80e2 	beq.w	c000586 <__adddf3+0x1ee>
 c0003c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 c0003c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 c0003ca:	bfb8      	it	lt
 c0003cc:	426d      	neglt	r5, r5
 c0003ce:	dd0c      	ble.n	c0003ea <__adddf3+0x52>
 c0003d0:	442c      	add	r4, r5
 c0003d2:	ea80 0202 	eor.w	r2, r0, r2
 c0003d6:	ea81 0303 	eor.w	r3, r1, r3
 c0003da:	ea82 0000 	eor.w	r0, r2, r0
 c0003de:	ea83 0101 	eor.w	r1, r3, r1
 c0003e2:	ea80 0202 	eor.w	r2, r0, r2
 c0003e6:	ea81 0303 	eor.w	r3, r1, r3
 c0003ea:	2d36      	cmp	r5, #54	; 0x36
 c0003ec:	bf88      	it	hi
 c0003ee:	bd30      	pophi	{r4, r5, pc}
 c0003f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 c0003f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 c0003f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 c0003fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 c000400:	d002      	beq.n	c000408 <__adddf3+0x70>
 c000402:	4240      	negs	r0, r0
 c000404:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 c000408:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 c00040c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 c000410:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 c000414:	d002      	beq.n	c00041c <__adddf3+0x84>
 c000416:	4252      	negs	r2, r2
 c000418:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 c00041c:	ea94 0f05 	teq	r4, r5
 c000420:	f000 80a7 	beq.w	c000572 <__adddf3+0x1da>
 c000424:	f1a4 0401 	sub.w	r4, r4, #1
 c000428:	f1d5 0e20 	rsbs	lr, r5, #32
 c00042c:	db0d      	blt.n	c00044a <__adddf3+0xb2>
 c00042e:	fa02 fc0e 	lsl.w	ip, r2, lr
 c000432:	fa22 f205 	lsr.w	r2, r2, r5
 c000436:	1880      	adds	r0, r0, r2
 c000438:	f141 0100 	adc.w	r1, r1, #0
 c00043c:	fa03 f20e 	lsl.w	r2, r3, lr
 c000440:	1880      	adds	r0, r0, r2
 c000442:	fa43 f305 	asr.w	r3, r3, r5
 c000446:	4159      	adcs	r1, r3
 c000448:	e00e      	b.n	c000468 <__adddf3+0xd0>
 c00044a:	f1a5 0520 	sub.w	r5, r5, #32
 c00044e:	f10e 0e20 	add.w	lr, lr, #32
 c000452:	2a01      	cmp	r2, #1
 c000454:	fa03 fc0e 	lsl.w	ip, r3, lr
 c000458:	bf28      	it	cs
 c00045a:	f04c 0c02 	orrcs.w	ip, ip, #2
 c00045e:	fa43 f305 	asr.w	r3, r3, r5
 c000462:	18c0      	adds	r0, r0, r3
 c000464:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 c000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 c00046c:	d507      	bpl.n	c00047e <__adddf3+0xe6>
 c00046e:	f04f 0e00 	mov.w	lr, #0
 c000472:	f1dc 0c00 	rsbs	ip, ip, #0
 c000476:	eb7e 0000 	sbcs.w	r0, lr, r0
 c00047a:	eb6e 0101 	sbc.w	r1, lr, r1
 c00047e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 c000482:	d31b      	bcc.n	c0004bc <__adddf3+0x124>
 c000484:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 c000488:	d30c      	bcc.n	c0004a4 <__adddf3+0x10c>
 c00048a:	0849      	lsrs	r1, r1, #1
 c00048c:	ea5f 0030 	movs.w	r0, r0, rrx
 c000490:	ea4f 0c3c 	mov.w	ip, ip, rrx
 c000494:	f104 0401 	add.w	r4, r4, #1
 c000498:	ea4f 5244 	mov.w	r2, r4, lsl #21
 c00049c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 c0004a0:	f080 809a 	bcs.w	c0005d8 <__adddf3+0x240>
 c0004a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 c0004a8:	bf08      	it	eq
 c0004aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 c0004ae:	f150 0000 	adcs.w	r0, r0, #0
 c0004b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 c0004b6:	ea41 0105 	orr.w	r1, r1, r5
 c0004ba:	bd30      	pop	{r4, r5, pc}
 c0004bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 c0004c0:	4140      	adcs	r0, r0
 c0004c2:	eb41 0101 	adc.w	r1, r1, r1
 c0004c6:	3c01      	subs	r4, #1
 c0004c8:	bf28      	it	cs
 c0004ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 c0004ce:	d2e9      	bcs.n	c0004a4 <__adddf3+0x10c>
 c0004d0:	f091 0f00 	teq	r1, #0
 c0004d4:	bf04      	itt	eq
 c0004d6:	4601      	moveq	r1, r0
 c0004d8:	2000      	moveq	r0, #0
 c0004da:	fab1 f381 	clz	r3, r1
 c0004de:	bf08      	it	eq
 c0004e0:	3320      	addeq	r3, #32
 c0004e2:	f1a3 030b 	sub.w	r3, r3, #11
 c0004e6:	f1b3 0220 	subs.w	r2, r3, #32
 c0004ea:	da0c      	bge.n	c000506 <__adddf3+0x16e>
 c0004ec:	320c      	adds	r2, #12
 c0004ee:	dd08      	ble.n	c000502 <__adddf3+0x16a>
 c0004f0:	f102 0c14 	add.w	ip, r2, #20
 c0004f4:	f1c2 020c 	rsb	r2, r2, #12
 c0004f8:	fa01 f00c 	lsl.w	r0, r1, ip
 c0004fc:	fa21 f102 	lsr.w	r1, r1, r2
 c000500:	e00c      	b.n	c00051c <__adddf3+0x184>
 c000502:	f102 0214 	add.w	r2, r2, #20
 c000506:	bfd8      	it	le
 c000508:	f1c2 0c20 	rsble	ip, r2, #32
 c00050c:	fa01 f102 	lsl.w	r1, r1, r2
 c000510:	fa20 fc0c 	lsr.w	ip, r0, ip
 c000514:	bfdc      	itt	le
 c000516:	ea41 010c 	orrle.w	r1, r1, ip
 c00051a:	4090      	lslle	r0, r2
 c00051c:	1ae4      	subs	r4, r4, r3
 c00051e:	bfa2      	ittt	ge
 c000520:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 c000524:	4329      	orrge	r1, r5
 c000526:	bd30      	popge	{r4, r5, pc}
 c000528:	ea6f 0404 	mvn.w	r4, r4
 c00052c:	3c1f      	subs	r4, #31
 c00052e:	da1c      	bge.n	c00056a <__adddf3+0x1d2>
 c000530:	340c      	adds	r4, #12
 c000532:	dc0e      	bgt.n	c000552 <__adddf3+0x1ba>
 c000534:	f104 0414 	add.w	r4, r4, #20
 c000538:	f1c4 0220 	rsb	r2, r4, #32
 c00053c:	fa20 f004 	lsr.w	r0, r0, r4
 c000540:	fa01 f302 	lsl.w	r3, r1, r2
 c000544:	ea40 0003 	orr.w	r0, r0, r3
 c000548:	fa21 f304 	lsr.w	r3, r1, r4
 c00054c:	ea45 0103 	orr.w	r1, r5, r3
 c000550:	bd30      	pop	{r4, r5, pc}
 c000552:	f1c4 040c 	rsb	r4, r4, #12
 c000556:	f1c4 0220 	rsb	r2, r4, #32
 c00055a:	fa20 f002 	lsr.w	r0, r0, r2
 c00055e:	fa01 f304 	lsl.w	r3, r1, r4
 c000562:	ea40 0003 	orr.w	r0, r0, r3
 c000566:	4629      	mov	r1, r5
 c000568:	bd30      	pop	{r4, r5, pc}
 c00056a:	fa21 f004 	lsr.w	r0, r1, r4
 c00056e:	4629      	mov	r1, r5
 c000570:	bd30      	pop	{r4, r5, pc}
 c000572:	f094 0f00 	teq	r4, #0
 c000576:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 c00057a:	bf06      	itte	eq
 c00057c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 c000580:	3401      	addeq	r4, #1
 c000582:	3d01      	subne	r5, #1
 c000584:	e74e      	b.n	c000424 <__adddf3+0x8c>
 c000586:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 c00058a:	bf18      	it	ne
 c00058c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 c000590:	d029      	beq.n	c0005e6 <__adddf3+0x24e>
 c000592:	ea94 0f05 	teq	r4, r5
 c000596:	bf08      	it	eq
 c000598:	ea90 0f02 	teqeq	r0, r2
 c00059c:	d005      	beq.n	c0005aa <__adddf3+0x212>
 c00059e:	ea54 0c00 	orrs.w	ip, r4, r0
 c0005a2:	bf04      	itt	eq
 c0005a4:	4619      	moveq	r1, r3
 c0005a6:	4610      	moveq	r0, r2
 c0005a8:	bd30      	pop	{r4, r5, pc}
 c0005aa:	ea91 0f03 	teq	r1, r3
 c0005ae:	bf1e      	ittt	ne
 c0005b0:	2100      	movne	r1, #0
 c0005b2:	2000      	movne	r0, #0
 c0005b4:	bd30      	popne	{r4, r5, pc}
 c0005b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 c0005ba:	d105      	bne.n	c0005c8 <__adddf3+0x230>
 c0005bc:	0040      	lsls	r0, r0, #1
 c0005be:	4149      	adcs	r1, r1
 c0005c0:	bf28      	it	cs
 c0005c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 c0005c6:	bd30      	pop	{r4, r5, pc}
 c0005c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 c0005cc:	bf3c      	itt	cc
 c0005ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 c0005d2:	bd30      	popcc	{r4, r5, pc}
 c0005d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 c0005d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 c0005dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 c0005e0:	f04f 0000 	mov.w	r0, #0
 c0005e4:	bd30      	pop	{r4, r5, pc}
 c0005e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 c0005ea:	bf1a      	itte	ne
 c0005ec:	4619      	movne	r1, r3
 c0005ee:	4610      	movne	r0, r2
 c0005f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 c0005f4:	bf1c      	itt	ne
 c0005f6:	460b      	movne	r3, r1
 c0005f8:	4602      	movne	r2, r0
 c0005fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 c0005fe:	bf06      	itte	eq
 c000600:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 c000604:	ea91 0f03 	teqeq	r1, r3
 c000608:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 c00060c:	bd30      	pop	{r4, r5, pc}
 c00060e:	bf00      	nop

0c000610 <__aeabi_ui2d>:
 c000610:	f090 0f00 	teq	r0, #0
 c000614:	bf04      	itt	eq
 c000616:	2100      	moveq	r1, #0
 c000618:	4770      	bxeq	lr
 c00061a:	b530      	push	{r4, r5, lr}
 c00061c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 c000620:	f104 0432 	add.w	r4, r4, #50	; 0x32
 c000624:	f04f 0500 	mov.w	r5, #0
 c000628:	f04f 0100 	mov.w	r1, #0
 c00062c:	e750      	b.n	c0004d0 <__adddf3+0x138>
 c00062e:	bf00      	nop

0c000630 <__aeabi_i2d>:
 c000630:	f090 0f00 	teq	r0, #0
 c000634:	bf04      	itt	eq
 c000636:	2100      	moveq	r1, #0
 c000638:	4770      	bxeq	lr
 c00063a:	b530      	push	{r4, r5, lr}
 c00063c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 c000640:	f104 0432 	add.w	r4, r4, #50	; 0x32
 c000644:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 c000648:	bf48      	it	mi
 c00064a:	4240      	negmi	r0, r0
 c00064c:	f04f 0100 	mov.w	r1, #0
 c000650:	e73e      	b.n	c0004d0 <__adddf3+0x138>
 c000652:	bf00      	nop

0c000654 <__aeabi_f2d>:
 c000654:	0042      	lsls	r2, r0, #1
 c000656:	ea4f 01e2 	mov.w	r1, r2, asr #3
 c00065a:	ea4f 0131 	mov.w	r1, r1, rrx
 c00065e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 c000662:	bf1f      	itttt	ne
 c000664:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 c000668:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 c00066c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 c000670:	4770      	bxne	lr
 c000672:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 c000676:	bf08      	it	eq
 c000678:	4770      	bxeq	lr
 c00067a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 c00067e:	bf04      	itt	eq
 c000680:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 c000684:	4770      	bxeq	lr
 c000686:	b530      	push	{r4, r5, lr}
 c000688:	f44f 7460 	mov.w	r4, #896	; 0x380
 c00068c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 c000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 c000694:	e71c      	b.n	c0004d0 <__adddf3+0x138>
 c000696:	bf00      	nop

0c000698 <__aeabi_ul2d>:
 c000698:	ea50 0201 	orrs.w	r2, r0, r1
 c00069c:	bf08      	it	eq
 c00069e:	4770      	bxeq	lr
 c0006a0:	b530      	push	{r4, r5, lr}
 c0006a2:	f04f 0500 	mov.w	r5, #0
 c0006a6:	e00a      	b.n	c0006be <__aeabi_l2d+0x16>

0c0006a8 <__aeabi_l2d>:
 c0006a8:	ea50 0201 	orrs.w	r2, r0, r1
 c0006ac:	bf08      	it	eq
 c0006ae:	4770      	bxeq	lr
 c0006b0:	b530      	push	{r4, r5, lr}
 c0006b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 c0006b6:	d502      	bpl.n	c0006be <__aeabi_l2d+0x16>
 c0006b8:	4240      	negs	r0, r0
 c0006ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 c0006be:	f44f 6480 	mov.w	r4, #1024	; 0x400
 c0006c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 c0006c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 c0006ca:	f43f aed8 	beq.w	c00047e <__adddf3+0xe6>
 c0006ce:	f04f 0203 	mov.w	r2, #3
 c0006d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 c0006d6:	bf18      	it	ne
 c0006d8:	3203      	addne	r2, #3
 c0006da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 c0006de:	bf18      	it	ne
 c0006e0:	3203      	addne	r2, #3
 c0006e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 c0006e6:	f1c2 0320 	rsb	r3, r2, #32
 c0006ea:	fa00 fc03 	lsl.w	ip, r0, r3
 c0006ee:	fa20 f002 	lsr.w	r0, r0, r2
 c0006f2:	fa01 fe03 	lsl.w	lr, r1, r3
 c0006f6:	ea40 000e 	orr.w	r0, r0, lr
 c0006fa:	fa21 f102 	lsr.w	r1, r1, r2
 c0006fe:	4414      	add	r4, r2
 c000700:	e6bd      	b.n	c00047e <__adddf3+0xe6>
 c000702:	bf00      	nop

0c000704 <__aeabi_dmul>:
 c000704:	b570      	push	{r4, r5, r6, lr}
 c000706:	f04f 0cff 	mov.w	ip, #255	; 0xff
 c00070a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 c00070e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 c000712:	bf1d      	ittte	ne
 c000714:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 c000718:	ea94 0f0c 	teqne	r4, ip
 c00071c:	ea95 0f0c 	teqne	r5, ip
 c000720:	f000 f8de 	bleq	c0008e0 <__aeabi_dmul+0x1dc>
 c000724:	442c      	add	r4, r5
 c000726:	ea81 0603 	eor.w	r6, r1, r3
 c00072a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 c00072e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 c000732:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 c000736:	bf18      	it	ne
 c000738:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 c00073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 c000740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c000744:	d038      	beq.n	c0007b8 <__aeabi_dmul+0xb4>
 c000746:	fba0 ce02 	umull	ip, lr, r0, r2
 c00074a:	f04f 0500 	mov.w	r5, #0
 c00074e:	fbe1 e502 	umlal	lr, r5, r1, r2
 c000752:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 c000756:	fbe0 e503 	umlal	lr, r5, r0, r3
 c00075a:	f04f 0600 	mov.w	r6, #0
 c00075e:	fbe1 5603 	umlal	r5, r6, r1, r3
 c000762:	f09c 0f00 	teq	ip, #0
 c000766:	bf18      	it	ne
 c000768:	f04e 0e01 	orrne.w	lr, lr, #1
 c00076c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 c000770:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 c000774:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 c000778:	d204      	bcs.n	c000784 <__aeabi_dmul+0x80>
 c00077a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 c00077e:	416d      	adcs	r5, r5
 c000780:	eb46 0606 	adc.w	r6, r6, r6
 c000784:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 c000788:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 c00078c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 c000790:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 c000794:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 c000798:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 c00079c:	bf88      	it	hi
 c00079e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 c0007a2:	d81e      	bhi.n	c0007e2 <__aeabi_dmul+0xde>
 c0007a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 c0007a8:	bf08      	it	eq
 c0007aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 c0007ae:	f150 0000 	adcs.w	r0, r0, #0
 c0007b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 c0007b6:	bd70      	pop	{r4, r5, r6, pc}
 c0007b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 c0007bc:	ea46 0101 	orr.w	r1, r6, r1
 c0007c0:	ea40 0002 	orr.w	r0, r0, r2
 c0007c4:	ea81 0103 	eor.w	r1, r1, r3
 c0007c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 c0007cc:	bfc2      	ittt	gt
 c0007ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 c0007d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 c0007d6:	bd70      	popgt	{r4, r5, r6, pc}
 c0007d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 c0007dc:	f04f 0e00 	mov.w	lr, #0
 c0007e0:	3c01      	subs	r4, #1
 c0007e2:	f300 80ab 	bgt.w	c00093c <__aeabi_dmul+0x238>
 c0007e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 c0007ea:	bfde      	ittt	le
 c0007ec:	2000      	movle	r0, #0
 c0007ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 c0007f2:	bd70      	pople	{r4, r5, r6, pc}
 c0007f4:	f1c4 0400 	rsb	r4, r4, #0
 c0007f8:	3c20      	subs	r4, #32
 c0007fa:	da35      	bge.n	c000868 <__aeabi_dmul+0x164>
 c0007fc:	340c      	adds	r4, #12
 c0007fe:	dc1b      	bgt.n	c000838 <__aeabi_dmul+0x134>
 c000800:	f104 0414 	add.w	r4, r4, #20
 c000804:	f1c4 0520 	rsb	r5, r4, #32
 c000808:	fa00 f305 	lsl.w	r3, r0, r5
 c00080c:	fa20 f004 	lsr.w	r0, r0, r4
 c000810:	fa01 f205 	lsl.w	r2, r1, r5
 c000814:	ea40 0002 	orr.w	r0, r0, r2
 c000818:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 c00081c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 c000820:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 c000824:	fa21 f604 	lsr.w	r6, r1, r4
 c000828:	eb42 0106 	adc.w	r1, r2, r6
 c00082c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 c000830:	bf08      	it	eq
 c000832:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 c000836:	bd70      	pop	{r4, r5, r6, pc}
 c000838:	f1c4 040c 	rsb	r4, r4, #12
 c00083c:	f1c4 0520 	rsb	r5, r4, #32
 c000840:	fa00 f304 	lsl.w	r3, r0, r4
 c000844:	fa20 f005 	lsr.w	r0, r0, r5
 c000848:	fa01 f204 	lsl.w	r2, r1, r4
 c00084c:	ea40 0002 	orr.w	r0, r0, r2
 c000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 c000854:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 c000858:	f141 0100 	adc.w	r1, r1, #0
 c00085c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 c000860:	bf08      	it	eq
 c000862:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 c000866:	bd70      	pop	{r4, r5, r6, pc}
 c000868:	f1c4 0520 	rsb	r5, r4, #32
 c00086c:	fa00 f205 	lsl.w	r2, r0, r5
 c000870:	ea4e 0e02 	orr.w	lr, lr, r2
 c000874:	fa20 f304 	lsr.w	r3, r0, r4
 c000878:	fa01 f205 	lsl.w	r2, r1, r5
 c00087c:	ea43 0302 	orr.w	r3, r3, r2
 c000880:	fa21 f004 	lsr.w	r0, r1, r4
 c000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 c000888:	fa21 f204 	lsr.w	r2, r1, r4
 c00088c:	ea20 0002 	bic.w	r0, r0, r2
 c000890:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 c000894:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 c000898:	bf08      	it	eq
 c00089a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 c00089e:	bd70      	pop	{r4, r5, r6, pc}
 c0008a0:	f094 0f00 	teq	r4, #0
 c0008a4:	d10f      	bne.n	c0008c6 <__aeabi_dmul+0x1c2>
 c0008a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 c0008aa:	0040      	lsls	r0, r0, #1
 c0008ac:	eb41 0101 	adc.w	r1, r1, r1
 c0008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 c0008b4:	bf08      	it	eq
 c0008b6:	3c01      	subeq	r4, #1
 c0008b8:	d0f7      	beq.n	c0008aa <__aeabi_dmul+0x1a6>
 c0008ba:	ea41 0106 	orr.w	r1, r1, r6
 c0008be:	f095 0f00 	teq	r5, #0
 c0008c2:	bf18      	it	ne
 c0008c4:	4770      	bxne	lr
 c0008c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 c0008ca:	0052      	lsls	r2, r2, #1
 c0008cc:	eb43 0303 	adc.w	r3, r3, r3
 c0008d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 c0008d4:	bf08      	it	eq
 c0008d6:	3d01      	subeq	r5, #1
 c0008d8:	d0f7      	beq.n	c0008ca <__aeabi_dmul+0x1c6>
 c0008da:	ea43 0306 	orr.w	r3, r3, r6
 c0008de:	4770      	bx	lr
 c0008e0:	ea94 0f0c 	teq	r4, ip
 c0008e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 c0008e8:	bf18      	it	ne
 c0008ea:	ea95 0f0c 	teqne	r5, ip
 c0008ee:	d00c      	beq.n	c00090a <__aeabi_dmul+0x206>
 c0008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 c0008f4:	bf18      	it	ne
 c0008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 c0008fa:	d1d1      	bne.n	c0008a0 <__aeabi_dmul+0x19c>
 c0008fc:	ea81 0103 	eor.w	r1, r1, r3
 c000900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 c000904:	f04f 0000 	mov.w	r0, #0
 c000908:	bd70      	pop	{r4, r5, r6, pc}
 c00090a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 c00090e:	bf06      	itte	eq
 c000910:	4610      	moveq	r0, r2
 c000912:	4619      	moveq	r1, r3
 c000914:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 c000918:	d019      	beq.n	c00094e <__aeabi_dmul+0x24a>
 c00091a:	ea94 0f0c 	teq	r4, ip
 c00091e:	d102      	bne.n	c000926 <__aeabi_dmul+0x222>
 c000920:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 c000924:	d113      	bne.n	c00094e <__aeabi_dmul+0x24a>
 c000926:	ea95 0f0c 	teq	r5, ip
 c00092a:	d105      	bne.n	c000938 <__aeabi_dmul+0x234>
 c00092c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 c000930:	bf1c      	itt	ne
 c000932:	4610      	movne	r0, r2
 c000934:	4619      	movne	r1, r3
 c000936:	d10a      	bne.n	c00094e <__aeabi_dmul+0x24a>
 c000938:	ea81 0103 	eor.w	r1, r1, r3
 c00093c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 c000940:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 c000944:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 c000948:	f04f 0000 	mov.w	r0, #0
 c00094c:	bd70      	pop	{r4, r5, r6, pc}
 c00094e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 c000952:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 c000956:	bd70      	pop	{r4, r5, r6, pc}

0c000958 <__aeabi_ddiv>:
 c000958:	b570      	push	{r4, r5, r6, lr}
 c00095a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 c00095e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 c000962:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 c000966:	bf1d      	ittte	ne
 c000968:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 c00096c:	ea94 0f0c 	teqne	r4, ip
 c000970:	ea95 0f0c 	teqne	r5, ip
 c000974:	f000 f8a7 	bleq	c000ac6 <__aeabi_ddiv+0x16e>
 c000978:	eba4 0405 	sub.w	r4, r4, r5
 c00097c:	ea81 0e03 	eor.w	lr, r1, r3
 c000980:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 c000984:	ea4f 3101 	mov.w	r1, r1, lsl #12
 c000988:	f000 8088 	beq.w	c000a9c <__aeabi_ddiv+0x144>
 c00098c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 c000990:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 c000994:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 c000998:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 c00099c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 c0009a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 c0009a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 c0009a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 c0009ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 c0009b0:	429d      	cmp	r5, r3
 c0009b2:	bf08      	it	eq
 c0009b4:	4296      	cmpeq	r6, r2
 c0009b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 c0009ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
 c0009be:	d202      	bcs.n	c0009c6 <__aeabi_ddiv+0x6e>
 c0009c0:	085b      	lsrs	r3, r3, #1
 c0009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 c0009c6:	1ab6      	subs	r6, r6, r2
 c0009c8:	eb65 0503 	sbc.w	r5, r5, r3
 c0009cc:	085b      	lsrs	r3, r3, #1
 c0009ce:	ea4f 0232 	mov.w	r2, r2, rrx
 c0009d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 c0009d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 c0009da:	ebb6 0e02 	subs.w	lr, r6, r2
 c0009de:	eb75 0e03 	sbcs.w	lr, r5, r3
 c0009e2:	bf22      	ittt	cs
 c0009e4:	1ab6      	subcs	r6, r6, r2
 c0009e6:	4675      	movcs	r5, lr
 c0009e8:	ea40 000c 	orrcs.w	r0, r0, ip
 c0009ec:	085b      	lsrs	r3, r3, #1
 c0009ee:	ea4f 0232 	mov.w	r2, r2, rrx
 c0009f2:	ebb6 0e02 	subs.w	lr, r6, r2
 c0009f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 c0009fa:	bf22      	ittt	cs
 c0009fc:	1ab6      	subcs	r6, r6, r2
 c0009fe:	4675      	movcs	r5, lr
 c000a00:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 c000a04:	085b      	lsrs	r3, r3, #1
 c000a06:	ea4f 0232 	mov.w	r2, r2, rrx
 c000a0a:	ebb6 0e02 	subs.w	lr, r6, r2
 c000a0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 c000a12:	bf22      	ittt	cs
 c000a14:	1ab6      	subcs	r6, r6, r2
 c000a16:	4675      	movcs	r5, lr
 c000a18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 c000a1c:	085b      	lsrs	r3, r3, #1
 c000a1e:	ea4f 0232 	mov.w	r2, r2, rrx
 c000a22:	ebb6 0e02 	subs.w	lr, r6, r2
 c000a26:	eb75 0e03 	sbcs.w	lr, r5, r3
 c000a2a:	bf22      	ittt	cs
 c000a2c:	1ab6      	subcs	r6, r6, r2
 c000a2e:	4675      	movcs	r5, lr
 c000a30:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 c000a34:	ea55 0e06 	orrs.w	lr, r5, r6
 c000a38:	d018      	beq.n	c000a6c <__aeabi_ddiv+0x114>
 c000a3a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 c000a3e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 c000a42:	ea4f 1606 	mov.w	r6, r6, lsl #4
 c000a46:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 c000a4a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 c000a4e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 c000a52:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 c000a56:	d1c0      	bne.n	c0009da <__aeabi_ddiv+0x82>
 c000a58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 c000a5c:	d10b      	bne.n	c000a76 <__aeabi_ddiv+0x11e>
 c000a5e:	ea41 0100 	orr.w	r1, r1, r0
 c000a62:	f04f 0000 	mov.w	r0, #0
 c000a66:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 c000a6a:	e7b6      	b.n	c0009da <__aeabi_ddiv+0x82>
 c000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 c000a70:	bf04      	itt	eq
 c000a72:	4301      	orreq	r1, r0
 c000a74:	2000      	moveq	r0, #0
 c000a76:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 c000a7a:	bf88      	it	hi
 c000a7c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 c000a80:	f63f aeaf 	bhi.w	c0007e2 <__aeabi_dmul+0xde>
 c000a84:	ebb5 0c03 	subs.w	ip, r5, r3
 c000a88:	bf04      	itt	eq
 c000a8a:	ebb6 0c02 	subseq.w	ip, r6, r2
 c000a8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 c000a92:	f150 0000 	adcs.w	r0, r0, #0
 c000a96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 c000a9a:	bd70      	pop	{r4, r5, r6, pc}
 c000a9c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 c000aa0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 c000aa4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 c000aa8:	bfc2      	ittt	gt
 c000aaa:	ebd4 050c 	rsbsgt	r5, r4, ip
 c000aae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 c000ab2:	bd70      	popgt	{r4, r5, r6, pc}
 c000ab4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 c000ab8:	f04f 0e00 	mov.w	lr, #0
 c000abc:	3c01      	subs	r4, #1
 c000abe:	e690      	b.n	c0007e2 <__aeabi_dmul+0xde>
 c000ac0:	ea45 0e06 	orr.w	lr, r5, r6
 c000ac4:	e68d      	b.n	c0007e2 <__aeabi_dmul+0xde>
 c000ac6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 c000aca:	ea94 0f0c 	teq	r4, ip
 c000ace:	bf08      	it	eq
 c000ad0:	ea95 0f0c 	teqeq	r5, ip
 c000ad4:	f43f af3b 	beq.w	c00094e <__aeabi_dmul+0x24a>
 c000ad8:	ea94 0f0c 	teq	r4, ip
 c000adc:	d10a      	bne.n	c000af4 <__aeabi_ddiv+0x19c>
 c000ade:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 c000ae2:	f47f af34 	bne.w	c00094e <__aeabi_dmul+0x24a>
 c000ae6:	ea95 0f0c 	teq	r5, ip
 c000aea:	f47f af25 	bne.w	c000938 <__aeabi_dmul+0x234>
 c000aee:	4610      	mov	r0, r2
 c000af0:	4619      	mov	r1, r3
 c000af2:	e72c      	b.n	c00094e <__aeabi_dmul+0x24a>
 c000af4:	ea95 0f0c 	teq	r5, ip
 c000af8:	d106      	bne.n	c000b08 <__aeabi_ddiv+0x1b0>
 c000afa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 c000afe:	f43f aefd 	beq.w	c0008fc <__aeabi_dmul+0x1f8>
 c000b02:	4610      	mov	r0, r2
 c000b04:	4619      	mov	r1, r3
 c000b06:	e722      	b.n	c00094e <__aeabi_dmul+0x24a>
 c000b08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 c000b0c:	bf18      	it	ne
 c000b0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 c000b12:	f47f aec5 	bne.w	c0008a0 <__aeabi_dmul+0x19c>
 c000b16:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 c000b1a:	f47f af0d 	bne.w	c000938 <__aeabi_dmul+0x234>
 c000b1e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 c000b22:	f47f aeeb 	bne.w	c0008fc <__aeabi_dmul+0x1f8>
 c000b26:	e712      	b.n	c00094e <__aeabi_dmul+0x24a>

0c000b28 <__gedf2>:
 c000b28:	f04f 3cff 	mov.w	ip, #4294967295
 c000b2c:	e006      	b.n	c000b3c <__cmpdf2+0x4>
 c000b2e:	bf00      	nop

0c000b30 <__ledf2>:
 c000b30:	f04f 0c01 	mov.w	ip, #1
 c000b34:	e002      	b.n	c000b3c <__cmpdf2+0x4>
 c000b36:	bf00      	nop

0c000b38 <__cmpdf2>:
 c000b38:	f04f 0c01 	mov.w	ip, #1
 c000b3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 c000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 c000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 c000b48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 c000b4c:	bf18      	it	ne
 c000b4e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 c000b52:	d01b      	beq.n	c000b8c <__cmpdf2+0x54>
 c000b54:	b001      	add	sp, #4
 c000b56:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 c000b5a:	bf0c      	ite	eq
 c000b5c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 c000b60:	ea91 0f03 	teqne	r1, r3
 c000b64:	bf02      	ittt	eq
 c000b66:	ea90 0f02 	teqeq	r0, r2
 c000b6a:	2000      	moveq	r0, #0
 c000b6c:	4770      	bxeq	lr
 c000b6e:	f110 0f00 	cmn.w	r0, #0
 c000b72:	ea91 0f03 	teq	r1, r3
 c000b76:	bf58      	it	pl
 c000b78:	4299      	cmppl	r1, r3
 c000b7a:	bf08      	it	eq
 c000b7c:	4290      	cmpeq	r0, r2
 c000b7e:	bf2c      	ite	cs
 c000b80:	17d8      	asrcs	r0, r3, #31
 c000b82:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 c000b86:	f040 0001 	orr.w	r0, r0, #1
 c000b8a:	4770      	bx	lr
 c000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 c000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 c000b94:	d102      	bne.n	c000b9c <__cmpdf2+0x64>
 c000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 c000b9a:	d107      	bne.n	c000bac <__cmpdf2+0x74>
 c000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 c000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 c000ba4:	d1d6      	bne.n	c000b54 <__cmpdf2+0x1c>
 c000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 c000baa:	d0d3      	beq.n	c000b54 <__cmpdf2+0x1c>
 c000bac:	f85d 0b04 	ldr.w	r0, [sp], #4
 c000bb0:	4770      	bx	lr
 c000bb2:	bf00      	nop

0c000bb4 <__aeabi_cdrcmple>:
 c000bb4:	4684      	mov	ip, r0
 c000bb6:	4610      	mov	r0, r2
 c000bb8:	4662      	mov	r2, ip
 c000bba:	468c      	mov	ip, r1
 c000bbc:	4619      	mov	r1, r3
 c000bbe:	4663      	mov	r3, ip
 c000bc0:	e000      	b.n	c000bc4 <__aeabi_cdcmpeq>
 c000bc2:	bf00      	nop

0c000bc4 <__aeabi_cdcmpeq>:
 c000bc4:	b501      	push	{r0, lr}
 c000bc6:	f7ff ffb7 	bl	c000b38 <__cmpdf2>
 c000bca:	2800      	cmp	r0, #0
 c000bcc:	bf48      	it	mi
 c000bce:	f110 0f00 	cmnmi.w	r0, #0
 c000bd2:	bd01      	pop	{r0, pc}

0c000bd4 <__aeabi_dcmpeq>:
 c000bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 c000bd8:	f7ff fff4 	bl	c000bc4 <__aeabi_cdcmpeq>
 c000bdc:	bf0c      	ite	eq
 c000bde:	2001      	moveq	r0, #1
 c000be0:	2000      	movne	r0, #0
 c000be2:	f85d fb08 	ldr.w	pc, [sp], #8
 c000be6:	bf00      	nop

0c000be8 <__aeabi_dcmplt>:
 c000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 c000bec:	f7ff ffea 	bl	c000bc4 <__aeabi_cdcmpeq>
 c000bf0:	bf34      	ite	cc
 c000bf2:	2001      	movcc	r0, #1
 c000bf4:	2000      	movcs	r0, #0
 c000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 c000bfa:	bf00      	nop

0c000bfc <__aeabi_dcmple>:
 c000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 c000c00:	f7ff ffe0 	bl	c000bc4 <__aeabi_cdcmpeq>
 c000c04:	bf94      	ite	ls
 c000c06:	2001      	movls	r0, #1
 c000c08:	2000      	movhi	r0, #0
 c000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 c000c0e:	bf00      	nop

0c000c10 <__aeabi_dcmpge>:
 c000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 c000c14:	f7ff ffce 	bl	c000bb4 <__aeabi_cdrcmple>
 c000c18:	bf94      	ite	ls
 c000c1a:	2001      	movls	r0, #1
 c000c1c:	2000      	movhi	r0, #0
 c000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 c000c22:	bf00      	nop

0c000c24 <__aeabi_dcmpgt>:
 c000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 c000c28:	f7ff ffc4 	bl	c000bb4 <__aeabi_cdrcmple>
 c000c2c:	bf34      	ite	cc
 c000c2e:	2001      	movcc	r0, #1
 c000c30:	2000      	movcs	r0, #0
 c000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 c000c36:	bf00      	nop

0c000c38 <__aeabi_dcmpun>:
 c000c38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 c000c3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 c000c40:	d102      	bne.n	c000c48 <__aeabi_dcmpun+0x10>
 c000c42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 c000c46:	d10a      	bne.n	c000c5e <__aeabi_dcmpun+0x26>
 c000c48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 c000c4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 c000c50:	d102      	bne.n	c000c58 <__aeabi_dcmpun+0x20>
 c000c52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 c000c56:	d102      	bne.n	c000c5e <__aeabi_dcmpun+0x26>
 c000c58:	f04f 0000 	mov.w	r0, #0
 c000c5c:	4770      	bx	lr
 c000c5e:	f04f 0001 	mov.w	r0, #1
 c000c62:	4770      	bx	lr

0c000c64 <__aeabi_d2iz>:
 c000c64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 c000c68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 c000c6c:	d215      	bcs.n	c000c9a <__aeabi_d2iz+0x36>
 c000c6e:	d511      	bpl.n	c000c94 <__aeabi_d2iz+0x30>
 c000c70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 c000c74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 c000c78:	d912      	bls.n	c000ca0 <__aeabi_d2iz+0x3c>
 c000c7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 c000c7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 c000c82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 c000c86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 c000c8a:	fa23 f002 	lsr.w	r0, r3, r2
 c000c8e:	bf18      	it	ne
 c000c90:	4240      	negne	r0, r0
 c000c92:	4770      	bx	lr
 c000c94:	f04f 0000 	mov.w	r0, #0
 c000c98:	4770      	bx	lr
 c000c9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 c000c9e:	d105      	bne.n	c000cac <__aeabi_d2iz+0x48>
 c000ca0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 c000ca4:	bf08      	it	eq
 c000ca6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 c000caa:	4770      	bx	lr
 c000cac:	f04f 0000 	mov.w	r0, #0
 c000cb0:	4770      	bx	lr
 c000cb2:	bf00      	nop

0c000cb4 <__aeabi_d2uiz>:
 c000cb4:	004a      	lsls	r2, r1, #1
 c000cb6:	d211      	bcs.n	c000cdc <__aeabi_d2uiz+0x28>
 c000cb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 c000cbc:	d211      	bcs.n	c000ce2 <__aeabi_d2uiz+0x2e>
 c000cbe:	d50d      	bpl.n	c000cdc <__aeabi_d2uiz+0x28>
 c000cc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 c000cc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 c000cc8:	d40e      	bmi.n	c000ce8 <__aeabi_d2uiz+0x34>
 c000cca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 c000cce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 c000cd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 c000cd6:	fa23 f002 	lsr.w	r0, r3, r2
 c000cda:	4770      	bx	lr
 c000cdc:	f04f 0000 	mov.w	r0, #0
 c000ce0:	4770      	bx	lr
 c000ce2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 c000ce6:	d102      	bne.n	c000cee <__aeabi_d2uiz+0x3a>
 c000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 c000cec:	4770      	bx	lr
 c000cee:	f04f 0000 	mov.w	r0, #0
 c000cf2:	4770      	bx	lr

0c000cf4 <__aeabi_d2f>:
 c000cf4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 c000cf8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 c000cfc:	bf24      	itt	cs
 c000cfe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 c000d02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 c000d06:	d90d      	bls.n	c000d24 <__aeabi_d2f+0x30>
 c000d08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 c000d0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 c000d10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 c000d14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 c000d18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 c000d1c:	bf08      	it	eq
 c000d1e:	f020 0001 	biceq.w	r0, r0, #1
 c000d22:	4770      	bx	lr
 c000d24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 c000d28:	d121      	bne.n	c000d6e <__aeabi_d2f+0x7a>
 c000d2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 c000d2e:	bfbc      	itt	lt
 c000d30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 c000d34:	4770      	bxlt	lr
 c000d36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 c000d3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 c000d3e:	f1c2 0218 	rsb	r2, r2, #24
 c000d42:	f1c2 0c20 	rsb	ip, r2, #32
 c000d46:	fa10 f30c 	lsls.w	r3, r0, ip
 c000d4a:	fa20 f002 	lsr.w	r0, r0, r2
 c000d4e:	bf18      	it	ne
 c000d50:	f040 0001 	orrne.w	r0, r0, #1
 c000d54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 c000d58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 c000d5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 c000d60:	ea40 000c 	orr.w	r0, r0, ip
 c000d64:	fa23 f302 	lsr.w	r3, r3, r2
 c000d68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 c000d6c:	e7cc      	b.n	c000d08 <__aeabi_d2f+0x14>
 c000d6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 c000d72:	d107      	bne.n	c000d84 <__aeabi_d2f+0x90>
 c000d74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 c000d78:	bf1e      	ittt	ne
 c000d7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 c000d7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 c000d82:	4770      	bxne	lr
 c000d84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 c000d88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 c000d8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 c000d90:	4770      	bx	lr
 c000d92:	bf00      	nop

0c000d94 <__aeabi_uldivmod>:
 c000d94:	b953      	cbnz	r3, c000dac <__aeabi_uldivmod+0x18>
 c000d96:	b94a      	cbnz	r2, c000dac <__aeabi_uldivmod+0x18>
 c000d98:	2900      	cmp	r1, #0
 c000d9a:	bf08      	it	eq
 c000d9c:	2800      	cmpeq	r0, #0
 c000d9e:	bf1c      	itt	ne
 c000da0:	f04f 31ff 	movne.w	r1, #4294967295
 c000da4:	f04f 30ff 	movne.w	r0, #4294967295
 c000da8:	f000 b9b8 	b.w	c00111c <__aeabi_idiv0>
 c000dac:	f1ad 0c08 	sub.w	ip, sp, #8
 c000db0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c000db4:	f000 f83c 	bl	c000e30 <__udivmoddi4>
 c000db8:	f8dd e004 	ldr.w	lr, [sp, #4]
 c000dbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c000dc0:	b004      	add	sp, #16
 c000dc2:	4770      	bx	lr

0c000dc4 <__aeabi_d2lz>:
 c000dc4:	b538      	push	{r3, r4, r5, lr}
 c000dc6:	2200      	movs	r2, #0
 c000dc8:	2300      	movs	r3, #0
 c000dca:	4604      	mov	r4, r0
 c000dcc:	460d      	mov	r5, r1
 c000dce:	f7ff ff0b 	bl	c000be8 <__aeabi_dcmplt>
 c000dd2:	b928      	cbnz	r0, c000de0 <__aeabi_d2lz+0x1c>
 c000dd4:	4620      	mov	r0, r4
 c000dd6:	4629      	mov	r1, r5
 c000dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 c000ddc:	f000 b80a 	b.w	c000df4 <__aeabi_d2ulz>
 c000de0:	4620      	mov	r0, r4
 c000de2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 c000de6:	f000 f805 	bl	c000df4 <__aeabi_d2ulz>
 c000dea:	4240      	negs	r0, r0
 c000dec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 c000df0:	bd38      	pop	{r3, r4, r5, pc}
 c000df2:	bf00      	nop

0c000df4 <__aeabi_d2ulz>:
 c000df4:	b5d0      	push	{r4, r6, r7, lr}
 c000df6:	2200      	movs	r2, #0
 c000df8:	4b0b      	ldr	r3, [pc, #44]	; (c000e28 <__aeabi_d2ulz+0x34>)
 c000dfa:	4606      	mov	r6, r0
 c000dfc:	460f      	mov	r7, r1
 c000dfe:	f7ff fc81 	bl	c000704 <__aeabi_dmul>
 c000e02:	f7ff ff57 	bl	c000cb4 <__aeabi_d2uiz>
 c000e06:	4604      	mov	r4, r0
 c000e08:	f7ff fc02 	bl	c000610 <__aeabi_ui2d>
 c000e0c:	2200      	movs	r2, #0
 c000e0e:	4b07      	ldr	r3, [pc, #28]	; (c000e2c <__aeabi_d2ulz+0x38>)
 c000e10:	f7ff fc78 	bl	c000704 <__aeabi_dmul>
 c000e14:	4602      	mov	r2, r0
 c000e16:	460b      	mov	r3, r1
 c000e18:	4630      	mov	r0, r6
 c000e1a:	4639      	mov	r1, r7
 c000e1c:	f7ff faba 	bl	c000394 <__aeabi_dsub>
 c000e20:	f7ff ff48 	bl	c000cb4 <__aeabi_d2uiz>
 c000e24:	4621      	mov	r1, r4
 c000e26:	bdd0      	pop	{r4, r6, r7, pc}
 c000e28:	3df00000 	.word	0x3df00000
 c000e2c:	41f00000 	.word	0x41f00000

0c000e30 <__udivmoddi4>:
 c000e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c000e34:	9d09      	ldr	r5, [sp, #36]	; 0x24
 c000e36:	4604      	mov	r4, r0
 c000e38:	460f      	mov	r7, r1
 c000e3a:	2b00      	cmp	r3, #0
 c000e3c:	d148      	bne.n	c000ed0 <__udivmoddi4+0xa0>
 c000e3e:	428a      	cmp	r2, r1
 c000e40:	4694      	mov	ip, r2
 c000e42:	d961      	bls.n	c000f08 <__udivmoddi4+0xd8>
 c000e44:	fab2 f382 	clz	r3, r2
 c000e48:	b143      	cbz	r3, c000e5c <__udivmoddi4+0x2c>
 c000e4a:	f1c3 0120 	rsb	r1, r3, #32
 c000e4e:	409f      	lsls	r7, r3
 c000e50:	fa02 fc03 	lsl.w	ip, r2, r3
 c000e54:	409c      	lsls	r4, r3
 c000e56:	fa20 f101 	lsr.w	r1, r0, r1
 c000e5a:	430f      	orrs	r7, r1
 c000e5c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 c000e60:	fa1f fe8c 	uxth.w	lr, ip
 c000e64:	0c22      	lsrs	r2, r4, #16
 c000e66:	fbb7 f6f1 	udiv	r6, r7, r1
 c000e6a:	fb01 7716 	mls	r7, r1, r6, r7
 c000e6e:	fb06 f00e 	mul.w	r0, r6, lr
 c000e72:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 c000e76:	4290      	cmp	r0, r2
 c000e78:	d908      	bls.n	c000e8c <__udivmoddi4+0x5c>
 c000e7a:	eb1c 0202 	adds.w	r2, ip, r2
 c000e7e:	f106 37ff 	add.w	r7, r6, #4294967295
 c000e82:	d202      	bcs.n	c000e8a <__udivmoddi4+0x5a>
 c000e84:	4290      	cmp	r0, r2
 c000e86:	f200 8137 	bhi.w	c0010f8 <__udivmoddi4+0x2c8>
 c000e8a:	463e      	mov	r6, r7
 c000e8c:	1a12      	subs	r2, r2, r0
 c000e8e:	b2a4      	uxth	r4, r4
 c000e90:	fbb2 f0f1 	udiv	r0, r2, r1
 c000e94:	fb01 2210 	mls	r2, r1, r0, r2
 c000e98:	fb00 fe0e 	mul.w	lr, r0, lr
 c000e9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 c000ea0:	45a6      	cmp	lr, r4
 c000ea2:	d908      	bls.n	c000eb6 <__udivmoddi4+0x86>
 c000ea4:	eb1c 0404 	adds.w	r4, ip, r4
 c000ea8:	f100 32ff 	add.w	r2, r0, #4294967295
 c000eac:	d202      	bcs.n	c000eb4 <__udivmoddi4+0x84>
 c000eae:	45a6      	cmp	lr, r4
 c000eb0:	f200 811c 	bhi.w	c0010ec <__udivmoddi4+0x2bc>
 c000eb4:	4610      	mov	r0, r2
 c000eb6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 c000eba:	eba4 040e 	sub.w	r4, r4, lr
 c000ebe:	2600      	movs	r6, #0
 c000ec0:	b11d      	cbz	r5, c000eca <__udivmoddi4+0x9a>
 c000ec2:	40dc      	lsrs	r4, r3
 c000ec4:	2300      	movs	r3, #0
 c000ec6:	e9c5 4300 	strd	r4, r3, [r5]
 c000eca:	4631      	mov	r1, r6
 c000ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000ed0:	428b      	cmp	r3, r1
 c000ed2:	d909      	bls.n	c000ee8 <__udivmoddi4+0xb8>
 c000ed4:	2d00      	cmp	r5, #0
 c000ed6:	f000 80fd 	beq.w	c0010d4 <__udivmoddi4+0x2a4>
 c000eda:	2600      	movs	r6, #0
 c000edc:	e9c5 0100 	strd	r0, r1, [r5]
 c000ee0:	4630      	mov	r0, r6
 c000ee2:	4631      	mov	r1, r6
 c000ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000ee8:	fab3 f683 	clz	r6, r3
 c000eec:	2e00      	cmp	r6, #0
 c000eee:	d14b      	bne.n	c000f88 <__udivmoddi4+0x158>
 c000ef0:	428b      	cmp	r3, r1
 c000ef2:	f0c0 80f2 	bcc.w	c0010da <__udivmoddi4+0x2aa>
 c000ef6:	4282      	cmp	r2, r0
 c000ef8:	f240 80ef 	bls.w	c0010da <__udivmoddi4+0x2aa>
 c000efc:	4630      	mov	r0, r6
 c000efe:	2d00      	cmp	r5, #0
 c000f00:	d0e3      	beq.n	c000eca <__udivmoddi4+0x9a>
 c000f02:	e9c5 4700 	strd	r4, r7, [r5]
 c000f06:	e7e0      	b.n	c000eca <__udivmoddi4+0x9a>
 c000f08:	b902      	cbnz	r2, c000f0c <__udivmoddi4+0xdc>
 c000f0a:	deff      	udf	#255	; 0xff
 c000f0c:	fab2 f382 	clz	r3, r2
 c000f10:	2b00      	cmp	r3, #0
 c000f12:	f040 809d 	bne.w	c001050 <__udivmoddi4+0x220>
 c000f16:	1a89      	subs	r1, r1, r2
 c000f18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c000f1c:	b297      	uxth	r7, r2
 c000f1e:	2601      	movs	r6, #1
 c000f20:	0c20      	lsrs	r0, r4, #16
 c000f22:	fbb1 f2fe 	udiv	r2, r1, lr
 c000f26:	fb0e 1112 	mls	r1, lr, r2, r1
 c000f2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c000f2e:	fb07 f002 	mul.w	r0, r7, r2
 c000f32:	4288      	cmp	r0, r1
 c000f34:	d90f      	bls.n	c000f56 <__udivmoddi4+0x126>
 c000f36:	eb1c 0101 	adds.w	r1, ip, r1
 c000f3a:	f102 38ff 	add.w	r8, r2, #4294967295
 c000f3e:	bf2c      	ite	cs
 c000f40:	f04f 0901 	movcs.w	r9, #1
 c000f44:	f04f 0900 	movcc.w	r9, #0
 c000f48:	4288      	cmp	r0, r1
 c000f4a:	d903      	bls.n	c000f54 <__udivmoddi4+0x124>
 c000f4c:	f1b9 0f00 	cmp.w	r9, #0
 c000f50:	f000 80cf 	beq.w	c0010f2 <__udivmoddi4+0x2c2>
 c000f54:	4642      	mov	r2, r8
 c000f56:	1a09      	subs	r1, r1, r0
 c000f58:	b2a4      	uxth	r4, r4
 c000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 c000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 c000f62:	fb00 f707 	mul.w	r7, r0, r7
 c000f66:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 c000f6a:	42a7      	cmp	r7, r4
 c000f6c:	d908      	bls.n	c000f80 <__udivmoddi4+0x150>
 c000f6e:	eb1c 0404 	adds.w	r4, ip, r4
 c000f72:	f100 31ff 	add.w	r1, r0, #4294967295
 c000f76:	d202      	bcs.n	c000f7e <__udivmoddi4+0x14e>
 c000f78:	42a7      	cmp	r7, r4
 c000f7a:	f200 80b4 	bhi.w	c0010e6 <__udivmoddi4+0x2b6>
 c000f7e:	4608      	mov	r0, r1
 c000f80:	1be4      	subs	r4, r4, r7
 c000f82:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 c000f86:	e79b      	b.n	c000ec0 <__udivmoddi4+0x90>
 c000f88:	f1c6 0720 	rsb	r7, r6, #32
 c000f8c:	40b3      	lsls	r3, r6
 c000f8e:	fa01 f406 	lsl.w	r4, r1, r6
 c000f92:	fa22 fc07 	lsr.w	ip, r2, r7
 c000f96:	40f9      	lsrs	r1, r7
 c000f98:	40b2      	lsls	r2, r6
 c000f9a:	ea4c 0c03 	orr.w	ip, ip, r3
 c000f9e:	fa20 f307 	lsr.w	r3, r0, r7
 c000fa2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 c000fa6:	431c      	orrs	r4, r3
 c000fa8:	fa1f fe8c 	uxth.w	lr, ip
 c000fac:	fa00 f306 	lsl.w	r3, r0, r6
 c000fb0:	0c20      	lsrs	r0, r4, #16
 c000fb2:	fbb1 f8f9 	udiv	r8, r1, r9
 c000fb6:	fb09 1118 	mls	r1, r9, r8, r1
 c000fba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c000fbe:	fb08 f00e 	mul.w	r0, r8, lr
 c000fc2:	4288      	cmp	r0, r1
 c000fc4:	d90f      	bls.n	c000fe6 <__udivmoddi4+0x1b6>
 c000fc6:	eb1c 0101 	adds.w	r1, ip, r1
 c000fca:	f108 3aff 	add.w	sl, r8, #4294967295
 c000fce:	bf2c      	ite	cs
 c000fd0:	f04f 0b01 	movcs.w	fp, #1
 c000fd4:	f04f 0b00 	movcc.w	fp, #0
 c000fd8:	4288      	cmp	r0, r1
 c000fda:	d903      	bls.n	c000fe4 <__udivmoddi4+0x1b4>
 c000fdc:	f1bb 0f00 	cmp.w	fp, #0
 c000fe0:	f000 808d 	beq.w	c0010fe <__udivmoddi4+0x2ce>
 c000fe4:	46d0      	mov	r8, sl
 c000fe6:	1a09      	subs	r1, r1, r0
 c000fe8:	b2a4      	uxth	r4, r4
 c000fea:	fbb1 f0f9 	udiv	r0, r1, r9
 c000fee:	fb09 1110 	mls	r1, r9, r0, r1
 c000ff2:	fb00 fe0e 	mul.w	lr, r0, lr
 c000ff6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 c000ffa:	458e      	cmp	lr, r1
 c000ffc:	d907      	bls.n	c00100e <__udivmoddi4+0x1de>
 c000ffe:	eb1c 0101 	adds.w	r1, ip, r1
 c001002:	f100 34ff 	add.w	r4, r0, #4294967295
 c001006:	d201      	bcs.n	c00100c <__udivmoddi4+0x1dc>
 c001008:	458e      	cmp	lr, r1
 c00100a:	d87f      	bhi.n	c00110c <__udivmoddi4+0x2dc>
 c00100c:	4620      	mov	r0, r4
 c00100e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 c001012:	eba1 010e 	sub.w	r1, r1, lr
 c001016:	fba0 9802 	umull	r9, r8, r0, r2
 c00101a:	4541      	cmp	r1, r8
 c00101c:	464c      	mov	r4, r9
 c00101e:	46c6      	mov	lr, r8
 c001020:	d302      	bcc.n	c001028 <__udivmoddi4+0x1f8>
 c001022:	d106      	bne.n	c001032 <__udivmoddi4+0x202>
 c001024:	454b      	cmp	r3, r9
 c001026:	d204      	bcs.n	c001032 <__udivmoddi4+0x202>
 c001028:	3801      	subs	r0, #1
 c00102a:	ebb9 0402 	subs.w	r4, r9, r2
 c00102e:	eb68 0e0c 	sbc.w	lr, r8, ip
 c001032:	2d00      	cmp	r5, #0
 c001034:	d070      	beq.n	c001118 <__udivmoddi4+0x2e8>
 c001036:	1b1a      	subs	r2, r3, r4
 c001038:	eb61 010e 	sbc.w	r1, r1, lr
 c00103c:	fa22 f306 	lsr.w	r3, r2, r6
 c001040:	fa01 f707 	lsl.w	r7, r1, r7
 c001044:	40f1      	lsrs	r1, r6
 c001046:	2600      	movs	r6, #0
 c001048:	431f      	orrs	r7, r3
 c00104a:	e9c5 7100 	strd	r7, r1, [r5]
 c00104e:	e73c      	b.n	c000eca <__udivmoddi4+0x9a>
 c001050:	fa02 fc03 	lsl.w	ip, r2, r3
 c001054:	f1c3 0020 	rsb	r0, r3, #32
 c001058:	fa01 f203 	lsl.w	r2, r1, r3
 c00105c:	fa21 f600 	lsr.w	r6, r1, r0
 c001060:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 c001064:	fa24 f100 	lsr.w	r1, r4, r0
 c001068:	fa1f f78c 	uxth.w	r7, ip
 c00106c:	409c      	lsls	r4, r3
 c00106e:	4311      	orrs	r1, r2
 c001070:	fbb6 f0fe 	udiv	r0, r6, lr
 c001074:	0c0a      	lsrs	r2, r1, #16
 c001076:	fb0e 6610 	mls	r6, lr, r0, r6
 c00107a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 c00107e:	fb00 f607 	mul.w	r6, r0, r7
 c001082:	4296      	cmp	r6, r2
 c001084:	d90e      	bls.n	c0010a4 <__udivmoddi4+0x274>
 c001086:	eb1c 0202 	adds.w	r2, ip, r2
 c00108a:	f100 38ff 	add.w	r8, r0, #4294967295
 c00108e:	bf2c      	ite	cs
 c001090:	f04f 0901 	movcs.w	r9, #1
 c001094:	f04f 0900 	movcc.w	r9, #0
 c001098:	4296      	cmp	r6, r2
 c00109a:	d902      	bls.n	c0010a2 <__udivmoddi4+0x272>
 c00109c:	f1b9 0f00 	cmp.w	r9, #0
 c0010a0:	d031      	beq.n	c001106 <__udivmoddi4+0x2d6>
 c0010a2:	4640      	mov	r0, r8
 c0010a4:	1b92      	subs	r2, r2, r6
 c0010a6:	b289      	uxth	r1, r1
 c0010a8:	fbb2 f6fe 	udiv	r6, r2, lr
 c0010ac:	fb0e 2216 	mls	r2, lr, r6, r2
 c0010b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 c0010b4:	fb06 f207 	mul.w	r2, r6, r7
 c0010b8:	428a      	cmp	r2, r1
 c0010ba:	d907      	bls.n	c0010cc <__udivmoddi4+0x29c>
 c0010bc:	eb1c 0101 	adds.w	r1, ip, r1
 c0010c0:	f106 38ff 	add.w	r8, r6, #4294967295
 c0010c4:	d201      	bcs.n	c0010ca <__udivmoddi4+0x29a>
 c0010c6:	428a      	cmp	r2, r1
 c0010c8:	d823      	bhi.n	c001112 <__udivmoddi4+0x2e2>
 c0010ca:	4646      	mov	r6, r8
 c0010cc:	1a89      	subs	r1, r1, r2
 c0010ce:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 c0010d2:	e725      	b.n	c000f20 <__udivmoddi4+0xf0>
 c0010d4:	462e      	mov	r6, r5
 c0010d6:	4628      	mov	r0, r5
 c0010d8:	e6f7      	b.n	c000eca <__udivmoddi4+0x9a>
 c0010da:	1a84      	subs	r4, r0, r2
 c0010dc:	eb61 0303 	sbc.w	r3, r1, r3
 c0010e0:	2001      	movs	r0, #1
 c0010e2:	461f      	mov	r7, r3
 c0010e4:	e70b      	b.n	c000efe <__udivmoddi4+0xce>
 c0010e6:	4464      	add	r4, ip
 c0010e8:	3802      	subs	r0, #2
 c0010ea:	e749      	b.n	c000f80 <__udivmoddi4+0x150>
 c0010ec:	4464      	add	r4, ip
 c0010ee:	3802      	subs	r0, #2
 c0010f0:	e6e1      	b.n	c000eb6 <__udivmoddi4+0x86>
 c0010f2:	3a02      	subs	r2, #2
 c0010f4:	4461      	add	r1, ip
 c0010f6:	e72e      	b.n	c000f56 <__udivmoddi4+0x126>
 c0010f8:	3e02      	subs	r6, #2
 c0010fa:	4462      	add	r2, ip
 c0010fc:	e6c6      	b.n	c000e8c <__udivmoddi4+0x5c>
 c0010fe:	f1a8 0802 	sub.w	r8, r8, #2
 c001102:	4461      	add	r1, ip
 c001104:	e76f      	b.n	c000fe6 <__udivmoddi4+0x1b6>
 c001106:	3802      	subs	r0, #2
 c001108:	4462      	add	r2, ip
 c00110a:	e7cb      	b.n	c0010a4 <__udivmoddi4+0x274>
 c00110c:	3802      	subs	r0, #2
 c00110e:	4461      	add	r1, ip
 c001110:	e77d      	b.n	c00100e <__udivmoddi4+0x1de>
 c001112:	3e02      	subs	r6, #2
 c001114:	4461      	add	r1, ip
 c001116:	e7d9      	b.n	c0010cc <__udivmoddi4+0x29c>
 c001118:	462e      	mov	r6, r5
 c00111a:	e6d6      	b.n	c000eca <__udivmoddi4+0x9a>

0c00111c <__aeabi_idiv0>:
 c00111c:	4770      	bx	lr
 c00111e:	bf00      	nop

0c001120 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c001120:	f8df d034 	ldr.w	sp, [pc, #52]	; c001158 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c001124:	f000 ff46 	bl	c001fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c001128:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c00112a:	e003      	b.n	c001134 <LoopCopyDataInit>

0c00112c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c00112c:	4b0b      	ldr	r3, [pc, #44]	; (c00115c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c00112e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c001130:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c001132:	3104      	adds	r1, #4

0c001134 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c001134:	480a      	ldr	r0, [pc, #40]	; (c001160 <LoopForever+0xa>)
	ldr	r3, =_edata
 c001136:	4b0b      	ldr	r3, [pc, #44]	; (c001164 <LoopForever+0xe>)
	adds	r2, r0, r1
 c001138:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c00113a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c00113c:	d3f6      	bcc.n	c00112c <CopyDataInit>
	ldr	r2, =_sbss
 c00113e:	4a0a      	ldr	r2, [pc, #40]	; (c001168 <LoopForever+0x12>)
	b	LoopFillZerobss
 c001140:	e002      	b.n	c001148 <LoopFillZerobss>

0c001142 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c001142:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c001144:	f842 3b04 	str.w	r3, [r2], #4

0c001148 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c001148:	4b08      	ldr	r3, [pc, #32]	; (c00116c <LoopForever+0x16>)
	cmp	r2, r3
 c00114a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c00114c:	d3f9      	bcc.n	c001142 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c00114e:	f004 fae9 	bl	c005724 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c001152:	f000 f925 	bl	c0013a0 <main>

0c001156 <LoopForever>:

LoopForever:
    b LoopForever
 c001156:	e7fe      	b.n	c001156 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c001158:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c00115c:	0c00b450 	.word	0x0c00b450
	ldr	r0, =_sdata
 c001160:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c001164:	300001e8 	.word	0x300001e8
	ldr	r2, =_sbss
 c001168:	300001e8 	.word	0x300001e8
	ldr	r3, = _ebss
 c00116c:	300002b8 	.word	0x300002b8

0c001170 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c001170:	e7fe      	b.n	c001170 <ADC1_2_IRQHandler>
	...

0c001174 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 c001174:	b580      	push	{r7, lr}
 c001176:	b08a      	sub	sp, #40	; 0x28
 c001178:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c00117a:	f107 0314 	add.w	r3, r7, #20
 c00117e:	2200      	movs	r2, #0
 c001180:	601a      	str	r2, [r3, #0]
 c001182:	605a      	str	r2, [r3, #4]
 c001184:	609a      	str	r2, [r3, #8]
 c001186:	60da      	str	r2, [r3, #12]
 c001188:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c00118a:	4b35      	ldr	r3, [pc, #212]	; (c001260 <MX_GPIO_Init+0xec>)
 c00118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00118e:	4a34      	ldr	r2, [pc, #208]	; (c001260 <MX_GPIO_Init+0xec>)
 c001190:	f043 0304 	orr.w	r3, r3, #4
 c001194:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001196:	4b32      	ldr	r3, [pc, #200]	; (c001260 <MX_GPIO_Init+0xec>)
 c001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00119a:	f003 0304 	and.w	r3, r3, #4
 c00119e:	613b      	str	r3, [r7, #16]
 c0011a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c0011a2:	4b2f      	ldr	r3, [pc, #188]	; (c001260 <MX_GPIO_Init+0xec>)
 c0011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0011a6:	4a2e      	ldr	r2, [pc, #184]	; (c001260 <MX_GPIO_Init+0xec>)
 c0011a8:	f043 0308 	orr.w	r3, r3, #8
 c0011ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0011ae:	4b2c      	ldr	r3, [pc, #176]	; (c001260 <MX_GPIO_Init+0xec>)
 c0011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0011b2:	f003 0308 	and.w	r3, r3, #8
 c0011b6:	60fb      	str	r3, [r7, #12]
 c0011b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c0011ba:	4b29      	ldr	r3, [pc, #164]	; (c001260 <MX_GPIO_Init+0xec>)
 c0011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0011be:	4a28      	ldr	r2, [pc, #160]	; (c001260 <MX_GPIO_Init+0xec>)
 c0011c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c0011c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0011c6:	4b26      	ldr	r3, [pc, #152]	; (c001260 <MX_GPIO_Init+0xec>)
 c0011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0011ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0011ce:	60bb      	str	r3, [r7, #8]
 c0011d0:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 c0011d2:	f001 fe59 	bl	c002e88 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c0011d6:	4b22      	ldr	r3, [pc, #136]	; (c001260 <MX_GPIO_Init+0xec>)
 c0011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0011da:	4a21      	ldr	r2, [pc, #132]	; (c001260 <MX_GPIO_Init+0xec>)
 c0011dc:	f043 0301 	orr.w	r3, r3, #1
 c0011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0011e2:	4b1f      	ldr	r3, [pc, #124]	; (c001260 <MX_GPIO_Init+0xec>)
 c0011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0011e6:	f003 0301 	and.w	r3, r3, #1
 c0011ea:	607b      	str	r3, [r7, #4]
 c0011ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 c0011ee:	2200      	movs	r2, #0
 c0011f0:	2180      	movs	r1, #128	; 0x80
 c0011f2:	481c      	ldr	r0, [pc, #112]	; (c001264 <MX_GPIO_Init+0xf0>)
 c0011f4:	f001 fafa 	bl	c0027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 c0011f8:	2200      	movs	r2, #0
 c0011fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 c0011fe:	481a      	ldr	r0, [pc, #104]	; (c001268 <MX_GPIO_Init+0xf4>)
 c001200:	f001 faf4 	bl	c0027ec <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(BUTTON_USER_GPIO_Port, BUTTON_USER_Pin, GPIO_PIN_NSEC);
 c001204:	2200      	movs	r2, #0
 c001206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c00120a:	4816      	ldr	r0, [pc, #88]	; (c001264 <MX_GPIO_Init+0xf0>)
 c00120c:	f001 fb20 	bl	c002850 <HAL_GPIO_ConfigPinAttributes>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOD, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_NSEC);
 c001210:	2200      	movs	r2, #0
 c001212:	f44f 7140 	mov.w	r1, #768	; 0x300
 c001216:	4815      	ldr	r0, [pc, #84]	; (c00126c <MX_GPIO_Init+0xf8>)
 c001218:	f001 fb1a 	bl	c002850 <HAL_GPIO_ConfigPinAttributes>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 c00121c:	2380      	movs	r3, #128	; 0x80
 c00121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c001220:	2301      	movs	r3, #1
 c001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c001224:	2300      	movs	r3, #0
 c001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c001228:	2303      	movs	r3, #3
 c00122a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 c00122c:	f107 0314 	add.w	r3, r7, #20
 c001230:	4619      	mov	r1, r3
 c001232:	480c      	ldr	r0, [pc, #48]	; (c001264 <MX_GPIO_Init+0xf0>)
 c001234:	f001 f95a 	bl	c0024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED3_Pin;
 c001238:	f44f 7300 	mov.w	r3, #512	; 0x200
 c00123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c00123e:	2301      	movs	r3, #1
 c001240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c001242:	2300      	movs	r3, #0
 c001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c001246:	2303      	movs	r3, #3
 c001248:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 c00124a:	f107 0314 	add.w	r3, r7, #20
 c00124e:	4619      	mov	r1, r3
 c001250:	4805      	ldr	r0, [pc, #20]	; (c001268 <MX_GPIO_Init+0xf4>)
 c001252:	f001 f94b 	bl	c0024ec <HAL_GPIO_Init>

}
 c001256:	bf00      	nop
 c001258:	3728      	adds	r7, #40	; 0x28
 c00125a:	46bd      	mov	sp, r7
 c00125c:	bd80      	pop	{r7, pc}
 c00125e:	bf00      	nop
 c001260:	50021000 	.word	0x50021000
 c001264:	52020800 	.word	0x52020800
 c001268:	52020000 	.word	0x52020000
 c00126c:	52020c00 	.word	0x52020c00

0c001270 <MX_GTZC_S_Init>:

/* USER CODE END 0 */

/* GTZC_S init function */
void MX_GTZC_S_Init(void)
{
 c001270:	b580      	push	{r7, lr}
 c001272:	b09c      	sub	sp, #112	; 0x70
 c001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c001276:	1d3b      	adds	r3, r7, #4
 c001278:	226c      	movs	r2, #108	; 0x6c
 c00127a:	2100      	movs	r1, #0
 c00127c:	4618      	mov	r0, r3
 c00127e:	f004 fa75 	bl	c00576c <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_SRAM1) != HAL_OK)
 c001282:	483f      	ldr	r0, [pc, #252]	; (c001380 <MX_GTZC_S_Init+0x110>)
 c001284:	f001 fc78 	bl	c002b78 <HAL_GTZC_TZIC_EnableIT>
 c001288:	4603      	mov	r3, r0
 c00128a:	2b00      	cmp	r3, #0
 c00128c:	d001      	beq.n	c001292 <MX_GTZC_S_Init+0x22>
  {
    Error_Handler();
 c00128e:	f000 f975 	bl	c00157c <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_LPUART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c001292:	f240 3101 	movw	r1, #769	; 0x301
 c001296:	2015      	movs	r0, #21
 c001298:	f001 fb12 	bl	c0028c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c00129c:	4603      	mov	r3, r0
 c00129e:	2b00      	cmp	r3, #0
 c0012a0:	d001      	beq.n	c0012a6 <MX_GTZC_S_Init+0x36>
  {
    Error_Handler();
 c0012a2:	f000 f96b 	bl	c00157c <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c0012a6:	2300      	movs	r3, #0
 c0012a8:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c0012aa:	2300      	movs	r3, #0
 c0012ac:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c0012ae:	f04f 33ff 	mov.w	r3, #4294967295
 c0012b2:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c0012b4:	f04f 33ff 	mov.w	r3, #4294967295
 c0012b8:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c0012ba:	f04f 33ff 	mov.w	r3, #4294967295
 c0012be:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c0012c0:	f04f 33ff 	mov.w	r3, #4294967295
 c0012c4:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c0012c6:	f04f 33ff 	mov.w	r3, #4294967295
 c0012ca:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c0012cc:	f04f 33ff 	mov.w	r3, #4294967295
 c0012d0:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c0012d2:	f04f 33ff 	mov.w	r3, #4294967295
 c0012d6:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c0012d8:	f04f 33ff 	mov.w	r3, #4294967295
 c0012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c0012de:	f04f 33ff 	mov.w	r3, #4294967295
 c0012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c0012e4:	f04f 33ff 	mov.w	r3, #4294967295
 c0012e8:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c0012ea:	f04f 33ff 	mov.w	r3, #4294967295
 c0012ee:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c0012f0:	f04f 33ff 	mov.w	r3, #4294967295
 c0012f4:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0012f6:	2300      	movs	r3, #0
 c0012f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0012fa:	2300      	movs	r3, #0
 c0012fc:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0012fe:	2300      	movs	r3, #0
 c001300:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c001302:	2300      	movs	r3, #0
 c001304:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c001306:	2300      	movs	r3, #0
 c001308:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c00130a:	2300      	movs	r3, #0
 c00130c:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c00130e:	2300      	movs	r3, #0
 c001310:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c001312:	2300      	movs	r3, #0
 c001314:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c001316:	2300      	movs	r3, #0
 c001318:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c00131a:	2300      	movs	r3, #0
 c00131c:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c00131e:	2300      	movs	r3, #0
 c001320:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c001322:	2300      	movs	r3, #0
 c001324:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c001326:	2300      	movs	r3, #0
 c001328:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c00132a:	1d3b      	adds	r3, r7, #4
 c00132c:	4619      	mov	r1, r3
 c00132e:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c001332:	f001 fb9d 	bl	c002a70 <HAL_GTZC_MPCBB_ConfigMem>
 c001336:	4603      	mov	r3, r0
 c001338:	2b00      	cmp	r3, #0
 c00133a:	d001      	beq.n	c001340 <MX_GTZC_S_Init+0xd0>
  {
    Error_Handler();
 c00133c:	f000 f91e 	bl	c00157c <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c001340:	2300      	movs	r3, #0
 c001342:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c001344:	2300      	movs	r3, #0
 c001346:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c001348:	2300      	movs	r3, #0
 c00134a:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c00134c:	2300      	movs	r3, #0
 c00134e:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c001350:	2300      	movs	r3, #0
 c001352:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c001354:	2300      	movs	r3, #0
 c001356:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c001358:	2300      	movs	r3, #0
 c00135a:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c00135c:	2300      	movs	r3, #0
 c00135e:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c001360:	2300      	movs	r3, #0
 c001362:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c001364:	1d3b      	adds	r3, r7, #4
 c001366:	4619      	mov	r1, r3
 c001368:	4806      	ldr	r0, [pc, #24]	; (c001384 <MX_GTZC_S_Init+0x114>)
 c00136a:	f001 fb81 	bl	c002a70 <HAL_GTZC_MPCBB_ConfigMem>
 c00136e:	4603      	mov	r3, r0
 c001370:	2b00      	cmp	r3, #0
 c001372:	d001      	beq.n	c001378 <MX_GTZC_S_Init+0x108>
  {
    Error_Handler();
 c001374:	f000 f902 	bl	c00157c <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c001378:	bf00      	nop
 c00137a:	3770      	adds	r7, #112	; 0x70
 c00137c:	46bd      	mov	sp, r7
 c00137e:	bd80      	pop	{r7, pc}
 c001380:	20000004 	.word	0x20000004
 c001384:	30030000 	.word	0x30030000

0c001388 <GetTestCaseNumber>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t GetTestCaseNumber()
{
 c001388:	b480      	push	{r7}
 c00138a:	af00      	add	r7, sp, #0
    return testCaseNumber;
 c00138c:	4b03      	ldr	r3, [pc, #12]	; (c00139c <GetTestCaseNumber+0x14>)
 c00138e:	681b      	ldr	r3, [r3, #0]
}
 c001390:	4618      	mov	r0, r3
 c001392:	46bd      	mov	sp, r7
 c001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001398:	4770      	bx	lr
 c00139a:	bf00      	nop
 c00139c:	30000000 	.word	0x30000000

0c0013a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c0013a0:	b580      	push	{r7, lr}
 c0013a2:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and interrupts secure/non-secure allocation setup done */
  /* in SystemInit() based on partition_stm32l552xx.h file's definitions. */
  /* USER CODE BEGIN 1 */

  /* Enable SecureFault handler (HardFault is default) */
   SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c0013a4:	4b0f      	ldr	r3, [pc, #60]	; (c0013e4 <main+0x44>)
 c0013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0013a8:	4a0e      	ldr	r2, [pc, #56]	; (c0013e4 <main+0x44>)
 c0013aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c0013ae:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c0013b0:	f000 ff06 	bl	c0021c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  setvbuf(stdin, NULL, _IONBF, 0);
 c0013b4:	4b0c      	ldr	r3, [pc, #48]	; (c0013e8 <main+0x48>)
 c0013b6:	681b      	ldr	r3, [r3, #0]
 c0013b8:	6858      	ldr	r0, [r3, #4]
 c0013ba:	2300      	movs	r3, #0
 c0013bc:	2202      	movs	r2, #2
 c0013be:	2100      	movs	r1, #0
 c0013c0:	f005 f900 	bl	c0065c4 <setvbuf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c0013c4:	f000 f858 	bl	c001478 <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c0013c8:	f7ff ff52 	bl	c001270 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c0013cc:	f7ff fed2 	bl	c001174 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 c0013d0:	f000 fcc4 	bl	c001d5c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("\r\n*********************************************************\r\n");
 c0013d4:	4805      	ldr	r0, [pc, #20]	; (c0013ec <main+0x4c>)
 c0013d6:	f005 f8d5 	bl	c006584 <puts>


  /* Secure SysTick should rather be suspended before calling non-secure  */
  /* in order to avoid wake-up from sleep mode entered by non-secure      */
  /* The Secure SysTick shall be resumed on non-secure callable functions */
  HAL_SuspendTick();
 c0013da:	f000 ff67 	bl	c0022ac <HAL_SuspendTick>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c0013de:	f000 f807 	bl	c0013f0 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c0013e2:	e7fe      	b.n	c0013e2 <main+0x42>
 c0013e4:	e000ed00 	.word	0xe000ed00
 c0013e8:	30000010 	.word	0x30000010
 c0013ec:	0c00ae20 	.word	0x0c00ae20

0c0013f0 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c0013f0:	b590      	push	{r4, r7, lr}
 c0013f2:	b083      	sub	sp, #12
 c0013f4:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c0013f6:	4b1d      	ldr	r3, [pc, #116]	; (c00146c <NonSecure_Init+0x7c>)
 c0013f8:	4a1d      	ldr	r2, [pc, #116]	; (c001470 <NonSecure_Init+0x80>)
 c0013fa:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c0013fc:	4b1c      	ldr	r3, [pc, #112]	; (c001470 <NonSecure_Init+0x80>)
 c0013fe:	681b      	ldr	r3, [r3, #0]
 c001400:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c001402:	683b      	ldr	r3, [r7, #0]
 c001404:	f383 8888 	msr	MSP_NS, r3
}
 c001408:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c00140a:	4b1a      	ldr	r3, [pc, #104]	; (c001474 <NonSecure_Init+0x84>)
 c00140c:	681b      	ldr	r3, [r3, #0]
 c00140e:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c001410:	687b      	ldr	r3, [r7, #4]
 c001412:	461c      	mov	r4, r3
 c001414:	0864      	lsrs	r4, r4, #1
 c001416:	0064      	lsls	r4, r4, #1
 c001418:	4620      	mov	r0, r4
 c00141a:	4621      	mov	r1, r4
 c00141c:	4622      	mov	r2, r4
 c00141e:	4623      	mov	r3, r4
 c001420:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001424:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001428:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00142c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001430:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001434:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001438:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00143c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001440:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001444:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001448:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00144c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001450:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001454:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00145c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001460:	f7fe ff66 	bl	c000330 <__gnu_cmse_nonsecure_call>
}
 c001464:	bf00      	nop
 c001466:	370c      	adds	r7, #12
 c001468:	46bd      	mov	sp, r7
 c00146a:	bd90      	pop	{r4, r7, pc}
 c00146c:	e002ed00 	.word	0xe002ed00
 c001470:	08040000 	.word	0x08040000
 c001474:	08040004 	.word	0x08040004

0c001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c001478:	b580      	push	{r7, lr}
 c00147a:	b098      	sub	sp, #96	; 0x60
 c00147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c00147e:	f107 0318 	add.w	r3, r7, #24
 c001482:	2248      	movs	r2, #72	; 0x48
 c001484:	2100      	movs	r1, #0
 c001486:	4618      	mov	r0, r3
 c001488:	f004 f970 	bl	c00576c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c00148c:	1d3b      	adds	r3, r7, #4
 c00148e:	2200      	movs	r2, #0
 c001490:	601a      	str	r2, [r3, #0]
 c001492:	605a      	str	r2, [r3, #4]
 c001494:	609a      	str	r2, [r3, #8]
 c001496:	60da      	str	r2, [r3, #12]
 c001498:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c00149a:	2000      	movs	r0, #0
 c00149c:	f001 fc98 	bl	c002dd0 <HAL_PWREx_ControlVoltageScaling>
 c0014a0:	4603      	mov	r3, r0
 c0014a2:	2b00      	cmp	r3, #0
 c0014a4:	d001      	beq.n	c0014aa <SystemClock_Config+0x32>
  {
    Error_Handler();
 c0014a6:	f000 f869 	bl	c00157c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 c0014aa:	2310      	movs	r3, #16
 c0014ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 c0014ae:	2301      	movs	r3, #1
 c0014b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 c0014b2:	2300      	movs	r3, #0
 c0014b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 c0014b6:	2360      	movs	r3, #96	; 0x60
 c0014b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c0014ba:	2302      	movs	r3, #2
 c0014bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 c0014be:	2301      	movs	r3, #1
 c0014c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 c0014c2:	2301      	movs	r3, #1
 c0014c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c0014c6:	2337      	movs	r3, #55	; 0x37
 c0014c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c0014ca:	2307      	movs	r3, #7
 c0014cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c0014ce:	2302      	movs	r3, #2
 c0014d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c0014d2:	2302      	movs	r3, #2
 c0014d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c0014d6:	f107 0318 	add.w	r3, r7, #24
 c0014da:	4618      	mov	r0, r3
 c0014dc:	f001 fd18 	bl	c002f10 <HAL_RCC_OscConfig>
 c0014e0:	4603      	mov	r3, r0
 c0014e2:	2b00      	cmp	r3, #0
 c0014e4:	d001      	beq.n	c0014ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 c0014e6:	f000 f849 	bl	c00157c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c0014ea:	230f      	movs	r3, #15
 c0014ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c0014ee:	2303      	movs	r3, #3
 c0014f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c0014f2:	2300      	movs	r3, #0
 c0014f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c0014f6:	2300      	movs	r3, #0
 c0014f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c0014fa:	2300      	movs	r3, #0
 c0014fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c0014fe:	1d3b      	adds	r3, r7, #4
 c001500:	2105      	movs	r1, #5
 c001502:	4618      	mov	r0, r3
 c001504:	f002 f9e6 	bl	c0038d4 <HAL_RCC_ClockConfig>
 c001508:	4603      	mov	r3, r0
 c00150a:	2b00      	cmp	r3, #0
 c00150c:	d001      	beq.n	c001512 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 c00150e:	f000 f835 	bl	c00157c <Error_Handler>
  }
}
 c001512:	bf00      	nop
 c001514:	3760      	adds	r7, #96	; 0x60
 c001516:	46bd      	mov	sp, r7
 c001518:	bd80      	pop	{r7, pc}
	...

0c00151c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 c00151c:	b580      	push	{r7, lr}
 c00151e:	b082      	sub	sp, #8
 c001520:	af00      	add	r7, sp, #0
 c001522:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 100);
 c001524:	1d39      	adds	r1, r7, #4
 c001526:	2364      	movs	r3, #100	; 0x64
 c001528:	2201      	movs	r2, #1
 c00152a:	4804      	ldr	r0, [pc, #16]	; (c00153c <__io_putchar+0x20>)
 c00152c:	f003 fa14 	bl	c004958 <HAL_UART_Transmit>
return ch;
 c001530:	687b      	ldr	r3, [r7, #4]
}
 c001532:	4618      	mov	r0, r3
 c001534:	3708      	adds	r7, #8
 c001536:	46bd      	mov	sp, r7
 c001538:	bd80      	pop	{r7, pc}
 c00153a:	bf00      	nop
 c00153c:	30000210 	.word	0x30000210

0c001540 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 c001540:	b580      	push	{r7, lr}
 c001542:	b082      	sub	sp, #8
 c001544:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 c001546:	2300      	movs	r3, #0
 c001548:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&hlpuart1);
 c00154a:	4b0b      	ldr	r3, [pc, #44]	; (c001578 <__io_getchar+0x38>)
 c00154c:	681b      	ldr	r3, [r3, #0]
 c00154e:	2208      	movs	r2, #8
 c001550:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 c001552:	1df9      	adds	r1, r7, #7
 c001554:	f04f 33ff 	mov.w	r3, #4294967295
 c001558:	2201      	movs	r2, #1
 c00155a:	4807      	ldr	r0, [pc, #28]	; (c001578 <__io_getchar+0x38>)
 c00155c:	f003 fa92 	bl	c004a84 <HAL_UART_Receive>
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 c001560:	1df9      	adds	r1, r7, #7
 c001562:	f04f 33ff 	mov.w	r3, #4294967295
 c001566:	2201      	movs	r2, #1
 c001568:	4803      	ldr	r0, [pc, #12]	; (c001578 <__io_getchar+0x38>)
 c00156a:	f003 f9f5 	bl	c004958 <HAL_UART_Transmit>
  return ch;
 c00156e:	79fb      	ldrb	r3, [r7, #7]
}
 c001570:	4618      	mov	r0, r3
 c001572:	3708      	adds	r7, #8
 c001574:	46bd      	mov	sp, r7
 c001576:	bd80      	pop	{r7, pc}
 c001578:	30000210 	.word	0x30000210

0c00157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c00157c:	b480      	push	{r7}
 c00157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 c001580:	e7fe      	b.n	c001580 <Error_Handler+0x4>
	...

0c001584 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c001584:	b480      	push	{r7}
 c001586:	b083      	sub	sp, #12
 c001588:	af00      	add	r7, sp, #0
 c00158a:	4603      	mov	r3, r0
 c00158c:	6039      	str	r1, [r7, #0]
 c00158e:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c001590:	683b      	ldr	r3, [r7, #0]
 c001592:	2b00      	cmp	r3, #0
 c001594:	d00d      	beq.n	c0015b2 <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c001596:	79fb      	ldrb	r3, [r7, #7]
 c001598:	2b00      	cmp	r3, #0
 c00159a:	d002      	beq.n	c0015a2 <__acle_se_SECURE_RegisterCallback+0x1e>
 c00159c:	2b01      	cmp	r3, #1
 c00159e:	d004      	beq.n	c0015aa <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c0015a0:	e008      	b.n	c0015b4 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureFaultCallback = func;
 c0015a2:	4a21      	ldr	r2, [pc, #132]	; (c001628 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c0015a4:	683b      	ldr	r3, [r7, #0]
 c0015a6:	6013      	str	r3, [r2, #0]
        break;
 c0015a8:	e004      	b.n	c0015b4 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureErrorCallback = func;
 c0015aa:	4a20      	ldr	r2, [pc, #128]	; (c00162c <__acle_se_SECURE_RegisterCallback+0xa8>)
 c0015ac:	683b      	ldr	r3, [r7, #0]
 c0015ae:	6013      	str	r3, [r2, #0]
        break;
 c0015b0:	e000      	b.n	c0015b4 <__acle_se_SECURE_RegisterCallback+0x30>
    }
  }
 c0015b2:	bf00      	nop
}
 c0015b4:	bf00      	nop
 c0015b6:	370c      	adds	r7, #12
 c0015b8:	46bd      	mov	sp, r7
 c0015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015be:	4670      	mov	r0, lr
 c0015c0:	4671      	mov	r1, lr
 c0015c2:	4672      	mov	r2, lr
 c0015c4:	4673      	mov	r3, lr
 c0015c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0015ca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0015ce:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0015d2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0015d6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0015da:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0015de:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0015e2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0015e6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0015ea:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0015ee:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0015f2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0015f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0015fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0015fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001602:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001606:	f38e 8c00 	msr	CPSR_fs, lr
 c00160a:	b410      	push	{r4}
 c00160c:	eef1 ca10 	vmrs	ip, fpscr
 c001610:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001614:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001618:	ea0c 0c04 	and.w	ip, ip, r4
 c00161c:	eee1 ca10 	vmsr	fpscr, ip
 c001620:	bc10      	pop	{r4}
 c001622:	46f4      	mov	ip, lr
 c001624:	4774      	bxns	lr
 c001626:	bf00      	nop
 c001628:	30000204 	.word	0x30000204
 c00162c:	30000208 	.word	0x30000208

0c001630 <strnlen>:


/* strnlen function implementation for arm compiler */
#if defined(__arm__)
size_t strnlen(const char *s, size_t maxLength)
{
 c001630:	b480      	push	{r7}
 c001632:	b085      	sub	sp, #20
 c001634:	af00      	add	r7, sp, #0
 c001636:	6078      	str	r0, [r7, #4]
 c001638:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 c00163a:	2300      	movs	r3, #0
 c00163c:	60fb      	str	r3, [r7, #12]
    while ((length <= maxLength) && (*s))
 c00163e:	e005      	b.n	c00164c <strnlen+0x1c>
    {
        s++;
 c001640:	687b      	ldr	r3, [r7, #4]
 c001642:	3301      	adds	r3, #1
 c001644:	607b      	str	r3, [r7, #4]
        length++;
 c001646:	68fb      	ldr	r3, [r7, #12]
 c001648:	3301      	adds	r3, #1
 c00164a:	60fb      	str	r3, [r7, #12]
    while ((length <= maxLength) && (*s))
 c00164c:	68fa      	ldr	r2, [r7, #12]
 c00164e:	683b      	ldr	r3, [r7, #0]
 c001650:	429a      	cmp	r2, r3
 c001652:	d803      	bhi.n	c00165c <strnlen+0x2c>
 c001654:	687b      	ldr	r3, [r7, #4]
 c001656:	781b      	ldrb	r3, [r3, #0]
 c001658:	2b00      	cmp	r3, #0
 c00165a:	d1f1      	bne.n	c001640 <strnlen+0x10>
    }
    return length;
 c00165c:	68fb      	ldr	r3, [r7, #12]
}
 c00165e:	4618      	mov	r0, r3
 c001660:	3714      	adds	r7, #20
 c001662:	46bd      	mov	sp, r7
 c001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001668:	4770      	bx	lr
	...

0c00166c <__acle_se_DbgConsole_Printf_NSE>:
#endif

/*--------------------------------------------------------------------------------------------------*/
/*----------------------------------Printf non secure entry ---------------------------------------------------*/
CMSE_NS_ENTRY void DbgConsole_Printf_NSE(char const *s)
{
 c00166c:	b580      	push	{r7, lr}
 c00166e:	b084      	sub	sp, #16
 c001670:	af00      	add	r7, sp, #0
 c001672:	6078      	str	r0, [r7, #4]
    size_t string_length;
    /* Access to non-secure memory from secure world has to be properly validated */
    /* Check whether string is properly terminated */
    string_length = strnlen(s, MAX_STRING_LENGTH);
 c001674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 c001678:	6878      	ldr	r0, [r7, #4]
 c00167a:	f7ff ffd9 	bl	c001630 <strnlen>
 c00167e:	60f8      	str	r0, [r7, #12]
    if ((string_length == MAX_STRING_LENGTH) && (s[string_length] != '\0'))
 c001680:	68fb      	ldr	r3, [r7, #12]
 c001682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c001686:	d10a      	bne.n	c00169e <__acle_se_DbgConsole_Printf_NSE+0x32>
 c001688:	687a      	ldr	r2, [r7, #4]
 c00168a:	68fb      	ldr	r3, [r7, #12]
 c00168c:	4413      	add	r3, r2
 c00168e:	781b      	ldrb	r3, [r3, #0]
 c001690:	2b00      	cmp	r3, #0
 c001692:	d004      	beq.n	c00169e <__acle_se_DbgConsole_Printf_NSE+0x32>
    {
        printf("Input data error: String too long or invalid string termination!\r\n");
 c001694:	4826      	ldr	r0, [pc, #152]	; (c001730 <__acle_se_DbgConsole_Printf_NSE+0xc4>)
 c001696:	f004 ff75 	bl	c006584 <puts>
        abort();
 c00169a:	f004 f835 	bl	c005708 <abort>
/*---------------------------------------------------------------------------------------------------------------*/
    /* Check whether string is located in non-secure memory */
    /* Due to the bug in GCC 10 cmse_check_pointed_object() always fail, do not call it, see GCC Bugzilla - Bug 99157.
       Solved in GCC 10.3 version */
#if !((__GNUC__ == 10) && (__GNUC_MINOR__ < 3))
    if (cmse_check_address_range((void *)s, string_length, CMSE_NONSECURE | CMSE_MPU_READ) == NULL)
 c00169e:	221a      	movs	r2, #26
 c0016a0:	68f9      	ldr	r1, [r7, #12]
 c0016a2:	6878      	ldr	r0, [r7, #4]
 c0016a4:	f7fe fdd0 	bl	c000248 <cmse_check_address_range>
 c0016a8:	4603      	mov	r3, r0
 c0016aa:	2b00      	cmp	r3, #0
 c0016ac:	d104      	bne.n	c0016b8 <__acle_se_DbgConsole_Printf_NSE+0x4c>
    {
        printf("Input data error: String is not located in non secure world!\r\n");
 c0016ae:	4821      	ldr	r0, [pc, #132]	; (c001734 <__acle_se_DbgConsole_Printf_NSE+0xc8>)
 c0016b0:	f004 ff68 	bl	c006584 <puts>
        abort();
 c0016b4:	f004 f828 	bl	c005708 <abort>
    }
#endif
    printf(s);
 c0016b8:	6878      	ldr	r0, [r7, #4]
 c0016ba:	f004 fedd 	bl	c006478 <iprintf>
}
 c0016be:	bf00      	nop
 c0016c0:	3710      	adds	r7, #16
 c0016c2:	46bd      	mov	sp, r7
 c0016c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0016c8:	4670      	mov	r0, lr
 c0016ca:	4671      	mov	r1, lr
 c0016cc:	4672      	mov	r2, lr
 c0016ce:	4673      	mov	r3, lr
 c0016d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0016d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0016d8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0016dc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0016e0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0016e4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0016e8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0016ec:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0016f0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0016f4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0016f8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0016fc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001700:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001708:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00170c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001710:	f38e 8c00 	msr	CPSR_fs, lr
 c001714:	b410      	push	{r4}
 c001716:	eef1 ca10 	vmrs	ip, fpscr
 c00171a:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00171e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001722:	ea0c 0c04 	and.w	ip, ip, r4
 c001726:	eee1 ca10 	vmsr	fpscr, ip
 c00172a:	bc10      	pop	{r4}
 c00172c:	46f4      	mov	ip, lr
 c00172e:	4774      	bxns	lr
 c001730:	0c00ae60 	.word	0x0c00ae60
 c001734:	0c00aea4 	.word	0x0c00aea4

0c001738 <__acle_se_DbgConsole_Scanf_NSE>:


CMSE_NS_ENTRY int DbgConsole_Scanf_NSE()
{
 c001738:	b580      	push	{r7, lr}
 c00173a:	b082      	sub	sp, #8
 c00173c:	af00      	add	r7, sp, #0
	int s;
	scanf("%d",&s);
 c00173e:	1d3b      	adds	r3, r7, #4
 c001740:	4619      	mov	r1, r3
 c001742:	481e      	ldr	r0, [pc, #120]	; (c0017bc <__acle_se_DbgConsole_Scanf_NSE+0x84>)
 c001744:	f004 ff26 	bl	c006594 <iscanf>
	return s;
 c001748:	687b      	ldr	r3, [r7, #4]
}
 c00174a:	4618      	mov	r0, r3
 c00174c:	3708      	adds	r7, #8
 c00174e:	46bd      	mov	sp, r7
 c001750:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001754:	4671      	mov	r1, lr
 c001756:	4672      	mov	r2, lr
 c001758:	4673      	mov	r3, lr
 c00175a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00175e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001762:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001766:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00176a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00176e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001772:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001776:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00177a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00177e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001782:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001786:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00178a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00178e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001796:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00179a:	f38e 8c00 	msr	CPSR_fs, lr
 c00179e:	b410      	push	{r4}
 c0017a0:	eef1 ca10 	vmrs	ip, fpscr
 c0017a4:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0017a8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0017ac:	ea0c 0c04 	and.w	ip, ip, r4
 c0017b0:	eee1 ca10 	vmsr	fpscr, ip
 c0017b4:	bc10      	pop	{r4}
 c0017b6:	46f4      	mov	ip, lr
 c0017b8:	4774      	bxns	lr
 c0017ba:	bf00      	nop
 c0017bc:	0c00aee4 	.word	0x0c00aee4

0c0017c0 <__acle_se_GetTestCaseNumber_NSE>:
  */

/*--------------------------------------------------------------------------------------------------*/
/*----------------------------------Non-secure callable (entry) function---------------------------------------------------*/
CMSE_NS_ENTRY uint32_t GetTestCaseNumber_NSE(void)
{
 c0017c0:	b580      	push	{r7, lr}
 c0017c2:	af00      	add	r7, sp, #0
    return GetTestCaseNumber();
 c0017c4:	f7ff fde0 	bl	c001388 <GetTestCaseNumber>
 c0017c8:	4603      	mov	r3, r0
}
 c0017ca:	4618      	mov	r0, r3
 c0017cc:	46bd      	mov	sp, r7
 c0017ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0017d2:	4671      	mov	r1, lr
 c0017d4:	4672      	mov	r2, lr
 c0017d6:	4673      	mov	r3, lr
 c0017d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0017dc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0017e0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0017e4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0017e8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0017ec:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0017f0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0017f4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0017f8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0017fc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001800:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001804:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001808:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00180c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001810:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001814:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001818:	f38e 8c00 	msr	CPSR_fs, lr
 c00181c:	b410      	push	{r4}
 c00181e:	eef1 ca10 	vmrs	ip, fpscr
 c001822:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001826:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00182a:	ea0c 0c04 	and.w	ip, ip, r4
 c00182e:	eee1 ca10 	vmsr	fpscr, ip
 c001832:	bc10      	pop	{r4}
 c001834:	46f4      	mov	ip, lr
 c001836:	4774      	bxns	lr

0c001838 <__acle_se_PinCompare_NSE>:

/*--------------------------------------------------------------------------------------------------*/
/*-----------Non-secure callable (entry) function, calling a non-secure callback function-----------*/
CMSE_NS_ENTRY int PinCompare_NSE(uint32_t s1)
{
 c001838:	b580      	push	{r7, lr}
 c00183a:	b082      	sub	sp, #8
 c00183c:	af00      	add	r7, sp, #0
 c00183e:	6078      	str	r0, [r7, #4]
	if(s1 == GetTestCaseNumber_NSE())
 c001840:	f7ff ffbe 	bl	c0017c0 <__acle_se_GetTestCaseNumber_NSE>
 c001844:	4602      	mov	r2, r0
 c001846:	687b      	ldr	r3, [r7, #4]
 c001848:	4293      	cmp	r3, r2
 c00184a:	d101      	bne.n	c001850 <__acle_se_PinCompare_NSE+0x18>
	{
		return 1;
 c00184c:	2301      	movs	r3, #1
 c00184e:	e000      	b.n	c001852 <__acle_se_PinCompare_NSE+0x1a>
	}
	else
	{
		return 0;
 c001850:	2300      	movs	r3, #0
	}
}
 c001852:	4618      	mov	r0, r3
 c001854:	3708      	adds	r7, #8
 c001856:	46bd      	mov	sp, r7
 c001858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00185c:	4671      	mov	r1, lr
 c00185e:	4672      	mov	r2, lr
 c001860:	4673      	mov	r3, lr
 c001862:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001866:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00186a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00186e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001872:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001876:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00187a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00187e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001882:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001886:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00188a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00188e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001892:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00189a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00189e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0018a2:	f38e 8c00 	msr	CPSR_fs, lr
 c0018a6:	b410      	push	{r4}
 c0018a8:	eef1 ca10 	vmrs	ip, fpscr
 c0018ac:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0018b0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0018b4:	ea0c 0c04 	and.w	ip, ip, r4
 c0018b8:	eee1 ca10 	vmsr	fpscr, ip
 c0018bc:	bc10      	pop	{r4}
 c0018be:	46f4      	mov	ip, lr
 c0018c0:	4774      	bxns	lr
	...

0c0018c4 <__acle_se_Access_ok_toggle>:

/*--------------------------------------------------------------------------------------------------*/
/*---------------------------------------------LED CONTROL-----------------------------------------*/
CMSE_NS_ENTRY void Access_ok_toggle(void)
{
 c0018c4:	b580      	push	{r7, lr}
 c0018c6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 c0018c8:	2180      	movs	r1, #128	; 0x80
 c0018ca:	481d      	ldr	r0, [pc, #116]	; (c001940 <__acle_se_Access_ok_toggle+0x7c>)
 c0018cc:	f000 ffa6 	bl	c00281c <HAL_GPIO_TogglePin>
}
 c0018d0:	bf00      	nop
 c0018d2:	46bd      	mov	sp, r7
 c0018d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0018d8:	4670      	mov	r0, lr
 c0018da:	4671      	mov	r1, lr
 c0018dc:	4672      	mov	r2, lr
 c0018de:	4673      	mov	r3, lr
 c0018e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0018e4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0018e8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0018ec:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0018f0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0018f4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0018f8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0018fc:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001900:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001904:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001908:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00190c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001910:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00191c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001920:	f38e 8c00 	msr	CPSR_fs, lr
 c001924:	b410      	push	{r4}
 c001926:	eef1 ca10 	vmrs	ip, fpscr
 c00192a:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00192e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001932:	ea0c 0c04 	and.w	ip, ip, r4
 c001936:	eee1 ca10 	vmsr	fpscr, ip
 c00193a:	bc10      	pop	{r4}
 c00193c:	46f4      	mov	ip, lr
 c00193e:	4774      	bxns	lr
 c001940:	52020800 	.word	0x52020800

0c001944 <__acle_se_Access_Nok_toggle>:

CMSE_NS_ENTRY void Access_Nok_toggle(void)
{
 c001944:	b580      	push	{r7, lr}
 c001946:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 c001948:	f44f 7100 	mov.w	r1, #512	; 0x200
 c00194c:	481d      	ldr	r0, [pc, #116]	; (c0019c4 <__acle_se_Access_Nok_toggle+0x80>)
 c00194e:	f000 ff65 	bl	c00281c <HAL_GPIO_TogglePin>
}
 c001952:	bf00      	nop
 c001954:	46bd      	mov	sp, r7
 c001956:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00195a:	4670      	mov	r0, lr
 c00195c:	4671      	mov	r1, lr
 c00195e:	4672      	mov	r2, lr
 c001960:	4673      	mov	r3, lr
 c001962:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001966:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00196a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00196e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001972:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001976:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00197a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00197e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001982:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001986:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00198a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00198e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001992:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00199a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00199e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0019a2:	f38e 8c00 	msr	CPSR_fs, lr
 c0019a6:	b410      	push	{r4}
 c0019a8:	eef1 ca10 	vmrs	ip, fpscr
 c0019ac:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0019b0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0019b4:	ea0c 0c04 	and.w	ip, ip, r4
 c0019b8:	eee1 ca10 	vmsr	fpscr, ip
 c0019bc:	bc10      	pop	{r4}
 c0019be:	46f4      	mov	ip, lr
 c0019c0:	4774      	bxns	lr
 c0019c2:	bf00      	nop
 c0019c4:	52020000 	.word	0x52020000

0c0019c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c0019c8:	b580      	push	{r7, lr}
 c0019ca:	b084      	sub	sp, #16
 c0019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c0019ce:	4b31      	ldr	r3, [pc, #196]	; (c001a94 <HAL_MspInit+0xcc>)
 c0019d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0019d2:	4a30      	ldr	r2, [pc, #192]	; (c001a94 <HAL_MspInit+0xcc>)
 c0019d4:	f043 0301 	orr.w	r3, r3, #1
 c0019d8:	6613      	str	r3, [r2, #96]	; 0x60
 c0019da:	4b2e      	ldr	r3, [pc, #184]	; (c001a94 <HAL_MspInit+0xcc>)
 c0019dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0019de:	f003 0301 	and.w	r3, r3, #1
 c0019e2:	60fb      	str	r3, [r7, #12]
 c0019e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c0019e6:	4b2b      	ldr	r3, [pc, #172]	; (c001a94 <HAL_MspInit+0xcc>)
 c0019e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0019ea:	4a2a      	ldr	r2, [pc, #168]	; (c001a94 <HAL_MspInit+0xcc>)
 c0019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0019f0:	6593      	str	r3, [r2, #88]	; 0x58
 c0019f2:	4b28      	ldr	r3, [pc, #160]	; (c001a94 <HAL_MspInit+0xcc>)
 c0019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0019fa:	60bb      	str	r3, [r7, #8]
 c0019fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c0019fe:	4b25      	ldr	r3, [pc, #148]	; (c001a94 <HAL_MspInit+0xcc>)
 c001a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001a02:	4a24      	ldr	r2, [pc, #144]	; (c001a94 <HAL_MspInit+0xcc>)
 c001a04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c001a08:	6493      	str	r3, [r2, #72]	; 0x48
 c001a0a:	4b22      	ldr	r3, [pc, #136]	; (c001a94 <HAL_MspInit+0xcc>)
 c001a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c001a12:	607b      	str	r3, [r7, #4]
 c001a14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c001a16:	2200      	movs	r2, #0
 c001a18:	2100      	movs	r1, #0
 c001a1a:	2008      	movs	r0, #8
 c001a1c:	f000 fd31 	bl	c002482 <HAL_NVIC_SetPriority>
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c001a20:	2008      	movs	r0, #8
 c001a22:	f000 fd48 	bl	c0024b6 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c001a26:	f001 fa3f 	bl	c002ea8 <HAL_PWREx_DisableUCPDDeadBattery>

  /** PWR Non-Privilege/Non-Secure Items Configurations
  */
  HAL_PWR_ConfigAttributes(PWR_WKUP1, PWR_NSEC |PWR_NPRIV);
 c001a2a:	f44f 7140 	mov.w	r1, #768	; 0x300
 c001a2e:	2001      	movs	r0, #1
 c001a30:	f001 f97a 	bl	c002d28 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP2, PWR_NSEC |PWR_NPRIV);
 c001a34:	f44f 7140 	mov.w	r1, #768	; 0x300
 c001a38:	2002      	movs	r0, #2
 c001a3a:	f001 f975 	bl	c002d28 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP3, PWR_NSEC |PWR_NPRIV);
 c001a3e:	f44f 7140 	mov.w	r1, #768	; 0x300
 c001a42:	2004      	movs	r0, #4
 c001a44:	f001 f970 	bl	c002d28 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP4, PWR_NSEC |PWR_NPRIV);
 c001a48:	f44f 7140 	mov.w	r1, #768	; 0x300
 c001a4c:	2008      	movs	r0, #8
 c001a4e:	f001 f96b 	bl	c002d28 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP5, PWR_NSEC |PWR_NPRIV);
 c001a52:	f44f 7140 	mov.w	r1, #768	; 0x300
 c001a56:	2010      	movs	r0, #16
 c001a58:	f001 f966 	bl	c002d28 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_VDM, PWR_NSEC |PWR_NPRIV);
 c001a5c:	f44f 7140 	mov.w	r1, #768	; 0x300
 c001a60:	f44f 7000 	mov.w	r0, #512	; 0x200
 c001a64:	f001 f960 	bl	c002d28 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_APC, PWR_NSEC |PWR_NPRIV);
 c001a68:	f44f 7140 	mov.w	r1, #768	; 0x300
 c001a6c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 c001a70:	f001 f95a 	bl	c002d28 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_LPM, PWR_NSEC |PWR_NPRIV);
 c001a74:	f44f 7140 	mov.w	r1, #768	; 0x300
 c001a78:	f44f 7080 	mov.w	r0, #256	; 0x100
 c001a7c:	f001 f954 	bl	c002d28 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_VB, PWR_NSEC |PWR_NPRIV);
 c001a80:	f44f 7140 	mov.w	r1, #768	; 0x300
 c001a84:	f44f 6080 	mov.w	r0, #1024	; 0x400
 c001a88:	f001 f94e 	bl	c002d28 <HAL_PWR_ConfigAttributes>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c001a8c:	bf00      	nop
 c001a8e:	3710      	adds	r7, #16
 c001a90:	46bd      	mov	sp, r7
 c001a92:	bd80      	pop	{r7, pc}
 c001a94:	50021000 	.word	0x50021000

0c001a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c001a98:	b480      	push	{r7}
 c001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 c001a9c:	bf00      	nop
 c001a9e:	46bd      	mov	sp, r7
 c001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001aa4:	4770      	bx	lr

0c001aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c001aa6:	b480      	push	{r7}
 c001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c001aaa:	e7fe      	b.n	c001aaa <HardFault_Handler+0x4>

0c001aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c001aac:	b480      	push	{r7}
 c001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c001ab0:	e7fe      	b.n	c001ab0 <MemManage_Handler+0x4>

0c001ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c001ab2:	b480      	push	{r7}
 c001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c001ab6:	e7fe      	b.n	c001ab6 <BusFault_Handler+0x4>

0c001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c001ab8:	b480      	push	{r7}
 c001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c001abc:	e7fe      	b.n	c001abc <UsageFault_Handler+0x4>
	...

0c001ac0 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c001ac0:	b590      	push	{r4, r7, lr}
 c001ac2:	b083      	sub	sp, #12
 c001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */
  funcptr_NS callback_NS; // non-secure callback function pointer

  if(pSecureFaultCallback != (funcptr_NS)NULL)
 c001ac6:	4b1c      	ldr	r3, [pc, #112]	; (c001b38 <SecureFault_Handler+0x78>)
 c001ac8:	681b      	ldr	r3, [r3, #0]
 c001aca:	2b00      	cmp	r3, #0
 c001acc:	d02f      	beq.n	c001b2e <SecureFault_Handler+0x6e>
  {
   /* return function pointer with cleared LSB */
   callback_NS = (funcptr_NS)cmse_nsfptr_create(pSecureFaultCallback);
 c001ace:	4b1a      	ldr	r3, [pc, #104]	; (c001b38 <SecureFault_Handler+0x78>)
 c001ad0:	681b      	ldr	r3, [r3, #0]
 c001ad2:	f023 0301 	bic.w	r3, r3, #1
 c001ad6:	607b      	str	r3, [r7, #4]

   callback_NS();
 c001ad8:	687b      	ldr	r3, [r7, #4]
 c001ada:	461c      	mov	r4, r3
 c001adc:	0864      	lsrs	r4, r4, #1
 c001ade:	0064      	lsls	r4, r4, #1
 c001ae0:	4620      	mov	r0, r4
 c001ae2:	4621      	mov	r1, r4
 c001ae4:	4622      	mov	r2, r4
 c001ae6:	4623      	mov	r3, r4
 c001ae8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001aec:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001af0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001af4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001af8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001afc:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001b00:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001b04:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001b08:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001b0c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001b10:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001b14:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001b18:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001b1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001b20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001b24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001b28:	f7fe fc02 	bl	c000330 <__gnu_cmse_nonsecure_call>
  {
    /* USER CODE BEGIN W1_SecureFault_IRQn 0 */
  }
    /* USER CODE END W1_SecureFault_IRQn 0 */
  }
}
 c001b2c:	e000      	b.n	c001b30 <SecureFault_Handler+0x70>
  while (1)
 c001b2e:	e7fe      	b.n	c001b2e <SecureFault_Handler+0x6e>
}
 c001b30:	370c      	adds	r7, #12
 c001b32:	46bd      	mov	sp, r7
 c001b34:	bd90      	pop	{r4, r7, pc}
 c001b36:	bf00      	nop
 c001b38:	30000204 	.word	0x30000204

0c001b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c001b3c:	b480      	push	{r7}
 c001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c001b40:	bf00      	nop
 c001b42:	46bd      	mov	sp, r7
 c001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001b48:	4770      	bx	lr

0c001b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c001b4a:	b480      	push	{r7}
 c001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  while (1)
 c001b4e:	e7fe      	b.n	c001b4e <DebugMon_Handler+0x4>

0c001b50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c001b50:	b480      	push	{r7}
 c001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  while (1)
 c001b54:	e7fe      	b.n	c001b54 <PendSV_Handler+0x4>

0c001b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c001b56:	b580      	push	{r7, lr}
 c001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c001b5a:	f000 fb87 	bl	c00226c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c001b5e:	bf00      	nop
 c001b60:	bd80      	pop	{r7, pc}
	...

0c001b64 <GTZC_IRQHandler>:

/**
  * @brief This function handles Global TrustZone controller global interrupt.
  */
void GTZC_IRQHandler(void)
{
 c001b64:	b590      	push	{r4, r7, lr}
 c001b66:	b083      	sub	sp, #12
 c001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GTZC_IRQn 0 */
  funcptr_NS callback_NS; // non-secure callback function pointer

  /* USER CODE END GTZC_IRQn 0 */
  HAL_GTZC_IRQHandler();
 c001b6a:	f001 f84f 	bl	c002c0c <HAL_GTZC_IRQHandler>
  /* USER CODE BEGIN GTZC_IRQn 1 */

  if(pSecureErrorCallback != (funcptr_NS)NULL)
 c001b6e:	4b1c      	ldr	r3, [pc, #112]	; (c001be0 <GTZC_IRQHandler+0x7c>)
 c001b70:	681b      	ldr	r3, [r3, #0]
 c001b72:	2b00      	cmp	r3, #0
 c001b74:	d02f      	beq.n	c001bd6 <GTZC_IRQHandler+0x72>
  {
   /* return function pointer with cleared LSB */
   callback_NS = (funcptr_NS)cmse_nsfptr_create(pSecureErrorCallback);
 c001b76:	4b1a      	ldr	r3, [pc, #104]	; (c001be0 <GTZC_IRQHandler+0x7c>)
 c001b78:	681b      	ldr	r3, [r3, #0]
 c001b7a:	f023 0301 	bic.w	r3, r3, #1
 c001b7e:	607b      	str	r3, [r7, #4]

   callback_NS();
 c001b80:	687b      	ldr	r3, [r7, #4]
 c001b82:	461c      	mov	r4, r3
 c001b84:	0864      	lsrs	r4, r4, #1
 c001b86:	0064      	lsls	r4, r4, #1
 c001b88:	4620      	mov	r0, r4
 c001b8a:	4621      	mov	r1, r4
 c001b8c:	4622      	mov	r2, r4
 c001b8e:	4623      	mov	r3, r4
 c001b90:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001b94:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001b98:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001b9c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001ba0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001ba4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001ba8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001bac:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001bb0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001bb4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001bb8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001bbc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001bc0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001bc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001bc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001bcc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001bd0:	f7fe fbae 	bl	c000330 <__gnu_cmse_nonsecure_call>
  {
    /* Something went wrong in test case */
    while(1);
  }
  /* USER CODE END GTZC_IRQn 1 */
}
 c001bd4:	e000      	b.n	c001bd8 <GTZC_IRQHandler+0x74>
    while(1);
 c001bd6:	e7fe      	b.n	c001bd6 <GTZC_IRQHandler+0x72>
}
 c001bd8:	370c      	adds	r7, #12
 c001bda:	46bd      	mov	sp, r7
 c001bdc:	bd90      	pop	{r4, r7, pc}
 c001bde:	bf00      	nop
 c001be0:	30000208 	.word	0x30000208

0c001be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 c001be4:	b480      	push	{r7}
 c001be6:	af00      	add	r7, sp, #0
	return 1;
 c001be8:	2301      	movs	r3, #1
}
 c001bea:	4618      	mov	r0, r3
 c001bec:	46bd      	mov	sp, r7
 c001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001bf2:	4770      	bx	lr

0c001bf4 <_kill>:

int _kill(int pid, int sig)
{
 c001bf4:	b580      	push	{r7, lr}
 c001bf6:	b082      	sub	sp, #8
 c001bf8:	af00      	add	r7, sp, #0
 c001bfa:	6078      	str	r0, [r7, #4]
 c001bfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 c001bfe:	f003 fd8b 	bl	c005718 <__errno>
 c001c02:	4603      	mov	r3, r0
 c001c04:	2216      	movs	r2, #22
 c001c06:	601a      	str	r2, [r3, #0]
	return -1;
 c001c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 c001c0c:	4618      	mov	r0, r3
 c001c0e:	3708      	adds	r7, #8
 c001c10:	46bd      	mov	sp, r7
 c001c12:	bd80      	pop	{r7, pc}

0c001c14 <_exit>:

void _exit (int status)
{
 c001c14:	b580      	push	{r7, lr}
 c001c16:	b082      	sub	sp, #8
 c001c18:	af00      	add	r7, sp, #0
 c001c1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 c001c1c:	f04f 31ff 	mov.w	r1, #4294967295
 c001c20:	6878      	ldr	r0, [r7, #4]
 c001c22:	f7ff ffe7 	bl	c001bf4 <_kill>
	while (1) {}		/* Make sure we hang here */
 c001c26:	e7fe      	b.n	c001c26 <_exit+0x12>

0c001c28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 c001c28:	b580      	push	{r7, lr}
 c001c2a:	b086      	sub	sp, #24
 c001c2c:	af00      	add	r7, sp, #0
 c001c2e:	60f8      	str	r0, [r7, #12]
 c001c30:	60b9      	str	r1, [r7, #8]
 c001c32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 c001c34:	2300      	movs	r3, #0
 c001c36:	617b      	str	r3, [r7, #20]
 c001c38:	e00a      	b.n	c001c50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 c001c3a:	f7ff fc81 	bl	c001540 <__io_getchar>
 c001c3e:	4601      	mov	r1, r0
 c001c40:	68bb      	ldr	r3, [r7, #8]
 c001c42:	1c5a      	adds	r2, r3, #1
 c001c44:	60ba      	str	r2, [r7, #8]
 c001c46:	b2ca      	uxtb	r2, r1
 c001c48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 c001c4a:	697b      	ldr	r3, [r7, #20]
 c001c4c:	3301      	adds	r3, #1
 c001c4e:	617b      	str	r3, [r7, #20]
 c001c50:	697a      	ldr	r2, [r7, #20]
 c001c52:	687b      	ldr	r3, [r7, #4]
 c001c54:	429a      	cmp	r2, r3
 c001c56:	dbf0      	blt.n	c001c3a <_read+0x12>
	}

return len;
 c001c58:	687b      	ldr	r3, [r7, #4]
}
 c001c5a:	4618      	mov	r0, r3
 c001c5c:	3718      	adds	r7, #24
 c001c5e:	46bd      	mov	sp, r7
 c001c60:	bd80      	pop	{r7, pc}

0c001c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 c001c62:	b580      	push	{r7, lr}
 c001c64:	b086      	sub	sp, #24
 c001c66:	af00      	add	r7, sp, #0
 c001c68:	60f8      	str	r0, [r7, #12]
 c001c6a:	60b9      	str	r1, [r7, #8]
 c001c6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 c001c6e:	2300      	movs	r3, #0
 c001c70:	617b      	str	r3, [r7, #20]
 c001c72:	e009      	b.n	c001c88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 c001c74:	68bb      	ldr	r3, [r7, #8]
 c001c76:	1c5a      	adds	r2, r3, #1
 c001c78:	60ba      	str	r2, [r7, #8]
 c001c7a:	781b      	ldrb	r3, [r3, #0]
 c001c7c:	4618      	mov	r0, r3
 c001c7e:	f7ff fc4d 	bl	c00151c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 c001c82:	697b      	ldr	r3, [r7, #20]
 c001c84:	3301      	adds	r3, #1
 c001c86:	617b      	str	r3, [r7, #20]
 c001c88:	697a      	ldr	r2, [r7, #20]
 c001c8a:	687b      	ldr	r3, [r7, #4]
 c001c8c:	429a      	cmp	r2, r3
 c001c8e:	dbf1      	blt.n	c001c74 <_write+0x12>
	}
	return len;
 c001c90:	687b      	ldr	r3, [r7, #4]
}
 c001c92:	4618      	mov	r0, r3
 c001c94:	3718      	adds	r7, #24
 c001c96:	46bd      	mov	sp, r7
 c001c98:	bd80      	pop	{r7, pc}

0c001c9a <_close>:

int _close(int file)
{
 c001c9a:	b480      	push	{r7}
 c001c9c:	b083      	sub	sp, #12
 c001c9e:	af00      	add	r7, sp, #0
 c001ca0:	6078      	str	r0, [r7, #4]
	return -1;
 c001ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 c001ca6:	4618      	mov	r0, r3
 c001ca8:	370c      	adds	r7, #12
 c001caa:	46bd      	mov	sp, r7
 c001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001cb0:	4770      	bx	lr

0c001cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 c001cb2:	b480      	push	{r7}
 c001cb4:	b083      	sub	sp, #12
 c001cb6:	af00      	add	r7, sp, #0
 c001cb8:	6078      	str	r0, [r7, #4]
 c001cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 c001cbc:	683b      	ldr	r3, [r7, #0]
 c001cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c001cc2:	605a      	str	r2, [r3, #4]
	return 0;
 c001cc4:	2300      	movs	r3, #0
}
 c001cc6:	4618      	mov	r0, r3
 c001cc8:	370c      	adds	r7, #12
 c001cca:	46bd      	mov	sp, r7
 c001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001cd0:	4770      	bx	lr

0c001cd2 <_isatty>:

int _isatty(int file)
{
 c001cd2:	b480      	push	{r7}
 c001cd4:	b083      	sub	sp, #12
 c001cd6:	af00      	add	r7, sp, #0
 c001cd8:	6078      	str	r0, [r7, #4]
	return 1;
 c001cda:	2301      	movs	r3, #1
}
 c001cdc:	4618      	mov	r0, r3
 c001cde:	370c      	adds	r7, #12
 c001ce0:	46bd      	mov	sp, r7
 c001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001ce6:	4770      	bx	lr

0c001ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 c001ce8:	b480      	push	{r7}
 c001cea:	b085      	sub	sp, #20
 c001cec:	af00      	add	r7, sp, #0
 c001cee:	60f8      	str	r0, [r7, #12]
 c001cf0:	60b9      	str	r1, [r7, #8]
 c001cf2:	607a      	str	r2, [r7, #4]
	return 0;
 c001cf4:	2300      	movs	r3, #0
}
 c001cf6:	4618      	mov	r0, r3
 c001cf8:	3714      	adds	r7, #20
 c001cfa:	46bd      	mov	sp, r7
 c001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001d00:	4770      	bx	lr
	...

0c001d04 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 c001d04:	b580      	push	{r7, lr}
 c001d06:	b084      	sub	sp, #16
 c001d08:	af00      	add	r7, sp, #0
 c001d0a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 c001d0c:	4b11      	ldr	r3, [pc, #68]	; (c001d54 <_sbrk+0x50>)
 c001d0e:	681b      	ldr	r3, [r3, #0]
 c001d10:	2b00      	cmp	r3, #0
 c001d12:	d102      	bne.n	c001d1a <_sbrk+0x16>
		heap_end = &end;
 c001d14:	4b0f      	ldr	r3, [pc, #60]	; (c001d54 <_sbrk+0x50>)
 c001d16:	4a10      	ldr	r2, [pc, #64]	; (c001d58 <_sbrk+0x54>)
 c001d18:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 c001d1a:	4b0e      	ldr	r3, [pc, #56]	; (c001d54 <_sbrk+0x50>)
 c001d1c:	681b      	ldr	r3, [r3, #0]
 c001d1e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 c001d20:	4b0c      	ldr	r3, [pc, #48]	; (c001d54 <_sbrk+0x50>)
 c001d22:	681a      	ldr	r2, [r3, #0]
 c001d24:	687b      	ldr	r3, [r7, #4]
 c001d26:	4413      	add	r3, r2
 c001d28:	466a      	mov	r2, sp
 c001d2a:	4293      	cmp	r3, r2
 c001d2c:	d907      	bls.n	c001d3e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 c001d2e:	f003 fcf3 	bl	c005718 <__errno>
 c001d32:	4603      	mov	r3, r0
 c001d34:	220c      	movs	r2, #12
 c001d36:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 c001d38:	f04f 33ff 	mov.w	r3, #4294967295
 c001d3c:	e006      	b.n	c001d4c <_sbrk+0x48>
	}

	heap_end += incr;
 c001d3e:	4b05      	ldr	r3, [pc, #20]	; (c001d54 <_sbrk+0x50>)
 c001d40:	681a      	ldr	r2, [r3, #0]
 c001d42:	687b      	ldr	r3, [r7, #4]
 c001d44:	4413      	add	r3, r2
 c001d46:	4a03      	ldr	r2, [pc, #12]	; (c001d54 <_sbrk+0x50>)
 c001d48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 c001d4a:	68fb      	ldr	r3, [r7, #12]
}
 c001d4c:	4618      	mov	r0, r3
 c001d4e:	3710      	adds	r7, #16
 c001d50:	46bd      	mov	sp, r7
 c001d52:	bd80      	pop	{r7, pc}
 c001d54:	3000020c 	.word	0x3000020c
 c001d58:	300002b8 	.word	0x300002b8

0c001d5c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 c001d5c:	b580      	push	{r7, lr}
 c001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 c001d60:	4b22      	ldr	r3, [pc, #136]	; (c001dec <MX_LPUART1_UART_Init+0x90>)
 c001d62:	4a23      	ldr	r2, [pc, #140]	; (c001df0 <MX_LPUART1_UART_Init+0x94>)
 c001d64:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 c001d66:	4b21      	ldr	r3, [pc, #132]	; (c001dec <MX_LPUART1_UART_Init+0x90>)
 c001d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 c001d6c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 c001d6e:	4b1f      	ldr	r3, [pc, #124]	; (c001dec <MX_LPUART1_UART_Init+0x90>)
 c001d70:	2200      	movs	r2, #0
 c001d72:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 c001d74:	4b1d      	ldr	r3, [pc, #116]	; (c001dec <MX_LPUART1_UART_Init+0x90>)
 c001d76:	2200      	movs	r2, #0
 c001d78:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 c001d7a:	4b1c      	ldr	r3, [pc, #112]	; (c001dec <MX_LPUART1_UART_Init+0x90>)
 c001d7c:	2200      	movs	r2, #0
 c001d7e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 c001d80:	4b1a      	ldr	r3, [pc, #104]	; (c001dec <MX_LPUART1_UART_Init+0x90>)
 c001d82:	220c      	movs	r2, #12
 c001d84:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c001d86:	4b19      	ldr	r3, [pc, #100]	; (c001dec <MX_LPUART1_UART_Init+0x90>)
 c001d88:	2200      	movs	r2, #0
 c001d8a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c001d8c:	4b17      	ldr	r3, [pc, #92]	; (c001dec <MX_LPUART1_UART_Init+0x90>)
 c001d8e:	2200      	movs	r2, #0
 c001d90:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c001d92:	4b16      	ldr	r3, [pc, #88]	; (c001dec <MX_LPUART1_UART_Init+0x90>)
 c001d94:	2200      	movs	r2, #0
 c001d96:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c001d98:	4b14      	ldr	r3, [pc, #80]	; (c001dec <MX_LPUART1_UART_Init+0x90>)
 c001d9a:	2200      	movs	r2, #0
 c001d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 c001d9e:	4b13      	ldr	r3, [pc, #76]	; (c001dec <MX_LPUART1_UART_Init+0x90>)
 c001da0:	2200      	movs	r2, #0
 c001da2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 c001da4:	4811      	ldr	r0, [pc, #68]	; (c001dec <MX_LPUART1_UART_Init+0x90>)
 c001da6:	f002 fd87 	bl	c0048b8 <HAL_UART_Init>
 c001daa:	4603      	mov	r3, r0
 c001dac:	2b00      	cmp	r3, #0
 c001dae:	d001      	beq.n	c001db4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 c001db0:	f7ff fbe4 	bl	c00157c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c001db4:	2100      	movs	r1, #0
 c001db6:	480d      	ldr	r0, [pc, #52]	; (c001dec <MX_LPUART1_UART_Init+0x90>)
 c001db8:	f003 fbdc 	bl	c005574 <HAL_UARTEx_SetTxFifoThreshold>
 c001dbc:	4603      	mov	r3, r0
 c001dbe:	2b00      	cmp	r3, #0
 c001dc0:	d001      	beq.n	c001dc6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 c001dc2:	f7ff fbdb 	bl	c00157c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c001dc6:	2100      	movs	r1, #0
 c001dc8:	4808      	ldr	r0, [pc, #32]	; (c001dec <MX_LPUART1_UART_Init+0x90>)
 c001dca:	f003 fc11 	bl	c0055f0 <HAL_UARTEx_SetRxFifoThreshold>
 c001dce:	4603      	mov	r3, r0
 c001dd0:	2b00      	cmp	r3, #0
 c001dd2:	d001      	beq.n	c001dd8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 c001dd4:	f7ff fbd2 	bl	c00157c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 c001dd8:	4804      	ldr	r0, [pc, #16]	; (c001dec <MX_LPUART1_UART_Init+0x90>)
 c001dda:	f003 fb92 	bl	c005502 <HAL_UARTEx_DisableFifoMode>
 c001dde:	4603      	mov	r3, r0
 c001de0:	2b00      	cmp	r3, #0
 c001de2:	d001      	beq.n	c001de8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 c001de4:	f7ff fbca 	bl	c00157c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 c001de8:	bf00      	nop
 c001dea:	bd80      	pop	{r7, pc}
 c001dec:	30000210 	.word	0x30000210
 c001df0:	50008000 	.word	0x50008000

0c001df4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 c001df4:	b580      	push	{r7, lr}
 c001df6:	b0ae      	sub	sp, #184	; 0xb8
 c001df8:	af00      	add	r7, sp, #0
 c001dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c001dfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c001e00:	2200      	movs	r2, #0
 c001e02:	601a      	str	r2, [r3, #0]
 c001e04:	605a      	str	r2, [r3, #4]
 c001e06:	609a      	str	r2, [r3, #8]
 c001e08:	60da      	str	r2, [r3, #12]
 c001e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c001e0c:	f107 0310 	add.w	r3, r7, #16
 c001e10:	2294      	movs	r2, #148	; 0x94
 c001e12:	2100      	movs	r1, #0
 c001e14:	4618      	mov	r0, r3
 c001e16:	f003 fca9 	bl	c00576c <memset>
  if(uartHandle->Instance==LPUART1)
 c001e1a:	687b      	ldr	r3, [r7, #4]
 c001e1c:	681b      	ldr	r3, [r3, #0]
 c001e1e:	4a22      	ldr	r2, [pc, #136]	; (c001ea8 <HAL_UART_MspInit+0xb4>)
 c001e20:	4293      	cmp	r3, r2
 c001e22:	d13d      	bne.n	c001ea0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 c001e24:	2320      	movs	r3, #32
 c001e26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 c001e28:	2300      	movs	r3, #0
 c001e2a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c001e2c:	f107 0310 	add.w	r3, r7, #16
 c001e30:	4618      	mov	r0, r3
 c001e32:	f002 f82b 	bl	c003e8c <HAL_RCCEx_PeriphCLKConfig>
 c001e36:	4603      	mov	r3, r0
 c001e38:	2b00      	cmp	r3, #0
 c001e3a:	d001      	beq.n	c001e40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 c001e3c:	f7ff fb9e 	bl	c00157c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 c001e40:	4b1a      	ldr	r3, [pc, #104]	; (c001eac <HAL_UART_MspInit+0xb8>)
 c001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c001e44:	4a19      	ldr	r2, [pc, #100]	; (c001eac <HAL_UART_MspInit+0xb8>)
 c001e46:	f043 0301 	orr.w	r3, r3, #1
 c001e4a:	65d3      	str	r3, [r2, #92]	; 0x5c
 c001e4c:	4b17      	ldr	r3, [pc, #92]	; (c001eac <HAL_UART_MspInit+0xb8>)
 c001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c001e50:	f003 0301 	and.w	r3, r3, #1
 c001e54:	60fb      	str	r3, [r7, #12]
 c001e56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 c001e58:	4b14      	ldr	r3, [pc, #80]	; (c001eac <HAL_UART_MspInit+0xb8>)
 c001e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001e5c:	4a13      	ldr	r2, [pc, #76]	; (c001eac <HAL_UART_MspInit+0xb8>)
 c001e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c001e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001e64:	4b11      	ldr	r3, [pc, #68]	; (c001eac <HAL_UART_MspInit+0xb8>)
 c001e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c001e6c:	60bb      	str	r3, [r7, #8]
 c001e6e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 c001e70:	f001 f80a 	bl	c002e88 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 c001e74:	f44f 73c0 	mov.w	r3, #384	; 0x180
 c001e78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c001e7c:	2302      	movs	r3, #2
 c001e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c001e82:	2300      	movs	r3, #0
 c001e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c001e88:	2300      	movs	r3, #0
 c001e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 c001e8e:	2308      	movs	r3, #8
 c001e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 c001e94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c001e98:	4619      	mov	r1, r3
 c001e9a:	4805      	ldr	r0, [pc, #20]	; (c001eb0 <HAL_UART_MspInit+0xbc>)
 c001e9c:	f000 fb26 	bl	c0024ec <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 c001ea0:	bf00      	nop
 c001ea2:	37b8      	adds	r7, #184	; 0xb8
 c001ea4:	46bd      	mov	sp, r7
 c001ea6:	bd80      	pop	{r7, pc}
 c001ea8:	50008000 	.word	0x50008000
 c001eac:	50021000 	.word	0x50021000
 c001eb0:	52021800 	.word	0x52021800

0c001eb4 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c001eb4:	b480      	push	{r7}
 c001eb6:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c001eb8:	4b30      	ldr	r3, [pc, #192]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001eba:	2200      	movs	r2, #0
 c001ebc:	609a      	str	r2, [r3, #8]
 c001ebe:	4b2f      	ldr	r3, [pc, #188]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001ec0:	4a2f      	ldr	r2, [pc, #188]	; (c001f80 <TZ_SAU_Setup+0xcc>)
 c001ec2:	60da      	str	r2, [r3, #12]
 c001ec4:	4b2d      	ldr	r3, [pc, #180]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001ec6:	4a2f      	ldr	r2, [pc, #188]	; (c001f84 <TZ_SAU_Setup+0xd0>)
 c001ec8:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c001eca:	4b2c      	ldr	r3, [pc, #176]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001ecc:	2201      	movs	r2, #1
 c001ece:	609a      	str	r2, [r3, #8]
 c001ed0:	4b2a      	ldr	r3, [pc, #168]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001ed2:	4a2d      	ldr	r2, [pc, #180]	; (c001f88 <TZ_SAU_Setup+0xd4>)
 c001ed4:	60da      	str	r2, [r3, #12]
 c001ed6:	4b29      	ldr	r3, [pc, #164]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001ed8:	4a2c      	ldr	r2, [pc, #176]	; (c001f8c <TZ_SAU_Setup+0xd8>)
 c001eda:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c001edc:	4b27      	ldr	r3, [pc, #156]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001ede:	2202      	movs	r2, #2
 c001ee0:	609a      	str	r2, [r3, #8]
 c001ee2:	4b26      	ldr	r3, [pc, #152]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001ee4:	4a2a      	ldr	r2, [pc, #168]	; (c001f90 <TZ_SAU_Setup+0xdc>)
 c001ee6:	60da      	str	r2, [r3, #12]
 c001ee8:	4b24      	ldr	r3, [pc, #144]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001eea:	4a2a      	ldr	r2, [pc, #168]	; (c001f94 <TZ_SAU_Setup+0xe0>)
 c001eec:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c001eee:	4b23      	ldr	r3, [pc, #140]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001ef0:	2203      	movs	r2, #3
 c001ef2:	609a      	str	r2, [r3, #8]
 c001ef4:	4b21      	ldr	r3, [pc, #132]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001ef6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c001efa:	60da      	str	r2, [r3, #12]
 c001efc:	4b1f      	ldr	r3, [pc, #124]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001efe:	4a26      	ldr	r2, [pc, #152]	; (c001f98 <TZ_SAU_Setup+0xe4>)
 c001f00:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c001f02:	4b1e      	ldr	r3, [pc, #120]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001f04:	2204      	movs	r2, #4
 c001f06:	609a      	str	r2, [r3, #8]
 c001f08:	4b1c      	ldr	r3, [pc, #112]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001f0a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c001f0e:	60da      	str	r2, [r3, #12]
 c001f10:	4b1a      	ldr	r3, [pc, #104]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001f12:	4a22      	ldr	r2, [pc, #136]	; (c001f9c <TZ_SAU_Setup+0xe8>)
 c001f14:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c001f16:	4b19      	ldr	r3, [pc, #100]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001f18:	2205      	movs	r2, #5
 c001f1a:	609a      	str	r2, [r3, #8]
 c001f1c:	4b17      	ldr	r3, [pc, #92]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001f1e:	4a20      	ldr	r2, [pc, #128]	; (c001fa0 <TZ_SAU_Setup+0xec>)
 c001f20:	60da      	str	r2, [r3, #12]
 c001f22:	4b16      	ldr	r3, [pc, #88]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001f24:	4a1f      	ldr	r2, [pc, #124]	; (c001fa4 <TZ_SAU_Setup+0xf0>)
 c001f26:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c001f28:	4b14      	ldr	r3, [pc, #80]	; (c001f7c <TZ_SAU_Setup+0xc8>)
 c001f2a:	2201      	movs	r2, #1
 c001f2c:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c001f2e:	4b1e      	ldr	r3, [pc, #120]	; (c001fa8 <TZ_SAU_Setup+0xf4>)
 c001f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c001f34:	4a1c      	ldr	r2, [pc, #112]	; (c001fa8 <TZ_SAU_Setup+0xf4>)
 c001f36:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c001f3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001f3e:	4b1b      	ldr	r3, [pc, #108]	; (c001fac <TZ_SAU_Setup+0xf8>)
 c001f40:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c001f42:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001f46:	4a19      	ldr	r2, [pc, #100]	; (c001fac <TZ_SAU_Setup+0xf8>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c001f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001f4c:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c001f4e:	4b18      	ldr	r3, [pc, #96]	; (c001fb0 <TZ_SAU_Setup+0xfc>)
 c001f50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 c001f54:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c001f58:	4b15      	ldr	r3, [pc, #84]	; (c001fb0 <TZ_SAU_Setup+0xfc>)
 c001f5a:	2200      	movs	r2, #0
 c001f5c:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c001f60:	4b13      	ldr	r3, [pc, #76]	; (c001fb0 <TZ_SAU_Setup+0xfc>)
 c001f62:	2200      	movs	r2, #0
 c001f64:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c001f68:	4b11      	ldr	r3, [pc, #68]	; (c001fb0 <TZ_SAU_Setup+0xfc>)
 c001f6a:	2200      	movs	r2, #0
 c001f6c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c001f70:	bf00      	nop
 c001f72:	46bd      	mov	sp, r7
 c001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001f78:	4770      	bx	lr
 c001f7a:	bf00      	nop
 c001f7c:	e000edd0 	.word	0xe000edd0
 c001f80:	0c03e000 	.word	0x0c03e000
 c001f84:	0c03ffe3 	.word	0x0c03ffe3
 c001f88:	08040000 	.word	0x08040000
 c001f8c:	0807ffe1 	.word	0x0807ffe1
 c001f90:	20018000 	.word	0x20018000
 c001f94:	2003ffe1 	.word	0x2003ffe1
 c001f98:	4fffffe1 	.word	0x4fffffe1
 c001f9c:	9fffffe1 	.word	0x9fffffe1
 c001fa0:	0bf90000 	.word	0x0bf90000
 c001fa4:	0bfa8fe1 	.word	0x0bfa8fe1
 c001fa8:	e000ed00 	.word	0xe000ed00
 c001fac:	e000ef30 	.word	0xe000ef30
 c001fb0:	e000e100 	.word	0xe000e100

0c001fb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c001fb4:	b580      	push	{r7, lr}
 c001fb6:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c001fb8:	f7ff ff7c 	bl	c001eb4 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001fbc:	4b08      	ldr	r3, [pc, #32]	; (c001fe0 <SystemInit+0x2c>)
 c001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c001fc2:	4a07      	ldr	r2, [pc, #28]	; (c001fe0 <SystemInit+0x2c>)
 c001fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001fcc:	4b05      	ldr	r3, [pc, #20]	; (c001fe4 <SystemInit+0x30>)
 c001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c001fd2:	4a04      	ldr	r2, [pc, #16]	; (c001fe4 <SystemInit+0x30>)
 c001fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c001fdc:	bf00      	nop
 c001fde:	bd80      	pop	{r7, pc}
 c001fe0:	e000ed00 	.word	0xe000ed00
 c001fe4:	e002ed00 	.word	0xe002ed00

0c001fe8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c001fe8:	b480      	push	{r7}
 c001fea:	b087      	sub	sp, #28
 c001fec:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c001fee:	4b4f      	ldr	r3, [pc, #316]	; (c00212c <SystemCoreClockUpdate+0x144>)
 c001ff0:	681b      	ldr	r3, [r3, #0]
 c001ff2:	f003 0308 	and.w	r3, r3, #8
 c001ff6:	2b00      	cmp	r3, #0
 c001ff8:	d107      	bne.n	c00200a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c001ffa:	4b4c      	ldr	r3, [pc, #304]	; (c00212c <SystemCoreClockUpdate+0x144>)
 c001ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002000:	0a1b      	lsrs	r3, r3, #8
 c002002:	f003 030f 	and.w	r3, r3, #15
 c002006:	617b      	str	r3, [r7, #20]
 c002008:	e005      	b.n	c002016 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c00200a:	4b48      	ldr	r3, [pc, #288]	; (c00212c <SystemCoreClockUpdate+0x144>)
 c00200c:	681b      	ldr	r3, [r3, #0]
 c00200e:	091b      	lsrs	r3, r3, #4
 c002010:	f003 030f 	and.w	r3, r3, #15
 c002014:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c002016:	4a46      	ldr	r2, [pc, #280]	; (c002130 <SystemCoreClockUpdate+0x148>)
 c002018:	697b      	ldr	r3, [r7, #20]
 c00201a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00201e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c002020:	4b42      	ldr	r3, [pc, #264]	; (c00212c <SystemCoreClockUpdate+0x144>)
 c002022:	689b      	ldr	r3, [r3, #8]
 c002024:	f003 030c 	and.w	r3, r3, #12
 c002028:	2b0c      	cmp	r3, #12
 c00202a:	d866      	bhi.n	c0020fa <SystemCoreClockUpdate+0x112>
 c00202c:	a201      	add	r2, pc, #4	; (adr r2, c002034 <SystemCoreClockUpdate+0x4c>)
 c00202e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c002032:	bf00      	nop
 c002034:	0c002069 	.word	0x0c002069
 c002038:	0c0020fb 	.word	0x0c0020fb
 c00203c:	0c0020fb 	.word	0x0c0020fb
 c002040:	0c0020fb 	.word	0x0c0020fb
 c002044:	0c002071 	.word	0x0c002071
 c002048:	0c0020fb 	.word	0x0c0020fb
 c00204c:	0c0020fb 	.word	0x0c0020fb
 c002050:	0c0020fb 	.word	0x0c0020fb
 c002054:	0c002079 	.word	0x0c002079
 c002058:	0c0020fb 	.word	0x0c0020fb
 c00205c:	0c0020fb 	.word	0x0c0020fb
 c002060:	0c0020fb 	.word	0x0c0020fb
 c002064:	0c002081 	.word	0x0c002081
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c002068:	4a32      	ldr	r2, [pc, #200]	; (c002134 <SystemCoreClockUpdate+0x14c>)
 c00206a:	697b      	ldr	r3, [r7, #20]
 c00206c:	6013      	str	r3, [r2, #0]
      break;
 c00206e:	e048      	b.n	c002102 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c002070:	4b30      	ldr	r3, [pc, #192]	; (c002134 <SystemCoreClockUpdate+0x14c>)
 c002072:	4a31      	ldr	r2, [pc, #196]	; (c002138 <SystemCoreClockUpdate+0x150>)
 c002074:	601a      	str	r2, [r3, #0]
      break;
 c002076:	e044      	b.n	c002102 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c002078:	4b2e      	ldr	r3, [pc, #184]	; (c002134 <SystemCoreClockUpdate+0x14c>)
 c00207a:	4a2f      	ldr	r2, [pc, #188]	; (c002138 <SystemCoreClockUpdate+0x150>)
 c00207c:	601a      	str	r2, [r3, #0]
      break;
 c00207e:	e040      	b.n	c002102 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c002080:	4b2a      	ldr	r3, [pc, #168]	; (c00212c <SystemCoreClockUpdate+0x144>)
 c002082:	68db      	ldr	r3, [r3, #12]
 c002084:	f003 0303 	and.w	r3, r3, #3
 c002088:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c00208a:	4b28      	ldr	r3, [pc, #160]	; (c00212c <SystemCoreClockUpdate+0x144>)
 c00208c:	68db      	ldr	r3, [r3, #12]
 c00208e:	091b      	lsrs	r3, r3, #4
 c002090:	f003 030f 	and.w	r3, r3, #15
 c002094:	3301      	adds	r3, #1
 c002096:	60bb      	str	r3, [r7, #8]
 c002098:	68fb      	ldr	r3, [r7, #12]
 c00209a:	2b02      	cmp	r3, #2
 c00209c:	d003      	beq.n	c0020a6 <SystemCoreClockUpdate+0xbe>
 c00209e:	68fb      	ldr	r3, [r7, #12]
 c0020a0:	2b03      	cmp	r3, #3
 c0020a2:	d006      	beq.n	c0020b2 <SystemCoreClockUpdate+0xca>
 c0020a4:	e00b      	b.n	c0020be <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c0020a6:	4a24      	ldr	r2, [pc, #144]	; (c002138 <SystemCoreClockUpdate+0x150>)
 c0020a8:	68bb      	ldr	r3, [r7, #8]
 c0020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 c0020ae:	613b      	str	r3, [r7, #16]
          break;
 c0020b0:	e00b      	b.n	c0020ca <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c0020b2:	4a21      	ldr	r2, [pc, #132]	; (c002138 <SystemCoreClockUpdate+0x150>)
 c0020b4:	68bb      	ldr	r3, [r7, #8]
 c0020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 c0020ba:	613b      	str	r3, [r7, #16]
          break;
 c0020bc:	e005      	b.n	c0020ca <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c0020be:	697a      	ldr	r2, [r7, #20]
 c0020c0:	68bb      	ldr	r3, [r7, #8]
 c0020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 c0020c6:	613b      	str	r3, [r7, #16]
          break;
 c0020c8:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c0020ca:	4b18      	ldr	r3, [pc, #96]	; (c00212c <SystemCoreClockUpdate+0x144>)
 c0020cc:	68db      	ldr	r3, [r3, #12]
 c0020ce:	0a1b      	lsrs	r3, r3, #8
 c0020d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c0020d4:	693b      	ldr	r3, [r7, #16]
 c0020d6:	fb02 f303 	mul.w	r3, r2, r3
 c0020da:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c0020dc:	4b13      	ldr	r3, [pc, #76]	; (c00212c <SystemCoreClockUpdate+0x144>)
 c0020de:	68db      	ldr	r3, [r3, #12]
 c0020e0:	0e5b      	lsrs	r3, r3, #25
 c0020e2:	f003 0303 	and.w	r3, r3, #3
 c0020e6:	3301      	adds	r3, #1
 c0020e8:	005b      	lsls	r3, r3, #1
 c0020ea:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c0020ec:	693a      	ldr	r2, [r7, #16]
 c0020ee:	687b      	ldr	r3, [r7, #4]
 c0020f0:	fbb2 f3f3 	udiv	r3, r2, r3
 c0020f4:	4a0f      	ldr	r2, [pc, #60]	; (c002134 <SystemCoreClockUpdate+0x14c>)
 c0020f6:	6013      	str	r3, [r2, #0]
      break;
 c0020f8:	e003      	b.n	c002102 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c0020fa:	4a0e      	ldr	r2, [pc, #56]	; (c002134 <SystemCoreClockUpdate+0x14c>)
 c0020fc:	697b      	ldr	r3, [r7, #20]
 c0020fe:	6013      	str	r3, [r2, #0]
      break;
 c002100:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c002102:	4b0a      	ldr	r3, [pc, #40]	; (c00212c <SystemCoreClockUpdate+0x144>)
 c002104:	689b      	ldr	r3, [r3, #8]
 c002106:	091b      	lsrs	r3, r3, #4
 c002108:	f003 030f 	and.w	r3, r3, #15
 c00210c:	4a0b      	ldr	r2, [pc, #44]	; (c00213c <SystemCoreClockUpdate+0x154>)
 c00210e:	5cd3      	ldrb	r3, [r2, r3]
 c002110:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c002112:	4b08      	ldr	r3, [pc, #32]	; (c002134 <SystemCoreClockUpdate+0x14c>)
 c002114:	681a      	ldr	r2, [r3, #0]
 c002116:	683b      	ldr	r3, [r7, #0]
 c002118:	fa22 f303 	lsr.w	r3, r2, r3
 c00211c:	4a05      	ldr	r2, [pc, #20]	; (c002134 <SystemCoreClockUpdate+0x14c>)
 c00211e:	6013      	str	r3, [r2, #0]
}
 c002120:	bf00      	nop
 c002122:	371c      	adds	r7, #28
 c002124:	46bd      	mov	sp, r7
 c002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00212a:	4770      	bx	lr
 c00212c:	50021000 	.word	0x50021000
 c002130:	0c00af0c 	.word	0x0c00af0c
 c002134:	30000004 	.word	0x30000004
 c002138:	00f42400 	.word	0x00f42400
 c00213c:	0c00aef4 	.word	0x0c00aef4

0c002140 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c002140:	b580      	push	{r7, lr}
 c002142:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c002144:	f7ff ff50 	bl	c001fe8 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c002148:	4b1c      	ldr	r3, [pc, #112]	; (c0021bc <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c00214a:	681b      	ldr	r3, [r3, #0]
}
 c00214c:	4618      	mov	r0, r3
 c00214e:	46bd      	mov	sp, r7
 c002150:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c002154:	4671      	mov	r1, lr
 c002156:	4672      	mov	r2, lr
 c002158:	4673      	mov	r3, lr
 c00215a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00215e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c002162:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c002166:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00216a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00216e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c002172:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c002176:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00217a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00217e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c002182:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c002186:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00218a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00218e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002192:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c002196:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00219a:	f38e 8c00 	msr	CPSR_fs, lr
 c00219e:	b410      	push	{r4}
 c0021a0:	eef1 ca10 	vmrs	ip, fpscr
 c0021a4:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0021a8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0021ac:	ea0c 0c04 	and.w	ip, ip, r4
 c0021b0:	eee1 ca10 	vmsr	fpscr, ip
 c0021b4:	bc10      	pop	{r4}
 c0021b6:	46f4      	mov	ip, lr
 c0021b8:	4774      	bxns	lr
 c0021ba:	bf00      	nop
 c0021bc:	30000004 	.word	0x30000004

0c0021c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c0021c0:	b580      	push	{r7, lr}
 c0021c2:	b082      	sub	sp, #8
 c0021c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c0021c6:	2300      	movs	r3, #0
 c0021c8:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c0021ca:	2004      	movs	r0, #4
 c0021cc:	f000 f94e 	bl	c00246c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c0021d0:	f7ff ff0a 	bl	c001fe8 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c0021d4:	2000      	movs	r0, #0
 c0021d6:	f000 f80d 	bl	c0021f4 <HAL_InitTick>
 c0021da:	4603      	mov	r3, r0
 c0021dc:	2b00      	cmp	r3, #0
 c0021de:	d002      	beq.n	c0021e6 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c0021e0:	2301      	movs	r3, #1
 c0021e2:	71fb      	strb	r3, [r7, #7]
 c0021e4:	e001      	b.n	c0021ea <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c0021e6:	f7ff fbef 	bl	c0019c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c0021ea:	79fb      	ldrb	r3, [r7, #7]
}
 c0021ec:	4618      	mov	r0, r3
 c0021ee:	3708      	adds	r7, #8
 c0021f0:	46bd      	mov	sp, r7
 c0021f2:	bd80      	pop	{r7, pc}

0c0021f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c0021f4:	b580      	push	{r7, lr}
 c0021f6:	b084      	sub	sp, #16
 c0021f8:	af00      	add	r7, sp, #0
 c0021fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c0021fc:	2300      	movs	r3, #0
 c0021fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c002200:	4b17      	ldr	r3, [pc, #92]	; (c002260 <HAL_InitTick+0x6c>)
 c002202:	781b      	ldrb	r3, [r3, #0]
 c002204:	2b00      	cmp	r3, #0
 c002206:	d023      	beq.n	c002250 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c002208:	4b16      	ldr	r3, [pc, #88]	; (c002264 <HAL_InitTick+0x70>)
 c00220a:	681a      	ldr	r2, [r3, #0]
 c00220c:	4b14      	ldr	r3, [pc, #80]	; (c002260 <HAL_InitTick+0x6c>)
 c00220e:	781b      	ldrb	r3, [r3, #0]
 c002210:	4619      	mov	r1, r3
 c002212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c002216:	fbb3 f3f1 	udiv	r3, r3, r1
 c00221a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00221e:	4618      	mov	r0, r3
 c002220:	f000 f957 	bl	c0024d2 <HAL_SYSTICK_Config>
 c002224:	4603      	mov	r3, r0
 c002226:	2b00      	cmp	r3, #0
 c002228:	d10f      	bne.n	c00224a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c00222a:	687b      	ldr	r3, [r7, #4]
 c00222c:	2b07      	cmp	r3, #7
 c00222e:	d809      	bhi.n	c002244 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c002230:	2200      	movs	r2, #0
 c002232:	6879      	ldr	r1, [r7, #4]
 c002234:	f04f 30ff 	mov.w	r0, #4294967295
 c002238:	f000 f923 	bl	c002482 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c00223c:	4a0a      	ldr	r2, [pc, #40]	; (c002268 <HAL_InitTick+0x74>)
 c00223e:	687b      	ldr	r3, [r7, #4]
 c002240:	6013      	str	r3, [r2, #0]
 c002242:	e007      	b.n	c002254 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c002244:	2301      	movs	r3, #1
 c002246:	73fb      	strb	r3, [r7, #15]
 c002248:	e004      	b.n	c002254 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c00224a:	2301      	movs	r3, #1
 c00224c:	73fb      	strb	r3, [r7, #15]
 c00224e:	e001      	b.n	c002254 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c002250:	2301      	movs	r3, #1
 c002252:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c002254:	7bfb      	ldrb	r3, [r7, #15]
}
 c002256:	4618      	mov	r0, r3
 c002258:	3710      	adds	r7, #16
 c00225a:	46bd      	mov	sp, r7
 c00225c:	bd80      	pop	{r7, pc}
 c00225e:	bf00      	nop
 c002260:	3000000c 	.word	0x3000000c
 c002264:	30000004 	.word	0x30000004
 c002268:	30000008 	.word	0x30000008

0c00226c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c00226c:	b480      	push	{r7}
 c00226e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c002270:	4b06      	ldr	r3, [pc, #24]	; (c00228c <HAL_IncTick+0x20>)
 c002272:	781b      	ldrb	r3, [r3, #0]
 c002274:	461a      	mov	r2, r3
 c002276:	4b06      	ldr	r3, [pc, #24]	; (c002290 <HAL_IncTick+0x24>)
 c002278:	681b      	ldr	r3, [r3, #0]
 c00227a:	4413      	add	r3, r2
 c00227c:	4a04      	ldr	r2, [pc, #16]	; (c002290 <HAL_IncTick+0x24>)
 c00227e:	6013      	str	r3, [r2, #0]
}
 c002280:	bf00      	nop
 c002282:	46bd      	mov	sp, r7
 c002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002288:	4770      	bx	lr
 c00228a:	bf00      	nop
 c00228c:	3000000c 	.word	0x3000000c
 c002290:	300002a0 	.word	0x300002a0

0c002294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c002294:	b480      	push	{r7}
 c002296:	af00      	add	r7, sp, #0
  return uwTick;
 c002298:	4b03      	ldr	r3, [pc, #12]	; (c0022a8 <HAL_GetTick+0x14>)
 c00229a:	681b      	ldr	r3, [r3, #0]
}
 c00229c:	4618      	mov	r0, r3
 c00229e:	46bd      	mov	sp, r7
 c0022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0022a4:	4770      	bx	lr
 c0022a6:	bf00      	nop
 c0022a8:	300002a0 	.word	0x300002a0

0c0022ac <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 c0022ac:	b480      	push	{r7}
 c0022ae:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 c0022b0:	4b05      	ldr	r3, [pc, #20]	; (c0022c8 <HAL_SuspendTick+0x1c>)
 c0022b2:	681b      	ldr	r3, [r3, #0]
 c0022b4:	4a04      	ldr	r2, [pc, #16]	; (c0022c8 <HAL_SuspendTick+0x1c>)
 c0022b6:	f023 0302 	bic.w	r3, r3, #2
 c0022ba:	6013      	str	r3, [r2, #0]
}
 c0022bc:	bf00      	nop
 c0022be:	46bd      	mov	sp, r7
 c0022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0022c4:	4770      	bx	lr
 c0022c6:	bf00      	nop
 c0022c8:	e000e010 	.word	0xe000e010

0c0022cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0022cc:	b480      	push	{r7}
 c0022ce:	b085      	sub	sp, #20
 c0022d0:	af00      	add	r7, sp, #0
 c0022d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c0022d4:	687b      	ldr	r3, [r7, #4]
 c0022d6:	f003 0307 	and.w	r3, r3, #7
 c0022da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c0022dc:	4b0c      	ldr	r3, [pc, #48]	; (c002310 <__NVIC_SetPriorityGrouping+0x44>)
 c0022de:	68db      	ldr	r3, [r3, #12]
 c0022e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c0022e2:	68ba      	ldr	r2, [r7, #8]
 c0022e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c0022e8:	4013      	ands	r3, r2
 c0022ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c0022ec:	68fb      	ldr	r3, [r7, #12]
 c0022ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c0022f0:	68bb      	ldr	r3, [r7, #8]
 c0022f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c0022f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c0022f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c0022fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c0022fe:	4a04      	ldr	r2, [pc, #16]	; (c002310 <__NVIC_SetPriorityGrouping+0x44>)
 c002300:	68bb      	ldr	r3, [r7, #8]
 c002302:	60d3      	str	r3, [r2, #12]
}
 c002304:	bf00      	nop
 c002306:	3714      	adds	r7, #20
 c002308:	46bd      	mov	sp, r7
 c00230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00230e:	4770      	bx	lr
 c002310:	e000ed00 	.word	0xe000ed00

0c002314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c002314:	b480      	push	{r7}
 c002316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c002318:	4b04      	ldr	r3, [pc, #16]	; (c00232c <__NVIC_GetPriorityGrouping+0x18>)
 c00231a:	68db      	ldr	r3, [r3, #12]
 c00231c:	0a1b      	lsrs	r3, r3, #8
 c00231e:	f003 0307 	and.w	r3, r3, #7
}
 c002322:	4618      	mov	r0, r3
 c002324:	46bd      	mov	sp, r7
 c002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00232a:	4770      	bx	lr
 c00232c:	e000ed00 	.word	0xe000ed00

0c002330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c002330:	b480      	push	{r7}
 c002332:	b083      	sub	sp, #12
 c002334:	af00      	add	r7, sp, #0
 c002336:	4603      	mov	r3, r0
 c002338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c00233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00233e:	2b00      	cmp	r3, #0
 c002340:	db0b      	blt.n	c00235a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c002342:	79fb      	ldrb	r3, [r7, #7]
 c002344:	f003 021f 	and.w	r2, r3, #31
 c002348:	4907      	ldr	r1, [pc, #28]	; (c002368 <__NVIC_EnableIRQ+0x38>)
 c00234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00234e:	095b      	lsrs	r3, r3, #5
 c002350:	2001      	movs	r0, #1
 c002352:	fa00 f202 	lsl.w	r2, r0, r2
 c002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c00235a:	bf00      	nop
 c00235c:	370c      	adds	r7, #12
 c00235e:	46bd      	mov	sp, r7
 c002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002364:	4770      	bx	lr
 c002366:	bf00      	nop
 c002368:	e000e100 	.word	0xe000e100

0c00236c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c00236c:	b480      	push	{r7}
 c00236e:	b083      	sub	sp, #12
 c002370:	af00      	add	r7, sp, #0
 c002372:	4603      	mov	r3, r0
 c002374:	6039      	str	r1, [r7, #0]
 c002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00237c:	2b00      	cmp	r3, #0
 c00237e:	db0a      	blt.n	c002396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c002380:	683b      	ldr	r3, [r7, #0]
 c002382:	b2da      	uxtb	r2, r3
 c002384:	490c      	ldr	r1, [pc, #48]	; (c0023b8 <__NVIC_SetPriority+0x4c>)
 c002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00238a:	0152      	lsls	r2, r2, #5
 c00238c:	b2d2      	uxtb	r2, r2
 c00238e:	440b      	add	r3, r1
 c002390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c002394:	e00a      	b.n	c0023ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c002396:	683b      	ldr	r3, [r7, #0]
 c002398:	b2da      	uxtb	r2, r3
 c00239a:	4908      	ldr	r1, [pc, #32]	; (c0023bc <__NVIC_SetPriority+0x50>)
 c00239c:	79fb      	ldrb	r3, [r7, #7]
 c00239e:	f003 030f 	and.w	r3, r3, #15
 c0023a2:	3b04      	subs	r3, #4
 c0023a4:	0152      	lsls	r2, r2, #5
 c0023a6:	b2d2      	uxtb	r2, r2
 c0023a8:	440b      	add	r3, r1
 c0023aa:	761a      	strb	r2, [r3, #24]
}
 c0023ac:	bf00      	nop
 c0023ae:	370c      	adds	r7, #12
 c0023b0:	46bd      	mov	sp, r7
 c0023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0023b6:	4770      	bx	lr
 c0023b8:	e000e100 	.word	0xe000e100
 c0023bc:	e000ed00 	.word	0xe000ed00

0c0023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0023c0:	b480      	push	{r7}
 c0023c2:	b089      	sub	sp, #36	; 0x24
 c0023c4:	af00      	add	r7, sp, #0
 c0023c6:	60f8      	str	r0, [r7, #12]
 c0023c8:	60b9      	str	r1, [r7, #8]
 c0023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c0023cc:	68fb      	ldr	r3, [r7, #12]
 c0023ce:	f003 0307 	and.w	r3, r3, #7
 c0023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c0023d4:	69fb      	ldr	r3, [r7, #28]
 c0023d6:	f1c3 0307 	rsb	r3, r3, #7
 c0023da:	2b03      	cmp	r3, #3
 c0023dc:	bf28      	it	cs
 c0023de:	2303      	movcs	r3, #3
 c0023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c0023e2:	69fb      	ldr	r3, [r7, #28]
 c0023e4:	3303      	adds	r3, #3
 c0023e6:	2b06      	cmp	r3, #6
 c0023e8:	d902      	bls.n	c0023f0 <NVIC_EncodePriority+0x30>
 c0023ea:	69fb      	ldr	r3, [r7, #28]
 c0023ec:	3b04      	subs	r3, #4
 c0023ee:	e000      	b.n	c0023f2 <NVIC_EncodePriority+0x32>
 c0023f0:	2300      	movs	r3, #0
 c0023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0023f4:	f04f 32ff 	mov.w	r2, #4294967295
 c0023f8:	69bb      	ldr	r3, [r7, #24]
 c0023fa:	fa02 f303 	lsl.w	r3, r2, r3
 c0023fe:	43da      	mvns	r2, r3
 c002400:	68bb      	ldr	r3, [r7, #8]
 c002402:	401a      	ands	r2, r3
 c002404:	697b      	ldr	r3, [r7, #20]
 c002406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c002408:	f04f 31ff 	mov.w	r1, #4294967295
 c00240c:	697b      	ldr	r3, [r7, #20]
 c00240e:	fa01 f303 	lsl.w	r3, r1, r3
 c002412:	43d9      	mvns	r1, r3
 c002414:	687b      	ldr	r3, [r7, #4]
 c002416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c002418:	4313      	orrs	r3, r2
         );
}
 c00241a:	4618      	mov	r0, r3
 c00241c:	3724      	adds	r7, #36	; 0x24
 c00241e:	46bd      	mov	sp, r7
 c002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002424:	4770      	bx	lr
	...

0c002428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c002428:	b580      	push	{r7, lr}
 c00242a:	b082      	sub	sp, #8
 c00242c:	af00      	add	r7, sp, #0
 c00242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c002430:	687b      	ldr	r3, [r7, #4]
 c002432:	3b01      	subs	r3, #1
 c002434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c002438:	d301      	bcc.n	c00243e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c00243a:	2301      	movs	r3, #1
 c00243c:	e00f      	b.n	c00245e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c00243e:	4a0a      	ldr	r2, [pc, #40]	; (c002468 <SysTick_Config+0x40>)
 c002440:	687b      	ldr	r3, [r7, #4]
 c002442:	3b01      	subs	r3, #1
 c002444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c002446:	2107      	movs	r1, #7
 c002448:	f04f 30ff 	mov.w	r0, #4294967295
 c00244c:	f7ff ff8e 	bl	c00236c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c002450:	4b05      	ldr	r3, [pc, #20]	; (c002468 <SysTick_Config+0x40>)
 c002452:	2200      	movs	r2, #0
 c002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c002456:	4b04      	ldr	r3, [pc, #16]	; (c002468 <SysTick_Config+0x40>)
 c002458:	2207      	movs	r2, #7
 c00245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c00245c:	2300      	movs	r3, #0
}
 c00245e:	4618      	mov	r0, r3
 c002460:	3708      	adds	r7, #8
 c002462:	46bd      	mov	sp, r7
 c002464:	bd80      	pop	{r7, pc}
 c002466:	bf00      	nop
 c002468:	e000e010 	.word	0xe000e010

0c00246c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c00246c:	b580      	push	{r7, lr}
 c00246e:	b082      	sub	sp, #8
 c002470:	af00      	add	r7, sp, #0
 c002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c002474:	6878      	ldr	r0, [r7, #4]
 c002476:	f7ff ff29 	bl	c0022cc <__NVIC_SetPriorityGrouping>
}
 c00247a:	bf00      	nop
 c00247c:	3708      	adds	r7, #8
 c00247e:	46bd      	mov	sp, r7
 c002480:	bd80      	pop	{r7, pc}

0c002482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c002482:	b580      	push	{r7, lr}
 c002484:	b086      	sub	sp, #24
 c002486:	af00      	add	r7, sp, #0
 c002488:	4603      	mov	r3, r0
 c00248a:	60b9      	str	r1, [r7, #8]
 c00248c:	607a      	str	r2, [r7, #4]
 c00248e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c002490:	f7ff ff40 	bl	c002314 <__NVIC_GetPriorityGrouping>
 c002494:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c002496:	687a      	ldr	r2, [r7, #4]
 c002498:	68b9      	ldr	r1, [r7, #8]
 c00249a:	6978      	ldr	r0, [r7, #20]
 c00249c:	f7ff ff90 	bl	c0023c0 <NVIC_EncodePriority>
 c0024a0:	4602      	mov	r2, r0
 c0024a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c0024a6:	4611      	mov	r1, r2
 c0024a8:	4618      	mov	r0, r3
 c0024aa:	f7ff ff5f 	bl	c00236c <__NVIC_SetPriority>
}
 c0024ae:	bf00      	nop
 c0024b0:	3718      	adds	r7, #24
 c0024b2:	46bd      	mov	sp, r7
 c0024b4:	bd80      	pop	{r7, pc}

0c0024b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c0024b6:	b580      	push	{r7, lr}
 c0024b8:	b082      	sub	sp, #8
 c0024ba:	af00      	add	r7, sp, #0
 c0024bc:	4603      	mov	r3, r0
 c0024be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c0024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0024c4:	4618      	mov	r0, r3
 c0024c6:	f7ff ff33 	bl	c002330 <__NVIC_EnableIRQ>
}
 c0024ca:	bf00      	nop
 c0024cc:	3708      	adds	r7, #8
 c0024ce:	46bd      	mov	sp, r7
 c0024d0:	bd80      	pop	{r7, pc}

0c0024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c0024d2:	b580      	push	{r7, lr}
 c0024d4:	b082      	sub	sp, #8
 c0024d6:	af00      	add	r7, sp, #0
 c0024d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c0024da:	6878      	ldr	r0, [r7, #4]
 c0024dc:	f7ff ffa4 	bl	c002428 <SysTick_Config>
 c0024e0:	4603      	mov	r3, r0
}
 c0024e2:	4618      	mov	r0, r3
 c0024e4:	3708      	adds	r7, #8
 c0024e6:	46bd      	mov	sp, r7
 c0024e8:	bd80      	pop	{r7, pc}
	...

0c0024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c0024ec:	b480      	push	{r7}
 c0024ee:	b087      	sub	sp, #28
 c0024f0:	af00      	add	r7, sp, #0
 c0024f2:	6078      	str	r0, [r7, #4]
 c0024f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c0024f6:	2300      	movs	r3, #0
 c0024f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0024fa:	e158      	b.n	c0027ae <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c0024fc:	683b      	ldr	r3, [r7, #0]
 c0024fe:	681a      	ldr	r2, [r3, #0]
 c002500:	2101      	movs	r1, #1
 c002502:	697b      	ldr	r3, [r7, #20]
 c002504:	fa01 f303 	lsl.w	r3, r1, r3
 c002508:	4013      	ands	r3, r2
 c00250a:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 c00250c:	68fb      	ldr	r3, [r7, #12]
 c00250e:	2b00      	cmp	r3, #0
 c002510:	f000 814a 	beq.w	c0027a8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c002514:	683b      	ldr	r3, [r7, #0]
 c002516:	685b      	ldr	r3, [r3, #4]
 c002518:	2b01      	cmp	r3, #1
 c00251a:	d00b      	beq.n	c002534 <HAL_GPIO_Init+0x48>
 c00251c:	683b      	ldr	r3, [r7, #0]
 c00251e:	685b      	ldr	r3, [r3, #4]
 c002520:	2b02      	cmp	r3, #2
 c002522:	d007      	beq.n	c002534 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c002524:	683b      	ldr	r3, [r7, #0]
 c002526:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c002528:	2b11      	cmp	r3, #17
 c00252a:	d003      	beq.n	c002534 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c00252c:	683b      	ldr	r3, [r7, #0]
 c00252e:	685b      	ldr	r3, [r3, #4]
 c002530:	2b12      	cmp	r3, #18
 c002532:	d130      	bne.n	c002596 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c002534:	687b      	ldr	r3, [r7, #4]
 c002536:	689b      	ldr	r3, [r3, #8]
 c002538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c00253a:	697b      	ldr	r3, [r7, #20]
 c00253c:	005b      	lsls	r3, r3, #1
 c00253e:	2203      	movs	r2, #3
 c002540:	fa02 f303 	lsl.w	r3, r2, r3
 c002544:	43db      	mvns	r3, r3
 c002546:	693a      	ldr	r2, [r7, #16]
 c002548:	4013      	ands	r3, r2
 c00254a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c00254c:	683b      	ldr	r3, [r7, #0]
 c00254e:	68da      	ldr	r2, [r3, #12]
 c002550:	697b      	ldr	r3, [r7, #20]
 c002552:	005b      	lsls	r3, r3, #1
 c002554:	fa02 f303 	lsl.w	r3, r2, r3
 c002558:	693a      	ldr	r2, [r7, #16]
 c00255a:	4313      	orrs	r3, r2
 c00255c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c00255e:	687b      	ldr	r3, [r7, #4]
 c002560:	693a      	ldr	r2, [r7, #16]
 c002562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c002564:	687b      	ldr	r3, [r7, #4]
 c002566:	685b      	ldr	r3, [r3, #4]
 c002568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c00256a:	2201      	movs	r2, #1
 c00256c:	697b      	ldr	r3, [r7, #20]
 c00256e:	fa02 f303 	lsl.w	r3, r2, r3
 c002572:	43db      	mvns	r3, r3
 c002574:	693a      	ldr	r2, [r7, #16]
 c002576:	4013      	ands	r3, r2
 c002578:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c00257a:	683b      	ldr	r3, [r7, #0]
 c00257c:	685b      	ldr	r3, [r3, #4]
 c00257e:	091b      	lsrs	r3, r3, #4
 c002580:	f003 0201 	and.w	r2, r3, #1
 c002584:	697b      	ldr	r3, [r7, #20]
 c002586:	fa02 f303 	lsl.w	r3, r2, r3
 c00258a:	693a      	ldr	r2, [r7, #16]
 c00258c:	4313      	orrs	r3, r2
 c00258e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c002590:	687b      	ldr	r3, [r7, #4]
 c002592:	693a      	ldr	r2, [r7, #16]
 c002594:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 c002596:	687b      	ldr	r3, [r7, #4]
 c002598:	68db      	ldr	r3, [r3, #12]
 c00259a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c00259c:	697b      	ldr	r3, [r7, #20]
 c00259e:	005b      	lsls	r3, r3, #1
 c0025a0:	2203      	movs	r2, #3
 c0025a2:	fa02 f303 	lsl.w	r3, r2, r3
 c0025a6:	43db      	mvns	r3, r3
 c0025a8:	693a      	ldr	r2, [r7, #16]
 c0025aa:	4013      	ands	r3, r2
 c0025ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c0025ae:	683b      	ldr	r3, [r7, #0]
 c0025b0:	689a      	ldr	r2, [r3, #8]
 c0025b2:	697b      	ldr	r3, [r7, #20]
 c0025b4:	005b      	lsls	r3, r3, #1
 c0025b6:	fa02 f303 	lsl.w	r3, r2, r3
 c0025ba:	693a      	ldr	r2, [r7, #16]
 c0025bc:	4313      	orrs	r3, r2
 c0025be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 c0025c0:	687b      	ldr	r3, [r7, #4]
 c0025c2:	693a      	ldr	r2, [r7, #16]
 c0025c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0025c6:	683b      	ldr	r3, [r7, #0]
 c0025c8:	685b      	ldr	r3, [r3, #4]
 c0025ca:	2b02      	cmp	r3, #2
 c0025cc:	d003      	beq.n	c0025d6 <HAL_GPIO_Init+0xea>
 c0025ce:	683b      	ldr	r3, [r7, #0]
 c0025d0:	685b      	ldr	r3, [r3, #4]
 c0025d2:	2b12      	cmp	r3, #18
 c0025d4:	d123      	bne.n	c00261e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c0025d6:	697b      	ldr	r3, [r7, #20]
 c0025d8:	08da      	lsrs	r2, r3, #3
 c0025da:	687b      	ldr	r3, [r7, #4]
 c0025dc:	3208      	adds	r2, #8
 c0025de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0025e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c0025e4:	697b      	ldr	r3, [r7, #20]
 c0025e6:	f003 0307 	and.w	r3, r3, #7
 c0025ea:	009b      	lsls	r3, r3, #2
 c0025ec:	220f      	movs	r2, #15
 c0025ee:	fa02 f303 	lsl.w	r3, r2, r3
 c0025f2:	43db      	mvns	r3, r3
 c0025f4:	693a      	ldr	r2, [r7, #16]
 c0025f6:	4013      	ands	r3, r2
 c0025f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c0025fa:	683b      	ldr	r3, [r7, #0]
 c0025fc:	691a      	ldr	r2, [r3, #16]
 c0025fe:	697b      	ldr	r3, [r7, #20]
 c002600:	f003 0307 	and.w	r3, r3, #7
 c002604:	009b      	lsls	r3, r3, #2
 c002606:	fa02 f303 	lsl.w	r3, r2, r3
 c00260a:	693a      	ldr	r2, [r7, #16]
 c00260c:	4313      	orrs	r3, r2
 c00260e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c002610:	697b      	ldr	r3, [r7, #20]
 c002612:	08da      	lsrs	r2, r3, #3
 c002614:	687b      	ldr	r3, [r7, #4]
 c002616:	3208      	adds	r2, #8
 c002618:	6939      	ldr	r1, [r7, #16]
 c00261a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c00261e:	687b      	ldr	r3, [r7, #4]
 c002620:	681b      	ldr	r3, [r3, #0]
 c002622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c002624:	697b      	ldr	r3, [r7, #20]
 c002626:	005b      	lsls	r3, r3, #1
 c002628:	2203      	movs	r2, #3
 c00262a:	fa02 f303 	lsl.w	r3, r2, r3
 c00262e:	43db      	mvns	r3, r3
 c002630:	693a      	ldr	r2, [r7, #16]
 c002632:	4013      	ands	r3, r2
 c002634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c002636:	683b      	ldr	r3, [r7, #0]
 c002638:	685b      	ldr	r3, [r3, #4]
 c00263a:	f003 0203 	and.w	r2, r3, #3
 c00263e:	697b      	ldr	r3, [r7, #20]
 c002640:	005b      	lsls	r3, r3, #1
 c002642:	fa02 f303 	lsl.w	r3, r2, r3
 c002646:	693a      	ldr	r2, [r7, #16]
 c002648:	4313      	orrs	r3, r2
 c00264a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c00264c:	687b      	ldr	r3, [r7, #4]
 c00264e:	693a      	ldr	r2, [r7, #16]
 c002650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c002652:	683b      	ldr	r3, [r7, #0]
 c002654:	685b      	ldr	r3, [r3, #4]
 c002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00265a:	2b00      	cmp	r3, #0
 c00265c:	f000 80a4 	beq.w	c0027a8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c002660:	4a5a      	ldr	r2, [pc, #360]	; (c0027cc <HAL_GPIO_Init+0x2e0>)
 c002662:	697b      	ldr	r3, [r7, #20]
 c002664:	089b      	lsrs	r3, r3, #2
 c002666:	3318      	adds	r3, #24
 c002668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00266c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c00266e:	697b      	ldr	r3, [r7, #20]
 c002670:	f003 0303 	and.w	r3, r3, #3
 c002674:	00db      	lsls	r3, r3, #3
 c002676:	220f      	movs	r2, #15
 c002678:	fa02 f303 	lsl.w	r3, r2, r3
 c00267c:	43db      	mvns	r3, r3
 c00267e:	693a      	ldr	r2, [r7, #16]
 c002680:	4013      	ands	r3, r2
 c002682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c002684:	687b      	ldr	r3, [r7, #4]
 c002686:	4a52      	ldr	r2, [pc, #328]	; (c0027d0 <HAL_GPIO_Init+0x2e4>)
 c002688:	4293      	cmp	r3, r2
 c00268a:	d025      	beq.n	c0026d8 <HAL_GPIO_Init+0x1ec>
 c00268c:	687b      	ldr	r3, [r7, #4]
 c00268e:	4a51      	ldr	r2, [pc, #324]	; (c0027d4 <HAL_GPIO_Init+0x2e8>)
 c002690:	4293      	cmp	r3, r2
 c002692:	d01f      	beq.n	c0026d4 <HAL_GPIO_Init+0x1e8>
 c002694:	687b      	ldr	r3, [r7, #4]
 c002696:	4a50      	ldr	r2, [pc, #320]	; (c0027d8 <HAL_GPIO_Init+0x2ec>)
 c002698:	4293      	cmp	r3, r2
 c00269a:	d019      	beq.n	c0026d0 <HAL_GPIO_Init+0x1e4>
 c00269c:	687b      	ldr	r3, [r7, #4]
 c00269e:	4a4f      	ldr	r2, [pc, #316]	; (c0027dc <HAL_GPIO_Init+0x2f0>)
 c0026a0:	4293      	cmp	r3, r2
 c0026a2:	d013      	beq.n	c0026cc <HAL_GPIO_Init+0x1e0>
 c0026a4:	687b      	ldr	r3, [r7, #4]
 c0026a6:	4a4e      	ldr	r2, [pc, #312]	; (c0027e0 <HAL_GPIO_Init+0x2f4>)
 c0026a8:	4293      	cmp	r3, r2
 c0026aa:	d00d      	beq.n	c0026c8 <HAL_GPIO_Init+0x1dc>
 c0026ac:	687b      	ldr	r3, [r7, #4]
 c0026ae:	4a4d      	ldr	r2, [pc, #308]	; (c0027e4 <HAL_GPIO_Init+0x2f8>)
 c0026b0:	4293      	cmp	r3, r2
 c0026b2:	d007      	beq.n	c0026c4 <HAL_GPIO_Init+0x1d8>
 c0026b4:	687b      	ldr	r3, [r7, #4]
 c0026b6:	4a4c      	ldr	r2, [pc, #304]	; (c0027e8 <HAL_GPIO_Init+0x2fc>)
 c0026b8:	4293      	cmp	r3, r2
 c0026ba:	d101      	bne.n	c0026c0 <HAL_GPIO_Init+0x1d4>
 c0026bc:	2306      	movs	r3, #6
 c0026be:	e00c      	b.n	c0026da <HAL_GPIO_Init+0x1ee>
 c0026c0:	2307      	movs	r3, #7
 c0026c2:	e00a      	b.n	c0026da <HAL_GPIO_Init+0x1ee>
 c0026c4:	2305      	movs	r3, #5
 c0026c6:	e008      	b.n	c0026da <HAL_GPIO_Init+0x1ee>
 c0026c8:	2304      	movs	r3, #4
 c0026ca:	e006      	b.n	c0026da <HAL_GPIO_Init+0x1ee>
 c0026cc:	2303      	movs	r3, #3
 c0026ce:	e004      	b.n	c0026da <HAL_GPIO_Init+0x1ee>
 c0026d0:	2302      	movs	r3, #2
 c0026d2:	e002      	b.n	c0026da <HAL_GPIO_Init+0x1ee>
 c0026d4:	2301      	movs	r3, #1
 c0026d6:	e000      	b.n	c0026da <HAL_GPIO_Init+0x1ee>
 c0026d8:	2300      	movs	r3, #0
 c0026da:	697a      	ldr	r2, [r7, #20]
 c0026dc:	f002 0203 	and.w	r2, r2, #3
 c0026e0:	00d2      	lsls	r2, r2, #3
 c0026e2:	4093      	lsls	r3, r2
 c0026e4:	693a      	ldr	r2, [r7, #16]
 c0026e6:	4313      	orrs	r3, r2
 c0026e8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c0026ea:	4938      	ldr	r1, [pc, #224]	; (c0027cc <HAL_GPIO_Init+0x2e0>)
 c0026ec:	697b      	ldr	r3, [r7, #20]
 c0026ee:	089b      	lsrs	r3, r3, #2
 c0026f0:	3318      	adds	r3, #24
 c0026f2:	693a      	ldr	r2, [r7, #16]
 c0026f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 c0026f8:	4b34      	ldr	r3, [pc, #208]	; (c0027cc <HAL_GPIO_Init+0x2e0>)
 c0026fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0026fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c002700:	68fb      	ldr	r3, [r7, #12]
 c002702:	43db      	mvns	r3, r3
 c002704:	693a      	ldr	r2, [r7, #16]
 c002706:	4013      	ands	r3, r2
 c002708:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c00270a:	683b      	ldr	r3, [r7, #0]
 c00270c:	685b      	ldr	r3, [r3, #4]
 c00270e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c002712:	2b00      	cmp	r3, #0
 c002714:	d003      	beq.n	c00271e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 c002716:	693a      	ldr	r2, [r7, #16]
 c002718:	68fb      	ldr	r3, [r7, #12]
 c00271a:	4313      	orrs	r3, r2
 c00271c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c00271e:	4a2b      	ldr	r2, [pc, #172]	; (c0027cc <HAL_GPIO_Init+0x2e0>)
 c002720:	693b      	ldr	r3, [r7, #16]
 c002722:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 c002726:	4b29      	ldr	r3, [pc, #164]	; (c0027cc <HAL_GPIO_Init+0x2e0>)
 c002728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c00272c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00272e:	68fb      	ldr	r3, [r7, #12]
 c002730:	43db      	mvns	r3, r3
 c002732:	693a      	ldr	r2, [r7, #16]
 c002734:	4013      	ands	r3, r2
 c002736:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c002738:	683b      	ldr	r3, [r7, #0]
 c00273a:	685b      	ldr	r3, [r3, #4]
 c00273c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002740:	2b00      	cmp	r3, #0
 c002742:	d003      	beq.n	c00274c <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 c002744:	693a      	ldr	r2, [r7, #16]
 c002746:	68fb      	ldr	r3, [r7, #12]
 c002748:	4313      	orrs	r3, r2
 c00274a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c00274c:	4a1f      	ldr	r2, [pc, #124]	; (c0027cc <HAL_GPIO_Init+0x2e0>)
 c00274e:	693b      	ldr	r3, [r7, #16]
 c002750:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c002754:	4b1d      	ldr	r3, [pc, #116]	; (c0027cc <HAL_GPIO_Init+0x2e0>)
 c002756:	681b      	ldr	r3, [r3, #0]
 c002758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00275a:	68fb      	ldr	r3, [r7, #12]
 c00275c:	43db      	mvns	r3, r3
 c00275e:	693a      	ldr	r2, [r7, #16]
 c002760:	4013      	ands	r3, r2
 c002762:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c002764:	683b      	ldr	r3, [r7, #0]
 c002766:	685b      	ldr	r3, [r3, #4]
 c002768:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c00276c:	2b00      	cmp	r3, #0
 c00276e:	d003      	beq.n	c002778 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 c002770:	693a      	ldr	r2, [r7, #16]
 c002772:	68fb      	ldr	r3, [r7, #12]
 c002774:	4313      	orrs	r3, r2
 c002776:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c002778:	4a14      	ldr	r2, [pc, #80]	; (c0027cc <HAL_GPIO_Init+0x2e0>)
 c00277a:	693b      	ldr	r3, [r7, #16]
 c00277c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c00277e:	4b13      	ldr	r3, [pc, #76]	; (c0027cc <HAL_GPIO_Init+0x2e0>)
 c002780:	685b      	ldr	r3, [r3, #4]
 c002782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c002784:	68fb      	ldr	r3, [r7, #12]
 c002786:	43db      	mvns	r3, r3
 c002788:	693a      	ldr	r2, [r7, #16]
 c00278a:	4013      	ands	r3, r2
 c00278c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c00278e:	683b      	ldr	r3, [r7, #0]
 c002790:	685b      	ldr	r3, [r3, #4]
 c002792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c002796:	2b00      	cmp	r3, #0
 c002798:	d003      	beq.n	c0027a2 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 c00279a:	693a      	ldr	r2, [r7, #16]
 c00279c:	68fb      	ldr	r3, [r7, #12]
 c00279e:	4313      	orrs	r3, r2
 c0027a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c0027a2:	4a0a      	ldr	r2, [pc, #40]	; (c0027cc <HAL_GPIO_Init+0x2e0>)
 c0027a4:	693b      	ldr	r3, [r7, #16]
 c0027a6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 c0027a8:	697b      	ldr	r3, [r7, #20]
 c0027aa:	3301      	adds	r3, #1
 c0027ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0027ae:	683b      	ldr	r3, [r7, #0]
 c0027b0:	681a      	ldr	r2, [r3, #0]
 c0027b2:	697b      	ldr	r3, [r7, #20]
 c0027b4:	fa22 f303 	lsr.w	r3, r2, r3
 c0027b8:	2b00      	cmp	r3, #0
 c0027ba:	f47f ae9f 	bne.w	c0024fc <HAL_GPIO_Init+0x10>
  }
}
 c0027be:	bf00      	nop
 c0027c0:	bf00      	nop
 c0027c2:	371c      	adds	r7, #28
 c0027c4:	46bd      	mov	sp, r7
 c0027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0027ca:	4770      	bx	lr
 c0027cc:	5002f400 	.word	0x5002f400
 c0027d0:	52020000 	.word	0x52020000
 c0027d4:	52020400 	.word	0x52020400
 c0027d8:	52020800 	.word	0x52020800
 c0027dc:	52020c00 	.word	0x52020c00
 c0027e0:	52021000 	.word	0x52021000
 c0027e4:	52021400 	.word	0x52021400
 c0027e8:	52021800 	.word	0x52021800

0c0027ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c0027ec:	b480      	push	{r7}
 c0027ee:	b083      	sub	sp, #12
 c0027f0:	af00      	add	r7, sp, #0
 c0027f2:	6078      	str	r0, [r7, #4]
 c0027f4:	460b      	mov	r3, r1
 c0027f6:	807b      	strh	r3, [r7, #2]
 c0027f8:	4613      	mov	r3, r2
 c0027fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c0027fc:	787b      	ldrb	r3, [r7, #1]
 c0027fe:	2b00      	cmp	r3, #0
 c002800:	d003      	beq.n	c00280a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c002802:	887a      	ldrh	r2, [r7, #2]
 c002804:	687b      	ldr	r3, [r7, #4]
 c002806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c002808:	e002      	b.n	c002810 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c00280a:	887a      	ldrh	r2, [r7, #2]
 c00280c:	687b      	ldr	r3, [r7, #4]
 c00280e:	629a      	str	r2, [r3, #40]	; 0x28
}
 c002810:	bf00      	nop
 c002812:	370c      	adds	r7, #12
 c002814:	46bd      	mov	sp, r7
 c002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00281a:	4770      	bx	lr

0c00281c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 c00281c:	b480      	push	{r7}
 c00281e:	b085      	sub	sp, #20
 c002820:	af00      	add	r7, sp, #0
 c002822:	6078      	str	r0, [r7, #4]
 c002824:	460b      	mov	r3, r1
 c002826:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 c002828:	687b      	ldr	r3, [r7, #4]
 c00282a:	695b      	ldr	r3, [r3, #20]
 c00282c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 c00282e:	887a      	ldrh	r2, [r7, #2]
 c002830:	68fb      	ldr	r3, [r7, #12]
 c002832:	4013      	ands	r3, r2
 c002834:	041a      	lsls	r2, r3, #16
 c002836:	68fb      	ldr	r3, [r7, #12]
 c002838:	43d9      	mvns	r1, r3
 c00283a:	887b      	ldrh	r3, [r7, #2]
 c00283c:	400b      	ands	r3, r1
 c00283e:	431a      	orrs	r2, r3
 c002840:	687b      	ldr	r3, [r7, #4]
 c002842:	619a      	str	r2, [r3, #24]
}
 c002844:	bf00      	nop
 c002846:	3714      	adds	r7, #20
 c002848:	46bd      	mov	sp, r7
 c00284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00284e:	4770      	bx	lr

0c002850 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c002850:	b480      	push	{r7}
 c002852:	b089      	sub	sp, #36	; 0x24
 c002854:	af00      	add	r7, sp, #0
 c002856:	60f8      	str	r0, [r7, #12]
 c002858:	460b      	mov	r3, r1
 c00285a:	607a      	str	r2, [r7, #4]
 c00285c:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c00285e:	2300      	movs	r3, #0
 c002860:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c002862:	68fb      	ldr	r3, [r7, #12]
 c002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002866:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c002868:	e01b      	b.n	c0028a2 <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c00286a:	897a      	ldrh	r2, [r7, #10]
 c00286c:	2101      	movs	r1, #1
 c00286e:	69fb      	ldr	r3, [r7, #28]
 c002870:	fa01 f303 	lsl.w	r3, r1, r3
 c002874:	4013      	ands	r3, r2
 c002876:	617b      	str	r3, [r7, #20]

    if(iocurrent != 0U)
 c002878:	697b      	ldr	r3, [r7, #20]
 c00287a:	2b00      	cmp	r3, #0
 c00287c:	d00e      	beq.n	c00289c <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c00287e:	2201      	movs	r2, #1
 c002880:	69fb      	ldr	r3, [r7, #28]
 c002882:	fa02 f303 	lsl.w	r3, r2, r3
 c002886:	43db      	mvns	r3, r3
 c002888:	69ba      	ldr	r2, [r7, #24]
 c00288a:	4013      	ands	r3, r2
 c00288c:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c00288e:	687a      	ldr	r2, [r7, #4]
 c002890:	69fb      	ldr	r3, [r7, #28]
 c002892:	fa02 f303 	lsl.w	r3, r2, r3
 c002896:	69ba      	ldr	r2, [r7, #24]
 c002898:	4313      	orrs	r3, r2
 c00289a:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c00289c:	69fb      	ldr	r3, [r7, #28]
 c00289e:	3301      	adds	r3, #1
 c0028a0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c0028a2:	897a      	ldrh	r2, [r7, #10]
 c0028a4:	69fb      	ldr	r3, [r7, #28]
 c0028a6:	fa42 f303 	asr.w	r3, r2, r3
 c0028aa:	2b00      	cmp	r3, #0
 c0028ac:	d1dd      	bne.n	c00286a <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c0028ae:	68fb      	ldr	r3, [r7, #12]
 c0028b0:	69ba      	ldr	r2, [r7, #24]
 c0028b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 c0028b4:	bf00      	nop
 c0028b6:	3724      	adds	r7, #36	; 0x24
 c0028b8:	46bd      	mov	sp, r7
 c0028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0028be:	4770      	bx	lr

0c0028c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c0028c0:	b480      	push	{r7}
 c0028c2:	b085      	sub	sp, #20
 c0028c4:	af00      	add	r7, sp, #0
 c0028c6:	6078      	str	r0, [r7, #4]
 c0028c8:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c0028ca:	683b      	ldr	r3, [r7, #0]
 c0028cc:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 c0028d0:	d216      	bcs.n	c002900 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c0028d2:	687b      	ldr	r3, [r7, #4]
 c0028d4:	0f1b      	lsrs	r3, r3, #28
 c0028d6:	015a      	lsls	r2, r3, #5
 c0028d8:	687b      	ldr	r3, [r7, #4]
 c0028da:	f003 031f 	and.w	r3, r3, #31
 c0028de:	4413      	add	r3, r2
 c0028e0:	2b32      	cmp	r3, #50	; 0x32
 c0028e2:	d80d      	bhi.n	c002900 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c0028e4:	687b      	ldr	r3, [r7, #4]
 c0028e6:	f003 0320 	and.w	r3, r3, #32
 c0028ea:	2b00      	cmp	r3, #0
 c0028ec:	d00a      	beq.n	c002904 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
 c0028ee:	687b      	ldr	r3, [r7, #4]
 c0028f0:	0f1b      	lsrs	r3, r3, #28
 c0028f2:	015a      	lsls	r2, r3, #5
 c0028f4:	687b      	ldr	r3, [r7, #4]
 c0028f6:	f003 031f 	and.w	r3, r3, #31
 c0028fa:	4413      	add	r3, r2
 c0028fc:	2b00      	cmp	r3, #0
 c0028fe:	d001      	beq.n	c002904 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
  {
    return HAL_ERROR;
 c002900:	2301      	movs	r3, #1
 c002902:	e0a4      	b.n	c002a4e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18e>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c002904:	687b      	ldr	r3, [r7, #4]
 c002906:	f003 0320 	and.w	r3, r3, #32
 c00290a:	2b00      	cmp	r3, #0
 c00290c:	d04a      	beq.n	c0029a4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xe4>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c00290e:	683a      	ldr	r2, [r7, #0]
 c002910:	f240 1301 	movw	r3, #257	; 0x101
 c002914:	4013      	ands	r3, r2
 c002916:	f240 1201 	movw	r2, #257	; 0x101
 c00291a:	4293      	cmp	r3, r2
 c00291c:	d10c      	bne.n	c002938 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x78>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c00291e:	4b4f      	ldr	r3, [pc, #316]	; (c002a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c002920:	691b      	ldr	r3, [r3, #16]
 c002922:	4b4e      	ldr	r3, [pc, #312]	; (c002a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c002924:	f04f 32ff 	mov.w	r2, #4294967295
 c002928:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c00292a:	4b4c      	ldr	r3, [pc, #304]	; (c002a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00292c:	695a      	ldr	r2, [r3, #20]
 c00292e:	494b      	ldr	r1, [pc, #300]	; (c002a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c002930:	4b4b      	ldr	r3, [pc, #300]	; (c002a60 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>)
 c002932:	4313      	orrs	r3, r2
 c002934:	614b      	str	r3, [r1, #20]
 c002936:	e00f      	b.n	c002958 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c002938:	683b      	ldr	r3, [r7, #0]
 c00293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00293e:	2b00      	cmp	r3, #0
 c002940:	d00a      	beq.n	c002958 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c002942:	4b46      	ldr	r3, [pc, #280]	; (c002a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c002944:	691b      	ldr	r3, [r3, #16]
 c002946:	4b45      	ldr	r3, [pc, #276]	; (c002a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c002948:	2200      	movs	r2, #0
 c00294a:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c00294c:	4b43      	ldr	r3, [pc, #268]	; (c002a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00294e:	695a      	ldr	r2, [r3, #20]
 c002950:	4942      	ldr	r1, [pc, #264]	; (c002a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c002952:	4b44      	ldr	r3, [pc, #272]	; (c002a64 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002954:	4013      	ands	r3, r2
 c002956:	614b      	str	r3, [r1, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c002958:	683a      	ldr	r2, [r7, #0]
 c00295a:	f240 2302 	movw	r3, #514	; 0x202
 c00295e:	4013      	ands	r3, r2
 c002960:	f240 2202 	movw	r2, #514	; 0x202
 c002964:	4293      	cmp	r3, r2
 c002966:	d10c      	bne.n	c002982 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xc2>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c002968:	4b3c      	ldr	r3, [pc, #240]	; (c002a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00296a:	6a1b      	ldr	r3, [r3, #32]
 c00296c:	4b3b      	ldr	r3, [pc, #236]	; (c002a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00296e:	f04f 32ff 	mov.w	r2, #4294967295
 c002972:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c002974:	4b39      	ldr	r3, [pc, #228]	; (c002a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c002976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c002978:	4938      	ldr	r1, [pc, #224]	; (c002a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00297a:	4b39      	ldr	r3, [pc, #228]	; (c002a60 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>)
 c00297c:	4313      	orrs	r3, r2
 c00297e:	624b      	str	r3, [r1, #36]	; 0x24
 c002980:	e064      	b.n	c002a4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c002982:	683b      	ldr	r3, [r7, #0]
 c002984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c002988:	2b00      	cmp	r3, #0
 c00298a:	d05f      	beq.n	c002a4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    {
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c00298c:	4b33      	ldr	r3, [pc, #204]	; (c002a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00298e:	6a1b      	ldr	r3, [r3, #32]
 c002990:	4b32      	ldr	r3, [pc, #200]	; (c002a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c002992:	2200      	movs	r2, #0
 c002994:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c002996:	4b31      	ldr	r3, [pc, #196]	; (c002a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c002998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c00299a:	4930      	ldr	r1, [pc, #192]	; (c002a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00299c:	4b31      	ldr	r3, [pc, #196]	; (c002a64 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00299e:	4013      	ands	r3, r2
 c0029a0:	624b      	str	r3, [r1, #36]	; 0x24
 c0029a2:	e053      	b.n	c002a4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0029a4:	687b      	ldr	r3, [r7, #4]
 c0029a6:	0f1a      	lsrs	r2, r3, #28
 c0029a8:	4b2f      	ldr	r3, [pc, #188]	; (c002a68 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a8>)
 c0029aa:	4413      	add	r3, r2
 c0029ac:	009b      	lsls	r3, r3, #2
 c0029ae:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c0029b0:	683a      	ldr	r2, [r7, #0]
 c0029b2:	f240 1301 	movw	r3, #257	; 0x101
 c0029b6:	4013      	ands	r3, r2
 c0029b8:	f240 1201 	movw	r2, #257	; 0x101
 c0029bc:	4293      	cmp	r3, r2
 c0029be:	d10a      	bne.n	c0029d6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x116>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0029c0:	68fb      	ldr	r3, [r7, #12]
 c0029c2:	6819      	ldr	r1, [r3, #0]
 c0029c4:	687b      	ldr	r3, [r7, #4]
 c0029c6:	f003 031f 	and.w	r3, r3, #31
 c0029ca:	2201      	movs	r2, #1
 c0029cc:	409a      	lsls	r2, r3
 c0029ce:	68fb      	ldr	r3, [r7, #12]
 c0029d0:	430a      	orrs	r2, r1
 c0029d2:	601a      	str	r2, [r3, #0]
 c0029d4:	e010      	b.n	c0029f8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x138>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c0029d6:	683b      	ldr	r3, [r7, #0]
 c0029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0029dc:	2b00      	cmp	r3, #0
 c0029de:	d00b      	beq.n	c0029f8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x138>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0029e0:	68fb      	ldr	r3, [r7, #12]
 c0029e2:	6819      	ldr	r1, [r3, #0]
 c0029e4:	687b      	ldr	r3, [r7, #4]
 c0029e6:	f003 031f 	and.w	r3, r3, #31
 c0029ea:	2201      	movs	r2, #1
 c0029ec:	fa02 f303 	lsl.w	r3, r2, r3
 c0029f0:	43da      	mvns	r2, r3
 c0029f2:	68fb      	ldr	r3, [r7, #12]
 c0029f4:	400a      	ands	r2, r1
 c0029f6:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC->PRIVCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0029f8:	687b      	ldr	r3, [r7, #4]
 c0029fa:	0f1a      	lsrs	r2, r3, #28
 c0029fc:	4b1b      	ldr	r3, [pc, #108]	; (c002a6c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1ac>)
 c0029fe:	4413      	add	r3, r2
 c002a00:	009b      	lsls	r3, r3, #2
 c002a02:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c002a04:	683a      	ldr	r2, [r7, #0]
 c002a06:	f240 2302 	movw	r3, #514	; 0x202
 c002a0a:	4013      	ands	r3, r2
 c002a0c:	f240 2202 	movw	r2, #514	; 0x202
 c002a10:	4293      	cmp	r3, r2
 c002a12:	d10a      	bne.n	c002a2a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x16a>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002a14:	68fb      	ldr	r3, [r7, #12]
 c002a16:	6819      	ldr	r1, [r3, #0]
 c002a18:	687b      	ldr	r3, [r7, #4]
 c002a1a:	f003 031f 	and.w	r3, r3, #31
 c002a1e:	2201      	movs	r2, #1
 c002a20:	409a      	lsls	r2, r3
 c002a22:	68fb      	ldr	r3, [r7, #12]
 c002a24:	430a      	orrs	r2, r1
 c002a26:	601a      	str	r2, [r3, #0]
 c002a28:	e010      	b.n	c002a4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c002a2a:	683b      	ldr	r3, [r7, #0]
 c002a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c002a30:	2b00      	cmp	r3, #0
 c002a32:	d00b      	beq.n	c002a4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002a34:	68fb      	ldr	r3, [r7, #12]
 c002a36:	6819      	ldr	r1, [r3, #0]
 c002a38:	687b      	ldr	r3, [r7, #4]
 c002a3a:	f003 031f 	and.w	r3, r3, #31
 c002a3e:	2201      	movs	r2, #1
 c002a40:	fa02 f303 	lsl.w	r3, r2, r3
 c002a44:	43da      	mvns	r2, r3
 c002a46:	68fb      	ldr	r3, [r7, #12]
 c002a48:	400a      	ands	r2, r1
 c002a4a:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c002a4c:	2300      	movs	r3, #0
}
 c002a4e:	4618      	mov	r0, r3
 c002a50:	3714      	adds	r7, #20
 c002a52:	46bd      	mov	sp, r7
 c002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002a58:	4770      	bx	lr
 c002a5a:	bf00      	nop
 c002a5c:	50032400 	.word	0x50032400
 c002a60:	00076fff 	.word	0x00076fff
 c002a64:	fff89000 	.word	0xfff89000
 c002a68:	1400c904 	.word	0x1400c904
 c002a6c:	1400c908 	.word	0x1400c908

0c002a70 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c002a70:	b480      	push	{r7}
 c002a72:	b089      	sub	sp, #36	; 0x24
 c002a74:	af00      	add	r7, sp, #0
 c002a76:	6078      	str	r0, [r7, #4]
 c002a78:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c002a7a:	687b      	ldr	r3, [r7, #4]
 c002a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c002a80:	d00b      	beq.n	c002a9a <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c002a82:	687b      	ldr	r3, [r7, #4]
 c002a84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c002a88:	d007      	beq.n	c002a9a <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c002a8a:	687b      	ldr	r3, [r7, #4]
 c002a8c:	4a36      	ldr	r2, [pc, #216]	; (c002b68 <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c002a8e:	4293      	cmp	r3, r2
 c002a90:	d003      	beq.n	c002a9a <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c002a92:	687b      	ldr	r3, [r7, #4]
 c002a94:	4a35      	ldr	r2, [pc, #212]	; (c002b6c <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c002a96:	4293      	cmp	r3, r2
 c002a98:	d111      	bne.n	c002abe <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c002a9a:	683b      	ldr	r3, [r7, #0]
 c002a9c:	681b      	ldr	r3, [r3, #0]
 c002a9e:	2b00      	cmp	r3, #0
 c002aa0:	d004      	beq.n	c002aac <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c002aa2:	683b      	ldr	r3, [r7, #0]
 c002aa4:	681b      	ldr	r3, [r3, #0]
 c002aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c002aaa:	d108      	bne.n	c002abe <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c002aac:	683b      	ldr	r3, [r7, #0]
 c002aae:	685b      	ldr	r3, [r3, #4]
 c002ab0:	2b00      	cmp	r3, #0
 c002ab2:	d006      	beq.n	c002ac2 <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c002ab4:	683b      	ldr	r3, [r7, #0]
 c002ab6:	685b      	ldr	r3, [r3, #4]
 c002ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c002abc:	d001      	beq.n	c002ac2 <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c002abe:	2301      	movs	r3, #1
 c002ac0:	e04b      	b.n	c002b5a <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c002ac2:	683b      	ldr	r3, [r7, #0]
 c002ac4:	685b      	ldr	r3, [r3, #4]
 c002ac6:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c002ac8:	683b      	ldr	r3, [r7, #0]
 c002aca:	681b      	ldr	r3, [r3, #0]
 c002acc:	693a      	ldr	r2, [r7, #16]
 c002ace:	4313      	orrs	r3, r2
 c002ad0:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c002ad2:	687b      	ldr	r3, [r7, #4]
 c002ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c002ad8:	d003      	beq.n	c002ae2 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c002ada:	687b      	ldr	r3, [r7, #4]
 c002adc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c002ae0:	d105      	bne.n	c002aee <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c002ae2:	4b23      	ldr	r3, [pc, #140]	; (c002b70 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c002ae4:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c002ae6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c002aea:	61bb      	str	r3, [r7, #24]
 c002aec:	e004      	b.n	c002af8 <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c002aee:	4b21      	ldr	r3, [pc, #132]	; (c002b74 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c002af0:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c002af2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c002af6:	61bb      	str	r3, [r7, #24]
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c002af8:	69fb      	ldr	r3, [r7, #28]
 c002afa:	681b      	ldr	r3, [r3, #0]
 c002afc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c002b00:	693b      	ldr	r3, [r7, #16]
 c002b02:	431a      	orrs	r2, r3
 c002b04:	69fb      	ldr	r3, [r7, #28]
 c002b06:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c002b08:	69bb      	ldr	r3, [r7, #24]
 c002b0a:	0b5b      	lsrs	r3, r3, #13
 c002b0c:	2201      	movs	r2, #1
 c002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 c002b12:	3b01      	subs	r3, #1
 c002b14:	60fb      	str	r3, [r7, #12]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c002b16:	69fb      	ldr	r3, [r7, #28]
 c002b18:	691a      	ldr	r2, [r3, #16]
 c002b1a:	68fb      	ldr	r3, [r7, #12]
 c002b1c:	43db      	mvns	r3, r3
 c002b1e:	401a      	ands	r2, r3
 c002b20:	683b      	ldr	r3, [r7, #0]
 c002b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c002b24:	431a      	orrs	r2, r3
 c002b26:	69fb      	ldr	r3, [r7, #28]
 c002b28:	611a      	str	r2, [r3, #16]

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c002b2a:	69bb      	ldr	r3, [r7, #24]
 c002b2c:	0b5b      	lsrs	r3, r3, #13
 c002b2e:	60bb      	str	r3, [r7, #8]
  for (i = 0U; i < size_in_superblocks; i++)
 c002b30:	2300      	movs	r3, #0
 c002b32:	617b      	str	r3, [r7, #20]
 c002b34:	e00c      	b.n	c002b50 <HAL_GTZC_MPCBB_ConfigMem+0xe0>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c002b36:	683b      	ldr	r3, [r7, #0]
 c002b38:	697a      	ldr	r2, [r7, #20]
 c002b3a:	3202      	adds	r2, #2
 c002b3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c002b40:	69fb      	ldr	r3, [r7, #28]
 c002b42:	697a      	ldr	r2, [r7, #20]
 c002b44:	3240      	adds	r2, #64	; 0x40
 c002b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c002b4a:	697b      	ldr	r3, [r7, #20]
 c002b4c:	3301      	adds	r3, #1
 c002b4e:	617b      	str	r3, [r7, #20]
 c002b50:	697a      	ldr	r2, [r7, #20]
 c002b52:	68bb      	ldr	r3, [r7, #8]
 c002b54:	429a      	cmp	r2, r3
 c002b56:	d3ee      	bcc.n	c002b36 <HAL_GTZC_MPCBB_ConfigMem+0xc6>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  return HAL_OK;
 c002b58:	2300      	movs	r3, #0
}
 c002b5a:	4618      	mov	r0, r3
 c002b5c:	3724      	adds	r7, #36	; 0x24
 c002b5e:	46bd      	mov	sp, r7
 c002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002b64:	4770      	bx	lr
 c002b66:	bf00      	nop
 c002b68:	20030000 	.word	0x20030000
 c002b6c:	30030000 	.word	0x30030000
 c002b70:	50032c00 	.word	0x50032c00
 c002b74:	50033000 	.word	0x50033000

0c002b78 <HAL_GTZC_TZIC_EnableIT>:
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId.
  *         Use GTZC_PERIPH_ALL to select all peripherals.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZIC_EnableIT(uint32_t PeriphId)
{
 c002b78:	b480      	push	{r7}
 c002b7a:	b085      	sub	sp, #20
 c002b7c:	af00      	add	r7, sp, #0
 c002b7e:	6078      	str	r0, [r7, #4]
  uint32_t register_address;

  /* check entry parameters */
  if ((HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZIC_PERIPH_NUMBER)
 c002b80:	687b      	ldr	r3, [r7, #4]
 c002b82:	0f1b      	lsrs	r3, r3, #28
 c002b84:	015a      	lsls	r2, r3, #5
 c002b86:	687b      	ldr	r3, [r7, #4]
 c002b88:	f003 031f 	and.w	r3, r3, #31
 c002b8c:	4413      	add	r3, r2
 c002b8e:	2b47      	cmp	r3, #71	; 0x47
 c002b90:	d80d      	bhi.n	c002bae <HAL_GTZC_TZIC_EnableIT+0x36>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c002b92:	687b      	ldr	r3, [r7, #4]
 c002b94:	f003 0320 	and.w	r3, r3, #32
 c002b98:	2b00      	cmp	r3, #0
 c002b9a:	d00a      	beq.n	c002bb2 <HAL_GTZC_TZIC_EnableIT+0x3a>
 c002b9c:	687b      	ldr	r3, [r7, #4]
 c002b9e:	0f1b      	lsrs	r3, r3, #28
 c002ba0:	015a      	lsls	r2, r3, #5
 c002ba2:	687b      	ldr	r3, [r7, #4]
 c002ba4:	f003 031f 	and.w	r3, r3, #31
 c002ba8:	4413      	add	r3, r2
 c002baa:	2b00      	cmp	r3, #0
 c002bac:	d001      	beq.n	c002bb2 <HAL_GTZC_TZIC_EnableIT+0x3a>
  {
    return HAL_ERROR;
 c002bae:	2301      	movs	r3, #1
 c002bb0:	e022      	b.n	c002bf8 <HAL_GTZC_TZIC_EnableIT+0x80>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c002bb2:	687b      	ldr	r3, [r7, #4]
 c002bb4:	f003 0320 	and.w	r3, r3, #32
 c002bb8:	2b00      	cmp	r3, #0
 c002bba:	d00a      	beq.n	c002bd2 <HAL_GTZC_TZIC_EnableIT+0x5a>
  {
    /* same configuration is applied to all peripherals */
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c002bbc:	4b11      	ldr	r3, [pc, #68]	; (c002c04 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c002bbe:	f04f 32ff 	mov.w	r2, #4294967295
 c002bc2:	601a      	str	r2, [r3, #0]
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
 c002bc4:	4b0f      	ldr	r3, [pc, #60]	; (c002c04 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c002bc6:	4a10      	ldr	r2, [pc, #64]	; (c002c08 <HAL_GTZC_TZIC_EnableIT+0x90>)
 c002bc8:	605a      	str	r2, [r3, #4]
    WRITE_REG(GTZC_TZIC->IER3, TZIC_IER3_ALL);
 c002bca:	4b0e      	ldr	r3, [pc, #56]	; (c002c04 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c002bcc:	22ff      	movs	r2, #255	; 0xff
 c002bce:	609a      	str	r2, [r3, #8]
 c002bd0:	e011      	b.n	c002bf6 <HAL_GTZC_TZIC_EnableIT+0x7e>
  }
  else
  {
    /* common case where only one peripheral is configured */
    register_address = (uint32_t) &(GTZC_TZIC->IER1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c002bd2:	687b      	ldr	r3, [r7, #4]
 c002bd4:	0f1b      	lsrs	r3, r3, #28
 c002bd6:	f103 53a0 	add.w	r3, r3, #335544320	; 0x14000000
 c002bda:	f503 434a 	add.w	r3, r3, #51712	; 0xca00
 c002bde:	009b      	lsls	r3, r3, #2
 c002be0:	60fb      	str	r3, [r7, #12]
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002be2:	68fb      	ldr	r3, [r7, #12]
 c002be4:	6819      	ldr	r1, [r3, #0]
 c002be6:	687b      	ldr	r3, [r7, #4]
 c002be8:	f003 031f 	and.w	r3, r3, #31
 c002bec:	2201      	movs	r2, #1
 c002bee:	409a      	lsls	r2, r3
 c002bf0:	68fb      	ldr	r3, [r7, #12]
 c002bf2:	430a      	orrs	r2, r1
 c002bf4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 c002bf6:	2300      	movs	r3, #0
}
 c002bf8:	4618      	mov	r0, r3
 c002bfa:	3714      	adds	r7, #20
 c002bfc:	46bd      	mov	sp, r7
 c002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002c02:	4770      	bx	lr
 c002c04:	50032800 	.word	0x50032800
 c002c08:	3fff6fff 	.word	0x3fff6fff

0c002c0c <HAL_GTZC_IRQHandler>:
/**
  * @brief  This function handles GTZC interrupt request.
  * @retval None.
  */
void HAL_GTZC_IRQHandler(void)
{
 c002c0c:	b580      	push	{r7, lr}
 c002c0e:	b084      	sub	sp, #16
 c002c10:	af00      	add	r7, sp, #0
  uint32_t flag;
  uint32_t ier_itsources;
  uint32_t sr_flags;

  /* Get current IT Flags and IT sources value on 1st register */
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c002c12:	4b3f      	ldr	r3, [pc, #252]	; (c002d10 <HAL_GTZC_IRQHandler+0x104>)
 c002c14:	681b      	ldr	r3, [r3, #0]
 c002c16:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR1);
 c002c18:	4b3d      	ldr	r3, [pc, #244]	; (c002d10 <HAL_GTZC_IRQHandler+0x104>)
 c002c1a:	691b      	ldr	r3, [r3, #16]
 c002c1c:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c002c1e:	68ba      	ldr	r2, [r7, #8]
 c002c20:	687b      	ldr	r3, [r7, #4]
 c002c22:	4013      	ands	r3, r2
 c002c24:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c002c26:	683b      	ldr	r3, [r7, #0]
 c002c28:	2b00      	cmp	r3, #0
 c002c2a:	d019      	beq.n	c002c60 <HAL_GTZC_IRQHandler+0x54>
  {
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c002c2c:	4a38      	ldr	r2, [pc, #224]	; (c002d10 <HAL_GTZC_IRQHandler+0x104>)
 c002c2e:	683b      	ldr	r3, [r7, #0]
 c002c30:	6213      	str	r3, [r2, #32]

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c002c32:	2300      	movs	r3, #0
 c002c34:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c002c36:	e00d      	b.n	c002c54 <HAL_GTZC_IRQHandler+0x48>
    {
      if ((flag & (1UL << position)) != 0U)
 c002c38:	683a      	ldr	r2, [r7, #0]
 c002c3a:	68fb      	ldr	r3, [r7, #12]
 c002c3c:	fa22 f303 	lsr.w	r3, r2, r3
 c002c40:	f003 0301 	and.w	r3, r3, #1
 c002c44:	2b00      	cmp	r3, #0
 c002c46:	d002      	beq.n	c002c4e <HAL_GTZC_IRQHandler+0x42>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c002c48:	68f8      	ldr	r0, [r7, #12]
 c002c4a:	f000 f863 	bl	c002d14 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c002c4e:	68fb      	ldr	r3, [r7, #12]
 c002c50:	3301      	adds	r3, #1
 c002c52:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c002c54:	683a      	ldr	r2, [r7, #0]
 c002c56:	68fb      	ldr	r3, [r7, #12]
 c002c58:	fa22 f303 	lsr.w	r3, r2, r3
 c002c5c:	2b00      	cmp	r3, #0
 c002c5e:	d1eb      	bne.n	c002c38 <HAL_GTZC_IRQHandler+0x2c>
    }
  }

  /* Get current IT Flags and IT sources value on 2nd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER2);
 c002c60:	4b2b      	ldr	r3, [pc, #172]	; (c002d10 <HAL_GTZC_IRQHandler+0x104>)
 c002c62:	685b      	ldr	r3, [r3, #4]
 c002c64:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR2);
 c002c66:	4b2a      	ldr	r3, [pc, #168]	; (c002d10 <HAL_GTZC_IRQHandler+0x104>)
 c002c68:	695b      	ldr	r3, [r3, #20]
 c002c6a:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c002c6c:	68ba      	ldr	r2, [r7, #8]
 c002c6e:	687b      	ldr	r3, [r7, #4]
 c002c70:	4013      	ands	r3, r2
 c002c72:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c002c74:	683b      	ldr	r3, [r7, #0]
 c002c76:	2b00      	cmp	r3, #0
 c002c78:	d01c      	beq.n	c002cb4 <HAL_GTZC_IRQHandler+0xa8>
  {
    WRITE_REG(GTZC_TZIC->FCR2, flag);
 c002c7a:	4a25      	ldr	r2, [pc, #148]	; (c002d10 <HAL_GTZC_IRQHandler+0x104>)
 c002c7c:	683b      	ldr	r3, [r7, #0]
 c002c7e:	6253      	str	r3, [r2, #36]	; 0x24

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c002c80:	2300      	movs	r3, #0
 c002c82:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c002c84:	e010      	b.n	c002ca8 <HAL_GTZC_IRQHandler+0x9c>
    {
      if ((flag & (1UL << position)) != 0U)
 c002c86:	683a      	ldr	r2, [r7, #0]
 c002c88:	68fb      	ldr	r3, [r7, #12]
 c002c8a:	fa22 f303 	lsr.w	r3, r2, r3
 c002c8e:	f003 0301 	and.w	r3, r3, #1
 c002c92:	2b00      	cmp	r3, #0
 c002c94:	d005      	beq.n	c002ca2 <HAL_GTZC_IRQHandler+0x96>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c002c96:	68fb      	ldr	r3, [r7, #12]
 c002c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c002c9c:	4618      	mov	r0, r3
 c002c9e:	f000 f839 	bl	c002d14 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c002ca2:	68fb      	ldr	r3, [r7, #12]
 c002ca4:	3301      	adds	r3, #1
 c002ca6:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c002ca8:	683a      	ldr	r2, [r7, #0]
 c002caa:	68fb      	ldr	r3, [r7, #12]
 c002cac:	fa22 f303 	lsr.w	r3, r2, r3
 c002cb0:	2b00      	cmp	r3, #0
 c002cb2:	d1e8      	bne.n	c002c86 <HAL_GTZC_IRQHandler+0x7a>
    }
  }

  /* Get current IT Flags and IT sources value on 3rd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER3);
 c002cb4:	4b16      	ldr	r3, [pc, #88]	; (c002d10 <HAL_GTZC_IRQHandler+0x104>)
 c002cb6:	689b      	ldr	r3, [r3, #8]
 c002cb8:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR3);
 c002cba:	4b15      	ldr	r3, [pc, #84]	; (c002d10 <HAL_GTZC_IRQHandler+0x104>)
 c002cbc:	699b      	ldr	r3, [r3, #24]
 c002cbe:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c002cc0:	68ba      	ldr	r2, [r7, #8]
 c002cc2:	687b      	ldr	r3, [r7, #4]
 c002cc4:	4013      	ands	r3, r2
 c002cc6:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c002cc8:	683b      	ldr	r3, [r7, #0]
 c002cca:	2b00      	cmp	r3, #0
 c002ccc:	d01c      	beq.n	c002d08 <HAL_GTZC_IRQHandler+0xfc>
  {
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c002cce:	4a10      	ldr	r2, [pc, #64]	; (c002d10 <HAL_GTZC_IRQHandler+0x104>)
 c002cd0:	683b      	ldr	r3, [r7, #0]
 c002cd2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c002cd4:	2300      	movs	r3, #0
 c002cd6:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c002cd8:	e010      	b.n	c002cfc <HAL_GTZC_IRQHandler+0xf0>
    {
      if ((flag & (1UL << position)) != 0U)
 c002cda:	683a      	ldr	r2, [r7, #0]
 c002cdc:	68fb      	ldr	r3, [r7, #12]
 c002cde:	fa22 f303 	lsr.w	r3, r2, r3
 c002ce2:	f003 0301 	and.w	r3, r3, #1
 c002ce6:	2b00      	cmp	r3, #0
 c002ce8:	d005      	beq.n	c002cf6 <HAL_GTZC_IRQHandler+0xea>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c002cea:	68fb      	ldr	r3, [r7, #12]
 c002cec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 c002cf0:	4618      	mov	r0, r3
 c002cf2:	f000 f80f 	bl	c002d14 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c002cf6:	68fb      	ldr	r3, [r7, #12]
 c002cf8:	3301      	adds	r3, #1
 c002cfa:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c002cfc:	683a      	ldr	r2, [r7, #0]
 c002cfe:	68fb      	ldr	r3, [r7, #12]
 c002d00:	fa22 f303 	lsr.w	r3, r2, r3
 c002d04:	2b00      	cmp	r3, #0
 c002d06:	d1e8      	bne.n	c002cda <HAL_GTZC_IRQHandler+0xce>
    }
  }
}
 c002d08:	bf00      	nop
 c002d0a:	3710      	adds	r7, #16
 c002d0c:	46bd      	mov	sp, r7
 c002d0e:	bd80      	pop	{r7, pc}
 c002d10:	50032800 	.word	0x50032800

0c002d14 <HAL_GTZC_TZIC_Callback>:
  * @param  PeriphId Peripheral identifier triggering the illegal access.
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId
  * @retval None.
  */
__weak void HAL_GTZC_TZIC_Callback(uint32_t PeriphId)
{
 c002d14:	b480      	push	{r7}
 c002d16:	b083      	sub	sp, #12
 c002d18:	af00      	add	r7, sp, #0
 c002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(PeriphId);

  /* NOTE: This function should not be modified. When the callback is needed,
   * the HAL_GTZC_TZIC_Callback is to be implemented in the user file
   */
}
 c002d1c:	bf00      	nop
 c002d1e:	370c      	adds	r7, #12
 c002d20:	46bd      	mov	sp, r7
 c002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002d26:	4770      	bx	lr

0c002d28 <HAL_PWR_ConfigAttributes>:
  *            @arg @ref PWR_SEC          Secure-only access
  *            @arg @ref PWR_NSEC         Secure/Non-secure access
  * @retval None
  */
void HAL_PWR_ConfigAttributes(uint32_t Item, uint32_t Attributes)
{
 c002d28:	b480      	push	{r7}
 c002d2a:	b083      	sub	sp, #12
 c002d2c:	af00      	add	r7, sp, #0
 c002d2e:	6078      	str	r0, [r7, #4]
 c002d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_PWR_ITEMS_ATTRIBUTES(Item));
  assert_param(IS_PWR_ATTRIBUTES(Attributes));

  /* Privilege/non-privilege attribute */
  if ((Attributes & PWR_PRIV) == PWR_PRIV)
 c002d32:	683a      	ldr	r2, [r7, #0]
 c002d34:	f240 2302 	movw	r3, #514	; 0x202
 c002d38:	4013      	ands	r3, r2
 c002d3a:	f240 2202 	movw	r2, #514	; 0x202
 c002d3e:	4293      	cmp	r3, r2
 c002d40:	d108      	bne.n	c002d54 <HAL_PWR_ConfigAttributes+0x2c>
  {
    SET_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
 c002d42:	4b1b      	ldr	r3, [pc, #108]	; (c002db0 <HAL_PWR_ConfigAttributes+0x88>)
 c002d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c002d48:	4a19      	ldr	r2, [pc, #100]	; (c002db0 <HAL_PWR_ConfigAttributes+0x88>)
 c002d4a:	f043 0301 	orr.w	r3, r3, #1
 c002d4e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 c002d52:	e00c      	b.n	c002d6e <HAL_PWR_ConfigAttributes+0x46>
  }
  else if ((Attributes & PWR_NPRIV) == PWR_NPRIV)
 c002d54:	683b      	ldr	r3, [r7, #0]
 c002d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c002d5a:	2b00      	cmp	r3, #0
 c002d5c:	d007      	beq.n	c002d6e <HAL_PWR_ConfigAttributes+0x46>
  {
    CLEAR_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
 c002d5e:	4b14      	ldr	r3, [pc, #80]	; (c002db0 <HAL_PWR_ConfigAttributes+0x88>)
 c002d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c002d64:	4a12      	ldr	r2, [pc, #72]	; (c002db0 <HAL_PWR_ConfigAttributes+0x88>)
 c002d66:	f023 0301 	bic.w	r3, r3, #1
 c002d6a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80


#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)

  /* Secure/non-secure attribute */
  if ((Attributes & PWR_SEC) == PWR_SEC)
 c002d6e:	683a      	ldr	r2, [r7, #0]
 c002d70:	f240 1301 	movw	r3, #257	; 0x101
 c002d74:	4013      	ands	r3, r2
 c002d76:	f240 1201 	movw	r2, #257	; 0x101
 c002d7a:	4293      	cmp	r3, r2
 c002d7c:	d106      	bne.n	c002d8c <HAL_PWR_ConfigAttributes+0x64>
  {
    SET_BIT(PWR_S->SECCFGR, Item);
 c002d7e:	4b0c      	ldr	r3, [pc, #48]	; (c002db0 <HAL_PWR_ConfigAttributes+0x88>)
 c002d80:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 c002d82:	490b      	ldr	r1, [pc, #44]	; (c002db0 <HAL_PWR_ConfigAttributes+0x88>)
 c002d84:	687b      	ldr	r3, [r7, #4]
 c002d86:	4313      	orrs	r3, r2
 c002d88:	678b      	str	r3, [r1, #120]	; 0x78
  {
    /* do nothing */
  }

#endif /* __ARM_FEATURE_CMSE */
}
 c002d8a:	e00b      	b.n	c002da4 <HAL_PWR_ConfigAttributes+0x7c>
  else if ((Attributes & PWR_NSEC) == PWR_NSEC)
 c002d8c:	683b      	ldr	r3, [r7, #0]
 c002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002d92:	2b00      	cmp	r3, #0
 c002d94:	d006      	beq.n	c002da4 <HAL_PWR_ConfigAttributes+0x7c>
    CLEAR_BIT(PWR_S->SECCFGR, Item);
 c002d96:	4b06      	ldr	r3, [pc, #24]	; (c002db0 <HAL_PWR_ConfigAttributes+0x88>)
 c002d98:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 c002d9a:	687b      	ldr	r3, [r7, #4]
 c002d9c:	43db      	mvns	r3, r3
 c002d9e:	4904      	ldr	r1, [pc, #16]	; (c002db0 <HAL_PWR_ConfigAttributes+0x88>)
 c002da0:	4013      	ands	r3, r2
 c002da2:	678b      	str	r3, [r1, #120]	; 0x78
}
 c002da4:	bf00      	nop
 c002da6:	370c      	adds	r7, #12
 c002da8:	46bd      	mov	sp, r7
 c002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002dae:	4770      	bx	lr
 c002db0:	50007000 	.word	0x50007000

0c002db4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c002db4:	b480      	push	{r7}
 c002db6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c002db8:	4b04      	ldr	r3, [pc, #16]	; (c002dcc <HAL_PWREx_GetVoltageRange+0x18>)
 c002dba:	681b      	ldr	r3, [r3, #0]
 c002dbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c002dc0:	4618      	mov	r0, r3
 c002dc2:	46bd      	mov	sp, r7
 c002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002dc8:	4770      	bx	lr
 c002dca:	bf00      	nop
 c002dcc:	50007000 	.word	0x50007000

0c002dd0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c002dd0:	b580      	push	{r7, lr}
 c002dd2:	b084      	sub	sp, #16
 c002dd4:	af00      	add	r7, sp, #0
 c002dd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c002dd8:	4b27      	ldr	r3, [pc, #156]	; (c002e78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002dda:	681b      	ldr	r3, [r3, #0]
 c002ddc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c002de0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c002de2:	f000 f871 	bl	c002ec8 <HAL_PWREx_SMPS_GetEffectiveMode>
 c002de6:	4603      	mov	r3, r0
 c002de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c002dec:	d101      	bne.n	c002df2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c002dee:	2301      	movs	r3, #1
 c002df0:	e03e      	b.n	c002e70 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c002df2:	4b21      	ldr	r3, [pc, #132]	; (c002e78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002df4:	68db      	ldr	r3, [r3, #12]
 c002df6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c002dfe:	d101      	bne.n	c002e04 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c002e00:	2301      	movs	r3, #1
 c002e02:	e035      	b.n	c002e70 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c002e04:	68ba      	ldr	r2, [r7, #8]
 c002e06:	687b      	ldr	r3, [r7, #4]
 c002e08:	429a      	cmp	r2, r3
 c002e0a:	d101      	bne.n	c002e10 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c002e0c:	2300      	movs	r3, #0
 c002e0e:	e02f      	b.n	c002e70 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c002e10:	4b19      	ldr	r3, [pc, #100]	; (c002e78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002e12:	681b      	ldr	r3, [r3, #0]
 c002e14:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c002e18:	4917      	ldr	r1, [pc, #92]	; (c002e78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002e1a:	687b      	ldr	r3, [r7, #4]
 c002e1c:	4313      	orrs	r3, r2
 c002e1e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c002e20:	4b16      	ldr	r3, [pc, #88]	; (c002e7c <HAL_PWREx_ControlVoltageScaling+0xac>)
 c002e22:	681b      	ldr	r3, [r3, #0]
 c002e24:	095b      	lsrs	r3, r3, #5
 c002e26:	4a16      	ldr	r2, [pc, #88]	; (c002e80 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c002e28:	fba2 2303 	umull	r2, r3, r2, r3
 c002e2c:	09db      	lsrs	r3, r3, #7
 c002e2e:	2232      	movs	r2, #50	; 0x32
 c002e30:	fb02 f303 	mul.w	r3, r2, r3
 c002e34:	4a13      	ldr	r2, [pc, #76]	; (c002e84 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c002e36:	fba2 2303 	umull	r2, r3, r2, r3
 c002e3a:	08db      	lsrs	r3, r3, #3
 c002e3c:	3301      	adds	r3, #1
 c002e3e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c002e40:	e002      	b.n	c002e48 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c002e42:	68fb      	ldr	r3, [r7, #12]
 c002e44:	3b01      	subs	r3, #1
 c002e46:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c002e48:	4b0b      	ldr	r3, [pc, #44]	; (c002e78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002e4a:	695b      	ldr	r3, [r3, #20]
 c002e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c002e54:	d102      	bne.n	c002e5c <HAL_PWREx_ControlVoltageScaling+0x8c>
 c002e56:	68fb      	ldr	r3, [r7, #12]
 c002e58:	2b00      	cmp	r3, #0
 c002e5a:	d1f2      	bne.n	c002e42 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c002e5c:	4b06      	ldr	r3, [pc, #24]	; (c002e78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002e5e:	695b      	ldr	r3, [r3, #20]
 c002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c002e68:	d101      	bne.n	c002e6e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c002e6a:	2303      	movs	r3, #3
 c002e6c:	e000      	b.n	c002e70 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c002e6e:	2300      	movs	r3, #0
}
 c002e70:	4618      	mov	r0, r3
 c002e72:	3710      	adds	r7, #16
 c002e74:	46bd      	mov	sp, r7
 c002e76:	bd80      	pop	{r7, pc}
 c002e78:	50007000 	.word	0x50007000
 c002e7c:	30000004 	.word	0x30000004
 c002e80:	0a7c5ac5 	.word	0x0a7c5ac5
 c002e84:	cccccccd 	.word	0xcccccccd

0c002e88 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c002e88:	b480      	push	{r7}
 c002e8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 c002e8c:	4b05      	ldr	r3, [pc, #20]	; (c002ea4 <HAL_PWREx_EnableVddIO2+0x1c>)
 c002e8e:	685b      	ldr	r3, [r3, #4]
 c002e90:	4a04      	ldr	r2, [pc, #16]	; (c002ea4 <HAL_PWREx_EnableVddIO2+0x1c>)
 c002e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 c002e96:	6053      	str	r3, [r2, #4]
}
 c002e98:	bf00      	nop
 c002e9a:	46bd      	mov	sp, r7
 c002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002ea0:	4770      	bx	lr
 c002ea2:	bf00      	nop
 c002ea4:	50007000 	.word	0x50007000

0c002ea8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c002ea8:	b480      	push	{r7}
 c002eaa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c002eac:	4b05      	ldr	r3, [pc, #20]	; (c002ec4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c002eae:	689b      	ldr	r3, [r3, #8]
 c002eb0:	4a04      	ldr	r2, [pc, #16]	; (c002ec4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c002eb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c002eb6:	6093      	str	r3, [r2, #8]
}
 c002eb8:	bf00      	nop
 c002eba:	46bd      	mov	sp, r7
 c002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002ec0:	4770      	bx	lr
 c002ec2:	bf00      	nop
 c002ec4:	50007000 	.word	0x50007000

0c002ec8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c002ec8:	b480      	push	{r7}
 c002eca:	b083      	sub	sp, #12
 c002ecc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c002ece:	4b0f      	ldr	r3, [pc, #60]	; (c002f0c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c002ed0:	691b      	ldr	r3, [r3, #16]
 c002ed2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c002ed4:	683b      	ldr	r3, [r7, #0]
 c002ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c002eda:	2b00      	cmp	r3, #0
 c002edc:	d003      	beq.n	c002ee6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c002ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c002ee2:	607b      	str	r3, [r7, #4]
 c002ee4:	e00a      	b.n	c002efc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c002ee6:	683b      	ldr	r3, [r7, #0]
 c002ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002eec:	2b00      	cmp	r3, #0
 c002eee:	d103      	bne.n	c002ef8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c002ef0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c002ef4:	607b      	str	r3, [r7, #4]
 c002ef6:	e001      	b.n	c002efc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c002ef8:	2300      	movs	r3, #0
 c002efa:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c002efc:	687b      	ldr	r3, [r7, #4]
}
 c002efe:	4618      	mov	r0, r3
 c002f00:	370c      	adds	r7, #12
 c002f02:	46bd      	mov	sp, r7
 c002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002f08:	4770      	bx	lr
 c002f0a:	bf00      	nop
 c002f0c:	50007000 	.word	0x50007000

0c002f10 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c002f10:	b580      	push	{r7, lr}
 c002f12:	b088      	sub	sp, #32
 c002f14:	af00      	add	r7, sp, #0
 c002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c002f18:	687b      	ldr	r3, [r7, #4]
 c002f1a:	2b00      	cmp	r3, #0
 c002f1c:	d102      	bne.n	c002f24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c002f1e:	2301      	movs	r3, #1
 c002f20:	f000 bcd0 	b.w	c0038c4 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c002f24:	4b99      	ldr	r3, [pc, #612]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c002f26:	689b      	ldr	r3, [r3, #8]
 c002f28:	f003 030c 	and.w	r3, r3, #12
 c002f2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c002f2e:	4b97      	ldr	r3, [pc, #604]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c002f30:	68db      	ldr	r3, [r3, #12]
 c002f32:	f003 0303 	and.w	r3, r3, #3
 c002f36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c002f38:	687b      	ldr	r3, [r7, #4]
 c002f3a:	681b      	ldr	r3, [r3, #0]
 c002f3c:	f003 0310 	and.w	r3, r3, #16
 c002f40:	2b00      	cmp	r3, #0
 c002f42:	f000 80e9 	beq.w	c003118 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c002f46:	69bb      	ldr	r3, [r7, #24]
 c002f48:	2b00      	cmp	r3, #0
 c002f4a:	d006      	beq.n	c002f5a <HAL_RCC_OscConfig+0x4a>
 c002f4c:	69bb      	ldr	r3, [r7, #24]
 c002f4e:	2b0c      	cmp	r3, #12
 c002f50:	f040 8083 	bne.w	c00305a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c002f54:	697b      	ldr	r3, [r7, #20]
 c002f56:	2b01      	cmp	r3, #1
 c002f58:	d17f      	bne.n	c00305a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c002f5a:	4b8c      	ldr	r3, [pc, #560]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c002f5c:	681b      	ldr	r3, [r3, #0]
 c002f5e:	f003 0302 	and.w	r3, r3, #2
 c002f62:	2b00      	cmp	r3, #0
 c002f64:	d006      	beq.n	c002f74 <HAL_RCC_OscConfig+0x64>
 c002f66:	687b      	ldr	r3, [r7, #4]
 c002f68:	69db      	ldr	r3, [r3, #28]
 c002f6a:	2b00      	cmp	r3, #0
 c002f6c:	d102      	bne.n	c002f74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c002f6e:	2301      	movs	r3, #1
 c002f70:	f000 bca8 	b.w	c0038c4 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c002f74:	687b      	ldr	r3, [r7, #4]
 c002f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c002f78:	4b84      	ldr	r3, [pc, #528]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c002f7a:	681b      	ldr	r3, [r3, #0]
 c002f7c:	f003 0308 	and.w	r3, r3, #8
 c002f80:	2b00      	cmp	r3, #0
 c002f82:	d004      	beq.n	c002f8e <HAL_RCC_OscConfig+0x7e>
 c002f84:	4b81      	ldr	r3, [pc, #516]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c002f86:	681b      	ldr	r3, [r3, #0]
 c002f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c002f8c:	e005      	b.n	c002f9a <HAL_RCC_OscConfig+0x8a>
 c002f8e:	4b7f      	ldr	r3, [pc, #508]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c002f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002f94:	091b      	lsrs	r3, r3, #4
 c002f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c002f9a:	4293      	cmp	r3, r2
 c002f9c:	d224      	bcs.n	c002fe8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c002f9e:	687b      	ldr	r3, [r7, #4]
 c002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002fa2:	4618      	mov	r0, r3
 c002fa4:	f000 fe96 	bl	c003cd4 <RCC_SetFlashLatencyFromMSIRange>
 c002fa8:	4603      	mov	r3, r0
 c002faa:	2b00      	cmp	r3, #0
 c002fac:	d002      	beq.n	c002fb4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c002fae:	2301      	movs	r3, #1
 c002fb0:	f000 bc88 	b.w	c0038c4 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c002fb4:	4b75      	ldr	r3, [pc, #468]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c002fb6:	681b      	ldr	r3, [r3, #0]
 c002fb8:	4a74      	ldr	r2, [pc, #464]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c002fba:	f043 0308 	orr.w	r3, r3, #8
 c002fbe:	6013      	str	r3, [r2, #0]
 c002fc0:	4b72      	ldr	r3, [pc, #456]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c002fc2:	681b      	ldr	r3, [r3, #0]
 c002fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c002fc8:	687b      	ldr	r3, [r7, #4]
 c002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002fcc:	496f      	ldr	r1, [pc, #444]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c002fce:	4313      	orrs	r3, r2
 c002fd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c002fd2:	4b6e      	ldr	r3, [pc, #440]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c002fd4:	685b      	ldr	r3, [r3, #4]
 c002fd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c002fda:	687b      	ldr	r3, [r7, #4]
 c002fdc:	6a1b      	ldr	r3, [r3, #32]
 c002fde:	021b      	lsls	r3, r3, #8
 c002fe0:	496a      	ldr	r1, [pc, #424]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c002fe2:	4313      	orrs	r3, r2
 c002fe4:	604b      	str	r3, [r1, #4]
 c002fe6:	e026      	b.n	c003036 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c002fe8:	4b68      	ldr	r3, [pc, #416]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c002fea:	681b      	ldr	r3, [r3, #0]
 c002fec:	4a67      	ldr	r2, [pc, #412]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c002fee:	f043 0308 	orr.w	r3, r3, #8
 c002ff2:	6013      	str	r3, [r2, #0]
 c002ff4:	4b65      	ldr	r3, [pc, #404]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c002ff6:	681b      	ldr	r3, [r3, #0]
 c002ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c002ffc:	687b      	ldr	r3, [r7, #4]
 c002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003000:	4962      	ldr	r1, [pc, #392]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c003002:	4313      	orrs	r3, r2
 c003004:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c003006:	4b61      	ldr	r3, [pc, #388]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c003008:	685b      	ldr	r3, [r3, #4]
 c00300a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c00300e:	687b      	ldr	r3, [r7, #4]
 c003010:	6a1b      	ldr	r3, [r3, #32]
 c003012:	021b      	lsls	r3, r3, #8
 c003014:	495d      	ldr	r1, [pc, #372]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c003016:	4313      	orrs	r3, r2
 c003018:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c00301a:	69bb      	ldr	r3, [r7, #24]
 c00301c:	2b00      	cmp	r3, #0
 c00301e:	d10a      	bne.n	c003036 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c003020:	687b      	ldr	r3, [r7, #4]
 c003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003024:	4618      	mov	r0, r3
 c003026:	f000 fe55 	bl	c003cd4 <RCC_SetFlashLatencyFromMSIRange>
 c00302a:	4603      	mov	r3, r0
 c00302c:	2b00      	cmp	r3, #0
 c00302e:	d002      	beq.n	c003036 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 c003030:	2301      	movs	r3, #1
 c003032:	f000 bc47 	b.w	c0038c4 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c003036:	f000 fe11 	bl	c003c5c <HAL_RCC_GetHCLKFreq>
 c00303a:	4603      	mov	r3, r0
 c00303c:	4a54      	ldr	r2, [pc, #336]	; (c003190 <HAL_RCC_OscConfig+0x280>)
 c00303e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c003040:	4b54      	ldr	r3, [pc, #336]	; (c003194 <HAL_RCC_OscConfig+0x284>)
 c003042:	681b      	ldr	r3, [r3, #0]
 c003044:	4618      	mov	r0, r3
 c003046:	f7ff f8d5 	bl	c0021f4 <HAL_InitTick>
 c00304a:	4603      	mov	r3, r0
 c00304c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c00304e:	7bfb      	ldrb	r3, [r7, #15]
 c003050:	2b00      	cmp	r3, #0
 c003052:	d060      	beq.n	c003116 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 c003054:	7bfb      	ldrb	r3, [r7, #15]
 c003056:	f000 bc35 	b.w	c0038c4 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c00305a:	687b      	ldr	r3, [r7, #4]
 c00305c:	69db      	ldr	r3, [r3, #28]
 c00305e:	2b00      	cmp	r3, #0
 c003060:	d039      	beq.n	c0030d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c003062:	4b4a      	ldr	r3, [pc, #296]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c003064:	681b      	ldr	r3, [r3, #0]
 c003066:	4a49      	ldr	r2, [pc, #292]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c003068:	f043 0301 	orr.w	r3, r3, #1
 c00306c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c00306e:	f7ff f911 	bl	c002294 <HAL_GetTick>
 c003072:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c003074:	e00f      	b.n	c003096 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c003076:	f7ff f90d 	bl	c002294 <HAL_GetTick>
 c00307a:	4602      	mov	r2, r0
 c00307c:	693b      	ldr	r3, [r7, #16]
 c00307e:	1ad3      	subs	r3, r2, r3
 c003080:	2b02      	cmp	r3, #2
 c003082:	d908      	bls.n	c003096 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c003084:	4b41      	ldr	r3, [pc, #260]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c003086:	681b      	ldr	r3, [r3, #0]
 c003088:	f003 0302 	and.w	r3, r3, #2
 c00308c:	2b00      	cmp	r3, #0
 c00308e:	d102      	bne.n	c003096 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 c003090:	2303      	movs	r3, #3
 c003092:	f000 bc17 	b.w	c0038c4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c003096:	4b3d      	ldr	r3, [pc, #244]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c003098:	681b      	ldr	r3, [r3, #0]
 c00309a:	f003 0302 	and.w	r3, r3, #2
 c00309e:	2b00      	cmp	r3, #0
 c0030a0:	d0e9      	beq.n	c003076 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c0030a2:	4b3a      	ldr	r3, [pc, #232]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c0030a4:	681b      	ldr	r3, [r3, #0]
 c0030a6:	4a39      	ldr	r2, [pc, #228]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c0030a8:	f043 0308 	orr.w	r3, r3, #8
 c0030ac:	6013      	str	r3, [r2, #0]
 c0030ae:	4b37      	ldr	r3, [pc, #220]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c0030b0:	681b      	ldr	r3, [r3, #0]
 c0030b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c0030b6:	687b      	ldr	r3, [r7, #4]
 c0030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0030ba:	4934      	ldr	r1, [pc, #208]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c0030bc:	4313      	orrs	r3, r2
 c0030be:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c0030c0:	4b32      	ldr	r3, [pc, #200]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c0030c2:	685b      	ldr	r3, [r3, #4]
 c0030c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c0030c8:	687b      	ldr	r3, [r7, #4]
 c0030ca:	6a1b      	ldr	r3, [r3, #32]
 c0030cc:	021b      	lsls	r3, r3, #8
 c0030ce:	492f      	ldr	r1, [pc, #188]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c0030d0:	4313      	orrs	r3, r2
 c0030d2:	604b      	str	r3, [r1, #4]
 c0030d4:	e020      	b.n	c003118 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c0030d6:	4b2d      	ldr	r3, [pc, #180]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c0030d8:	681b      	ldr	r3, [r3, #0]
 c0030da:	4a2c      	ldr	r2, [pc, #176]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c0030dc:	f023 0301 	bic.w	r3, r3, #1
 c0030e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c0030e2:	f7ff f8d7 	bl	c002294 <HAL_GetTick>
 c0030e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0030e8:	e00e      	b.n	c003108 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c0030ea:	f7ff f8d3 	bl	c002294 <HAL_GetTick>
 c0030ee:	4602      	mov	r2, r0
 c0030f0:	693b      	ldr	r3, [r7, #16]
 c0030f2:	1ad3      	subs	r3, r2, r3
 c0030f4:	2b02      	cmp	r3, #2
 c0030f6:	d907      	bls.n	c003108 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0030f8:	4b24      	ldr	r3, [pc, #144]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c0030fa:	681b      	ldr	r3, [r3, #0]
 c0030fc:	f003 0302 	and.w	r3, r3, #2
 c003100:	2b00      	cmp	r3, #0
 c003102:	d001      	beq.n	c003108 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 c003104:	2303      	movs	r3, #3
 c003106:	e3dd      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c003108:	4b20      	ldr	r3, [pc, #128]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c00310a:	681b      	ldr	r3, [r3, #0]
 c00310c:	f003 0302 	and.w	r3, r3, #2
 c003110:	2b00      	cmp	r3, #0
 c003112:	d1ea      	bne.n	c0030ea <HAL_RCC_OscConfig+0x1da>
 c003114:	e000      	b.n	c003118 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c003116:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c003118:	687b      	ldr	r3, [r7, #4]
 c00311a:	681b      	ldr	r3, [r3, #0]
 c00311c:	f003 0301 	and.w	r3, r3, #1
 c003120:	2b00      	cmp	r3, #0
 c003122:	d07e      	beq.n	c003222 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c003124:	69bb      	ldr	r3, [r7, #24]
 c003126:	2b08      	cmp	r3, #8
 c003128:	d005      	beq.n	c003136 <HAL_RCC_OscConfig+0x226>
 c00312a:	69bb      	ldr	r3, [r7, #24]
 c00312c:	2b0c      	cmp	r3, #12
 c00312e:	d10e      	bne.n	c00314e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c003130:	697b      	ldr	r3, [r7, #20]
 c003132:	2b03      	cmp	r3, #3
 c003134:	d10b      	bne.n	c00314e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c003136:	4b15      	ldr	r3, [pc, #84]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c003138:	681b      	ldr	r3, [r3, #0]
 c00313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00313e:	2b00      	cmp	r3, #0
 c003140:	d06e      	beq.n	c003220 <HAL_RCC_OscConfig+0x310>
 c003142:	687b      	ldr	r3, [r7, #4]
 c003144:	685b      	ldr	r3, [r3, #4]
 c003146:	2b00      	cmp	r3, #0
 c003148:	d16a      	bne.n	c003220 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c00314a:	2301      	movs	r3, #1
 c00314c:	e3ba      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c00314e:	687b      	ldr	r3, [r7, #4]
 c003150:	685b      	ldr	r3, [r3, #4]
 c003152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c003156:	d106      	bne.n	c003166 <HAL_RCC_OscConfig+0x256>
 c003158:	4b0c      	ldr	r3, [pc, #48]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c00315a:	681b      	ldr	r3, [r3, #0]
 c00315c:	4a0b      	ldr	r2, [pc, #44]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c00315e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003162:	6013      	str	r3, [r2, #0]
 c003164:	e024      	b.n	c0031b0 <HAL_RCC_OscConfig+0x2a0>
 c003166:	687b      	ldr	r3, [r7, #4]
 c003168:	685b      	ldr	r3, [r3, #4]
 c00316a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c00316e:	d113      	bne.n	c003198 <HAL_RCC_OscConfig+0x288>
 c003170:	4b06      	ldr	r3, [pc, #24]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c003172:	681b      	ldr	r3, [r3, #0]
 c003174:	4a05      	ldr	r2, [pc, #20]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c003176:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c00317a:	6013      	str	r3, [r2, #0]
 c00317c:	4b03      	ldr	r3, [pc, #12]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c00317e:	681b      	ldr	r3, [r3, #0]
 c003180:	4a02      	ldr	r2, [pc, #8]	; (c00318c <HAL_RCC_OscConfig+0x27c>)
 c003182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003186:	6013      	str	r3, [r2, #0]
 c003188:	e012      	b.n	c0031b0 <HAL_RCC_OscConfig+0x2a0>
 c00318a:	bf00      	nop
 c00318c:	50021000 	.word	0x50021000
 c003190:	30000004 	.word	0x30000004
 c003194:	30000008 	.word	0x30000008
 c003198:	4b8b      	ldr	r3, [pc, #556]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c00319a:	681b      	ldr	r3, [r3, #0]
 c00319c:	4a8a      	ldr	r2, [pc, #552]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c00319e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c0031a2:	6013      	str	r3, [r2, #0]
 c0031a4:	4b88      	ldr	r3, [pc, #544]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c0031a6:	681b      	ldr	r3, [r3, #0]
 c0031a8:	4a87      	ldr	r2, [pc, #540]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c0031aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c0031ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c0031b0:	687b      	ldr	r3, [r7, #4]
 c0031b2:	685b      	ldr	r3, [r3, #4]
 c0031b4:	2b00      	cmp	r3, #0
 c0031b6:	d019      	beq.n	c0031ec <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0031b8:	f7ff f86c 	bl	c002294 <HAL_GetTick>
 c0031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0031be:	e00e      	b.n	c0031de <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c0031c0:	f7ff f868 	bl	c002294 <HAL_GetTick>
 c0031c4:	4602      	mov	r2, r0
 c0031c6:	693b      	ldr	r3, [r7, #16]
 c0031c8:	1ad3      	subs	r3, r2, r3
 c0031ca:	2b64      	cmp	r3, #100	; 0x64
 c0031cc:	d907      	bls.n	c0031de <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0031ce:	4b7e      	ldr	r3, [pc, #504]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c0031d0:	681b      	ldr	r3, [r3, #0]
 c0031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0031d6:	2b00      	cmp	r3, #0
 c0031d8:	d101      	bne.n	c0031de <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 c0031da:	2303      	movs	r3, #3
 c0031dc:	e372      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0031de:	4b7a      	ldr	r3, [pc, #488]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c0031e0:	681b      	ldr	r3, [r3, #0]
 c0031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0031e6:	2b00      	cmp	r3, #0
 c0031e8:	d0ea      	beq.n	c0031c0 <HAL_RCC_OscConfig+0x2b0>
 c0031ea:	e01a      	b.n	c003222 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0031ec:	f7ff f852 	bl	c002294 <HAL_GetTick>
 c0031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0031f2:	e00e      	b.n	c003212 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c0031f4:	f7ff f84e 	bl	c002294 <HAL_GetTick>
 c0031f8:	4602      	mov	r2, r0
 c0031fa:	693b      	ldr	r3, [r7, #16]
 c0031fc:	1ad3      	subs	r3, r2, r3
 c0031fe:	2b64      	cmp	r3, #100	; 0x64
 c003200:	d907      	bls.n	c003212 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c003202:	4b71      	ldr	r3, [pc, #452]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c003204:	681b      	ldr	r3, [r3, #0]
 c003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00320a:	2b00      	cmp	r3, #0
 c00320c:	d001      	beq.n	c003212 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 c00320e:	2303      	movs	r3, #3
 c003210:	e358      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c003212:	4b6d      	ldr	r3, [pc, #436]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c003214:	681b      	ldr	r3, [r3, #0]
 c003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00321a:	2b00      	cmp	r3, #0
 c00321c:	d1ea      	bne.n	c0031f4 <HAL_RCC_OscConfig+0x2e4>
 c00321e:	e000      	b.n	c003222 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c003220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c003222:	687b      	ldr	r3, [r7, #4]
 c003224:	681b      	ldr	r3, [r3, #0]
 c003226:	f003 0302 	and.w	r3, r3, #2
 c00322a:	2b00      	cmp	r3, #0
 c00322c:	d06c      	beq.n	c003308 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c00322e:	69bb      	ldr	r3, [r7, #24]
 c003230:	2b04      	cmp	r3, #4
 c003232:	d005      	beq.n	c003240 <HAL_RCC_OscConfig+0x330>
 c003234:	69bb      	ldr	r3, [r7, #24]
 c003236:	2b0c      	cmp	r3, #12
 c003238:	d119      	bne.n	c00326e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c00323a:	697b      	ldr	r3, [r7, #20]
 c00323c:	2b02      	cmp	r3, #2
 c00323e:	d116      	bne.n	c00326e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c003240:	4b61      	ldr	r3, [pc, #388]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c003242:	681b      	ldr	r3, [r3, #0]
 c003244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003248:	2b00      	cmp	r3, #0
 c00324a:	d005      	beq.n	c003258 <HAL_RCC_OscConfig+0x348>
 c00324c:	687b      	ldr	r3, [r7, #4]
 c00324e:	68db      	ldr	r3, [r3, #12]
 c003250:	2b00      	cmp	r3, #0
 c003252:	d101      	bne.n	c003258 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 c003254:	2301      	movs	r3, #1
 c003256:	e335      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c003258:	4b5b      	ldr	r3, [pc, #364]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c00325a:	685b      	ldr	r3, [r3, #4]
 c00325c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c003260:	687b      	ldr	r3, [r7, #4]
 c003262:	691b      	ldr	r3, [r3, #16]
 c003264:	061b      	lsls	r3, r3, #24
 c003266:	4958      	ldr	r1, [pc, #352]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c003268:	4313      	orrs	r3, r2
 c00326a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c00326c:	e04c      	b.n	c003308 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c00326e:	687b      	ldr	r3, [r7, #4]
 c003270:	68db      	ldr	r3, [r3, #12]
 c003272:	2b00      	cmp	r3, #0
 c003274:	d029      	beq.n	c0032ca <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c003276:	4b54      	ldr	r3, [pc, #336]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c003278:	681b      	ldr	r3, [r3, #0]
 c00327a:	4a53      	ldr	r2, [pc, #332]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c00327c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c003280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003282:	f7ff f807 	bl	c002294 <HAL_GetTick>
 c003286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003288:	e00e      	b.n	c0032a8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c00328a:	f7ff f803 	bl	c002294 <HAL_GetTick>
 c00328e:	4602      	mov	r2, r0
 c003290:	693b      	ldr	r3, [r7, #16]
 c003292:	1ad3      	subs	r3, r2, r3
 c003294:	2b02      	cmp	r3, #2
 c003296:	d907      	bls.n	c0032a8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003298:	4b4b      	ldr	r3, [pc, #300]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c00329a:	681b      	ldr	r3, [r3, #0]
 c00329c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0032a0:	2b00      	cmp	r3, #0
 c0032a2:	d101      	bne.n	c0032a8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 c0032a4:	2303      	movs	r3, #3
 c0032a6:	e30d      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0032a8:	4b47      	ldr	r3, [pc, #284]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c0032aa:	681b      	ldr	r3, [r3, #0]
 c0032ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0032b0:	2b00      	cmp	r3, #0
 c0032b2:	d0ea      	beq.n	c00328a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c0032b4:	4b44      	ldr	r3, [pc, #272]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c0032b6:	685b      	ldr	r3, [r3, #4]
 c0032b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c0032bc:	687b      	ldr	r3, [r7, #4]
 c0032be:	691b      	ldr	r3, [r3, #16]
 c0032c0:	061b      	lsls	r3, r3, #24
 c0032c2:	4941      	ldr	r1, [pc, #260]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c0032c4:	4313      	orrs	r3, r2
 c0032c6:	604b      	str	r3, [r1, #4]
 c0032c8:	e01e      	b.n	c003308 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c0032ca:	4b3f      	ldr	r3, [pc, #252]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c0032cc:	681b      	ldr	r3, [r3, #0]
 c0032ce:	4a3e      	ldr	r2, [pc, #248]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c0032d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c0032d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0032d6:	f7fe ffdd 	bl	c002294 <HAL_GetTick>
 c0032da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0032dc:	e00e      	b.n	c0032fc <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c0032de:	f7fe ffd9 	bl	c002294 <HAL_GetTick>
 c0032e2:	4602      	mov	r2, r0
 c0032e4:	693b      	ldr	r3, [r7, #16]
 c0032e6:	1ad3      	subs	r3, r2, r3
 c0032e8:	2b02      	cmp	r3, #2
 c0032ea:	d907      	bls.n	c0032fc <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0032ec:	4b36      	ldr	r3, [pc, #216]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c0032ee:	681b      	ldr	r3, [r3, #0]
 c0032f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0032f4:	2b00      	cmp	r3, #0
 c0032f6:	d001      	beq.n	c0032fc <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 c0032f8:	2303      	movs	r3, #3
 c0032fa:	e2e3      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0032fc:	4b32      	ldr	r3, [pc, #200]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c0032fe:	681b      	ldr	r3, [r3, #0]
 c003300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003304:	2b00      	cmp	r3, #0
 c003306:	d1ea      	bne.n	c0032de <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c003308:	687b      	ldr	r3, [r7, #4]
 c00330a:	681b      	ldr	r3, [r3, #0]
 c00330c:	f003 0308 	and.w	r3, r3, #8
 c003310:	2b00      	cmp	r3, #0
 c003312:	d062      	beq.n	c0033da <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c003314:	687b      	ldr	r3, [r7, #4]
 c003316:	695b      	ldr	r3, [r3, #20]
 c003318:	2b00      	cmp	r3, #0
 c00331a:	d038      	beq.n	c00338e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c00331c:	687b      	ldr	r3, [r7, #4]
 c00331e:	699b      	ldr	r3, [r3, #24]
 c003320:	2b00      	cmp	r3, #0
 c003322:	d108      	bne.n	c003336 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c003324:	4b28      	ldr	r3, [pc, #160]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00332a:	4a27      	ldr	r2, [pc, #156]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c00332c:	f023 0310 	bic.w	r3, r3, #16
 c003330:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c003334:	e007      	b.n	c003346 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c003336:	4b24      	ldr	r3, [pc, #144]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c003338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00333c:	4a22      	ldr	r2, [pc, #136]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c00333e:	f043 0310 	orr.w	r3, r3, #16
 c003342:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c003346:	4b20      	ldr	r3, [pc, #128]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c003348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00334c:	4a1e      	ldr	r2, [pc, #120]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c00334e:	f043 0301 	orr.w	r3, r3, #1
 c003352:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003356:	f7fe ff9d 	bl	c002294 <HAL_GetTick>
 c00335a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c00335c:	e00f      	b.n	c00337e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c00335e:	f7fe ff99 	bl	c002294 <HAL_GetTick>
 c003362:	4602      	mov	r2, r0
 c003364:	693b      	ldr	r3, [r7, #16]
 c003366:	1ad3      	subs	r3, r2, r3
 c003368:	2b07      	cmp	r3, #7
 c00336a:	d908      	bls.n	c00337e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c00336c:	4b16      	ldr	r3, [pc, #88]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c00336e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003372:	f003 0302 	and.w	r3, r3, #2
 c003376:	2b00      	cmp	r3, #0
 c003378:	d101      	bne.n	c00337e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 c00337a:	2303      	movs	r3, #3
 c00337c:	e2a2      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c00337e:	4b12      	ldr	r3, [pc, #72]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c003380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003384:	f003 0302 	and.w	r3, r3, #2
 c003388:	2b00      	cmp	r3, #0
 c00338a:	d0e8      	beq.n	c00335e <HAL_RCC_OscConfig+0x44e>
 c00338c:	e025      	b.n	c0033da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c00338e:	4b0e      	ldr	r3, [pc, #56]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c003390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003394:	4a0c      	ldr	r2, [pc, #48]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c003396:	f023 0301 	bic.w	r3, r3, #1
 c00339a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00339e:	f7fe ff79 	bl	c002294 <HAL_GetTick>
 c0033a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0033a4:	e012      	b.n	c0033cc <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c0033a6:	f7fe ff75 	bl	c002294 <HAL_GetTick>
 c0033aa:	4602      	mov	r2, r0
 c0033ac:	693b      	ldr	r3, [r7, #16]
 c0033ae:	1ad3      	subs	r3, r2, r3
 c0033b0:	2b07      	cmp	r3, #7
 c0033b2:	d90b      	bls.n	c0033cc <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0033b4:	4b04      	ldr	r3, [pc, #16]	; (c0033c8 <HAL_RCC_OscConfig+0x4b8>)
 c0033b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0033ba:	f003 0302 	and.w	r3, r3, #2
 c0033be:	2b00      	cmp	r3, #0
 c0033c0:	d004      	beq.n	c0033cc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 c0033c2:	2303      	movs	r3, #3
 c0033c4:	e27e      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
 c0033c6:	bf00      	nop
 c0033c8:	50021000 	.word	0x50021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0033cc:	4ba8      	ldr	r3, [pc, #672]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c0033ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0033d2:	f003 0302 	and.w	r3, r3, #2
 c0033d6:	2b00      	cmp	r3, #0
 c0033d8:	d1e5      	bne.n	c0033a6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c0033da:	687b      	ldr	r3, [r7, #4]
 c0033dc:	681b      	ldr	r3, [r3, #0]
 c0033de:	f003 0304 	and.w	r3, r3, #4
 c0033e2:	2b00      	cmp	r3, #0
 c0033e4:	f000 812d 	beq.w	c003642 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 c0033e8:	2300      	movs	r3, #0
 c0033ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c0033ec:	4ba0      	ldr	r3, [pc, #640]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c0033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0033f4:	2b00      	cmp	r3, #0
 c0033f6:	d10d      	bne.n	c003414 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c0033f8:	4b9d      	ldr	r3, [pc, #628]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c0033fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0033fc:	4a9c      	ldr	r2, [pc, #624]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c0033fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c003402:	6593      	str	r3, [r2, #88]	; 0x58
 c003404:	4b9a      	ldr	r3, [pc, #616]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c003406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00340c:	60bb      	str	r3, [r7, #8]
 c00340e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c003410:	2301      	movs	r3, #1
 c003412:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c003414:	4b97      	ldr	r3, [pc, #604]	; (c003674 <HAL_RCC_OscConfig+0x764>)
 c003416:	681b      	ldr	r3, [r3, #0]
 c003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00341c:	2b00      	cmp	r3, #0
 c00341e:	d11e      	bne.n	c00345e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c003420:	4b94      	ldr	r3, [pc, #592]	; (c003674 <HAL_RCC_OscConfig+0x764>)
 c003422:	681b      	ldr	r3, [r3, #0]
 c003424:	4a93      	ldr	r2, [pc, #588]	; (c003674 <HAL_RCC_OscConfig+0x764>)
 c003426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c00342a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c00342c:	f7fe ff32 	bl	c002294 <HAL_GetTick>
 c003430:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c003432:	e00e      	b.n	c003452 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c003434:	f7fe ff2e 	bl	c002294 <HAL_GetTick>
 c003438:	4602      	mov	r2, r0
 c00343a:	693b      	ldr	r3, [r7, #16]
 c00343c:	1ad3      	subs	r3, r2, r3
 c00343e:	2b02      	cmp	r3, #2
 c003440:	d907      	bls.n	c003452 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c003442:	4b8c      	ldr	r3, [pc, #560]	; (c003674 <HAL_RCC_OscConfig+0x764>)
 c003444:	681b      	ldr	r3, [r3, #0]
 c003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00344a:	2b00      	cmp	r3, #0
 c00344c:	d101      	bne.n	c003452 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 c00344e:	2303      	movs	r3, #3
 c003450:	e238      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c003452:	4b88      	ldr	r3, [pc, #544]	; (c003674 <HAL_RCC_OscConfig+0x764>)
 c003454:	681b      	ldr	r3, [r3, #0]
 c003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00345a:	2b00      	cmp	r3, #0
 c00345c:	d0ea      	beq.n	c003434 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c00345e:	687b      	ldr	r3, [r7, #4]
 c003460:	689b      	ldr	r3, [r3, #8]
 c003462:	f003 0301 	and.w	r3, r3, #1
 c003466:	2b00      	cmp	r3, #0
 c003468:	d01f      	beq.n	c0034aa <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c00346a:	687b      	ldr	r3, [r7, #4]
 c00346c:	689b      	ldr	r3, [r3, #8]
 c00346e:	f003 0304 	and.w	r3, r3, #4
 c003472:	2b00      	cmp	r3, #0
 c003474:	d010      	beq.n	c003498 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c003476:	4b7e      	ldr	r3, [pc, #504]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00347c:	4a7c      	ldr	r2, [pc, #496]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c00347e:	f043 0304 	orr.w	r3, r3, #4
 c003482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c003486:	4b7a      	ldr	r3, [pc, #488]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00348c:	4a78      	ldr	r2, [pc, #480]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c00348e:	f043 0301 	orr.w	r3, r3, #1
 c003492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c003496:	e018      	b.n	c0034ca <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c003498:	4b75      	ldr	r3, [pc, #468]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c00349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00349e:	4a74      	ldr	r2, [pc, #464]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c0034a0:	f043 0301 	orr.w	r3, r3, #1
 c0034a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c0034a8:	e00f      	b.n	c0034ca <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0034aa:	4b71      	ldr	r3, [pc, #452]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c0034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0034b0:	4a6f      	ldr	r2, [pc, #444]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c0034b2:	f023 0301 	bic.w	r3, r3, #1
 c0034b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c0034ba:	4b6d      	ldr	r3, [pc, #436]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c0034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0034c0:	4a6b      	ldr	r2, [pc, #428]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c0034c2:	f023 0304 	bic.w	r3, r3, #4
 c0034c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c0034ca:	687b      	ldr	r3, [r7, #4]
 c0034cc:	689b      	ldr	r3, [r3, #8]
 c0034ce:	2b00      	cmp	r3, #0
 c0034d0:	d068      	beq.n	c0035a4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0034d2:	f7fe fedf 	bl	c002294 <HAL_GetTick>
 c0034d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0034d8:	e011      	b.n	c0034fe <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0034da:	f7fe fedb 	bl	c002294 <HAL_GetTick>
 c0034de:	4602      	mov	r2, r0
 c0034e0:	693b      	ldr	r3, [r7, #16]
 c0034e2:	1ad3      	subs	r3, r2, r3
 c0034e4:	f241 3288 	movw	r2, #5000	; 0x1388
 c0034e8:	4293      	cmp	r3, r2
 c0034ea:	d908      	bls.n	c0034fe <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0034ec:	4b60      	ldr	r3, [pc, #384]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c0034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0034f2:	f003 0302 	and.w	r3, r3, #2
 c0034f6:	2b00      	cmp	r3, #0
 c0034f8:	d101      	bne.n	c0034fe <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 c0034fa:	2303      	movs	r3, #3
 c0034fc:	e1e2      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0034fe:	4b5c      	ldr	r3, [pc, #368]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003504:	f003 0302 	and.w	r3, r3, #2
 c003508:	2b00      	cmp	r3, #0
 c00350a:	d0e6      	beq.n	c0034da <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c00350c:	687b      	ldr	r3, [r7, #4]
 c00350e:	689b      	ldr	r3, [r3, #8]
 c003510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c003514:	2b00      	cmp	r3, #0
 c003516:	d022      	beq.n	c00355e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c003518:	4b55      	ldr	r3, [pc, #340]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c00351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00351e:	4a54      	ldr	r2, [pc, #336]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c003520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c003528:	e011      	b.n	c00354e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00352a:	f7fe feb3 	bl	c002294 <HAL_GetTick>
 c00352e:	4602      	mov	r2, r0
 c003530:	693b      	ldr	r3, [r7, #16]
 c003532:	1ad3      	subs	r3, r2, r3
 c003534:	f241 3288 	movw	r2, #5000	; 0x1388
 c003538:	4293      	cmp	r3, r2
 c00353a:	d908      	bls.n	c00354e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c00353c:	4b4c      	ldr	r3, [pc, #304]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c00353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003546:	2b00      	cmp	r3, #0
 c003548:	d101      	bne.n	c00354e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 c00354a:	2303      	movs	r3, #3
 c00354c:	e1ba      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c00354e:	4b48      	ldr	r3, [pc, #288]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003558:	2b00      	cmp	r3, #0
 c00355a:	d0e6      	beq.n	c00352a <HAL_RCC_OscConfig+0x61a>
 c00355c:	e068      	b.n	c003630 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c00355e:	4b44      	ldr	r3, [pc, #272]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003564:	4a42      	ldr	r2, [pc, #264]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c003566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c00356a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c00356e:	e011      	b.n	c003594 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003570:	f7fe fe90 	bl	c002294 <HAL_GetTick>
 c003574:	4602      	mov	r2, r0
 c003576:	693b      	ldr	r3, [r7, #16]
 c003578:	1ad3      	subs	r3, r2, r3
 c00357a:	f241 3288 	movw	r2, #5000	; 0x1388
 c00357e:	4293      	cmp	r3, r2
 c003580:	d908      	bls.n	c003594 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003582:	4b3b      	ldr	r3, [pc, #236]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00358c:	2b00      	cmp	r3, #0
 c00358e:	d001      	beq.n	c003594 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 c003590:	2303      	movs	r3, #3
 c003592:	e197      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003594:	4b36      	ldr	r3, [pc, #216]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00359a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00359e:	2b00      	cmp	r3, #0
 c0035a0:	d1e6      	bne.n	c003570 <HAL_RCC_OscConfig+0x660>
 c0035a2:	e045      	b.n	c003630 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0035a4:	f7fe fe76 	bl	c002294 <HAL_GetTick>
 c0035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0035aa:	e011      	b.n	c0035d0 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0035ac:	f7fe fe72 	bl	c002294 <HAL_GetTick>
 c0035b0:	4602      	mov	r2, r0
 c0035b2:	693b      	ldr	r3, [r7, #16]
 c0035b4:	1ad3      	subs	r3, r2, r3
 c0035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 c0035ba:	4293      	cmp	r3, r2
 c0035bc:	d908      	bls.n	c0035d0 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0035be:	4b2c      	ldr	r3, [pc, #176]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c0035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0035c4:	f003 0302 	and.w	r3, r3, #2
 c0035c8:	2b00      	cmp	r3, #0
 c0035ca:	d001      	beq.n	c0035d0 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 c0035cc:	2303      	movs	r3, #3
 c0035ce:	e179      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0035d0:	4b27      	ldr	r3, [pc, #156]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c0035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0035d6:	f003 0302 	and.w	r3, r3, #2
 c0035da:	2b00      	cmp	r3, #0
 c0035dc:	d1e6      	bne.n	c0035ac <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c0035de:	4b24      	ldr	r3, [pc, #144]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c0035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0035e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0035e8:	2b00      	cmp	r3, #0
 c0035ea:	d021      	beq.n	c003630 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0035ec:	4b20      	ldr	r3, [pc, #128]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c0035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0035f2:	4a1f      	ldr	r2, [pc, #124]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c0035f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c0035f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0035fc:	e011      	b.n	c003622 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0035fe:	f7fe fe49 	bl	c002294 <HAL_GetTick>
 c003602:	4602      	mov	r2, r0
 c003604:	693b      	ldr	r3, [r7, #16]
 c003606:	1ad3      	subs	r3, r2, r3
 c003608:	f241 3288 	movw	r2, #5000	; 0x1388
 c00360c:	4293      	cmp	r3, r2
 c00360e:	d908      	bls.n	c003622 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003610:	4b17      	ldr	r3, [pc, #92]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00361a:	2b00      	cmp	r3, #0
 c00361c:	d001      	beq.n	c003622 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 c00361e:	2303      	movs	r3, #3
 c003620:	e150      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003622:	4b13      	ldr	r3, [pc, #76]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c003624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00362c:	2b00      	cmp	r3, #0
 c00362e:	d1e6      	bne.n	c0035fe <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c003630:	7ffb      	ldrb	r3, [r7, #31]
 c003632:	2b01      	cmp	r3, #1
 c003634:	d105      	bne.n	c003642 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c003636:	4b0e      	ldr	r3, [pc, #56]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00363a:	4a0d      	ldr	r2, [pc, #52]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c00363c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c003640:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c003642:	687b      	ldr	r3, [r7, #4]
 c003644:	681b      	ldr	r3, [r3, #0]
 c003646:	f003 0320 	and.w	r3, r3, #32
 c00364a:	2b00      	cmp	r3, #0
 c00364c:	d04f      	beq.n	c0036ee <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c00364e:	687b      	ldr	r3, [r7, #4]
 c003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003652:	2b00      	cmp	r3, #0
 c003654:	d028      	beq.n	c0036a8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c003656:	4b06      	ldr	r3, [pc, #24]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c003658:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00365c:	4a04      	ldr	r2, [pc, #16]	; (c003670 <HAL_RCC_OscConfig+0x760>)
 c00365e:	f043 0301 	orr.w	r3, r3, #1
 c003662:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003666:	f7fe fe15 	bl	c002294 <HAL_GetTick>
 c00366a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c00366c:	e014      	b.n	c003698 <HAL_RCC_OscConfig+0x788>
 c00366e:	bf00      	nop
 c003670:	50021000 	.word	0x50021000
 c003674:	50007000 	.word	0x50007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c003678:	f7fe fe0c 	bl	c002294 <HAL_GetTick>
 c00367c:	4602      	mov	r2, r0
 c00367e:	693b      	ldr	r3, [r7, #16]
 c003680:	1ad3      	subs	r3, r2, r3
 c003682:	2b02      	cmp	r3, #2
 c003684:	d908      	bls.n	c003698 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c003686:	4b91      	ldr	r3, [pc, #580]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c003688:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00368c:	f003 0302 	and.w	r3, r3, #2
 c003690:	2b00      	cmp	r3, #0
 c003692:	d101      	bne.n	c003698 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 c003694:	2303      	movs	r3, #3
 c003696:	e115      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c003698:	4b8c      	ldr	r3, [pc, #560]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c00369a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00369e:	f003 0302 	and.w	r3, r3, #2
 c0036a2:	2b00      	cmp	r3, #0
 c0036a4:	d0e8      	beq.n	c003678 <HAL_RCC_OscConfig+0x768>
 c0036a6:	e022      	b.n	c0036ee <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c0036a8:	4b88      	ldr	r3, [pc, #544]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c0036aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0036ae:	4a87      	ldr	r2, [pc, #540]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c0036b0:	f023 0301 	bic.w	r3, r3, #1
 c0036b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0036b8:	f7fe fdec 	bl	c002294 <HAL_GetTick>
 c0036bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0036be:	e00f      	b.n	c0036e0 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c0036c0:	f7fe fde8 	bl	c002294 <HAL_GetTick>
 c0036c4:	4602      	mov	r2, r0
 c0036c6:	693b      	ldr	r3, [r7, #16]
 c0036c8:	1ad3      	subs	r3, r2, r3
 c0036ca:	2b02      	cmp	r3, #2
 c0036cc:	d908      	bls.n	c0036e0 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0036ce:	4b7f      	ldr	r3, [pc, #508]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c0036d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0036d4:	f003 0302 	and.w	r3, r3, #2
 c0036d8:	2b00      	cmp	r3, #0
 c0036da:	d001      	beq.n	c0036e0 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 c0036dc:	2303      	movs	r3, #3
 c0036de:	e0f1      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0036e0:	4b7a      	ldr	r3, [pc, #488]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c0036e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0036e6:	f003 0302 	and.w	r3, r3, #2
 c0036ea:	2b00      	cmp	r3, #0
 c0036ec:	d1e8      	bne.n	c0036c0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c0036ee:	687b      	ldr	r3, [r7, #4]
 c0036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0036f2:	2b00      	cmp	r3, #0
 c0036f4:	f000 80e5 	beq.w	c0038c2 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0036f8:	4b74      	ldr	r3, [pc, #464]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c0036fa:	689b      	ldr	r3, [r3, #8]
 c0036fc:	f003 030c 	and.w	r3, r3, #12
 c003700:	2b0c      	cmp	r3, #12
 c003702:	f000 809f 	beq.w	c003844 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c003706:	687b      	ldr	r3, [r7, #4]
 c003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00370a:	2b02      	cmp	r3, #2
 c00370c:	d166      	bne.n	c0037dc <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c00370e:	4b6f      	ldr	r3, [pc, #444]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c003710:	681b      	ldr	r3, [r3, #0]
 c003712:	4a6e      	ldr	r2, [pc, #440]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c003714:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c003718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00371a:	f7fe fdbb 	bl	c002294 <HAL_GetTick>
 c00371e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003720:	e00e      	b.n	c003740 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c003722:	f7fe fdb7 	bl	c002294 <HAL_GetTick>
 c003726:	4602      	mov	r2, r0
 c003728:	693b      	ldr	r3, [r7, #16]
 c00372a:	1ad3      	subs	r3, r2, r3
 c00372c:	2b02      	cmp	r3, #2
 c00372e:	d907      	bls.n	c003740 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003730:	4b66      	ldr	r3, [pc, #408]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c003732:	681b      	ldr	r3, [r3, #0]
 c003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003738:	2b00      	cmp	r3, #0
 c00373a:	d001      	beq.n	c003740 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 c00373c:	2303      	movs	r3, #3
 c00373e:	e0c1      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003740:	4b62      	ldr	r3, [pc, #392]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c003742:	681b      	ldr	r3, [r3, #0]
 c003744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003748:	2b00      	cmp	r3, #0
 c00374a:	d1ea      	bne.n	c003722 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c00374c:	4b5f      	ldr	r3, [pc, #380]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c00374e:	68da      	ldr	r2, [r3, #12]
 c003750:	4b5f      	ldr	r3, [pc, #380]	; (c0038d0 <HAL_RCC_OscConfig+0x9c0>)
 c003752:	4013      	ands	r3, r2
 c003754:	687a      	ldr	r2, [r7, #4]
 c003756:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c003758:	687a      	ldr	r2, [r7, #4]
 c00375a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c00375c:	3a01      	subs	r2, #1
 c00375e:	0112      	lsls	r2, r2, #4
 c003760:	4311      	orrs	r1, r2
 c003762:	687a      	ldr	r2, [r7, #4]
 c003764:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c003766:	0212      	lsls	r2, r2, #8
 c003768:	4311      	orrs	r1, r2
 c00376a:	687a      	ldr	r2, [r7, #4]
 c00376c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c00376e:	0852      	lsrs	r2, r2, #1
 c003770:	3a01      	subs	r2, #1
 c003772:	0552      	lsls	r2, r2, #21
 c003774:	4311      	orrs	r1, r2
 c003776:	687a      	ldr	r2, [r7, #4]
 c003778:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c00377a:	0852      	lsrs	r2, r2, #1
 c00377c:	3a01      	subs	r2, #1
 c00377e:	0652      	lsls	r2, r2, #25
 c003780:	4311      	orrs	r1, r2
 c003782:	687a      	ldr	r2, [r7, #4]
 c003784:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c003786:	06d2      	lsls	r2, r2, #27
 c003788:	430a      	orrs	r2, r1
 c00378a:	4950      	ldr	r1, [pc, #320]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c00378c:	4313      	orrs	r3, r2
 c00378e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c003790:	4b4e      	ldr	r3, [pc, #312]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c003792:	681b      	ldr	r3, [r3, #0]
 c003794:	4a4d      	ldr	r2, [pc, #308]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c003796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c00379a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c00379c:	4b4b      	ldr	r3, [pc, #300]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c00379e:	68db      	ldr	r3, [r3, #12]
 c0037a0:	4a4a      	ldr	r2, [pc, #296]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c0037a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c0037a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0037a8:	f7fe fd74 	bl	c002294 <HAL_GetTick>
 c0037ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0037ae:	e00e      	b.n	c0037ce <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0037b0:	f7fe fd70 	bl	c002294 <HAL_GetTick>
 c0037b4:	4602      	mov	r2, r0
 c0037b6:	693b      	ldr	r3, [r7, #16]
 c0037b8:	1ad3      	subs	r3, r2, r3
 c0037ba:	2b02      	cmp	r3, #2
 c0037bc:	d907      	bls.n	c0037ce <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0037be:	4b43      	ldr	r3, [pc, #268]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c0037c0:	681b      	ldr	r3, [r3, #0]
 c0037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0037c6:	2b00      	cmp	r3, #0
 c0037c8:	d101      	bne.n	c0037ce <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 c0037ca:	2303      	movs	r3, #3
 c0037cc:	e07a      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0037ce:	4b3f      	ldr	r3, [pc, #252]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c0037d0:	681b      	ldr	r3, [r3, #0]
 c0037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0037d6:	2b00      	cmp	r3, #0
 c0037d8:	d0ea      	beq.n	c0037b0 <HAL_RCC_OscConfig+0x8a0>
 c0037da:	e072      	b.n	c0038c2 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c0037dc:	4b3b      	ldr	r3, [pc, #236]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c0037de:	681b      	ldr	r3, [r3, #0]
 c0037e0:	4a3a      	ldr	r2, [pc, #232]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c0037e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0037e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 c0037e8:	4b38      	ldr	r3, [pc, #224]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c0037ea:	681b      	ldr	r3, [r3, #0]
 c0037ec:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 c0037f0:	2b00      	cmp	r3, #0
 c0037f2:	d105      	bne.n	c003800 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 c0037f4:	4b35      	ldr	r3, [pc, #212]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c0037f6:	68db      	ldr	r3, [r3, #12]
 c0037f8:	4a34      	ldr	r2, [pc, #208]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c0037fa:	f023 0303 	bic.w	r3, r3, #3
 c0037fe:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c003800:	4b32      	ldr	r3, [pc, #200]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c003802:	68db      	ldr	r3, [r3, #12]
 c003804:	4a31      	ldr	r2, [pc, #196]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c003806:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 c00380a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c00380e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003810:	f7fe fd40 	bl	c002294 <HAL_GetTick>
 c003814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003816:	e00e      	b.n	c003836 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c003818:	f7fe fd3c 	bl	c002294 <HAL_GetTick>
 c00381c:	4602      	mov	r2, r0
 c00381e:	693b      	ldr	r3, [r7, #16]
 c003820:	1ad3      	subs	r3, r2, r3
 c003822:	2b02      	cmp	r3, #2
 c003824:	d907      	bls.n	c003836 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003826:	4b29      	ldr	r3, [pc, #164]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c003828:	681b      	ldr	r3, [r3, #0]
 c00382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00382e:	2b00      	cmp	r3, #0
 c003830:	d001      	beq.n	c003836 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 c003832:	2303      	movs	r3, #3
 c003834:	e046      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003836:	4b25      	ldr	r3, [pc, #148]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c003838:	681b      	ldr	r3, [r3, #0]
 c00383a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00383e:	2b00      	cmp	r3, #0
 c003840:	d1ea      	bne.n	c003818 <HAL_RCC_OscConfig+0x908>
 c003842:	e03e      	b.n	c0038c2 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c003844:	687b      	ldr	r3, [r7, #4]
 c003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003848:	2b01      	cmp	r3, #1
 c00384a:	d101      	bne.n	c003850 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 c00384c:	2301      	movs	r3, #1
 c00384e:	e039      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c003850:	4b1e      	ldr	r3, [pc, #120]	; (c0038cc <HAL_RCC_OscConfig+0x9bc>)
 c003852:	68db      	ldr	r3, [r3, #12]
 c003854:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c003856:	697b      	ldr	r3, [r7, #20]
 c003858:	f003 0203 	and.w	r2, r3, #3
 c00385c:	687b      	ldr	r3, [r7, #4]
 c00385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003860:	429a      	cmp	r2, r3
 c003862:	d12c      	bne.n	c0038be <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c003864:	697b      	ldr	r3, [r7, #20]
 c003866:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c00386a:	687b      	ldr	r3, [r7, #4]
 c00386c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00386e:	3b01      	subs	r3, #1
 c003870:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c003872:	429a      	cmp	r2, r3
 c003874:	d123      	bne.n	c0038be <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c003876:	697b      	ldr	r3, [r7, #20]
 c003878:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c00387c:	687b      	ldr	r3, [r7, #4]
 c00387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003880:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c003882:	429a      	cmp	r2, r3
 c003884:	d11b      	bne.n	c0038be <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c003886:	697b      	ldr	r3, [r7, #20]
 c003888:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c00388c:	687b      	ldr	r3, [r7, #4]
 c00388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003890:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c003892:	429a      	cmp	r2, r3
 c003894:	d113      	bne.n	c0038be <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c003896:	697b      	ldr	r3, [r7, #20]
 c003898:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c00389c:	687b      	ldr	r3, [r7, #4]
 c00389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c0038a0:	085b      	lsrs	r3, r3, #1
 c0038a2:	3b01      	subs	r3, #1
 c0038a4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c0038a6:	429a      	cmp	r2, r3
 c0038a8:	d109      	bne.n	c0038be <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c0038aa:	697b      	ldr	r3, [r7, #20]
 c0038ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c0038b0:	687b      	ldr	r3, [r7, #4]
 c0038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0038b4:	085b      	lsrs	r3, r3, #1
 c0038b6:	3b01      	subs	r3, #1
 c0038b8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c0038ba:	429a      	cmp	r2, r3
 c0038bc:	d001      	beq.n	c0038c2 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 c0038be:	2301      	movs	r3, #1
 c0038c0:	e000      	b.n	c0038c4 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 c0038c2:	2300      	movs	r3, #0
}
 c0038c4:	4618      	mov	r0, r3
 c0038c6:	3720      	adds	r7, #32
 c0038c8:	46bd      	mov	sp, r7
 c0038ca:	bd80      	pop	{r7, pc}
 c0038cc:	50021000 	.word	0x50021000
 c0038d0:	019f800c 	.word	0x019f800c

0c0038d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c0038d4:	b580      	push	{r7, lr}
 c0038d6:	b086      	sub	sp, #24
 c0038d8:	af00      	add	r7, sp, #0
 c0038da:	6078      	str	r0, [r7, #4]
 c0038dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c0038de:	2300      	movs	r3, #0
 c0038e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c0038e2:	687b      	ldr	r3, [r7, #4]
 c0038e4:	2b00      	cmp	r3, #0
 c0038e6:	d101      	bne.n	c0038ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c0038e8:	2301      	movs	r3, #1
 c0038ea:	e10d      	b.n	c003b08 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c0038ec:	4b88      	ldr	r3, [pc, #544]	; (c003b10 <HAL_RCC_ClockConfig+0x23c>)
 c0038ee:	681b      	ldr	r3, [r3, #0]
 c0038f0:	f003 030f 	and.w	r3, r3, #15
 c0038f4:	683a      	ldr	r2, [r7, #0]
 c0038f6:	429a      	cmp	r2, r3
 c0038f8:	d910      	bls.n	c00391c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c0038fa:	4b85      	ldr	r3, [pc, #532]	; (c003b10 <HAL_RCC_ClockConfig+0x23c>)
 c0038fc:	681b      	ldr	r3, [r3, #0]
 c0038fe:	f023 020f 	bic.w	r2, r3, #15
 c003902:	4983      	ldr	r1, [pc, #524]	; (c003b10 <HAL_RCC_ClockConfig+0x23c>)
 c003904:	683b      	ldr	r3, [r7, #0]
 c003906:	4313      	orrs	r3, r2
 c003908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c00390a:	4b81      	ldr	r3, [pc, #516]	; (c003b10 <HAL_RCC_ClockConfig+0x23c>)
 c00390c:	681b      	ldr	r3, [r3, #0]
 c00390e:	f003 030f 	and.w	r3, r3, #15
 c003912:	683a      	ldr	r2, [r7, #0]
 c003914:	429a      	cmp	r2, r3
 c003916:	d001      	beq.n	c00391c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c003918:	2301      	movs	r3, #1
 c00391a:	e0f5      	b.n	c003b08 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c00391c:	687b      	ldr	r3, [r7, #4]
 c00391e:	681b      	ldr	r3, [r3, #0]
 c003920:	f003 0301 	and.w	r3, r3, #1
 c003924:	2b00      	cmp	r3, #0
 c003926:	f000 8094 	beq.w	c003a52 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c00392a:	687b      	ldr	r3, [r7, #4]
 c00392c:	685b      	ldr	r3, [r3, #4]
 c00392e:	2b03      	cmp	r3, #3
 c003930:	d134      	bne.n	c00399c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c003932:	4b78      	ldr	r3, [pc, #480]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003934:	681b      	ldr	r3, [r3, #0]
 c003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00393a:	2b00      	cmp	r3, #0
 c00393c:	d101      	bne.n	c003942 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 c00393e:	2301      	movs	r3, #1
 c003940:	e0e2      	b.n	c003b08 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c003942:	f000 fa2b 	bl	c003d9c <RCC_GetSysClockFreqFromPLLSource>
 c003946:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c003948:	693b      	ldr	r3, [r7, #16]
 c00394a:	4a73      	ldr	r2, [pc, #460]	; (c003b18 <HAL_RCC_ClockConfig+0x244>)
 c00394c:	4293      	cmp	r3, r2
 c00394e:	d956      	bls.n	c0039fe <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c003950:	4b70      	ldr	r3, [pc, #448]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003952:	689b      	ldr	r3, [r3, #8]
 c003954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003958:	2b00      	cmp	r3, #0
 c00395a:	d10a      	bne.n	c003972 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c00395c:	4b6d      	ldr	r3, [pc, #436]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c00395e:	689b      	ldr	r3, [r3, #8]
 c003960:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c003964:	4a6b      	ldr	r2, [pc, #428]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c00396a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c00396c:	2380      	movs	r3, #128	; 0x80
 c00396e:	617b      	str	r3, [r7, #20]
 c003970:	e045      	b.n	c0039fe <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c003972:	687b      	ldr	r3, [r7, #4]
 c003974:	681b      	ldr	r3, [r3, #0]
 c003976:	f003 0302 	and.w	r3, r3, #2
 c00397a:	2b00      	cmp	r3, #0
 c00397c:	d03f      	beq.n	c0039fe <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 c00397e:	687b      	ldr	r3, [r7, #4]
 c003980:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c003982:	2b00      	cmp	r3, #0
 c003984:	d13b      	bne.n	c0039fe <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c003986:	4b63      	ldr	r3, [pc, #396]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003988:	689b      	ldr	r3, [r3, #8]
 c00398a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c00398e:	4a61      	ldr	r2, [pc, #388]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003994:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c003996:	2380      	movs	r3, #128	; 0x80
 c003998:	617b      	str	r3, [r7, #20]
 c00399a:	e030      	b.n	c0039fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c00399c:	687b      	ldr	r3, [r7, #4]
 c00399e:	685b      	ldr	r3, [r3, #4]
 c0039a0:	2b02      	cmp	r3, #2
 c0039a2:	d107      	bne.n	c0039b4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0039a4:	4b5b      	ldr	r3, [pc, #364]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c0039a6:	681b      	ldr	r3, [r3, #0]
 c0039a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0039ac:	2b00      	cmp	r3, #0
 c0039ae:	d115      	bne.n	c0039dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c0039b0:	2301      	movs	r3, #1
 c0039b2:	e0a9      	b.n	c003b08 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c0039b4:	687b      	ldr	r3, [r7, #4]
 c0039b6:	685b      	ldr	r3, [r3, #4]
 c0039b8:	2b00      	cmp	r3, #0
 c0039ba:	d107      	bne.n	c0039cc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c0039bc:	4b55      	ldr	r3, [pc, #340]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c0039be:	681b      	ldr	r3, [r3, #0]
 c0039c0:	f003 0302 	and.w	r3, r3, #2
 c0039c4:	2b00      	cmp	r3, #0
 c0039c6:	d109      	bne.n	c0039dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c0039c8:	2301      	movs	r3, #1
 c0039ca:	e09d      	b.n	c003b08 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0039cc:	4b51      	ldr	r3, [pc, #324]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c0039ce:	681b      	ldr	r3, [r3, #0]
 c0039d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0039d4:	2b00      	cmp	r3, #0
 c0039d6:	d101      	bne.n	c0039dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c0039d8:	2301      	movs	r3, #1
 c0039da:	e095      	b.n	c003b08 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c0039dc:	f000 f8a2 	bl	c003b24 <HAL_RCC_GetSysClockFreq>
 c0039e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c0039e2:	693b      	ldr	r3, [r7, #16]
 c0039e4:	4a4c      	ldr	r2, [pc, #304]	; (c003b18 <HAL_RCC_ClockConfig+0x244>)
 c0039e6:	4293      	cmp	r3, r2
 c0039e8:	d909      	bls.n	c0039fe <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c0039ea:	4b4a      	ldr	r3, [pc, #296]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c0039ec:	689b      	ldr	r3, [r3, #8]
 c0039ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c0039f2:	4a48      	ldr	r2, [pc, #288]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c0039f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0039f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 c0039fa:	2380      	movs	r3, #128	; 0x80
 c0039fc:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c0039fe:	4b45      	ldr	r3, [pc, #276]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003a00:	689b      	ldr	r3, [r3, #8]
 c003a02:	f023 0203 	bic.w	r2, r3, #3
 c003a06:	687b      	ldr	r3, [r7, #4]
 c003a08:	685b      	ldr	r3, [r3, #4]
 c003a0a:	4942      	ldr	r1, [pc, #264]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003a0c:	4313      	orrs	r3, r2
 c003a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c003a10:	f7fe fc40 	bl	c002294 <HAL_GetTick>
 c003a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c003a16:	e013      	b.n	c003a40 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c003a18:	f7fe fc3c 	bl	c002294 <HAL_GetTick>
 c003a1c:	4602      	mov	r2, r0
 c003a1e:	68fb      	ldr	r3, [r7, #12]
 c003a20:	1ad3      	subs	r3, r2, r3
 c003a22:	f241 3288 	movw	r2, #5000	; 0x1388
 c003a26:	4293      	cmp	r3, r2
 c003a28:	d90a      	bls.n	c003a40 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c003a2a:	4b3a      	ldr	r3, [pc, #232]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003a2c:	689b      	ldr	r3, [r3, #8]
 c003a2e:	f003 020c 	and.w	r2, r3, #12
 c003a32:	687b      	ldr	r3, [r7, #4]
 c003a34:	685b      	ldr	r3, [r3, #4]
 c003a36:	009b      	lsls	r3, r3, #2
 c003a38:	429a      	cmp	r2, r3
 c003a3a:	d001      	beq.n	c003a40 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 c003a3c:	2303      	movs	r3, #3
 c003a3e:	e063      	b.n	c003b08 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c003a40:	4b34      	ldr	r3, [pc, #208]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003a42:	689b      	ldr	r3, [r3, #8]
 c003a44:	f003 020c 	and.w	r2, r3, #12
 c003a48:	687b      	ldr	r3, [r7, #4]
 c003a4a:	685b      	ldr	r3, [r3, #4]
 c003a4c:	009b      	lsls	r3, r3, #2
 c003a4e:	429a      	cmp	r2, r3
 c003a50:	d1e2      	bne.n	c003a18 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c003a52:	687b      	ldr	r3, [r7, #4]
 c003a54:	681b      	ldr	r3, [r3, #0]
 c003a56:	f003 0302 	and.w	r3, r3, #2
 c003a5a:	2b00      	cmp	r3, #0
 c003a5c:	d009      	beq.n	c003a72 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c003a5e:	4b2d      	ldr	r3, [pc, #180]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003a60:	689b      	ldr	r3, [r3, #8]
 c003a62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c003a66:	687b      	ldr	r3, [r7, #4]
 c003a68:	689b      	ldr	r3, [r3, #8]
 c003a6a:	492a      	ldr	r1, [pc, #168]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003a6c:	4313      	orrs	r3, r2
 c003a6e:	608b      	str	r3, [r1, #8]
 c003a70:	e008      	b.n	c003a84 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 c003a72:	697b      	ldr	r3, [r7, #20]
 c003a74:	2b80      	cmp	r3, #128	; 0x80
 c003a76:	d105      	bne.n	c003a84 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c003a78:	4b26      	ldr	r3, [pc, #152]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003a7a:	689b      	ldr	r3, [r3, #8]
 c003a7c:	4a25      	ldr	r2, [pc, #148]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c003a82:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c003a84:	4b22      	ldr	r3, [pc, #136]	; (c003b10 <HAL_RCC_ClockConfig+0x23c>)
 c003a86:	681b      	ldr	r3, [r3, #0]
 c003a88:	f003 030f 	and.w	r3, r3, #15
 c003a8c:	683a      	ldr	r2, [r7, #0]
 c003a8e:	429a      	cmp	r2, r3
 c003a90:	d210      	bcs.n	c003ab4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c003a92:	4b1f      	ldr	r3, [pc, #124]	; (c003b10 <HAL_RCC_ClockConfig+0x23c>)
 c003a94:	681b      	ldr	r3, [r3, #0]
 c003a96:	f023 020f 	bic.w	r2, r3, #15
 c003a9a:	491d      	ldr	r1, [pc, #116]	; (c003b10 <HAL_RCC_ClockConfig+0x23c>)
 c003a9c:	683b      	ldr	r3, [r7, #0]
 c003a9e:	4313      	orrs	r3, r2
 c003aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c003aa2:	4b1b      	ldr	r3, [pc, #108]	; (c003b10 <HAL_RCC_ClockConfig+0x23c>)
 c003aa4:	681b      	ldr	r3, [r3, #0]
 c003aa6:	f003 030f 	and.w	r3, r3, #15
 c003aaa:	683a      	ldr	r2, [r7, #0]
 c003aac:	429a      	cmp	r2, r3
 c003aae:	d001      	beq.n	c003ab4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 c003ab0:	2301      	movs	r3, #1
 c003ab2:	e029      	b.n	c003b08 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c003ab4:	687b      	ldr	r3, [r7, #4]
 c003ab6:	681b      	ldr	r3, [r3, #0]
 c003ab8:	f003 0304 	and.w	r3, r3, #4
 c003abc:	2b00      	cmp	r3, #0
 c003abe:	d008      	beq.n	c003ad2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c003ac0:	4b14      	ldr	r3, [pc, #80]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003ac2:	689b      	ldr	r3, [r3, #8]
 c003ac4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c003ac8:	687b      	ldr	r3, [r7, #4]
 c003aca:	68db      	ldr	r3, [r3, #12]
 c003acc:	4911      	ldr	r1, [pc, #68]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003ace:	4313      	orrs	r3, r2
 c003ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c003ad2:	687b      	ldr	r3, [r7, #4]
 c003ad4:	681b      	ldr	r3, [r3, #0]
 c003ad6:	f003 0308 	and.w	r3, r3, #8
 c003ada:	2b00      	cmp	r3, #0
 c003adc:	d009      	beq.n	c003af2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c003ade:	4b0d      	ldr	r3, [pc, #52]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003ae0:	689b      	ldr	r3, [r3, #8]
 c003ae2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c003ae6:	687b      	ldr	r3, [r7, #4]
 c003ae8:	691b      	ldr	r3, [r3, #16]
 c003aea:	00db      	lsls	r3, r3, #3
 c003aec:	4909      	ldr	r1, [pc, #36]	; (c003b14 <HAL_RCC_ClockConfig+0x240>)
 c003aee:	4313      	orrs	r3, r2
 c003af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c003af2:	f000 f8b3 	bl	c003c5c <HAL_RCC_GetHCLKFreq>
 c003af6:	4603      	mov	r3, r0
 c003af8:	4a08      	ldr	r2, [pc, #32]	; (c003b1c <HAL_RCC_ClockConfig+0x248>)
 c003afa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c003afc:	4b08      	ldr	r3, [pc, #32]	; (c003b20 <HAL_RCC_ClockConfig+0x24c>)
 c003afe:	681b      	ldr	r3, [r3, #0]
 c003b00:	4618      	mov	r0, r3
 c003b02:	f7fe fb77 	bl	c0021f4 <HAL_InitTick>
 c003b06:	4603      	mov	r3, r0
}
 c003b08:	4618      	mov	r0, r3
 c003b0a:	3718      	adds	r7, #24
 c003b0c:	46bd      	mov	sp, r7
 c003b0e:	bd80      	pop	{r7, pc}
 c003b10:	50022000 	.word	0x50022000
 c003b14:	50021000 	.word	0x50021000
 c003b18:	04c4b400 	.word	0x04c4b400
 c003b1c:	30000004 	.word	0x30000004
 c003b20:	30000008 	.word	0x30000008

0c003b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c003b24:	b480      	push	{r7}
 c003b26:	b089      	sub	sp, #36	; 0x24
 c003b28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c003b2a:	2300      	movs	r3, #0
 c003b2c:	61fb      	str	r3, [r7, #28]
 c003b2e:	2300      	movs	r3, #0
 c003b30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c003b32:	4b47      	ldr	r3, [pc, #284]	; (c003c50 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003b34:	689b      	ldr	r3, [r3, #8]
 c003b36:	f003 030c 	and.w	r3, r3, #12
 c003b3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c003b3c:	4b44      	ldr	r3, [pc, #272]	; (c003c50 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003b3e:	68db      	ldr	r3, [r3, #12]
 c003b40:	f003 0303 	and.w	r3, r3, #3
 c003b44:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c003b46:	693b      	ldr	r3, [r7, #16]
 c003b48:	2b00      	cmp	r3, #0
 c003b4a:	d005      	beq.n	c003b58 <HAL_RCC_GetSysClockFreq+0x34>
 c003b4c:	693b      	ldr	r3, [r7, #16]
 c003b4e:	2b0c      	cmp	r3, #12
 c003b50:	d121      	bne.n	c003b96 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c003b52:	68fb      	ldr	r3, [r7, #12]
 c003b54:	2b01      	cmp	r3, #1
 c003b56:	d11e      	bne.n	c003b96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c003b58:	4b3d      	ldr	r3, [pc, #244]	; (c003c50 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003b5a:	681b      	ldr	r3, [r3, #0]
 c003b5c:	f003 0308 	and.w	r3, r3, #8
 c003b60:	2b00      	cmp	r3, #0
 c003b62:	d107      	bne.n	c003b74 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c003b64:	4b3a      	ldr	r3, [pc, #232]	; (c003c50 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003b6a:	0a1b      	lsrs	r3, r3, #8
 c003b6c:	f003 030f 	and.w	r3, r3, #15
 c003b70:	61fb      	str	r3, [r7, #28]
 c003b72:	e005      	b.n	c003b80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c003b74:	4b36      	ldr	r3, [pc, #216]	; (c003c50 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003b76:	681b      	ldr	r3, [r3, #0]
 c003b78:	091b      	lsrs	r3, r3, #4
 c003b7a:	f003 030f 	and.w	r3, r3, #15
 c003b7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c003b80:	4a34      	ldr	r2, [pc, #208]	; (c003c54 <HAL_RCC_GetSysClockFreq+0x130>)
 c003b82:	69fb      	ldr	r3, [r7, #28]
 c003b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c003b88:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c003b8a:	693b      	ldr	r3, [r7, #16]
 c003b8c:	2b00      	cmp	r3, #0
 c003b8e:	d10d      	bne.n	c003bac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c003b90:	69fb      	ldr	r3, [r7, #28]
 c003b92:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c003b94:	e00a      	b.n	c003bac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c003b96:	693b      	ldr	r3, [r7, #16]
 c003b98:	2b04      	cmp	r3, #4
 c003b9a:	d102      	bne.n	c003ba2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c003b9c:	4b2e      	ldr	r3, [pc, #184]	; (c003c58 <HAL_RCC_GetSysClockFreq+0x134>)
 c003b9e:	61bb      	str	r3, [r7, #24]
 c003ba0:	e004      	b.n	c003bac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c003ba2:	693b      	ldr	r3, [r7, #16]
 c003ba4:	2b08      	cmp	r3, #8
 c003ba6:	d101      	bne.n	c003bac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c003ba8:	4b2b      	ldr	r3, [pc, #172]	; (c003c58 <HAL_RCC_GetSysClockFreq+0x134>)
 c003baa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c003bac:	693b      	ldr	r3, [r7, #16]
 c003bae:	2b0c      	cmp	r3, #12
 c003bb0:	d146      	bne.n	c003c40 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c003bb2:	4b27      	ldr	r3, [pc, #156]	; (c003c50 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003bb4:	68db      	ldr	r3, [r3, #12]
 c003bb6:	f003 0303 	and.w	r3, r3, #3
 c003bba:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c003bbc:	4b24      	ldr	r3, [pc, #144]	; (c003c50 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003bbe:	68db      	ldr	r3, [r3, #12]
 c003bc0:	091b      	lsrs	r3, r3, #4
 c003bc2:	f003 030f 	and.w	r3, r3, #15
 c003bc6:	3301      	adds	r3, #1
 c003bc8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c003bca:	68bb      	ldr	r3, [r7, #8]
 c003bcc:	2b02      	cmp	r3, #2
 c003bce:	d003      	beq.n	c003bd8 <HAL_RCC_GetSysClockFreq+0xb4>
 c003bd0:	68bb      	ldr	r3, [r7, #8]
 c003bd2:	2b03      	cmp	r3, #3
 c003bd4:	d00d      	beq.n	c003bf2 <HAL_RCC_GetSysClockFreq+0xce>
 c003bd6:	e019      	b.n	c003c0c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003bd8:	4a1f      	ldr	r2, [pc, #124]	; (c003c58 <HAL_RCC_GetSysClockFreq+0x134>)
 c003bda:	687b      	ldr	r3, [r7, #4]
 c003bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 c003be0:	4a1b      	ldr	r2, [pc, #108]	; (c003c50 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003be2:	68d2      	ldr	r2, [r2, #12]
 c003be4:	0a12      	lsrs	r2, r2, #8
 c003be6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003bea:	fb02 f303 	mul.w	r3, r2, r3
 c003bee:	617b      	str	r3, [r7, #20]
        break;
 c003bf0:	e019      	b.n	c003c26 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003bf2:	4a19      	ldr	r2, [pc, #100]	; (c003c58 <HAL_RCC_GetSysClockFreq+0x134>)
 c003bf4:	687b      	ldr	r3, [r7, #4]
 c003bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 c003bfa:	4a15      	ldr	r2, [pc, #84]	; (c003c50 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003bfc:	68d2      	ldr	r2, [r2, #12]
 c003bfe:	0a12      	lsrs	r2, r2, #8
 c003c00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003c04:	fb02 f303 	mul.w	r3, r2, r3
 c003c08:	617b      	str	r3, [r7, #20]
        break;
 c003c0a:	e00c      	b.n	c003c26 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003c0c:	69fa      	ldr	r2, [r7, #28]
 c003c0e:	687b      	ldr	r3, [r7, #4]
 c003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 c003c14:	4a0e      	ldr	r2, [pc, #56]	; (c003c50 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003c16:	68d2      	ldr	r2, [r2, #12]
 c003c18:	0a12      	lsrs	r2, r2, #8
 c003c1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003c1e:	fb02 f303 	mul.w	r3, r2, r3
 c003c22:	617b      	str	r3, [r7, #20]
        break;
 c003c24:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c003c26:	4b0a      	ldr	r3, [pc, #40]	; (c003c50 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003c28:	68db      	ldr	r3, [r3, #12]
 c003c2a:	0e5b      	lsrs	r3, r3, #25
 c003c2c:	f003 0303 	and.w	r3, r3, #3
 c003c30:	3301      	adds	r3, #1
 c003c32:	005b      	lsls	r3, r3, #1
 c003c34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c003c36:	697a      	ldr	r2, [r7, #20]
 c003c38:	683b      	ldr	r3, [r7, #0]
 c003c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 c003c3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c003c40:	69bb      	ldr	r3, [r7, #24]
}
 c003c42:	4618      	mov	r0, r3
 c003c44:	3724      	adds	r7, #36	; 0x24
 c003c46:	46bd      	mov	sp, r7
 c003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003c4c:	4770      	bx	lr
 c003c4e:	bf00      	nop
 c003c50:	50021000 	.word	0x50021000
 c003c54:	0c00af0c 	.word	0x0c00af0c
 c003c58:	00f42400 	.word	0x00f42400

0c003c5c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c003c5c:	b580      	push	{r7, lr}
 c003c5e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c003c60:	f7ff ff60 	bl	c003b24 <HAL_RCC_GetSysClockFreq>
 c003c64:	4602      	mov	r2, r0
 c003c66:	4b05      	ldr	r3, [pc, #20]	; (c003c7c <HAL_RCC_GetHCLKFreq+0x20>)
 c003c68:	689b      	ldr	r3, [r3, #8]
 c003c6a:	091b      	lsrs	r3, r3, #4
 c003c6c:	f003 030f 	and.w	r3, r3, #15
 c003c70:	4903      	ldr	r1, [pc, #12]	; (c003c80 <HAL_RCC_GetHCLKFreq+0x24>)
 c003c72:	5ccb      	ldrb	r3, [r1, r3]
 c003c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 c003c78:	4618      	mov	r0, r3
 c003c7a:	bd80      	pop	{r7, pc}
 c003c7c:	50021000 	.word	0x50021000
 c003c80:	0c00aef4 	.word	0x0c00aef4

0c003c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c003c84:	b580      	push	{r7, lr}
 c003c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c003c88:	f7ff ffe8 	bl	c003c5c <HAL_RCC_GetHCLKFreq>
 c003c8c:	4602      	mov	r2, r0
 c003c8e:	4b05      	ldr	r3, [pc, #20]	; (c003ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 c003c90:	689b      	ldr	r3, [r3, #8]
 c003c92:	0a1b      	lsrs	r3, r3, #8
 c003c94:	f003 0307 	and.w	r3, r3, #7
 c003c98:	4903      	ldr	r1, [pc, #12]	; (c003ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 c003c9a:	5ccb      	ldrb	r3, [r1, r3]
 c003c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 c003ca0:	4618      	mov	r0, r3
 c003ca2:	bd80      	pop	{r7, pc}
 c003ca4:	50021000 	.word	0x50021000
 c003ca8:	0c00af04 	.word	0x0c00af04

0c003cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c003cac:	b580      	push	{r7, lr}
 c003cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c003cb0:	f7ff ffd4 	bl	c003c5c <HAL_RCC_GetHCLKFreq>
 c003cb4:	4602      	mov	r2, r0
 c003cb6:	4b05      	ldr	r3, [pc, #20]	; (c003ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 c003cb8:	689b      	ldr	r3, [r3, #8]
 c003cba:	0adb      	lsrs	r3, r3, #11
 c003cbc:	f003 0307 	and.w	r3, r3, #7
 c003cc0:	4903      	ldr	r1, [pc, #12]	; (c003cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 c003cc2:	5ccb      	ldrb	r3, [r1, r3]
 c003cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 c003cc8:	4618      	mov	r0, r3
 c003cca:	bd80      	pop	{r7, pc}
 c003ccc:	50021000 	.word	0x50021000
 c003cd0:	0c00af04 	.word	0x0c00af04

0c003cd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c003cd4:	b580      	push	{r7, lr}
 c003cd6:	b086      	sub	sp, #24
 c003cd8:	af00      	add	r7, sp, #0
 c003cda:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c003cdc:	2300      	movs	r3, #0
 c003cde:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c003ce0:	4b2c      	ldr	r3, [pc, #176]	; (c003d94 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003ce8:	2b00      	cmp	r3, #0
 c003cea:	d003      	beq.n	c003cf4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c003cec:	f7ff f862 	bl	c002db4 <HAL_PWREx_GetVoltageRange>
 c003cf0:	6138      	str	r0, [r7, #16]
 c003cf2:	e014      	b.n	c003d1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c003cf4:	4b27      	ldr	r3, [pc, #156]	; (c003d94 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003cf8:	4a26      	ldr	r2, [pc, #152]	; (c003d94 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c003cfe:	6593      	str	r3, [r2, #88]	; 0x58
 c003d00:	4b24      	ldr	r3, [pc, #144]	; (c003d94 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003d08:	60fb      	str	r3, [r7, #12]
 c003d0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c003d0c:	f7ff f852 	bl	c002db4 <HAL_PWREx_GetVoltageRange>
 c003d10:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c003d12:	4b20      	ldr	r3, [pc, #128]	; (c003d94 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003d16:	4a1f      	ldr	r2, [pc, #124]	; (c003d94 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c003d1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c003d1e:	693b      	ldr	r3, [r7, #16]
 c003d20:	2b00      	cmp	r3, #0
 c003d22:	d003      	beq.n	c003d2c <RCC_SetFlashLatencyFromMSIRange+0x58>
 c003d24:	693b      	ldr	r3, [r7, #16]
 c003d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c003d2a:	d10b      	bne.n	c003d44 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c003d2c:	687b      	ldr	r3, [r7, #4]
 c003d2e:	2b80      	cmp	r3, #128	; 0x80
 c003d30:	d919      	bls.n	c003d66 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c003d32:	687b      	ldr	r3, [r7, #4]
 c003d34:	2ba0      	cmp	r3, #160	; 0xa0
 c003d36:	d902      	bls.n	c003d3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c003d38:	2302      	movs	r3, #2
 c003d3a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c003d3c:	e013      	b.n	c003d66 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c003d3e:	2301      	movs	r3, #1
 c003d40:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c003d42:	e010      	b.n	c003d66 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c003d44:	687b      	ldr	r3, [r7, #4]
 c003d46:	2b80      	cmp	r3, #128	; 0x80
 c003d48:	d902      	bls.n	c003d50 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c003d4a:	2303      	movs	r3, #3
 c003d4c:	617b      	str	r3, [r7, #20]
 c003d4e:	e00a      	b.n	c003d66 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c003d50:	687b      	ldr	r3, [r7, #4]
 c003d52:	2b80      	cmp	r3, #128	; 0x80
 c003d54:	d102      	bne.n	c003d5c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c003d56:	2302      	movs	r3, #2
 c003d58:	617b      	str	r3, [r7, #20]
 c003d5a:	e004      	b.n	c003d66 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c003d5c:	687b      	ldr	r3, [r7, #4]
 c003d5e:	2b70      	cmp	r3, #112	; 0x70
 c003d60:	d101      	bne.n	c003d66 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c003d62:	2301      	movs	r3, #1
 c003d64:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c003d66:	4b0c      	ldr	r3, [pc, #48]	; (c003d98 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c003d68:	681b      	ldr	r3, [r3, #0]
 c003d6a:	f023 020f 	bic.w	r2, r3, #15
 c003d6e:	490a      	ldr	r1, [pc, #40]	; (c003d98 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c003d70:	697b      	ldr	r3, [r7, #20]
 c003d72:	4313      	orrs	r3, r2
 c003d74:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c003d76:	4b08      	ldr	r3, [pc, #32]	; (c003d98 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c003d78:	681b      	ldr	r3, [r3, #0]
 c003d7a:	f003 030f 	and.w	r3, r3, #15
 c003d7e:	697a      	ldr	r2, [r7, #20]
 c003d80:	429a      	cmp	r2, r3
 c003d82:	d001      	beq.n	c003d88 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c003d84:	2301      	movs	r3, #1
 c003d86:	e000      	b.n	c003d8a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c003d88:	2300      	movs	r3, #0
}
 c003d8a:	4618      	mov	r0, r3
 c003d8c:	3718      	adds	r7, #24
 c003d8e:	46bd      	mov	sp, r7
 c003d90:	bd80      	pop	{r7, pc}
 c003d92:	bf00      	nop
 c003d94:	50021000 	.word	0x50021000
 c003d98:	50022000 	.word	0x50022000

0c003d9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c003d9c:	b480      	push	{r7}
 c003d9e:	b087      	sub	sp, #28
 c003da0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c003da2:	2300      	movs	r3, #0
 c003da4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 c003da6:	4b36      	ldr	r3, [pc, #216]	; (c003e80 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c003da8:	68db      	ldr	r3, [r3, #12]
 c003daa:	f003 0303 	and.w	r3, r3, #3
 c003dae:	2b01      	cmp	r3, #1
 c003db0:	d118      	bne.n	c003de4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c003db2:	4b33      	ldr	r3, [pc, #204]	; (c003e80 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c003db4:	681b      	ldr	r3, [r3, #0]
 c003db6:	f003 0308 	and.w	r3, r3, #8
 c003dba:	2b00      	cmp	r3, #0
 c003dbc:	d107      	bne.n	c003dce <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c003dbe:	4b30      	ldr	r3, [pc, #192]	; (c003e80 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c003dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003dc4:	0a1b      	lsrs	r3, r3, #8
 c003dc6:	f003 030f 	and.w	r3, r3, #15
 c003dca:	617b      	str	r3, [r7, #20]
 c003dcc:	e005      	b.n	c003dda <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c003dce:	4b2c      	ldr	r3, [pc, #176]	; (c003e80 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c003dd0:	681b      	ldr	r3, [r3, #0]
 c003dd2:	091b      	lsrs	r3, r3, #4
 c003dd4:	f003 030f 	and.w	r3, r3, #15
 c003dd8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c003dda:	4a2a      	ldr	r2, [pc, #168]	; (c003e84 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 c003ddc:	697b      	ldr	r3, [r7, #20]
 c003dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c003de2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c003de4:	4b26      	ldr	r3, [pc, #152]	; (c003e80 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c003de6:	68db      	ldr	r3, [r3, #12]
 c003de8:	f003 0303 	and.w	r3, r3, #3
 c003dec:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c003dee:	4b24      	ldr	r3, [pc, #144]	; (c003e80 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c003df0:	68db      	ldr	r3, [r3, #12]
 c003df2:	091b      	lsrs	r3, r3, #4
 c003df4:	f003 030f 	and.w	r3, r3, #15
 c003df8:	3301      	adds	r3, #1
 c003dfa:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c003dfc:	68fb      	ldr	r3, [r7, #12]
 c003dfe:	2b02      	cmp	r3, #2
 c003e00:	d003      	beq.n	c003e0a <RCC_GetSysClockFreqFromPLLSource+0x6e>
 c003e02:	68fb      	ldr	r3, [r7, #12]
 c003e04:	2b03      	cmp	r3, #3
 c003e06:	d00d      	beq.n	c003e24 <RCC_GetSysClockFreqFromPLLSource+0x88>
 c003e08:	e019      	b.n	c003e3e <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003e0a:	4a1f      	ldr	r2, [pc, #124]	; (c003e88 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c003e0c:	68bb      	ldr	r3, [r7, #8]
 c003e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 c003e12:	4a1b      	ldr	r2, [pc, #108]	; (c003e80 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c003e14:	68d2      	ldr	r2, [r2, #12]
 c003e16:	0a12      	lsrs	r2, r2, #8
 c003e18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003e1c:	fb02 f303 	mul.w	r3, r2, r3
 c003e20:	613b      	str	r3, [r7, #16]
      break;
 c003e22:	e019      	b.n	c003e58 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003e24:	4a18      	ldr	r2, [pc, #96]	; (c003e88 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c003e26:	68bb      	ldr	r3, [r7, #8]
 c003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 c003e2c:	4a14      	ldr	r2, [pc, #80]	; (c003e80 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c003e2e:	68d2      	ldr	r2, [r2, #12]
 c003e30:	0a12      	lsrs	r2, r2, #8
 c003e32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003e36:	fb02 f303 	mul.w	r3, r2, r3
 c003e3a:	613b      	str	r3, [r7, #16]
      break;
 c003e3c:	e00c      	b.n	c003e58 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003e3e:	697a      	ldr	r2, [r7, #20]
 c003e40:	68bb      	ldr	r3, [r7, #8]
 c003e42:	fbb2 f3f3 	udiv	r3, r2, r3
 c003e46:	4a0e      	ldr	r2, [pc, #56]	; (c003e80 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c003e48:	68d2      	ldr	r2, [r2, #12]
 c003e4a:	0a12      	lsrs	r2, r2, #8
 c003e4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003e50:	fb02 f303 	mul.w	r3, r2, r3
 c003e54:	613b      	str	r3, [r7, #16]
      break;
 c003e56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c003e58:	4b09      	ldr	r3, [pc, #36]	; (c003e80 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c003e5a:	68db      	ldr	r3, [r3, #12]
 c003e5c:	0e5b      	lsrs	r3, r3, #25
 c003e5e:	f003 0303 	and.w	r3, r3, #3
 c003e62:	3301      	adds	r3, #1
 c003e64:	005b      	lsls	r3, r3, #1
 c003e66:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c003e68:	693a      	ldr	r2, [r7, #16]
 c003e6a:	687b      	ldr	r3, [r7, #4]
 c003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 c003e70:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c003e72:	683b      	ldr	r3, [r7, #0]
}
 c003e74:	4618      	mov	r0, r3
 c003e76:	371c      	adds	r7, #28
 c003e78:	46bd      	mov	sp, r7
 c003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003e7e:	4770      	bx	lr
 c003e80:	50021000 	.word	0x50021000
 c003e84:	0c00af0c 	.word	0x0c00af0c
 c003e88:	00f42400 	.word	0x00f42400

0c003e8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 c003e8c:	b580      	push	{r7, lr}
 c003e8e:	b088      	sub	sp, #32
 c003e90:	af00      	add	r7, sp, #0
 c003e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c003e94:	2300      	movs	r3, #0
 c003e96:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c003e98:	2300      	movs	r3, #0
 c003e9a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c003e9c:	687b      	ldr	r3, [r7, #4]
 c003e9e:	681b      	ldr	r3, [r3, #0]
 c003ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003ea4:	2b00      	cmp	r3, #0
 c003ea6:	d040      	beq.n	c003f2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 c003ea8:	687b      	ldr	r3, [r7, #4]
 c003eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c003eac:	2b80      	cmp	r3, #128	; 0x80
 c003eae:	d02a      	beq.n	c003f06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c003eb0:	2b80      	cmp	r3, #128	; 0x80
 c003eb2:	d825      	bhi.n	c003f00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c003eb4:	2b60      	cmp	r3, #96	; 0x60
 c003eb6:	d026      	beq.n	c003f06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c003eb8:	2b60      	cmp	r3, #96	; 0x60
 c003eba:	d821      	bhi.n	c003f00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c003ebc:	2b40      	cmp	r3, #64	; 0x40
 c003ebe:	d006      	beq.n	c003ece <HAL_RCCEx_PeriphCLKConfig+0x42>
 c003ec0:	2b40      	cmp	r3, #64	; 0x40
 c003ec2:	d81d      	bhi.n	c003f00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c003ec4:	2b00      	cmp	r3, #0
 c003ec6:	d009      	beq.n	c003edc <HAL_RCCEx_PeriphCLKConfig+0x50>
 c003ec8:	2b20      	cmp	r3, #32
 c003eca:	d010      	beq.n	c003eee <HAL_RCCEx_PeriphCLKConfig+0x62>
 c003ecc:	e018      	b.n	c003f00 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c003ece:	4b8f      	ldr	r3, [pc, #572]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003ed0:	68db      	ldr	r3, [r3, #12]
 c003ed2:	4a8e      	ldr	r2, [pc, #568]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003ed8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003eda:	e015      	b.n	c003f08 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c003edc:	687b      	ldr	r3, [r7, #4]
 c003ede:	3304      	adds	r3, #4
 c003ee0:	2100      	movs	r1, #0
 c003ee2:	4618      	mov	r0, r3
 c003ee4:	f000 fb56 	bl	c004594 <RCCEx_PLLSAI1_Config>
 c003ee8:	4603      	mov	r3, r0
 c003eea:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003eec:	e00c      	b.n	c003f08 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c003eee:	687b      	ldr	r3, [r7, #4]
 c003ef0:	3320      	adds	r3, #32
 c003ef2:	2100      	movs	r1, #0
 c003ef4:	4618      	mov	r0, r3
 c003ef6:	f000 fc33 	bl	c004760 <RCCEx_PLLSAI2_Config>
 c003efa:	4603      	mov	r3, r0
 c003efc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003efe:	e003      	b.n	c003f08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c003f00:	2301      	movs	r3, #1
 c003f02:	77fb      	strb	r3, [r7, #31]
        break;
 c003f04:	e000      	b.n	c003f08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 c003f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 c003f08:	7ffb      	ldrb	r3, [r7, #31]
 c003f0a:	2b00      	cmp	r3, #0
 c003f0c:	d10b      	bne.n	c003f26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c003f0e:	4b7f      	ldr	r3, [pc, #508]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003f10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003f14:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 c003f18:	687b      	ldr	r3, [r7, #4]
 c003f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c003f1c:	497b      	ldr	r1, [pc, #492]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003f1e:	4313      	orrs	r3, r2
 c003f20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c003f24:	e001      	b.n	c003f2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c003f26:	7ffb      	ldrb	r3, [r7, #31]
 c003f28:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c003f2a:	687b      	ldr	r3, [r7, #4]
 c003f2c:	681b      	ldr	r3, [r3, #0]
 c003f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c003f32:	2b00      	cmp	r3, #0
 c003f34:	d047      	beq.n	c003fc6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 c003f36:	687b      	ldr	r3, [r7, #4]
 c003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c003f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003f3e:	d030      	beq.n	c003fa2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 c003f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003f44:	d82a      	bhi.n	c003f9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 c003f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c003f4a:	d02a      	beq.n	c003fa2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 c003f4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c003f50:	d824      	bhi.n	c003f9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 c003f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c003f56:	d008      	beq.n	c003f6a <HAL_RCCEx_PeriphCLKConfig+0xde>
 c003f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c003f5c:	d81e      	bhi.n	c003f9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 c003f5e:	2b00      	cmp	r3, #0
 c003f60:	d00a      	beq.n	c003f78 <HAL_RCCEx_PeriphCLKConfig+0xec>
 c003f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c003f66:	d010      	beq.n	c003f8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 c003f68:	e018      	b.n	c003f9c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c003f6a:	4b68      	ldr	r3, [pc, #416]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003f6c:	68db      	ldr	r3, [r3, #12]
 c003f6e:	4a67      	ldr	r2, [pc, #412]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003f74:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c003f76:	e015      	b.n	c003fa4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c003f78:	687b      	ldr	r3, [r7, #4]
 c003f7a:	3304      	adds	r3, #4
 c003f7c:	2100      	movs	r1, #0
 c003f7e:	4618      	mov	r0, r3
 c003f80:	f000 fb08 	bl	c004594 <RCCEx_PLLSAI1_Config>
 c003f84:	4603      	mov	r3, r0
 c003f86:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c003f88:	e00c      	b.n	c003fa4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c003f8a:	687b      	ldr	r3, [r7, #4]
 c003f8c:	3320      	adds	r3, #32
 c003f8e:	2100      	movs	r1, #0
 c003f90:	4618      	mov	r0, r3
 c003f92:	f000 fbe5 	bl	c004760 <RCCEx_PLLSAI2_Config>
 c003f96:	4603      	mov	r3, r0
 c003f98:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c003f9a:	e003      	b.n	c003fa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c003f9c:	2301      	movs	r3, #1
 c003f9e:	77fb      	strb	r3, [r7, #31]
        break;
 c003fa0:	e000      	b.n	c003fa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 c003fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 c003fa4:	7ffb      	ldrb	r3, [r7, #31]
 c003fa6:	2b00      	cmp	r3, #0
 c003fa8:	d10b      	bne.n	c003fc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c003faa:	4b58      	ldr	r3, [pc, #352]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003fac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003fb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c003fb4:	687b      	ldr	r3, [r7, #4]
 c003fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c003fb8:	4954      	ldr	r1, [pc, #336]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003fba:	4313      	orrs	r3, r2
 c003fbc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c003fc0:	e001      	b.n	c003fc6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c003fc2:	7ffb      	ldrb	r3, [r7, #31]
 c003fc4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c003fc6:	687b      	ldr	r3, [r7, #4]
 c003fc8:	681b      	ldr	r3, [r3, #0]
 c003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003fce:	2b00      	cmp	r3, #0
 c003fd0:	f000 80ab 	beq.w	c00412a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 c003fd4:	2300      	movs	r3, #0
 c003fd6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c003fd8:	4b4c      	ldr	r3, [pc, #304]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003fe0:	2b00      	cmp	r3, #0
 c003fe2:	d10d      	bne.n	c004000 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c003fe4:	4b49      	ldr	r3, [pc, #292]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003fe8:	4a48      	ldr	r2, [pc, #288]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c003fee:	6593      	str	r3, [r2, #88]	; 0x58
 c003ff0:	4b46      	ldr	r3, [pc, #280]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003ff8:	60fb      	str	r3, [r7, #12]
 c003ffa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 c003ffc:	2301      	movs	r3, #1
 c003ffe:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c004000:	4b43      	ldr	r3, [pc, #268]	; (c004110 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c004002:	681b      	ldr	r3, [r3, #0]
 c004004:	4a42      	ldr	r2, [pc, #264]	; (c004110 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c004006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c00400a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c00400c:	f7fe f942 	bl	c002294 <HAL_GetTick>
 c004010:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c004012:	e00f      	b.n	c004034 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c004014:	f7fe f93e 	bl	c002294 <HAL_GetTick>
 c004018:	4602      	mov	r2, r0
 c00401a:	693b      	ldr	r3, [r7, #16]
 c00401c:	1ad3      	subs	r3, r2, r3
 c00401e:	2b02      	cmp	r3, #2
 c004020:	d908      	bls.n	c004034 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c004022:	4b3b      	ldr	r3, [pc, #236]	; (c004110 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c004024:	681b      	ldr	r3, [r3, #0]
 c004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00402a:	2b00      	cmp	r3, #0
 c00402c:	d109      	bne.n	c004042 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 c00402e:	2303      	movs	r3, #3
 c004030:	77fb      	strb	r3, [r7, #31]
        }
        break;
 c004032:	e006      	b.n	c004042 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c004034:	4b36      	ldr	r3, [pc, #216]	; (c004110 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c004036:	681b      	ldr	r3, [r3, #0]
 c004038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00403c:	2b00      	cmp	r3, #0
 c00403e:	d0e9      	beq.n	c004014 <HAL_RCCEx_PeriphCLKConfig+0x188>
 c004040:	e000      	b.n	c004044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 c004042:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 c004044:	7ffb      	ldrb	r3, [r7, #31]
 c004046:	2b00      	cmp	r3, #0
 c004048:	d164      	bne.n	c004114 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c00404a:	4b30      	ldr	r3, [pc, #192]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c004054:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c004056:	69bb      	ldr	r3, [r7, #24]
 c004058:	2b00      	cmp	r3, #0
 c00405a:	d01f      	beq.n	c00409c <HAL_RCCEx_PeriphCLKConfig+0x210>
 c00405c:	687b      	ldr	r3, [r7, #4]
 c00405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004062:	69ba      	ldr	r2, [r7, #24]
 c004064:	429a      	cmp	r2, r3
 c004066:	d019      	beq.n	c00409c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c004068:	4b28      	ldr	r3, [pc, #160]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00406e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c004072:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c004074:	4b25      	ldr	r3, [pc, #148]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00407a:	4a24      	ldr	r2, [pc, #144]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00407c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c004080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c004084:	4b21      	ldr	r3, [pc, #132]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00408a:	4a20      	ldr	r2, [pc, #128]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00408c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c004090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c004094:	4a1d      	ldr	r2, [pc, #116]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004096:	69bb      	ldr	r3, [r7, #24]
 c004098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c00409c:	69bb      	ldr	r3, [r7, #24]
 c00409e:	f003 0301 	and.w	r3, r3, #1
 c0040a2:	2b00      	cmp	r3, #0
 c0040a4:	d01f      	beq.n	c0040e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0040a6:	f7fe f8f5 	bl	c002294 <HAL_GetTick>
 c0040aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0040ac:	e012      	b.n	c0040d4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0040ae:	f7fe f8f1 	bl	c002294 <HAL_GetTick>
 c0040b2:	4602      	mov	r2, r0
 c0040b4:	693b      	ldr	r3, [r7, #16]
 c0040b6:	1ad3      	subs	r3, r2, r3
 c0040b8:	f241 3288 	movw	r2, #5000	; 0x1388
 c0040bc:	4293      	cmp	r3, r2
 c0040be:	d909      	bls.n	c0040d4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0040c0:	4b12      	ldr	r3, [pc, #72]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0040c6:	f003 0302 	and.w	r3, r3, #2
 c0040ca:	2b00      	cmp	r3, #0
 c0040cc:	d10a      	bne.n	c0040e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 c0040ce:	2303      	movs	r3, #3
 c0040d0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 c0040d2:	e007      	b.n	c0040e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0040d4:	4b0d      	ldr	r3, [pc, #52]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0040da:	f003 0302 	and.w	r3, r3, #2
 c0040de:	2b00      	cmp	r3, #0
 c0040e0:	d0e5      	beq.n	c0040ae <HAL_RCCEx_PeriphCLKConfig+0x222>
 c0040e2:	e000      	b.n	c0040e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 c0040e4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 c0040e6:	7ffb      	ldrb	r3, [r7, #31]
 c0040e8:	2b00      	cmp	r3, #0
 c0040ea:	d10c      	bne.n	c004106 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c0040ec:	4b07      	ldr	r3, [pc, #28]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0040f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c0040f6:	687b      	ldr	r3, [r7, #4]
 c0040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0040fc:	4903      	ldr	r1, [pc, #12]	; (c00410c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0040fe:	4313      	orrs	r3, r2
 c004100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 c004104:	e008      	b.n	c004118 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c004106:	7ffb      	ldrb	r3, [r7, #31]
 c004108:	77bb      	strb	r3, [r7, #30]
 c00410a:	e005      	b.n	c004118 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 c00410c:	50021000 	.word	0x50021000
 c004110:	50007000 	.word	0x50007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004114:	7ffb      	ldrb	r3, [r7, #31]
 c004116:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c004118:	7dfb      	ldrb	r3, [r7, #23]
 c00411a:	2b01      	cmp	r3, #1
 c00411c:	d105      	bne.n	c00412a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c00411e:	4b9c      	ldr	r3, [pc, #624]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004122:	4a9b      	ldr	r2, [pc, #620]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c004128:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c00412a:	687b      	ldr	r3, [r7, #4]
 c00412c:	681b      	ldr	r3, [r3, #0]
 c00412e:	f003 0301 	and.w	r3, r3, #1
 c004132:	2b00      	cmp	r3, #0
 c004134:	d00a      	beq.n	c00414c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c004136:	4b96      	ldr	r3, [pc, #600]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00413c:	f023 0203 	bic.w	r2, r3, #3
 c004140:	687b      	ldr	r3, [r7, #4]
 c004142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004144:	4992      	ldr	r1, [pc, #584]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004146:	4313      	orrs	r3, r2
 c004148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c00414c:	687b      	ldr	r3, [r7, #4]
 c00414e:	681b      	ldr	r3, [r3, #0]
 c004150:	f003 0302 	and.w	r3, r3, #2
 c004154:	2b00      	cmp	r3, #0
 c004156:	d00a      	beq.n	c00416e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c004158:	4b8d      	ldr	r3, [pc, #564]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00415e:	f023 020c 	bic.w	r2, r3, #12
 c004162:	687b      	ldr	r3, [r7, #4]
 c004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c004166:	498a      	ldr	r1, [pc, #552]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004168:	4313      	orrs	r3, r2
 c00416a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c00416e:	687b      	ldr	r3, [r7, #4]
 c004170:	681b      	ldr	r3, [r3, #0]
 c004172:	f003 0304 	and.w	r3, r3, #4
 c004176:	2b00      	cmp	r3, #0
 c004178:	d00a      	beq.n	c004190 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c00417a:	4b85      	ldr	r3, [pc, #532]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004180:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c004184:	687b      	ldr	r3, [r7, #4]
 c004186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c004188:	4981      	ldr	r1, [pc, #516]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00418a:	4313      	orrs	r3, r2
 c00418c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c004190:	687b      	ldr	r3, [r7, #4]
 c004192:	681b      	ldr	r3, [r3, #0]
 c004194:	f003 0308 	and.w	r3, r3, #8
 c004198:	2b00      	cmp	r3, #0
 c00419a:	d00a      	beq.n	c0041b2 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c00419c:	4b7c      	ldr	r3, [pc, #496]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0041a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c0041a6:	687b      	ldr	r3, [r7, #4]
 c0041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c0041aa:	4979      	ldr	r1, [pc, #484]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0041ac:	4313      	orrs	r3, r2
 c0041ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c0041b2:	687b      	ldr	r3, [r7, #4]
 c0041b4:	681b      	ldr	r3, [r3, #0]
 c0041b6:	f003 0310 	and.w	r3, r3, #16
 c0041ba:	2b00      	cmp	r3, #0
 c0041bc:	d00a      	beq.n	c0041d4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c0041be:	4b74      	ldr	r3, [pc, #464]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0041c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c0041c8:	687b      	ldr	r3, [r7, #4]
 c0041ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0041cc:	4970      	ldr	r1, [pc, #448]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0041ce:	4313      	orrs	r3, r2
 c0041d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c0041d4:	687b      	ldr	r3, [r7, #4]
 c0041d6:	681b      	ldr	r3, [r3, #0]
 c0041d8:	f003 0320 	and.w	r3, r3, #32
 c0041dc:	2b00      	cmp	r3, #0
 c0041de:	d00a      	beq.n	c0041f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c0041e0:	4b6b      	ldr	r3, [pc, #428]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0041e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 c0041ea:	687b      	ldr	r3, [r7, #4]
 c0041ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0041ee:	4968      	ldr	r1, [pc, #416]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0041f0:	4313      	orrs	r3, r2
 c0041f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c0041f6:	687b      	ldr	r3, [r7, #4]
 c0041f8:	681b      	ldr	r3, [r3, #0]
 c0041fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c0041fe:	2b00      	cmp	r3, #0
 c004200:	d00a      	beq.n	c004218 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c004202:	4b63      	ldr	r3, [pc, #396]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004208:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 c00420c:	687b      	ldr	r3, [r7, #4]
 c00420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c004210:	495f      	ldr	r1, [pc, #380]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004212:	4313      	orrs	r3, r2
 c004214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c004218:	687b      	ldr	r3, [r7, #4]
 c00421a:	681b      	ldr	r3, [r3, #0]
 c00421c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c004220:	2b00      	cmp	r3, #0
 c004222:	d00a      	beq.n	c00423a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c004224:	4b5a      	ldr	r3, [pc, #360]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00422a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c00422e:	687b      	ldr	r3, [r7, #4]
 c004230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004232:	4957      	ldr	r1, [pc, #348]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004234:	4313      	orrs	r3, r2
 c004236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c00423a:	687b      	ldr	r3, [r7, #4]
 c00423c:	681b      	ldr	r3, [r3, #0]
 c00423e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c004242:	2b00      	cmp	r3, #0
 c004244:	d00a      	beq.n	c00425c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c004246:	4b52      	ldr	r3, [pc, #328]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00424c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 c004250:	687b      	ldr	r3, [r7, #4]
 c004252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c004254:	494e      	ldr	r1, [pc, #312]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004256:	4313      	orrs	r3, r2
 c004258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c00425c:	687b      	ldr	r3, [r7, #4]
 c00425e:	681b      	ldr	r3, [r3, #0]
 c004260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c004264:	2b00      	cmp	r3, #0
 c004266:	d031      	beq.n	c0042cc <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 c004268:	687b      	ldr	r3, [r7, #4]
 c00426a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c00426c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c004270:	d00e      	beq.n	c004290 <HAL_RCCEx_PeriphCLKConfig+0x404>
 c004272:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c004276:	d814      	bhi.n	c0042a2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 c004278:	2b00      	cmp	r3, #0
 c00427a:	d015      	beq.n	c0042a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c00427c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c004280:	d10f      	bne.n	c0042a2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c004282:	4b43      	ldr	r3, [pc, #268]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004284:	68db      	ldr	r3, [r3, #12]
 c004286:	4a42      	ldr	r2, [pc, #264]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c00428c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c00428e:	e00c      	b.n	c0042aa <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c004290:	687b      	ldr	r3, [r7, #4]
 c004292:	3304      	adds	r3, #4
 c004294:	2100      	movs	r1, #0
 c004296:	4618      	mov	r0, r3
 c004298:	f000 f97c 	bl	c004594 <RCCEx_PLLSAI1_Config>
 c00429c:	4603      	mov	r3, r0
 c00429e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c0042a0:	e003      	b.n	c0042aa <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 c0042a2:	2301      	movs	r3, #1
 c0042a4:	77fb      	strb	r3, [r7, #31]
        break;
 c0042a6:	e000      	b.n	c0042aa <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 c0042a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0042aa:	7ffb      	ldrb	r3, [r7, #31]
 c0042ac:	2b00      	cmp	r3, #0
 c0042ae:	d10b      	bne.n	c0042c8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c0042b0:	4b37      	ldr	r3, [pc, #220]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0042b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 c0042ba:	687b      	ldr	r3, [r7, #4]
 c0042bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c0042be:	4934      	ldr	r1, [pc, #208]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042c0:	4313      	orrs	r3, r2
 c0042c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c0042c6:	e001      	b.n	c0042cc <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0042c8:	7ffb      	ldrb	r3, [r7, #31]
 c0042ca:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c0042cc:	687b      	ldr	r3, [r7, #4]
 c0042ce:	681b      	ldr	r3, [r3, #0]
 c0042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0042d4:	2b00      	cmp	r3, #0
 c0042d6:	d00a      	beq.n	c0042ee <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c0042d8:	4b2d      	ldr	r3, [pc, #180]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0042de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 c0042e2:	687b      	ldr	r3, [r7, #4]
 c0042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0042e6:	492a      	ldr	r1, [pc, #168]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042e8:	4313      	orrs	r3, r2
 c0042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c0042ee:	687b      	ldr	r3, [r7, #4]
 c0042f0:	681b      	ldr	r3, [r3, #0]
 c0042f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0042f6:	2b00      	cmp	r3, #0
 c0042f8:	d00a      	beq.n	c004310 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c0042fa:	4b25      	ldr	r3, [pc, #148]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004300:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 c004304:	687b      	ldr	r3, [r7, #4]
 c004306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c004308:	4921      	ldr	r1, [pc, #132]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00430a:	4313      	orrs	r3, r2
 c00430c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c004310:	687b      	ldr	r3, [r7, #4]
 c004312:	681b      	ldr	r3, [r3, #0]
 c004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c004318:	2b00      	cmp	r3, #0
 c00431a:	d00a      	beq.n	c004332 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c00431c:	4b1c      	ldr	r3, [pc, #112]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004322:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 c004326:	687b      	ldr	r3, [r7, #4]
 c004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c00432a:	4919      	ldr	r1, [pc, #100]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00432c:	4313      	orrs	r3, r2
 c00432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c004332:	687b      	ldr	r3, [r7, #4]
 c004334:	681b      	ldr	r3, [r3, #0]
 c004336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c00433a:	2b00      	cmp	r3, #0
 c00433c:	d00a      	beq.n	c004354 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c00433e:	4b14      	ldr	r3, [pc, #80]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004340:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004344:	f023 0203 	bic.w	r2, r3, #3
 c004348:	687b      	ldr	r3, [r7, #4]
 c00434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00434c:	4910      	ldr	r1, [pc, #64]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00434e:	4313      	orrs	r3, r2
 c004350:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c004354:	687b      	ldr	r3, [r7, #4]
 c004356:	681b      	ldr	r3, [r3, #0]
 c004358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c00435c:	2b00      	cmp	r3, #0
 c00435e:	d02b      	beq.n	c0043b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c004360:	4b0b      	ldr	r3, [pc, #44]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004366:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c00436a:	687b      	ldr	r3, [r7, #4]
 c00436c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c00436e:	4908      	ldr	r1, [pc, #32]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004370:	4313      	orrs	r3, r2
 c004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c004376:	687b      	ldr	r3, [r7, #4]
 c004378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c00437a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c00437e:	d109      	bne.n	c004394 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c004380:	4b03      	ldr	r3, [pc, #12]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004382:	68db      	ldr	r3, [r3, #12]
 c004384:	4a02      	ldr	r2, [pc, #8]	; (c004390 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c00438a:	60d3      	str	r3, [r2, #12]
 c00438c:	e014      	b.n	c0043b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 c00438e:	bf00      	nop
 c004390:	50021000 	.word	0x50021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c004394:	687b      	ldr	r3, [r7, #4]
 c004396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c004398:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c00439c:	d10c      	bne.n	c0043b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c00439e:	687b      	ldr	r3, [r7, #4]
 c0043a0:	3304      	adds	r3, #4
 c0043a2:	2101      	movs	r1, #1
 c0043a4:	4618      	mov	r0, r3
 c0043a6:	f000 f8f5 	bl	c004594 <RCCEx_PLLSAI1_Config>
 c0043aa:	4603      	mov	r3, r0
 c0043ac:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 c0043ae:	7ffb      	ldrb	r3, [r7, #31]
 c0043b0:	2b00      	cmp	r3, #0
 c0043b2:	d001      	beq.n	c0043b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 c0043b4:	7ffb      	ldrb	r3, [r7, #31]
 c0043b6:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c0043b8:	687b      	ldr	r3, [r7, #4]
 c0043ba:	681b      	ldr	r3, [r3, #0]
 c0043bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c0043c0:	2b00      	cmp	r3, #0
 c0043c2:	d04a      	beq.n	c00445a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c0043c4:	687b      	ldr	r3, [r7, #4]
 c0043c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0043c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c0043cc:	d108      	bne.n	c0043e0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 c0043ce:	4b70      	ldr	r3, [pc, #448]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0043d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0043d4:	4a6e      	ldr	r2, [pc, #440]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0043d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c0043da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c0043de:	e012      	b.n	c004406 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 c0043e0:	4b6b      	ldr	r3, [pc, #428]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0043e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c0043ea:	687b      	ldr	r3, [r7, #4]
 c0043ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0043ee:	4968      	ldr	r1, [pc, #416]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0043f0:	4313      	orrs	r3, r2
 c0043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c0043f6:	4b66      	ldr	r3, [pc, #408]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0043f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0043fc:	4a64      	ldr	r2, [pc, #400]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0043fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 c004402:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c004406:	687b      	ldr	r3, [r7, #4]
 c004408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c00440a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c00440e:	d10d      	bne.n	c00442c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c004410:	687b      	ldr	r3, [r7, #4]
 c004412:	3304      	adds	r3, #4
 c004414:	2101      	movs	r1, #1
 c004416:	4618      	mov	r0, r3
 c004418:	f000 f8bc 	bl	c004594 <RCCEx_PLLSAI1_Config>
 c00441c:	4603      	mov	r3, r0
 c00441e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c004420:	7ffb      	ldrb	r3, [r7, #31]
 c004422:	2b00      	cmp	r3, #0
 c004424:	d019      	beq.n	c00445a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 c004426:	7ffb      	ldrb	r3, [r7, #31]
 c004428:	77bb      	strb	r3, [r7, #30]
 c00442a:	e016      	b.n	c00445a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c00442c:	687b      	ldr	r3, [r7, #4]
 c00442e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c004430:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c004434:	d106      	bne.n	c004444 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c004436:	4b56      	ldr	r3, [pc, #344]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004438:	68db      	ldr	r3, [r3, #12]
 c00443a:	4a55      	ldr	r2, [pc, #340]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00443c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c004440:	60d3      	str	r3, [r2, #12]
 c004442:	e00a      	b.n	c00445a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 c004444:	687b      	ldr	r3, [r7, #4]
 c004446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c004448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c00444c:	d105      	bne.n	c00445a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c00444e:	4b50      	ldr	r3, [pc, #320]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004450:	68db      	ldr	r3, [r3, #12]
 c004452:	4a4f      	ldr	r2, [pc, #316]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c004458:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c00445a:	687b      	ldr	r3, [r7, #4]
 c00445c:	681b      	ldr	r3, [r3, #0]
 c00445e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c004462:	2b00      	cmp	r3, #0
 c004464:	d028      	beq.n	c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c004466:	4b4a      	ldr	r3, [pc, #296]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00446c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c004470:	687b      	ldr	r3, [r7, #4]
 c004472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c004474:	4946      	ldr	r1, [pc, #280]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004476:	4313      	orrs	r3, r2
 c004478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c00447c:	687b      	ldr	r3, [r7, #4]
 c00447e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c004480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c004484:	d106      	bne.n	c004494 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c004486:	4b42      	ldr	r3, [pc, #264]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004488:	68db      	ldr	r3, [r3, #12]
 c00448a:	4a41      	ldr	r2, [pc, #260]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00448c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c004490:	60d3      	str	r3, [r2, #12]
 c004492:	e011      	b.n	c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c004494:	687b      	ldr	r3, [r7, #4]
 c004496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c004498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c00449c:	d10c      	bne.n	c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c00449e:	687b      	ldr	r3, [r7, #4]
 c0044a0:	3304      	adds	r3, #4
 c0044a2:	2101      	movs	r1, #1
 c0044a4:	4618      	mov	r0, r3
 c0044a6:	f000 f875 	bl	c004594 <RCCEx_PLLSAI1_Config>
 c0044aa:	4603      	mov	r3, r0
 c0044ac:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c0044ae:	7ffb      	ldrb	r3, [r7, #31]
 c0044b0:	2b00      	cmp	r3, #0
 c0044b2:	d001      	beq.n	c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 c0044b4:	7ffb      	ldrb	r3, [r7, #31]
 c0044b6:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c0044b8:	687b      	ldr	r3, [r7, #4]
 c0044ba:	681b      	ldr	r3, [r3, #0]
 c0044bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c0044c0:	2b00      	cmp	r3, #0
 c0044c2:	d01e      	beq.n	c004502 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c0044c4:	4b32      	ldr	r3, [pc, #200]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0044ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 c0044ce:	687b      	ldr	r3, [r7, #4]
 c0044d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0044d4:	492e      	ldr	r1, [pc, #184]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0044d6:	4313      	orrs	r3, r2
 c0044d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c0044dc:	687b      	ldr	r3, [r7, #4]
 c0044de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0044e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c0044e6:	d10c      	bne.n	c004502 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c0044e8:	687b      	ldr	r3, [r7, #4]
 c0044ea:	3304      	adds	r3, #4
 c0044ec:	2102      	movs	r1, #2
 c0044ee:	4618      	mov	r0, r3
 c0044f0:	f000 f850 	bl	c004594 <RCCEx_PLLSAI1_Config>
 c0044f4:	4603      	mov	r3, r0
 c0044f6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c0044f8:	7ffb      	ldrb	r3, [r7, #31]
 c0044fa:	2b00      	cmp	r3, #0
 c0044fc:	d001      	beq.n	c004502 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 c0044fe:	7ffb      	ldrb	r3, [r7, #31]
 c004500:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c004502:	687b      	ldr	r3, [r7, #4]
 c004504:	681b      	ldr	r3, [r3, #0]
 c004506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c00450a:	2b00      	cmp	r3, #0
 c00450c:	d00b      	beq.n	c004526 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c00450e:	4b20      	ldr	r3, [pc, #128]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004510:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004514:	f023 0204 	bic.w	r2, r3, #4
 c004518:	687b      	ldr	r3, [r7, #4]
 c00451a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c00451e:	491c      	ldr	r1, [pc, #112]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004520:	4313      	orrs	r3, r2
 c004522:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c004526:	687b      	ldr	r3, [r7, #4]
 c004528:	681b      	ldr	r3, [r3, #0]
 c00452a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c00452e:	2b00      	cmp	r3, #0
 c004530:	d00b      	beq.n	c00454a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c004532:	4b17      	ldr	r3, [pc, #92]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004534:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004538:	f023 0218 	bic.w	r2, r3, #24
 c00453c:	687b      	ldr	r3, [r7, #4]
 c00453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004542:	4913      	ldr	r1, [pc, #76]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004544:	4313      	orrs	r3, r2
 c004546:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c00454a:	687b      	ldr	r3, [r7, #4]
 c00454c:	681b      	ldr	r3, [r3, #0]
 c00454e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c004552:	2b00      	cmp	r3, #0
 c004554:	d017      	beq.n	c004586 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c004556:	4b0e      	ldr	r3, [pc, #56]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004558:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00455c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c004560:	687b      	ldr	r3, [r7, #4]
 c004562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c004566:	490a      	ldr	r1, [pc, #40]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004568:	4313      	orrs	r3, r2
 c00456a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c00456e:	687b      	ldr	r3, [r7, #4]
 c004570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c004574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c004578:	d105      	bne.n	c004586 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c00457a:	4b05      	ldr	r3, [pc, #20]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00457c:	68db      	ldr	r3, [r3, #12]
 c00457e:	4a04      	ldr	r2, [pc, #16]	; (c004590 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c004584:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 c004586:	7fbb      	ldrb	r3, [r7, #30]
}
 c004588:	4618      	mov	r0, r3
 c00458a:	3720      	adds	r7, #32
 c00458c:	46bd      	mov	sp, r7
 c00458e:	bd80      	pop	{r7, pc}
 c004590:	50021000 	.word	0x50021000

0c004594 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c004594:	b580      	push	{r7, lr}
 c004596:	b084      	sub	sp, #16
 c004598:	af00      	add	r7, sp, #0
 c00459a:	6078      	str	r0, [r7, #4]
 c00459c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c00459e:	2300      	movs	r3, #0
 c0045a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c0045a2:	687b      	ldr	r3, [r7, #4]
 c0045a4:	681b      	ldr	r3, [r3, #0]
 c0045a6:	2b03      	cmp	r3, #3
 c0045a8:	d018      	beq.n	c0045dc <RCCEx_PLLSAI1_Config+0x48>
 c0045aa:	2b03      	cmp	r3, #3
 c0045ac:	d81f      	bhi.n	c0045ee <RCCEx_PLLSAI1_Config+0x5a>
 c0045ae:	2b01      	cmp	r3, #1
 c0045b0:	d002      	beq.n	c0045b8 <RCCEx_PLLSAI1_Config+0x24>
 c0045b2:	2b02      	cmp	r3, #2
 c0045b4:	d009      	beq.n	c0045ca <RCCEx_PLLSAI1_Config+0x36>
 c0045b6:	e01a      	b.n	c0045ee <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c0045b8:	4b65      	ldr	r3, [pc, #404]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0045ba:	681b      	ldr	r3, [r3, #0]
 c0045bc:	f003 0302 	and.w	r3, r3, #2
 c0045c0:	2b00      	cmp	r3, #0
 c0045c2:	d117      	bne.n	c0045f4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 c0045c4:	2301      	movs	r3, #1
 c0045c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0045c8:	e014      	b.n	c0045f4 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c0045ca:	4b61      	ldr	r3, [pc, #388]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0045cc:	681b      	ldr	r3, [r3, #0]
 c0045ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0045d2:	2b00      	cmp	r3, #0
 c0045d4:	d110      	bne.n	c0045f8 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 c0045d6:	2301      	movs	r3, #1
 c0045d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0045da:	e00d      	b.n	c0045f8 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c0045dc:	4b5c      	ldr	r3, [pc, #368]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0045de:	681b      	ldr	r3, [r3, #0]
 c0045e0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c0045e4:	2b00      	cmp	r3, #0
 c0045e6:	d109      	bne.n	c0045fc <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 c0045e8:	2301      	movs	r3, #1
 c0045ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0045ec:	e006      	b.n	c0045fc <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 c0045ee:	2301      	movs	r3, #1
 c0045f0:	73fb      	strb	r3, [r7, #15]
      break;
 c0045f2:	e004      	b.n	c0045fe <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0045f4:	bf00      	nop
 c0045f6:	e002      	b.n	c0045fe <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0045f8:	bf00      	nop
 c0045fa:	e000      	b.n	c0045fe <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0045fc:	bf00      	nop
  }

  if (status == HAL_OK)
 c0045fe:	7bfb      	ldrb	r3, [r7, #15]
 c004600:	2b00      	cmp	r3, #0
 c004602:	f040 809f 	bne.w	c004744 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 c004606:	4b52      	ldr	r3, [pc, #328]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004608:	681b      	ldr	r3, [r3, #0]
 c00460a:	4a51      	ldr	r2, [pc, #324]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00460c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c004610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c004612:	f7fd fe3f 	bl	c002294 <HAL_GetTick>
 c004616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c004618:	e00f      	b.n	c00463a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c00461a:	f7fd fe3b 	bl	c002294 <HAL_GetTick>
 c00461e:	4602      	mov	r2, r0
 c004620:	68bb      	ldr	r3, [r7, #8]
 c004622:	1ad3      	subs	r3, r2, r3
 c004624:	2b02      	cmp	r3, #2
 c004626:	d908      	bls.n	c00463a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c004628:	4b49      	ldr	r3, [pc, #292]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00462a:	681b      	ldr	r3, [r3, #0]
 c00462c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c004630:	2b00      	cmp	r3, #0
 c004632:	d009      	beq.n	c004648 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 c004634:	2303      	movs	r3, #3
 c004636:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c004638:	e006      	b.n	c004648 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c00463a:	4b45      	ldr	r3, [pc, #276]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00463c:	681b      	ldr	r3, [r3, #0]
 c00463e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c004642:	2b00      	cmp	r3, #0
 c004644:	d1e9      	bne.n	c00461a <RCCEx_PLLSAI1_Config+0x86>
 c004646:	e000      	b.n	c00464a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 c004648:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c00464a:	7bfb      	ldrb	r3, [r7, #15]
 c00464c:	2b00      	cmp	r3, #0
 c00464e:	d179      	bne.n	c004744 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c004650:	683b      	ldr	r3, [r7, #0]
 c004652:	2b00      	cmp	r3, #0
 c004654:	d116      	bne.n	c004684 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c004656:	4b3e      	ldr	r3, [pc, #248]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004658:	691a      	ldr	r2, [r3, #16]
 c00465a:	4b3e      	ldr	r3, [pc, #248]	; (c004754 <RCCEx_PLLSAI1_Config+0x1c0>)
 c00465c:	4013      	ands	r3, r2
 c00465e:	687a      	ldr	r2, [r7, #4]
 c004660:	6892      	ldr	r2, [r2, #8]
 c004662:	0211      	lsls	r1, r2, #8
 c004664:	687a      	ldr	r2, [r7, #4]
 c004666:	68d2      	ldr	r2, [r2, #12]
 c004668:	06d2      	lsls	r2, r2, #27
 c00466a:	4311      	orrs	r1, r2
 c00466c:	687a      	ldr	r2, [r7, #4]
 c00466e:	6852      	ldr	r2, [r2, #4]
 c004670:	3a01      	subs	r2, #1
 c004672:	0112      	lsls	r2, r2, #4
 c004674:	4311      	orrs	r1, r2
 c004676:	687a      	ldr	r2, [r7, #4]
 c004678:	6812      	ldr	r2, [r2, #0]
 c00467a:	430a      	orrs	r2, r1
 c00467c:	4934      	ldr	r1, [pc, #208]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00467e:	4313      	orrs	r3, r2
 c004680:	610b      	str	r3, [r1, #16]
 c004682:	e033      	b.n	c0046ec <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 c004684:	683b      	ldr	r3, [r7, #0]
 c004686:	2b01      	cmp	r3, #1
 c004688:	d118      	bne.n	c0046bc <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c00468a:	4b31      	ldr	r3, [pc, #196]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00468c:	691a      	ldr	r2, [r3, #16]
 c00468e:	4b32      	ldr	r3, [pc, #200]	; (c004758 <RCCEx_PLLSAI1_Config+0x1c4>)
 c004690:	4013      	ands	r3, r2
 c004692:	687a      	ldr	r2, [r7, #4]
 c004694:	6892      	ldr	r2, [r2, #8]
 c004696:	0211      	lsls	r1, r2, #8
 c004698:	687a      	ldr	r2, [r7, #4]
 c00469a:	6912      	ldr	r2, [r2, #16]
 c00469c:	0852      	lsrs	r2, r2, #1
 c00469e:	3a01      	subs	r2, #1
 c0046a0:	0552      	lsls	r2, r2, #21
 c0046a2:	4311      	orrs	r1, r2
 c0046a4:	687a      	ldr	r2, [r7, #4]
 c0046a6:	6852      	ldr	r2, [r2, #4]
 c0046a8:	3a01      	subs	r2, #1
 c0046aa:	0112      	lsls	r2, r2, #4
 c0046ac:	4311      	orrs	r1, r2
 c0046ae:	687a      	ldr	r2, [r7, #4]
 c0046b0:	6812      	ldr	r2, [r2, #0]
 c0046b2:	430a      	orrs	r2, r1
 c0046b4:	4926      	ldr	r1, [pc, #152]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0046b6:	4313      	orrs	r3, r2
 c0046b8:	610b      	str	r3, [r1, #16]
 c0046ba:	e017      	b.n	c0046ec <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c0046bc:	4b24      	ldr	r3, [pc, #144]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0046be:	691a      	ldr	r2, [r3, #16]
 c0046c0:	4b26      	ldr	r3, [pc, #152]	; (c00475c <RCCEx_PLLSAI1_Config+0x1c8>)
 c0046c2:	4013      	ands	r3, r2
 c0046c4:	687a      	ldr	r2, [r7, #4]
 c0046c6:	6892      	ldr	r2, [r2, #8]
 c0046c8:	0211      	lsls	r1, r2, #8
 c0046ca:	687a      	ldr	r2, [r7, #4]
 c0046cc:	6952      	ldr	r2, [r2, #20]
 c0046ce:	0852      	lsrs	r2, r2, #1
 c0046d0:	3a01      	subs	r2, #1
 c0046d2:	0652      	lsls	r2, r2, #25
 c0046d4:	4311      	orrs	r1, r2
 c0046d6:	687a      	ldr	r2, [r7, #4]
 c0046d8:	6852      	ldr	r2, [r2, #4]
 c0046da:	3a01      	subs	r2, #1
 c0046dc:	0112      	lsls	r2, r2, #4
 c0046de:	4311      	orrs	r1, r2
 c0046e0:	687a      	ldr	r2, [r7, #4]
 c0046e2:	6812      	ldr	r2, [r2, #0]
 c0046e4:	430a      	orrs	r2, r1
 c0046e6:	491a      	ldr	r1, [pc, #104]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0046e8:	4313      	orrs	r3, r2
 c0046ea:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 c0046ec:	4b18      	ldr	r3, [pc, #96]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0046ee:	681b      	ldr	r3, [r3, #0]
 c0046f0:	4a17      	ldr	r2, [pc, #92]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0046f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c0046f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0046f8:	f7fd fdcc 	bl	c002294 <HAL_GetTick>
 c0046fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c0046fe:	e00f      	b.n	c004720 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c004700:	f7fd fdc8 	bl	c002294 <HAL_GetTick>
 c004704:	4602      	mov	r2, r0
 c004706:	68bb      	ldr	r3, [r7, #8]
 c004708:	1ad3      	subs	r3, r2, r3
 c00470a:	2b02      	cmp	r3, #2
 c00470c:	d908      	bls.n	c004720 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c00470e:	4b10      	ldr	r3, [pc, #64]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004710:	681b      	ldr	r3, [r3, #0]
 c004712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c004716:	2b00      	cmp	r3, #0
 c004718:	d109      	bne.n	c00472e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 c00471a:	2303      	movs	r3, #3
 c00471c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c00471e:	e006      	b.n	c00472e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c004720:	4b0b      	ldr	r3, [pc, #44]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004722:	681b      	ldr	r3, [r3, #0]
 c004724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c004728:	2b00      	cmp	r3, #0
 c00472a:	d0e9      	beq.n	c004700 <RCCEx_PLLSAI1_Config+0x16c>
 c00472c:	e000      	b.n	c004730 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 c00472e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c004730:	7bfb      	ldrb	r3, [r7, #15]
 c004732:	2b00      	cmp	r3, #0
 c004734:	d106      	bne.n	c004744 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c004736:	4b06      	ldr	r3, [pc, #24]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004738:	691a      	ldr	r2, [r3, #16]
 c00473a:	687b      	ldr	r3, [r7, #4]
 c00473c:	699b      	ldr	r3, [r3, #24]
 c00473e:	4904      	ldr	r1, [pc, #16]	; (c004750 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004740:	4313      	orrs	r3, r2
 c004742:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 c004744:	7bfb      	ldrb	r3, [r7, #15]
}
 c004746:	4618      	mov	r0, r3
 c004748:	3710      	adds	r7, #16
 c00474a:	46bd      	mov	sp, r7
 c00474c:	bd80      	pop	{r7, pc}
 c00474e:	bf00      	nop
 c004750:	50021000 	.word	0x50021000
 c004754:	07ff800c 	.word	0x07ff800c
 c004758:	ff9f800c 	.word	0xff9f800c
 c00475c:	f9ff800c 	.word	0xf9ff800c

0c004760 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 c004760:	b580      	push	{r7, lr}
 c004762:	b084      	sub	sp, #16
 c004764:	af00      	add	r7, sp, #0
 c004766:	6078      	str	r0, [r7, #4]
 c004768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c00476a:	2300      	movs	r3, #0
 c00476c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c00476e:	687b      	ldr	r3, [r7, #4]
 c004770:	681b      	ldr	r3, [r3, #0]
 c004772:	2b03      	cmp	r3, #3
 c004774:	d018      	beq.n	c0047a8 <RCCEx_PLLSAI2_Config+0x48>
 c004776:	2b03      	cmp	r3, #3
 c004778:	d81f      	bhi.n	c0047ba <RCCEx_PLLSAI2_Config+0x5a>
 c00477a:	2b01      	cmp	r3, #1
 c00477c:	d002      	beq.n	c004784 <RCCEx_PLLSAI2_Config+0x24>
 c00477e:	2b02      	cmp	r3, #2
 c004780:	d009      	beq.n	c004796 <RCCEx_PLLSAI2_Config+0x36>
 c004782:	e01a      	b.n	c0047ba <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c004784:	4b4a      	ldr	r3, [pc, #296]	; (c0048b0 <RCCEx_PLLSAI2_Config+0x150>)
 c004786:	681b      	ldr	r3, [r3, #0]
 c004788:	f003 0302 	and.w	r3, r3, #2
 c00478c:	2b00      	cmp	r3, #0
 c00478e:	d117      	bne.n	c0047c0 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 c004790:	2301      	movs	r3, #1
 c004792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c004794:	e014      	b.n	c0047c0 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c004796:	4b46      	ldr	r3, [pc, #280]	; (c0048b0 <RCCEx_PLLSAI2_Config+0x150>)
 c004798:	681b      	ldr	r3, [r3, #0]
 c00479a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00479e:	2b00      	cmp	r3, #0
 c0047a0:	d110      	bne.n	c0047c4 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 c0047a2:	2301      	movs	r3, #1
 c0047a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0047a6:	e00d      	b.n	c0047c4 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c0047a8:	4b41      	ldr	r3, [pc, #260]	; (c0048b0 <RCCEx_PLLSAI2_Config+0x150>)
 c0047aa:	681b      	ldr	r3, [r3, #0]
 c0047ac:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c0047b0:	2b00      	cmp	r3, #0
 c0047b2:	d109      	bne.n	c0047c8 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 c0047b4:	2301      	movs	r3, #1
 c0047b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0047b8:	e006      	b.n	c0047c8 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 c0047ba:	2301      	movs	r3, #1
 c0047bc:	73fb      	strb	r3, [r7, #15]
      break;
 c0047be:	e004      	b.n	c0047ca <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c0047c0:	bf00      	nop
 c0047c2:	e002      	b.n	c0047ca <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c0047c4:	bf00      	nop
 c0047c6:	e000      	b.n	c0047ca <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c0047c8:	bf00      	nop
  }

  if (status == HAL_OK)
 c0047ca:	7bfb      	ldrb	r3, [r7, #15]
 c0047cc:	2b00      	cmp	r3, #0
 c0047ce:	d169      	bne.n	c0048a4 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 c0047d0:	4b37      	ldr	r3, [pc, #220]	; (c0048b0 <RCCEx_PLLSAI2_Config+0x150>)
 c0047d2:	681b      	ldr	r3, [r3, #0]
 c0047d4:	4a36      	ldr	r2, [pc, #216]	; (c0048b0 <RCCEx_PLLSAI2_Config+0x150>)
 c0047d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0047da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c0047dc:	f7fd fd5a 	bl	c002294 <HAL_GetTick>
 c0047e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0047e2:	e00f      	b.n	c004804 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c0047e4:	f7fd fd56 	bl	c002294 <HAL_GetTick>
 c0047e8:	4602      	mov	r2, r0
 c0047ea:	68bb      	ldr	r3, [r7, #8]
 c0047ec:	1ad3      	subs	r3, r2, r3
 c0047ee:	2b02      	cmp	r3, #2
 c0047f0:	d908      	bls.n	c004804 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0047f2:	4b2f      	ldr	r3, [pc, #188]	; (c0048b0 <RCCEx_PLLSAI2_Config+0x150>)
 c0047f4:	681b      	ldr	r3, [r3, #0]
 c0047f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0047fa:	2b00      	cmp	r3, #0
 c0047fc:	d009      	beq.n	c004812 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 c0047fe:	2303      	movs	r3, #3
 c004800:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c004802:	e006      	b.n	c004812 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c004804:	4b2a      	ldr	r3, [pc, #168]	; (c0048b0 <RCCEx_PLLSAI2_Config+0x150>)
 c004806:	681b      	ldr	r3, [r3, #0]
 c004808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c00480c:	2b00      	cmp	r3, #0
 c00480e:	d1e9      	bne.n	c0047e4 <RCCEx_PLLSAI2_Config+0x84>
 c004810:	e000      	b.n	c004814 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 c004812:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c004814:	7bfb      	ldrb	r3, [r7, #15]
 c004816:	2b00      	cmp	r3, #0
 c004818:	d144      	bne.n	c0048a4 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c00481a:	683b      	ldr	r3, [r7, #0]
 c00481c:	2b00      	cmp	r3, #0
 c00481e:	d115      	bne.n	c00484c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c004820:	4b23      	ldr	r3, [pc, #140]	; (c0048b0 <RCCEx_PLLSAI2_Config+0x150>)
 c004822:	695a      	ldr	r2, [r3, #20]
 c004824:	4b23      	ldr	r3, [pc, #140]	; (c0048b4 <RCCEx_PLLSAI2_Config+0x154>)
 c004826:	4013      	ands	r3, r2
 c004828:	687a      	ldr	r2, [r7, #4]
 c00482a:	6892      	ldr	r2, [r2, #8]
 c00482c:	0211      	lsls	r1, r2, #8
 c00482e:	687a      	ldr	r2, [r7, #4]
 c004830:	68d2      	ldr	r2, [r2, #12]
 c004832:	06d2      	lsls	r2, r2, #27
 c004834:	4311      	orrs	r1, r2
 c004836:	687a      	ldr	r2, [r7, #4]
 c004838:	6852      	ldr	r2, [r2, #4]
 c00483a:	3a01      	subs	r2, #1
 c00483c:	0112      	lsls	r2, r2, #4
 c00483e:	4311      	orrs	r1, r2
 c004840:	687a      	ldr	r2, [r7, #4]
 c004842:	6812      	ldr	r2, [r2, #0]
 c004844:	430a      	orrs	r2, r1
 c004846:	491a      	ldr	r1, [pc, #104]	; (c0048b0 <RCCEx_PLLSAI2_Config+0x150>)
 c004848:	4313      	orrs	r3, r2
 c00484a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 c00484c:	4b18      	ldr	r3, [pc, #96]	; (c0048b0 <RCCEx_PLLSAI2_Config+0x150>)
 c00484e:	681b      	ldr	r3, [r3, #0]
 c004850:	4a17      	ldr	r2, [pc, #92]	; (c0048b0 <RCCEx_PLLSAI2_Config+0x150>)
 c004852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c004856:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c004858:	f7fd fd1c 	bl	c002294 <HAL_GetTick>
 c00485c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c00485e:	e00f      	b.n	c004880 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c004860:	f7fd fd18 	bl	c002294 <HAL_GetTick>
 c004864:	4602      	mov	r2, r0
 c004866:	68bb      	ldr	r3, [r7, #8]
 c004868:	1ad3      	subs	r3, r2, r3
 c00486a:	2b02      	cmp	r3, #2
 c00486c:	d908      	bls.n	c004880 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c00486e:	4b10      	ldr	r3, [pc, #64]	; (c0048b0 <RCCEx_PLLSAI2_Config+0x150>)
 c004870:	681b      	ldr	r3, [r3, #0]
 c004872:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c004876:	2b00      	cmp	r3, #0
 c004878:	d109      	bne.n	c00488e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 c00487a:	2303      	movs	r3, #3
 c00487c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c00487e:	e006      	b.n	c00488e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c004880:	4b0b      	ldr	r3, [pc, #44]	; (c0048b0 <RCCEx_PLLSAI2_Config+0x150>)
 c004882:	681b      	ldr	r3, [r3, #0]
 c004884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c004888:	2b00      	cmp	r3, #0
 c00488a:	d0e9      	beq.n	c004860 <RCCEx_PLLSAI2_Config+0x100>
 c00488c:	e000      	b.n	c004890 <RCCEx_PLLSAI2_Config+0x130>
          break;
 c00488e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c004890:	7bfb      	ldrb	r3, [r7, #15]
 c004892:	2b00      	cmp	r3, #0
 c004894:	d106      	bne.n	c0048a4 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c004896:	4b06      	ldr	r3, [pc, #24]	; (c0048b0 <RCCEx_PLLSAI2_Config+0x150>)
 c004898:	695a      	ldr	r2, [r3, #20]
 c00489a:	687b      	ldr	r3, [r7, #4]
 c00489c:	691b      	ldr	r3, [r3, #16]
 c00489e:	4904      	ldr	r1, [pc, #16]	; (c0048b0 <RCCEx_PLLSAI2_Config+0x150>)
 c0048a0:	4313      	orrs	r3, r2
 c0048a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 c0048a4:	7bfb      	ldrb	r3, [r7, #15]
}
 c0048a6:	4618      	mov	r0, r3
 c0048a8:	3710      	adds	r7, #16
 c0048aa:	46bd      	mov	sp, r7
 c0048ac:	bd80      	pop	{r7, pc}
 c0048ae:	bf00      	nop
 c0048b0:	50021000 	.word	0x50021000
 c0048b4:	07ff800c 	.word	0x07ff800c

0c0048b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c0048b8:	b580      	push	{r7, lr}
 c0048ba:	b082      	sub	sp, #8
 c0048bc:	af00      	add	r7, sp, #0
 c0048be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c0048c0:	687b      	ldr	r3, [r7, #4]
 c0048c2:	2b00      	cmp	r3, #0
 c0048c4:	d101      	bne.n	c0048ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c0048c6:	2301      	movs	r3, #1
 c0048c8:	e042      	b.n	c004950 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c0048ca:	687b      	ldr	r3, [r7, #4]
 c0048cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c0048d0:	2b00      	cmp	r3, #0
 c0048d2:	d106      	bne.n	c0048e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c0048d4:	687b      	ldr	r3, [r7, #4]
 c0048d6:	2200      	movs	r2, #0
 c0048d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c0048dc:	6878      	ldr	r0, [r7, #4]
 c0048de:	f7fd fa89 	bl	c001df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c0048e2:	687b      	ldr	r3, [r7, #4]
 c0048e4:	2224      	movs	r2, #36	; 0x24
 c0048e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 c0048ea:	687b      	ldr	r3, [r7, #4]
 c0048ec:	681b      	ldr	r3, [r3, #0]
 c0048ee:	681a      	ldr	r2, [r3, #0]
 c0048f0:	687b      	ldr	r3, [r7, #4]
 c0048f2:	681b      	ldr	r3, [r3, #0]
 c0048f4:	f022 0201 	bic.w	r2, r2, #1
 c0048f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c0048fa:	6878      	ldr	r0, [r7, #4]
 c0048fc:	f000 f996 	bl	c004c2c <UART_SetConfig>
 c004900:	4603      	mov	r3, r0
 c004902:	2b01      	cmp	r3, #1
 c004904:	d101      	bne.n	c00490a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 c004906:	2301      	movs	r3, #1
 c004908:	e022      	b.n	c004950 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c00490a:	687b      	ldr	r3, [r7, #4]
 c00490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00490e:	2b00      	cmp	r3, #0
 c004910:	d002      	beq.n	c004918 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 c004912:	6878      	ldr	r0, [r7, #4]
 c004914:	f000 fc88 	bl	c005228 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c004918:	687b      	ldr	r3, [r7, #4]
 c00491a:	681b      	ldr	r3, [r3, #0]
 c00491c:	685a      	ldr	r2, [r3, #4]
 c00491e:	687b      	ldr	r3, [r7, #4]
 c004920:	681b      	ldr	r3, [r3, #0]
 c004922:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c004926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c004928:	687b      	ldr	r3, [r7, #4]
 c00492a:	681b      	ldr	r3, [r3, #0]
 c00492c:	689a      	ldr	r2, [r3, #8]
 c00492e:	687b      	ldr	r3, [r7, #4]
 c004930:	681b      	ldr	r3, [r3, #0]
 c004932:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c004936:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c004938:	687b      	ldr	r3, [r7, #4]
 c00493a:	681b      	ldr	r3, [r3, #0]
 c00493c:	681a      	ldr	r2, [r3, #0]
 c00493e:	687b      	ldr	r3, [r7, #4]
 c004940:	681b      	ldr	r3, [r3, #0]
 c004942:	f042 0201 	orr.w	r2, r2, #1
 c004946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c004948:	6878      	ldr	r0, [r7, #4]
 c00494a:	f000 fd0f 	bl	c00536c <UART_CheckIdleState>
 c00494e:	4603      	mov	r3, r0
}
 c004950:	4618      	mov	r0, r3
 c004952:	3708      	adds	r7, #8
 c004954:	46bd      	mov	sp, r7
 c004956:	bd80      	pop	{r7, pc}

0c004958 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c004958:	b580      	push	{r7, lr}
 c00495a:	b08a      	sub	sp, #40	; 0x28
 c00495c:	af02      	add	r7, sp, #8
 c00495e:	60f8      	str	r0, [r7, #12]
 c004960:	60b9      	str	r1, [r7, #8]
 c004962:	603b      	str	r3, [r7, #0]
 c004964:	4613      	mov	r3, r2
 c004966:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 c004968:	68fb      	ldr	r3, [r7, #12]
 c00496a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c00496e:	2b20      	cmp	r3, #32
 c004970:	f040 8083 	bne.w	c004a7a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 c004974:	68bb      	ldr	r3, [r7, #8]
 c004976:	2b00      	cmp	r3, #0
 c004978:	d002      	beq.n	c004980 <HAL_UART_Transmit+0x28>
 c00497a:	88fb      	ldrh	r3, [r7, #6]
 c00497c:	2b00      	cmp	r3, #0
 c00497e:	d101      	bne.n	c004984 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 c004980:	2301      	movs	r3, #1
 c004982:	e07b      	b.n	c004a7c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 c004984:	68fb      	ldr	r3, [r7, #12]
 c004986:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c00498a:	2b01      	cmp	r3, #1
 c00498c:	d101      	bne.n	c004992 <HAL_UART_Transmit+0x3a>
 c00498e:	2302      	movs	r3, #2
 c004990:	e074      	b.n	c004a7c <HAL_UART_Transmit+0x124>
 c004992:	68fb      	ldr	r3, [r7, #12]
 c004994:	2201      	movs	r2, #1
 c004996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c00499a:	68fb      	ldr	r3, [r7, #12]
 c00499c:	2200      	movs	r2, #0
 c00499e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c0049a2:	68fb      	ldr	r3, [r7, #12]
 c0049a4:	2221      	movs	r2, #33	; 0x21
 c0049a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c0049aa:	f7fd fc73 	bl	c002294 <HAL_GetTick>
 c0049ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 c0049b0:	68fb      	ldr	r3, [r7, #12]
 c0049b2:	88fa      	ldrh	r2, [r7, #6]
 c0049b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 c0049b8:	68fb      	ldr	r3, [r7, #12]
 c0049ba:	88fa      	ldrh	r2, [r7, #6]
 c0049bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c0049c0:	68fb      	ldr	r3, [r7, #12]
 c0049c2:	689b      	ldr	r3, [r3, #8]
 c0049c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c0049c8:	d108      	bne.n	c0049dc <HAL_UART_Transmit+0x84>
 c0049ca:	68fb      	ldr	r3, [r7, #12]
 c0049cc:	691b      	ldr	r3, [r3, #16]
 c0049ce:	2b00      	cmp	r3, #0
 c0049d0:	d104      	bne.n	c0049dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 c0049d2:	2300      	movs	r3, #0
 c0049d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 c0049d6:	68bb      	ldr	r3, [r7, #8]
 c0049d8:	61bb      	str	r3, [r7, #24]
 c0049da:	e003      	b.n	c0049e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 c0049dc:	68bb      	ldr	r3, [r7, #8]
 c0049de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c0049e0:	2300      	movs	r3, #0
 c0049e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 c0049e4:	68fb      	ldr	r3, [r7, #12]
 c0049e6:	2200      	movs	r2, #0
 c0049e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 c0049ec:	e02c      	b.n	c004a48 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c0049ee:	683b      	ldr	r3, [r7, #0]
 c0049f0:	9300      	str	r3, [sp, #0]
 c0049f2:	697b      	ldr	r3, [r7, #20]
 c0049f4:	2200      	movs	r2, #0
 c0049f6:	2180      	movs	r1, #128	; 0x80
 c0049f8:	68f8      	ldr	r0, [r7, #12]
 c0049fa:	f000 fd02 	bl	c005402 <UART_WaitOnFlagUntilTimeout>
 c0049fe:	4603      	mov	r3, r0
 c004a00:	2b00      	cmp	r3, #0
 c004a02:	d001      	beq.n	c004a08 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 c004a04:	2303      	movs	r3, #3
 c004a06:	e039      	b.n	c004a7c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 c004a08:	69fb      	ldr	r3, [r7, #28]
 c004a0a:	2b00      	cmp	r3, #0
 c004a0c:	d10b      	bne.n	c004a26 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c004a0e:	69bb      	ldr	r3, [r7, #24]
 c004a10:	881b      	ldrh	r3, [r3, #0]
 c004a12:	461a      	mov	r2, r3
 c004a14:	68fb      	ldr	r3, [r7, #12]
 c004a16:	681b      	ldr	r3, [r3, #0]
 c004a18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 c004a1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 c004a1e:	69bb      	ldr	r3, [r7, #24]
 c004a20:	3302      	adds	r3, #2
 c004a22:	61bb      	str	r3, [r7, #24]
 c004a24:	e007      	b.n	c004a36 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c004a26:	69fb      	ldr	r3, [r7, #28]
 c004a28:	781a      	ldrb	r2, [r3, #0]
 c004a2a:	68fb      	ldr	r3, [r7, #12]
 c004a2c:	681b      	ldr	r3, [r3, #0]
 c004a2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 c004a30:	69fb      	ldr	r3, [r7, #28]
 c004a32:	3301      	adds	r3, #1
 c004a34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 c004a36:	68fb      	ldr	r3, [r7, #12]
 c004a38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c004a3c:	b29b      	uxth	r3, r3
 c004a3e:	3b01      	subs	r3, #1
 c004a40:	b29a      	uxth	r2, r3
 c004a42:	68fb      	ldr	r3, [r7, #12]
 c004a44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 c004a48:	68fb      	ldr	r3, [r7, #12]
 c004a4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c004a4e:	b29b      	uxth	r3, r3
 c004a50:	2b00      	cmp	r3, #0
 c004a52:	d1cc      	bne.n	c0049ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c004a54:	683b      	ldr	r3, [r7, #0]
 c004a56:	9300      	str	r3, [sp, #0]
 c004a58:	697b      	ldr	r3, [r7, #20]
 c004a5a:	2200      	movs	r2, #0
 c004a5c:	2140      	movs	r1, #64	; 0x40
 c004a5e:	68f8      	ldr	r0, [r7, #12]
 c004a60:	f000 fccf 	bl	c005402 <UART_WaitOnFlagUntilTimeout>
 c004a64:	4603      	mov	r3, r0
 c004a66:	2b00      	cmp	r3, #0
 c004a68:	d001      	beq.n	c004a6e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 c004a6a:	2303      	movs	r3, #3
 c004a6c:	e006      	b.n	c004a7c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 c004a6e:	68fb      	ldr	r3, [r7, #12]
 c004a70:	2220      	movs	r2, #32
 c004a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 c004a76:	2300      	movs	r3, #0
 c004a78:	e000      	b.n	c004a7c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 c004a7a:	2302      	movs	r3, #2
  }
}
 c004a7c:	4618      	mov	r0, r3
 c004a7e:	3720      	adds	r7, #32
 c004a80:	46bd      	mov	sp, r7
 c004a82:	bd80      	pop	{r7, pc}

0c004a84 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c004a84:	b580      	push	{r7, lr}
 c004a86:	b08a      	sub	sp, #40	; 0x28
 c004a88:	af02      	add	r7, sp, #8
 c004a8a:	60f8      	str	r0, [r7, #12]
 c004a8c:	60b9      	str	r1, [r7, #8]
 c004a8e:	603b      	str	r3, [r7, #0]
 c004a90:	4613      	mov	r3, r2
 c004a92:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 c004a94:	68fb      	ldr	r3, [r7, #12]
 c004a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004a9a:	2b20      	cmp	r3, #32
 c004a9c:	f040 80c0 	bne.w	c004c20 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 c004aa0:	68bb      	ldr	r3, [r7, #8]
 c004aa2:	2b00      	cmp	r3, #0
 c004aa4:	d002      	beq.n	c004aac <HAL_UART_Receive+0x28>
 c004aa6:	88fb      	ldrh	r3, [r7, #6]
 c004aa8:	2b00      	cmp	r3, #0
 c004aaa:	d101      	bne.n	c004ab0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 c004aac:	2301      	movs	r3, #1
 c004aae:	e0b8      	b.n	c004c22 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 c004ab0:	68fb      	ldr	r3, [r7, #12]
 c004ab2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c004ab6:	2b01      	cmp	r3, #1
 c004ab8:	d101      	bne.n	c004abe <HAL_UART_Receive+0x3a>
 c004aba:	2302      	movs	r3, #2
 c004abc:	e0b1      	b.n	c004c22 <HAL_UART_Receive+0x19e>
 c004abe:	68fb      	ldr	r3, [r7, #12]
 c004ac0:	2201      	movs	r2, #1
 c004ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c004ac6:	68fb      	ldr	r3, [r7, #12]
 c004ac8:	2200      	movs	r2, #0
 c004aca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 c004ace:	68fb      	ldr	r3, [r7, #12]
 c004ad0:	2222      	movs	r2, #34	; 0x22
 c004ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c004ad6:	68fb      	ldr	r3, [r7, #12]
 c004ad8:	2200      	movs	r2, #0
 c004ada:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c004adc:	f7fd fbda 	bl	c002294 <HAL_GetTick>
 c004ae0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 c004ae2:	68fb      	ldr	r3, [r7, #12]
 c004ae4:	88fa      	ldrh	r2, [r7, #6]
 c004ae6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 c004aea:	68fb      	ldr	r3, [r7, #12]
 c004aec:	88fa      	ldrh	r2, [r7, #6]
 c004aee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 c004af2:	68fb      	ldr	r3, [r7, #12]
 c004af4:	689b      	ldr	r3, [r3, #8]
 c004af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c004afa:	d10e      	bne.n	c004b1a <HAL_UART_Receive+0x96>
 c004afc:	68fb      	ldr	r3, [r7, #12]
 c004afe:	691b      	ldr	r3, [r3, #16]
 c004b00:	2b00      	cmp	r3, #0
 c004b02:	d105      	bne.n	c004b10 <HAL_UART_Receive+0x8c>
 c004b04:	68fb      	ldr	r3, [r7, #12]
 c004b06:	f240 12ff 	movw	r2, #511	; 0x1ff
 c004b0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c004b0e:	e02d      	b.n	c004b6c <HAL_UART_Receive+0xe8>
 c004b10:	68fb      	ldr	r3, [r7, #12]
 c004b12:	22ff      	movs	r2, #255	; 0xff
 c004b14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c004b18:	e028      	b.n	c004b6c <HAL_UART_Receive+0xe8>
 c004b1a:	68fb      	ldr	r3, [r7, #12]
 c004b1c:	689b      	ldr	r3, [r3, #8]
 c004b1e:	2b00      	cmp	r3, #0
 c004b20:	d10d      	bne.n	c004b3e <HAL_UART_Receive+0xba>
 c004b22:	68fb      	ldr	r3, [r7, #12]
 c004b24:	691b      	ldr	r3, [r3, #16]
 c004b26:	2b00      	cmp	r3, #0
 c004b28:	d104      	bne.n	c004b34 <HAL_UART_Receive+0xb0>
 c004b2a:	68fb      	ldr	r3, [r7, #12]
 c004b2c:	22ff      	movs	r2, #255	; 0xff
 c004b2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c004b32:	e01b      	b.n	c004b6c <HAL_UART_Receive+0xe8>
 c004b34:	68fb      	ldr	r3, [r7, #12]
 c004b36:	227f      	movs	r2, #127	; 0x7f
 c004b38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c004b3c:	e016      	b.n	c004b6c <HAL_UART_Receive+0xe8>
 c004b3e:	68fb      	ldr	r3, [r7, #12]
 c004b40:	689b      	ldr	r3, [r3, #8]
 c004b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c004b46:	d10d      	bne.n	c004b64 <HAL_UART_Receive+0xe0>
 c004b48:	68fb      	ldr	r3, [r7, #12]
 c004b4a:	691b      	ldr	r3, [r3, #16]
 c004b4c:	2b00      	cmp	r3, #0
 c004b4e:	d104      	bne.n	c004b5a <HAL_UART_Receive+0xd6>
 c004b50:	68fb      	ldr	r3, [r7, #12]
 c004b52:	227f      	movs	r2, #127	; 0x7f
 c004b54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c004b58:	e008      	b.n	c004b6c <HAL_UART_Receive+0xe8>
 c004b5a:	68fb      	ldr	r3, [r7, #12]
 c004b5c:	223f      	movs	r2, #63	; 0x3f
 c004b5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c004b62:	e003      	b.n	c004b6c <HAL_UART_Receive+0xe8>
 c004b64:	68fb      	ldr	r3, [r7, #12]
 c004b66:	2200      	movs	r2, #0
 c004b68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 c004b6c:	68fb      	ldr	r3, [r7, #12]
 c004b6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 c004b72:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c004b74:	68fb      	ldr	r3, [r7, #12]
 c004b76:	689b      	ldr	r3, [r3, #8]
 c004b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c004b7c:	d108      	bne.n	c004b90 <HAL_UART_Receive+0x10c>
 c004b7e:	68fb      	ldr	r3, [r7, #12]
 c004b80:	691b      	ldr	r3, [r3, #16]
 c004b82:	2b00      	cmp	r3, #0
 c004b84:	d104      	bne.n	c004b90 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 c004b86:	2300      	movs	r3, #0
 c004b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 c004b8a:	68bb      	ldr	r3, [r7, #8]
 c004b8c:	61bb      	str	r3, [r7, #24]
 c004b8e:	e003      	b.n	c004b98 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 c004b90:	68bb      	ldr	r3, [r7, #8]
 c004b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c004b94:	2300      	movs	r3, #0
 c004b96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 c004b98:	68fb      	ldr	r3, [r7, #12]
 c004b9a:	2200      	movs	r2, #0
 c004b9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 c004ba0:	e032      	b.n	c004c08 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 c004ba2:	683b      	ldr	r3, [r7, #0]
 c004ba4:	9300      	str	r3, [sp, #0]
 c004ba6:	697b      	ldr	r3, [r7, #20]
 c004ba8:	2200      	movs	r2, #0
 c004baa:	2120      	movs	r1, #32
 c004bac:	68f8      	ldr	r0, [r7, #12]
 c004bae:	f000 fc28 	bl	c005402 <UART_WaitOnFlagUntilTimeout>
 c004bb2:	4603      	mov	r3, r0
 c004bb4:	2b00      	cmp	r3, #0
 c004bb6:	d001      	beq.n	c004bbc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 c004bb8:	2303      	movs	r3, #3
 c004bba:	e032      	b.n	c004c22 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 c004bbc:	69fb      	ldr	r3, [r7, #28]
 c004bbe:	2b00      	cmp	r3, #0
 c004bc0:	d10c      	bne.n	c004bdc <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 c004bc2:	68fb      	ldr	r3, [r7, #12]
 c004bc4:	681b      	ldr	r3, [r3, #0]
 c004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004bc8:	b29a      	uxth	r2, r3
 c004bca:	8a7b      	ldrh	r3, [r7, #18]
 c004bcc:	4013      	ands	r3, r2
 c004bce:	b29a      	uxth	r2, r3
 c004bd0:	69bb      	ldr	r3, [r7, #24]
 c004bd2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 c004bd4:	69bb      	ldr	r3, [r7, #24]
 c004bd6:	3302      	adds	r3, #2
 c004bd8:	61bb      	str	r3, [r7, #24]
 c004bda:	e00c      	b.n	c004bf6 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 c004bdc:	68fb      	ldr	r3, [r7, #12]
 c004bde:	681b      	ldr	r3, [r3, #0]
 c004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004be2:	b2da      	uxtb	r2, r3
 c004be4:	8a7b      	ldrh	r3, [r7, #18]
 c004be6:	b2db      	uxtb	r3, r3
 c004be8:	4013      	ands	r3, r2
 c004bea:	b2da      	uxtb	r2, r3
 c004bec:	69fb      	ldr	r3, [r7, #28]
 c004bee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 c004bf0:	69fb      	ldr	r3, [r7, #28]
 c004bf2:	3301      	adds	r3, #1
 c004bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 c004bf6:	68fb      	ldr	r3, [r7, #12]
 c004bf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 c004bfc:	b29b      	uxth	r3, r3
 c004bfe:	3b01      	subs	r3, #1
 c004c00:	b29a      	uxth	r2, r3
 c004c02:	68fb      	ldr	r3, [r7, #12]
 c004c04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 c004c08:	68fb      	ldr	r3, [r7, #12]
 c004c0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 c004c0e:	b29b      	uxth	r3, r3
 c004c10:	2b00      	cmp	r3, #0
 c004c12:	d1c6      	bne.n	c004ba2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 c004c14:	68fb      	ldr	r3, [r7, #12]
 c004c16:	2220      	movs	r2, #32
 c004c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 c004c1c:	2300      	movs	r3, #0
 c004c1e:	e000      	b.n	c004c22 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 c004c20:	2302      	movs	r3, #2
  }
}
 c004c22:	4618      	mov	r0, r3
 c004c24:	3720      	adds	r7, #32
 c004c26:	46bd      	mov	sp, r7
 c004c28:	bd80      	pop	{r7, pc}
	...

0c004c2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c004c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c004c30:	b08c      	sub	sp, #48	; 0x30
 c004c32:	af00      	add	r7, sp, #0
 c004c34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c004c36:	2300      	movs	r3, #0
 c004c38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c004c3c:	697b      	ldr	r3, [r7, #20]
 c004c3e:	689a      	ldr	r2, [r3, #8]
 c004c40:	697b      	ldr	r3, [r7, #20]
 c004c42:	691b      	ldr	r3, [r3, #16]
 c004c44:	431a      	orrs	r2, r3
 c004c46:	697b      	ldr	r3, [r7, #20]
 c004c48:	695b      	ldr	r3, [r3, #20]
 c004c4a:	431a      	orrs	r2, r3
 c004c4c:	697b      	ldr	r3, [r7, #20]
 c004c4e:	69db      	ldr	r3, [r3, #28]
 c004c50:	4313      	orrs	r3, r2
 c004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c004c54:	697b      	ldr	r3, [r7, #20]
 c004c56:	681b      	ldr	r3, [r3, #0]
 c004c58:	681a      	ldr	r2, [r3, #0]
 c004c5a:	4baa      	ldr	r3, [pc, #680]	; (c004f04 <UART_SetConfig+0x2d8>)
 c004c5c:	4013      	ands	r3, r2
 c004c5e:	697a      	ldr	r2, [r7, #20]
 c004c60:	6812      	ldr	r2, [r2, #0]
 c004c62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c004c64:	430b      	orrs	r3, r1
 c004c66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c004c68:	697b      	ldr	r3, [r7, #20]
 c004c6a:	681b      	ldr	r3, [r3, #0]
 c004c6c:	685b      	ldr	r3, [r3, #4]
 c004c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 c004c72:	697b      	ldr	r3, [r7, #20]
 c004c74:	68da      	ldr	r2, [r3, #12]
 c004c76:	697b      	ldr	r3, [r7, #20]
 c004c78:	681b      	ldr	r3, [r3, #0]
 c004c7a:	430a      	orrs	r2, r1
 c004c7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c004c7e:	697b      	ldr	r3, [r7, #20]
 c004c80:	699b      	ldr	r3, [r3, #24]
 c004c82:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c004c84:	697b      	ldr	r3, [r7, #20]
 c004c86:	681b      	ldr	r3, [r3, #0]
 c004c88:	4a9f      	ldr	r2, [pc, #636]	; (c004f08 <UART_SetConfig+0x2dc>)
 c004c8a:	4293      	cmp	r3, r2
 c004c8c:	d004      	beq.n	c004c98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c004c8e:	697b      	ldr	r3, [r7, #20]
 c004c90:	6a1b      	ldr	r3, [r3, #32]
 c004c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c004c94:	4313      	orrs	r3, r2
 c004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c004c98:	697b      	ldr	r3, [r7, #20]
 c004c9a:	681b      	ldr	r3, [r3, #0]
 c004c9c:	689b      	ldr	r3, [r3, #8]
 c004c9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 c004ca2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 c004ca6:	697a      	ldr	r2, [r7, #20]
 c004ca8:	6812      	ldr	r2, [r2, #0]
 c004caa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c004cac:	430b      	orrs	r3, r1
 c004cae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c004cb0:	697b      	ldr	r3, [r7, #20]
 c004cb2:	681b      	ldr	r3, [r3, #0]
 c004cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c004cb6:	f023 010f 	bic.w	r1, r3, #15
 c004cba:	697b      	ldr	r3, [r7, #20]
 c004cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c004cbe:	697b      	ldr	r3, [r7, #20]
 c004cc0:	681b      	ldr	r3, [r3, #0]
 c004cc2:	430a      	orrs	r2, r1
 c004cc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c004cc6:	697b      	ldr	r3, [r7, #20]
 c004cc8:	681b      	ldr	r3, [r3, #0]
 c004cca:	4a90      	ldr	r2, [pc, #576]	; (c004f0c <UART_SetConfig+0x2e0>)
 c004ccc:	4293      	cmp	r3, r2
 c004cce:	d125      	bne.n	c004d1c <UART_SetConfig+0xf0>
 c004cd0:	4b8f      	ldr	r3, [pc, #572]	; (c004f10 <UART_SetConfig+0x2e4>)
 c004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004cd6:	f003 0303 	and.w	r3, r3, #3
 c004cda:	2b03      	cmp	r3, #3
 c004cdc:	d81a      	bhi.n	c004d14 <UART_SetConfig+0xe8>
 c004cde:	a201      	add	r2, pc, #4	; (adr r2, c004ce4 <UART_SetConfig+0xb8>)
 c004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004ce4:	0c004cf5 	.word	0x0c004cf5
 c004ce8:	0c004d05 	.word	0x0c004d05
 c004cec:	0c004cfd 	.word	0x0c004cfd
 c004cf0:	0c004d0d 	.word	0x0c004d0d
 c004cf4:	2301      	movs	r3, #1
 c004cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004cfa:	e114      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004cfc:	2302      	movs	r3, #2
 c004cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d02:	e110      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004d04:	2304      	movs	r3, #4
 c004d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d0a:	e10c      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004d0c:	2308      	movs	r3, #8
 c004d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d12:	e108      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004d14:	2310      	movs	r3, #16
 c004d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d1a:	e104      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004d1c:	697b      	ldr	r3, [r7, #20]
 c004d1e:	681b      	ldr	r3, [r3, #0]
 c004d20:	4a7c      	ldr	r2, [pc, #496]	; (c004f14 <UART_SetConfig+0x2e8>)
 c004d22:	4293      	cmp	r3, r2
 c004d24:	d138      	bne.n	c004d98 <UART_SetConfig+0x16c>
 c004d26:	4b7a      	ldr	r3, [pc, #488]	; (c004f10 <UART_SetConfig+0x2e4>)
 c004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004d2c:	f003 030c 	and.w	r3, r3, #12
 c004d30:	2b0c      	cmp	r3, #12
 c004d32:	d82d      	bhi.n	c004d90 <UART_SetConfig+0x164>
 c004d34:	a201      	add	r2, pc, #4	; (adr r2, c004d3c <UART_SetConfig+0x110>)
 c004d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004d3a:	bf00      	nop
 c004d3c:	0c004d71 	.word	0x0c004d71
 c004d40:	0c004d91 	.word	0x0c004d91
 c004d44:	0c004d91 	.word	0x0c004d91
 c004d48:	0c004d91 	.word	0x0c004d91
 c004d4c:	0c004d81 	.word	0x0c004d81
 c004d50:	0c004d91 	.word	0x0c004d91
 c004d54:	0c004d91 	.word	0x0c004d91
 c004d58:	0c004d91 	.word	0x0c004d91
 c004d5c:	0c004d79 	.word	0x0c004d79
 c004d60:	0c004d91 	.word	0x0c004d91
 c004d64:	0c004d91 	.word	0x0c004d91
 c004d68:	0c004d91 	.word	0x0c004d91
 c004d6c:	0c004d89 	.word	0x0c004d89
 c004d70:	2300      	movs	r3, #0
 c004d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d76:	e0d6      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004d78:	2302      	movs	r3, #2
 c004d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d7e:	e0d2      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004d80:	2304      	movs	r3, #4
 c004d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d86:	e0ce      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004d88:	2308      	movs	r3, #8
 c004d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d8e:	e0ca      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004d90:	2310      	movs	r3, #16
 c004d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d96:	e0c6      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004d98:	697b      	ldr	r3, [r7, #20]
 c004d9a:	681b      	ldr	r3, [r3, #0]
 c004d9c:	4a5e      	ldr	r2, [pc, #376]	; (c004f18 <UART_SetConfig+0x2ec>)
 c004d9e:	4293      	cmp	r3, r2
 c004da0:	d125      	bne.n	c004dee <UART_SetConfig+0x1c2>
 c004da2:	4b5b      	ldr	r3, [pc, #364]	; (c004f10 <UART_SetConfig+0x2e4>)
 c004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004da8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c004dac:	2b30      	cmp	r3, #48	; 0x30
 c004dae:	d016      	beq.n	c004dde <UART_SetConfig+0x1b2>
 c004db0:	2b30      	cmp	r3, #48	; 0x30
 c004db2:	d818      	bhi.n	c004de6 <UART_SetConfig+0x1ba>
 c004db4:	2b20      	cmp	r3, #32
 c004db6:	d00a      	beq.n	c004dce <UART_SetConfig+0x1a2>
 c004db8:	2b20      	cmp	r3, #32
 c004dba:	d814      	bhi.n	c004de6 <UART_SetConfig+0x1ba>
 c004dbc:	2b00      	cmp	r3, #0
 c004dbe:	d002      	beq.n	c004dc6 <UART_SetConfig+0x19a>
 c004dc0:	2b10      	cmp	r3, #16
 c004dc2:	d008      	beq.n	c004dd6 <UART_SetConfig+0x1aa>
 c004dc4:	e00f      	b.n	c004de6 <UART_SetConfig+0x1ba>
 c004dc6:	2300      	movs	r3, #0
 c004dc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004dcc:	e0ab      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004dce:	2302      	movs	r3, #2
 c004dd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004dd4:	e0a7      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004dd6:	2304      	movs	r3, #4
 c004dd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004ddc:	e0a3      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004dde:	2308      	movs	r3, #8
 c004de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004de4:	e09f      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004de6:	2310      	movs	r3, #16
 c004de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004dec:	e09b      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004dee:	697b      	ldr	r3, [r7, #20]
 c004df0:	681b      	ldr	r3, [r3, #0]
 c004df2:	4a4a      	ldr	r2, [pc, #296]	; (c004f1c <UART_SetConfig+0x2f0>)
 c004df4:	4293      	cmp	r3, r2
 c004df6:	d125      	bne.n	c004e44 <UART_SetConfig+0x218>
 c004df8:	4b45      	ldr	r3, [pc, #276]	; (c004f10 <UART_SetConfig+0x2e4>)
 c004dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004dfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 c004e02:	2bc0      	cmp	r3, #192	; 0xc0
 c004e04:	d016      	beq.n	c004e34 <UART_SetConfig+0x208>
 c004e06:	2bc0      	cmp	r3, #192	; 0xc0
 c004e08:	d818      	bhi.n	c004e3c <UART_SetConfig+0x210>
 c004e0a:	2b80      	cmp	r3, #128	; 0x80
 c004e0c:	d00a      	beq.n	c004e24 <UART_SetConfig+0x1f8>
 c004e0e:	2b80      	cmp	r3, #128	; 0x80
 c004e10:	d814      	bhi.n	c004e3c <UART_SetConfig+0x210>
 c004e12:	2b00      	cmp	r3, #0
 c004e14:	d002      	beq.n	c004e1c <UART_SetConfig+0x1f0>
 c004e16:	2b40      	cmp	r3, #64	; 0x40
 c004e18:	d008      	beq.n	c004e2c <UART_SetConfig+0x200>
 c004e1a:	e00f      	b.n	c004e3c <UART_SetConfig+0x210>
 c004e1c:	2300      	movs	r3, #0
 c004e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e22:	e080      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004e24:	2302      	movs	r3, #2
 c004e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e2a:	e07c      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004e2c:	2304      	movs	r3, #4
 c004e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e32:	e078      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004e34:	2308      	movs	r3, #8
 c004e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e3a:	e074      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004e3c:	2310      	movs	r3, #16
 c004e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e42:	e070      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004e44:	697b      	ldr	r3, [r7, #20]
 c004e46:	681b      	ldr	r3, [r3, #0]
 c004e48:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c004e4c:	d12a      	bne.n	c004ea4 <UART_SetConfig+0x278>
 c004e4e:	4b30      	ldr	r3, [pc, #192]	; (c004f10 <UART_SetConfig+0x2e4>)
 c004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c004e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c004e5c:	d01a      	beq.n	c004e94 <UART_SetConfig+0x268>
 c004e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c004e62:	d81b      	bhi.n	c004e9c <UART_SetConfig+0x270>
 c004e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c004e68:	d00c      	beq.n	c004e84 <UART_SetConfig+0x258>
 c004e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c004e6e:	d815      	bhi.n	c004e9c <UART_SetConfig+0x270>
 c004e70:	2b00      	cmp	r3, #0
 c004e72:	d003      	beq.n	c004e7c <UART_SetConfig+0x250>
 c004e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c004e78:	d008      	beq.n	c004e8c <UART_SetConfig+0x260>
 c004e7a:	e00f      	b.n	c004e9c <UART_SetConfig+0x270>
 c004e7c:	2300      	movs	r3, #0
 c004e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e82:	e050      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004e84:	2302      	movs	r3, #2
 c004e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e8a:	e04c      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004e8c:	2304      	movs	r3, #4
 c004e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e92:	e048      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004e94:	2308      	movs	r3, #8
 c004e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e9a:	e044      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004e9c:	2310      	movs	r3, #16
 c004e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004ea2:	e040      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004ea4:	697b      	ldr	r3, [r7, #20]
 c004ea6:	681b      	ldr	r3, [r3, #0]
 c004ea8:	4a17      	ldr	r2, [pc, #92]	; (c004f08 <UART_SetConfig+0x2dc>)
 c004eaa:	4293      	cmp	r3, r2
 c004eac:	d138      	bne.n	c004f20 <UART_SetConfig+0x2f4>
 c004eae:	4b18      	ldr	r3, [pc, #96]	; (c004f10 <UART_SetConfig+0x2e4>)
 c004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004eb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 c004eb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c004ebc:	d01a      	beq.n	c004ef4 <UART_SetConfig+0x2c8>
 c004ebe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c004ec2:	d81b      	bhi.n	c004efc <UART_SetConfig+0x2d0>
 c004ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c004ec8:	d00c      	beq.n	c004ee4 <UART_SetConfig+0x2b8>
 c004eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c004ece:	d815      	bhi.n	c004efc <UART_SetConfig+0x2d0>
 c004ed0:	2b00      	cmp	r3, #0
 c004ed2:	d003      	beq.n	c004edc <UART_SetConfig+0x2b0>
 c004ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004ed8:	d008      	beq.n	c004eec <UART_SetConfig+0x2c0>
 c004eda:	e00f      	b.n	c004efc <UART_SetConfig+0x2d0>
 c004edc:	2300      	movs	r3, #0
 c004ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004ee2:	e020      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004ee4:	2302      	movs	r3, #2
 c004ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004eea:	e01c      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004eec:	2304      	movs	r3, #4
 c004eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004ef2:	e018      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004ef4:	2308      	movs	r3, #8
 c004ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004efa:	e014      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004efc:	2310      	movs	r3, #16
 c004efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004f02:	e010      	b.n	c004f26 <UART_SetConfig+0x2fa>
 c004f04:	cfff69f3 	.word	0xcfff69f3
 c004f08:	50008000 	.word	0x50008000
 c004f0c:	50013800 	.word	0x50013800
 c004f10:	50021000 	.word	0x50021000
 c004f14:	50004400 	.word	0x50004400
 c004f18:	50004800 	.word	0x50004800
 c004f1c:	50004c00 	.word	0x50004c00
 c004f20:	2310      	movs	r3, #16
 c004f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c004f26:	697b      	ldr	r3, [r7, #20]
 c004f28:	681b      	ldr	r3, [r3, #0]
 c004f2a:	4ab0      	ldr	r2, [pc, #704]	; (c0051ec <UART_SetConfig+0x5c0>)
 c004f2c:	4293      	cmp	r3, r2
 c004f2e:	f040 809b 	bne.w	c005068 <UART_SetConfig+0x43c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 c004f32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c004f36:	2b08      	cmp	r3, #8
 c004f38:	d827      	bhi.n	c004f8a <UART_SetConfig+0x35e>
 c004f3a:	a201      	add	r2, pc, #4	; (adr r2, c004f40 <UART_SetConfig+0x314>)
 c004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004f40:	0c004f65 	.word	0x0c004f65
 c004f44:	0c004f6d 	.word	0x0c004f6d
 c004f48:	0c004f75 	.word	0x0c004f75
 c004f4c:	0c004f8b 	.word	0x0c004f8b
 c004f50:	0c004f7b 	.word	0x0c004f7b
 c004f54:	0c004f8b 	.word	0x0c004f8b
 c004f58:	0c004f8b 	.word	0x0c004f8b
 c004f5c:	0c004f8b 	.word	0x0c004f8b
 c004f60:	0c004f83 	.word	0x0c004f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c004f64:	f7fe fe8e 	bl	c003c84 <HAL_RCC_GetPCLK1Freq>
 c004f68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c004f6a:	e014      	b.n	c004f96 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c004f6c:	f7fe fe9e 	bl	c003cac <HAL_RCC_GetPCLK2Freq>
 c004f70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c004f72:	e010      	b.n	c004f96 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c004f74:	4b9e      	ldr	r3, [pc, #632]	; (c0051f0 <UART_SetConfig+0x5c4>)
 c004f76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c004f78:	e00d      	b.n	c004f96 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c004f7a:	f7fe fdd3 	bl	c003b24 <HAL_RCC_GetSysClockFreq>
 c004f7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c004f80:	e009      	b.n	c004f96 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c004f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c004f86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c004f88:	e005      	b.n	c004f96 <UART_SetConfig+0x36a>
      default:
        pclk = 0U;
 c004f8a:	2300      	movs	r3, #0
 c004f8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c004f8e:	2301      	movs	r3, #1
 c004f90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c004f94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 c004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004f98:	2b00      	cmp	r3, #0
 c004f9a:	f000 8130 	beq.w	c0051fe <UART_SetConfig+0x5d2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c004f9e:	697b      	ldr	r3, [r7, #20]
 c004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004fa2:	4a94      	ldr	r2, [pc, #592]	; (c0051f4 <UART_SetConfig+0x5c8>)
 c004fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c004fa8:	461a      	mov	r2, r3
 c004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004fac:	fbb3 f3f2 	udiv	r3, r3, r2
 c004fb0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c004fb2:	697b      	ldr	r3, [r7, #20]
 c004fb4:	685a      	ldr	r2, [r3, #4]
 c004fb6:	4613      	mov	r3, r2
 c004fb8:	005b      	lsls	r3, r3, #1
 c004fba:	4413      	add	r3, r2
 c004fbc:	69ba      	ldr	r2, [r7, #24]
 c004fbe:	429a      	cmp	r2, r3
 c004fc0:	d305      	bcc.n	c004fce <UART_SetConfig+0x3a2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c004fc2:	697b      	ldr	r3, [r7, #20]
 c004fc4:	685b      	ldr	r3, [r3, #4]
 c004fc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c004fc8:	69ba      	ldr	r2, [r7, #24]
 c004fca:	429a      	cmp	r2, r3
 c004fcc:	d903      	bls.n	c004fd6 <UART_SetConfig+0x3aa>
      {
        ret = HAL_ERROR;
 c004fce:	2301      	movs	r3, #1
 c004fd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c004fd4:	e113      	b.n	c0051fe <UART_SetConfig+0x5d2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004fd8:	2200      	movs	r2, #0
 c004fda:	60bb      	str	r3, [r7, #8]
 c004fdc:	60fa      	str	r2, [r7, #12]
 c004fde:	697b      	ldr	r3, [r7, #20]
 c004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004fe2:	4a84      	ldr	r2, [pc, #528]	; (c0051f4 <UART_SetConfig+0x5c8>)
 c004fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c004fe8:	b29b      	uxth	r3, r3
 c004fea:	2200      	movs	r2, #0
 c004fec:	603b      	str	r3, [r7, #0]
 c004fee:	607a      	str	r2, [r7, #4]
 c004ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 c004ff4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 c004ff8:	f7fb fecc 	bl	c000d94 <__aeabi_uldivmod>
 c004ffc:	4602      	mov	r2, r0
 c004ffe:	460b      	mov	r3, r1
 c005000:	4610      	mov	r0, r2
 c005002:	4619      	mov	r1, r3
 c005004:	f04f 0200 	mov.w	r2, #0
 c005008:	f04f 0300 	mov.w	r3, #0
 c00500c:	020b      	lsls	r3, r1, #8
 c00500e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c005012:	0202      	lsls	r2, r0, #8
 c005014:	6979      	ldr	r1, [r7, #20]
 c005016:	6849      	ldr	r1, [r1, #4]
 c005018:	0849      	lsrs	r1, r1, #1
 c00501a:	2000      	movs	r0, #0
 c00501c:	460c      	mov	r4, r1
 c00501e:	4605      	mov	r5, r0
 c005020:	eb12 0804 	adds.w	r8, r2, r4
 c005024:	eb43 0905 	adc.w	r9, r3, r5
 c005028:	697b      	ldr	r3, [r7, #20]
 c00502a:	685b      	ldr	r3, [r3, #4]
 c00502c:	2200      	movs	r2, #0
 c00502e:	469a      	mov	sl, r3
 c005030:	4693      	mov	fp, r2
 c005032:	4652      	mov	r2, sl
 c005034:	465b      	mov	r3, fp
 c005036:	4640      	mov	r0, r8
 c005038:	4649      	mov	r1, r9
 c00503a:	f7fb feab 	bl	c000d94 <__aeabi_uldivmod>
 c00503e:	4602      	mov	r2, r0
 c005040:	460b      	mov	r3, r1
 c005042:	4613      	mov	r3, r2
 c005044:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c005046:	6a3b      	ldr	r3, [r7, #32]
 c005048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c00504c:	d308      	bcc.n	c005060 <UART_SetConfig+0x434>
 c00504e:	6a3b      	ldr	r3, [r7, #32]
 c005050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c005054:	d204      	bcs.n	c005060 <UART_SetConfig+0x434>
        {
          huart->Instance->BRR = usartdiv;
 c005056:	697b      	ldr	r3, [r7, #20]
 c005058:	681b      	ldr	r3, [r3, #0]
 c00505a:	6a3a      	ldr	r2, [r7, #32]
 c00505c:	60da      	str	r2, [r3, #12]
 c00505e:	e0ce      	b.n	c0051fe <UART_SetConfig+0x5d2>
        }
        else
        {
          ret = HAL_ERROR;
 c005060:	2301      	movs	r3, #1
 c005062:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c005066:	e0ca      	b.n	c0051fe <UART_SetConfig+0x5d2>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c005068:	697b      	ldr	r3, [r7, #20]
 c00506a:	69db      	ldr	r3, [r3, #28]
 c00506c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c005070:	d167      	bne.n	c005142 <UART_SetConfig+0x516>
  {
    switch (clocksource)
 c005072:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c005076:	2b08      	cmp	r3, #8
 c005078:	d827      	bhi.n	c0050ca <UART_SetConfig+0x49e>
 c00507a:	a201      	add	r2, pc, #4	; (adr r2, c005080 <UART_SetConfig+0x454>)
 c00507c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005080:	0c0050a5 	.word	0x0c0050a5
 c005084:	0c0050ad 	.word	0x0c0050ad
 c005088:	0c0050b5 	.word	0x0c0050b5
 c00508c:	0c0050cb 	.word	0x0c0050cb
 c005090:	0c0050bb 	.word	0x0c0050bb
 c005094:	0c0050cb 	.word	0x0c0050cb
 c005098:	0c0050cb 	.word	0x0c0050cb
 c00509c:	0c0050cb 	.word	0x0c0050cb
 c0050a0:	0c0050c3 	.word	0x0c0050c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c0050a4:	f7fe fdee 	bl	c003c84 <HAL_RCC_GetPCLK1Freq>
 c0050a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0050aa:	e014      	b.n	c0050d6 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c0050ac:	f7fe fdfe 	bl	c003cac <HAL_RCC_GetPCLK2Freq>
 c0050b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0050b2:	e010      	b.n	c0050d6 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c0050b4:	4b4e      	ldr	r3, [pc, #312]	; (c0051f0 <UART_SetConfig+0x5c4>)
 c0050b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0050b8:	e00d      	b.n	c0050d6 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c0050ba:	f7fe fd33 	bl	c003b24 <HAL_RCC_GetSysClockFreq>
 c0050be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0050c0:	e009      	b.n	c0050d6 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c0050c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0050c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0050c8:	e005      	b.n	c0050d6 <UART_SetConfig+0x4aa>
      default:
        pclk = 0U;
 c0050ca:	2300      	movs	r3, #0
 c0050cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c0050ce:	2301      	movs	r3, #1
 c0050d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c0050d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c0050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0050d8:	2b00      	cmp	r3, #0
 c0050da:	f000 8090 	beq.w	c0051fe <UART_SetConfig+0x5d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0050de:	697b      	ldr	r3, [r7, #20]
 c0050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0050e2:	4a44      	ldr	r2, [pc, #272]	; (c0051f4 <UART_SetConfig+0x5c8>)
 c0050e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c0050e8:	461a      	mov	r2, r3
 c0050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0050ec:	fbb3 f3f2 	udiv	r3, r3, r2
 c0050f0:	005a      	lsls	r2, r3, #1
 c0050f2:	697b      	ldr	r3, [r7, #20]
 c0050f4:	685b      	ldr	r3, [r3, #4]
 c0050f6:	085b      	lsrs	r3, r3, #1
 c0050f8:	441a      	add	r2, r3
 c0050fa:	697b      	ldr	r3, [r7, #20]
 c0050fc:	685b      	ldr	r3, [r3, #4]
 c0050fe:	fbb2 f3f3 	udiv	r3, r2, r3
 c005102:	b29b      	uxth	r3, r3
 c005104:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c005106:	6a3b      	ldr	r3, [r7, #32]
 c005108:	2b0f      	cmp	r3, #15
 c00510a:	d916      	bls.n	c00513a <UART_SetConfig+0x50e>
 c00510c:	6a3b      	ldr	r3, [r7, #32]
 c00510e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c005112:	d212      	bcs.n	c00513a <UART_SetConfig+0x50e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c005114:	6a3b      	ldr	r3, [r7, #32]
 c005116:	b29b      	uxth	r3, r3
 c005118:	f023 030f 	bic.w	r3, r3, #15
 c00511c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c00511e:	6a3b      	ldr	r3, [r7, #32]
 c005120:	085b      	lsrs	r3, r3, #1
 c005122:	b29b      	uxth	r3, r3
 c005124:	f003 0307 	and.w	r3, r3, #7
 c005128:	b29a      	uxth	r2, r3
 c00512a:	8bfb      	ldrh	r3, [r7, #30]
 c00512c:	4313      	orrs	r3, r2
 c00512e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 c005130:	697b      	ldr	r3, [r7, #20]
 c005132:	681b      	ldr	r3, [r3, #0]
 c005134:	8bfa      	ldrh	r2, [r7, #30]
 c005136:	60da      	str	r2, [r3, #12]
 c005138:	e061      	b.n	c0051fe <UART_SetConfig+0x5d2>
      }
      else
      {
        ret = HAL_ERROR;
 c00513a:	2301      	movs	r3, #1
 c00513c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c005140:	e05d      	b.n	c0051fe <UART_SetConfig+0x5d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 c005142:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c005146:	2b08      	cmp	r3, #8
 c005148:	d827      	bhi.n	c00519a <UART_SetConfig+0x56e>
 c00514a:	a201      	add	r2, pc, #4	; (adr r2, c005150 <UART_SetConfig+0x524>)
 c00514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005150:	0c005175 	.word	0x0c005175
 c005154:	0c00517d 	.word	0x0c00517d
 c005158:	0c005185 	.word	0x0c005185
 c00515c:	0c00519b 	.word	0x0c00519b
 c005160:	0c00518b 	.word	0x0c00518b
 c005164:	0c00519b 	.word	0x0c00519b
 c005168:	0c00519b 	.word	0x0c00519b
 c00516c:	0c00519b 	.word	0x0c00519b
 c005170:	0c005193 	.word	0x0c005193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c005174:	f7fe fd86 	bl	c003c84 <HAL_RCC_GetPCLK1Freq>
 c005178:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c00517a:	e014      	b.n	c0051a6 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c00517c:	f7fe fd96 	bl	c003cac <HAL_RCC_GetPCLK2Freq>
 c005180:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005182:	e010      	b.n	c0051a6 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c005184:	4b1a      	ldr	r3, [pc, #104]	; (c0051f0 <UART_SetConfig+0x5c4>)
 c005186:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c005188:	e00d      	b.n	c0051a6 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c00518a:	f7fe fccb 	bl	c003b24 <HAL_RCC_GetSysClockFreq>
 c00518e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005190:	e009      	b.n	c0051a6 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c005192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c005196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c005198:	e005      	b.n	c0051a6 <UART_SetConfig+0x57a>
      default:
        pclk = 0U;
 c00519a:	2300      	movs	r3, #0
 c00519c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c00519e:	2301      	movs	r3, #1
 c0051a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c0051a4:	bf00      	nop
    }

    if (pclk != 0U)
 c0051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0051a8:	2b00      	cmp	r3, #0
 c0051aa:	d028      	beq.n	c0051fe <UART_SetConfig+0x5d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0051ac:	697b      	ldr	r3, [r7, #20]
 c0051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0051b0:	4a10      	ldr	r2, [pc, #64]	; (c0051f4 <UART_SetConfig+0x5c8>)
 c0051b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c0051b6:	461a      	mov	r2, r3
 c0051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0051ba:	fbb3 f2f2 	udiv	r2, r3, r2
 c0051be:	697b      	ldr	r3, [r7, #20]
 c0051c0:	685b      	ldr	r3, [r3, #4]
 c0051c2:	085b      	lsrs	r3, r3, #1
 c0051c4:	441a      	add	r2, r3
 c0051c6:	697b      	ldr	r3, [r7, #20]
 c0051c8:	685b      	ldr	r3, [r3, #4]
 c0051ca:	fbb2 f3f3 	udiv	r3, r2, r3
 c0051ce:	b29b      	uxth	r3, r3
 c0051d0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c0051d2:	6a3b      	ldr	r3, [r7, #32]
 c0051d4:	2b0f      	cmp	r3, #15
 c0051d6:	d90f      	bls.n	c0051f8 <UART_SetConfig+0x5cc>
 c0051d8:	6a3b      	ldr	r3, [r7, #32]
 c0051da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c0051de:	d20b      	bcs.n	c0051f8 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = usartdiv;
 c0051e0:	697b      	ldr	r3, [r7, #20]
 c0051e2:	681b      	ldr	r3, [r3, #0]
 c0051e4:	6a3a      	ldr	r2, [r7, #32]
 c0051e6:	60da      	str	r2, [r3, #12]
 c0051e8:	e009      	b.n	c0051fe <UART_SetConfig+0x5d2>
 c0051ea:	bf00      	nop
 c0051ec:	50008000 	.word	0x50008000
 c0051f0:	00f42400 	.word	0x00f42400
 c0051f4:	0c00af4c 	.word	0x0c00af4c
      }
      else
      {
        ret = HAL_ERROR;
 c0051f8:	2301      	movs	r3, #1
 c0051fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c0051fe:	697b      	ldr	r3, [r7, #20]
 c005200:	2201      	movs	r2, #1
 c005202:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 c005206:	697b      	ldr	r3, [r7, #20]
 c005208:	2201      	movs	r2, #1
 c00520a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c00520e:	697b      	ldr	r3, [r7, #20]
 c005210:	2200      	movs	r2, #0
 c005212:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 c005214:	697b      	ldr	r3, [r7, #20]
 c005216:	2200      	movs	r2, #0
 c005218:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 c00521a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 c00521e:	4618      	mov	r0, r3
 c005220:	3730      	adds	r7, #48	; 0x30
 c005222:	46bd      	mov	sp, r7
 c005224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c005228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c005228:	b480      	push	{r7}
 c00522a:	b083      	sub	sp, #12
 c00522c:	af00      	add	r7, sp, #0
 c00522e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c005230:	687b      	ldr	r3, [r7, #4]
 c005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005234:	f003 0301 	and.w	r3, r3, #1
 c005238:	2b00      	cmp	r3, #0
 c00523a:	d00a      	beq.n	c005252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c00523c:	687b      	ldr	r3, [r7, #4]
 c00523e:	681b      	ldr	r3, [r3, #0]
 c005240:	685b      	ldr	r3, [r3, #4]
 c005242:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 c005246:	687b      	ldr	r3, [r7, #4]
 c005248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c00524a:	687b      	ldr	r3, [r7, #4]
 c00524c:	681b      	ldr	r3, [r3, #0]
 c00524e:	430a      	orrs	r2, r1
 c005250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c005252:	687b      	ldr	r3, [r7, #4]
 c005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005256:	f003 0302 	and.w	r3, r3, #2
 c00525a:	2b00      	cmp	r3, #0
 c00525c:	d00a      	beq.n	c005274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c00525e:	687b      	ldr	r3, [r7, #4]
 c005260:	681b      	ldr	r3, [r3, #0]
 c005262:	685b      	ldr	r3, [r3, #4]
 c005264:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 c005268:	687b      	ldr	r3, [r7, #4]
 c00526a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c00526c:	687b      	ldr	r3, [r7, #4]
 c00526e:	681b      	ldr	r3, [r3, #0]
 c005270:	430a      	orrs	r2, r1
 c005272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c005274:	687b      	ldr	r3, [r7, #4]
 c005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005278:	f003 0304 	and.w	r3, r3, #4
 c00527c:	2b00      	cmp	r3, #0
 c00527e:	d00a      	beq.n	c005296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c005280:	687b      	ldr	r3, [r7, #4]
 c005282:	681b      	ldr	r3, [r3, #0]
 c005284:	685b      	ldr	r3, [r3, #4]
 c005286:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 c00528a:	687b      	ldr	r3, [r7, #4]
 c00528c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c00528e:	687b      	ldr	r3, [r7, #4]
 c005290:	681b      	ldr	r3, [r3, #0]
 c005292:	430a      	orrs	r2, r1
 c005294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c005296:	687b      	ldr	r3, [r7, #4]
 c005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00529a:	f003 0308 	and.w	r3, r3, #8
 c00529e:	2b00      	cmp	r3, #0
 c0052a0:	d00a      	beq.n	c0052b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c0052a2:	687b      	ldr	r3, [r7, #4]
 c0052a4:	681b      	ldr	r3, [r3, #0]
 c0052a6:	685b      	ldr	r3, [r3, #4]
 c0052a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 c0052ac:	687b      	ldr	r3, [r7, #4]
 c0052ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 c0052b0:	687b      	ldr	r3, [r7, #4]
 c0052b2:	681b      	ldr	r3, [r3, #0]
 c0052b4:	430a      	orrs	r2, r1
 c0052b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c0052b8:	687b      	ldr	r3, [r7, #4]
 c0052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0052bc:	f003 0310 	and.w	r3, r3, #16
 c0052c0:	2b00      	cmp	r3, #0
 c0052c2:	d00a      	beq.n	c0052da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c0052c4:	687b      	ldr	r3, [r7, #4]
 c0052c6:	681b      	ldr	r3, [r3, #0]
 c0052c8:	689b      	ldr	r3, [r3, #8]
 c0052ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 c0052ce:	687b      	ldr	r3, [r7, #4]
 c0052d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 c0052d2:	687b      	ldr	r3, [r7, #4]
 c0052d4:	681b      	ldr	r3, [r3, #0]
 c0052d6:	430a      	orrs	r2, r1
 c0052d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c0052da:	687b      	ldr	r3, [r7, #4]
 c0052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0052de:	f003 0320 	and.w	r3, r3, #32
 c0052e2:	2b00      	cmp	r3, #0
 c0052e4:	d00a      	beq.n	c0052fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c0052e6:	687b      	ldr	r3, [r7, #4]
 c0052e8:	681b      	ldr	r3, [r3, #0]
 c0052ea:	689b      	ldr	r3, [r3, #8]
 c0052ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 c0052f0:	687b      	ldr	r3, [r7, #4]
 c0052f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 c0052f4:	687b      	ldr	r3, [r7, #4]
 c0052f6:	681b      	ldr	r3, [r3, #0]
 c0052f8:	430a      	orrs	r2, r1
 c0052fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c0052fc:	687b      	ldr	r3, [r7, #4]
 c0052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c005304:	2b00      	cmp	r3, #0
 c005306:	d01a      	beq.n	c00533e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c005308:	687b      	ldr	r3, [r7, #4]
 c00530a:	681b      	ldr	r3, [r3, #0]
 c00530c:	685b      	ldr	r3, [r3, #4]
 c00530e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 c005312:	687b      	ldr	r3, [r7, #4]
 c005314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c005316:	687b      	ldr	r3, [r7, #4]
 c005318:	681b      	ldr	r3, [r3, #0]
 c00531a:	430a      	orrs	r2, r1
 c00531c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c00531e:	687b      	ldr	r3, [r7, #4]
 c005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c005322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c005326:	d10a      	bne.n	c00533e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c005328:	687b      	ldr	r3, [r7, #4]
 c00532a:	681b      	ldr	r3, [r3, #0]
 c00532c:	685b      	ldr	r3, [r3, #4]
 c00532e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 c005332:	687b      	ldr	r3, [r7, #4]
 c005334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c005336:	687b      	ldr	r3, [r7, #4]
 c005338:	681b      	ldr	r3, [r3, #0]
 c00533a:	430a      	orrs	r2, r1
 c00533c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c00533e:	687b      	ldr	r3, [r7, #4]
 c005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c005346:	2b00      	cmp	r3, #0
 c005348:	d00a      	beq.n	c005360 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c00534a:	687b      	ldr	r3, [r7, #4]
 c00534c:	681b      	ldr	r3, [r3, #0]
 c00534e:	685b      	ldr	r3, [r3, #4]
 c005350:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 c005354:	687b      	ldr	r3, [r7, #4]
 c005356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c005358:	687b      	ldr	r3, [r7, #4]
 c00535a:	681b      	ldr	r3, [r3, #0]
 c00535c:	430a      	orrs	r2, r1
 c00535e:	605a      	str	r2, [r3, #4]
  }
}
 c005360:	bf00      	nop
 c005362:	370c      	adds	r7, #12
 c005364:	46bd      	mov	sp, r7
 c005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00536a:	4770      	bx	lr

0c00536c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c00536c:	b580      	push	{r7, lr}
 c00536e:	b086      	sub	sp, #24
 c005370:	af02      	add	r7, sp, #8
 c005372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c005374:	687b      	ldr	r3, [r7, #4]
 c005376:	2200      	movs	r2, #0
 c005378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c00537c:	f7fc ff8a 	bl	c002294 <HAL_GetTick>
 c005380:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c005382:	687b      	ldr	r3, [r7, #4]
 c005384:	681b      	ldr	r3, [r3, #0]
 c005386:	681b      	ldr	r3, [r3, #0]
 c005388:	f003 0308 	and.w	r3, r3, #8
 c00538c:	2b08      	cmp	r3, #8
 c00538e:	d10e      	bne.n	c0053ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c005390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c005394:	9300      	str	r3, [sp, #0]
 c005396:	68fb      	ldr	r3, [r7, #12]
 c005398:	2200      	movs	r2, #0
 c00539a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 c00539e:	6878      	ldr	r0, [r7, #4]
 c0053a0:	f000 f82f 	bl	c005402 <UART_WaitOnFlagUntilTimeout>
 c0053a4:	4603      	mov	r3, r0
 c0053a6:	2b00      	cmp	r3, #0
 c0053a8:	d001      	beq.n	c0053ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c0053aa:	2303      	movs	r3, #3
 c0053ac:	e025      	b.n	c0053fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c0053ae:	687b      	ldr	r3, [r7, #4]
 c0053b0:	681b      	ldr	r3, [r3, #0]
 c0053b2:	681b      	ldr	r3, [r3, #0]
 c0053b4:	f003 0304 	and.w	r3, r3, #4
 c0053b8:	2b04      	cmp	r3, #4
 c0053ba:	d10e      	bne.n	c0053da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c0053bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c0053c0:	9300      	str	r3, [sp, #0]
 c0053c2:	68fb      	ldr	r3, [r7, #12]
 c0053c4:	2200      	movs	r2, #0
 c0053c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 c0053ca:	6878      	ldr	r0, [r7, #4]
 c0053cc:	f000 f819 	bl	c005402 <UART_WaitOnFlagUntilTimeout>
 c0053d0:	4603      	mov	r3, r0
 c0053d2:	2b00      	cmp	r3, #0
 c0053d4:	d001      	beq.n	c0053da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c0053d6:	2303      	movs	r3, #3
 c0053d8:	e00f      	b.n	c0053fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c0053da:	687b      	ldr	r3, [r7, #4]
 c0053dc:	2220      	movs	r2, #32
 c0053de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 c0053e2:	687b      	ldr	r3, [r7, #4]
 c0053e4:	2220      	movs	r2, #32
 c0053e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c0053ea:	687b      	ldr	r3, [r7, #4]
 c0053ec:	2200      	movs	r2, #0
 c0053ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 c0053f0:	687b      	ldr	r3, [r7, #4]
 c0053f2:	2200      	movs	r2, #0
 c0053f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c0053f8:	2300      	movs	r3, #0
}
 c0053fa:	4618      	mov	r0, r3
 c0053fc:	3710      	adds	r7, #16
 c0053fe:	46bd      	mov	sp, r7
 c005400:	bd80      	pop	{r7, pc}

0c005402 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c005402:	b580      	push	{r7, lr}
 c005404:	b084      	sub	sp, #16
 c005406:	af00      	add	r7, sp, #0
 c005408:	60f8      	str	r0, [r7, #12]
 c00540a:	60b9      	str	r1, [r7, #8]
 c00540c:	603b      	str	r3, [r7, #0]
 c00540e:	4613      	mov	r3, r2
 c005410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c005412:	e062      	b.n	c0054da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c005414:	69bb      	ldr	r3, [r7, #24]
 c005416:	f1b3 3fff 	cmp.w	r3, #4294967295
 c00541a:	d05e      	beq.n	c0054da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c00541c:	f7fc ff3a 	bl	c002294 <HAL_GetTick>
 c005420:	4602      	mov	r2, r0
 c005422:	683b      	ldr	r3, [r7, #0]
 c005424:	1ad3      	subs	r3, r2, r3
 c005426:	69ba      	ldr	r2, [r7, #24]
 c005428:	429a      	cmp	r2, r3
 c00542a:	d302      	bcc.n	c005432 <UART_WaitOnFlagUntilTimeout+0x30>
 c00542c:	69bb      	ldr	r3, [r7, #24]
 c00542e:	2b00      	cmp	r3, #0
 c005430:	d11d      	bne.n	c00546e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c005432:	68fb      	ldr	r3, [r7, #12]
 c005434:	681b      	ldr	r3, [r3, #0]
 c005436:	681a      	ldr	r2, [r3, #0]
 c005438:	68fb      	ldr	r3, [r7, #12]
 c00543a:	681b      	ldr	r3, [r3, #0]
 c00543c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c005440:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c005442:	68fb      	ldr	r3, [r7, #12]
 c005444:	681b      	ldr	r3, [r3, #0]
 c005446:	689a      	ldr	r2, [r3, #8]
 c005448:	68fb      	ldr	r3, [r7, #12]
 c00544a:	681b      	ldr	r3, [r3, #0]
 c00544c:	f022 0201 	bic.w	r2, r2, #1
 c005450:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 c005452:	68fb      	ldr	r3, [r7, #12]
 c005454:	2220      	movs	r2, #32
 c005456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 c00545a:	68fb      	ldr	r3, [r7, #12]
 c00545c:	2220      	movs	r2, #32
 c00545e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 c005462:	68fb      	ldr	r3, [r7, #12]
 c005464:	2200      	movs	r2, #0
 c005466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 c00546a:	2303      	movs	r3, #3
 c00546c:	e045      	b.n	c0054fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c00546e:	68fb      	ldr	r3, [r7, #12]
 c005470:	681b      	ldr	r3, [r3, #0]
 c005472:	681b      	ldr	r3, [r3, #0]
 c005474:	f003 0304 	and.w	r3, r3, #4
 c005478:	2b00      	cmp	r3, #0
 c00547a:	d02e      	beq.n	c0054da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c00547c:	68fb      	ldr	r3, [r7, #12]
 c00547e:	681b      	ldr	r3, [r3, #0]
 c005480:	69db      	ldr	r3, [r3, #28]
 c005482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c005486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c00548a:	d126      	bne.n	c0054da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c00548c:	68fb      	ldr	r3, [r7, #12]
 c00548e:	681b      	ldr	r3, [r3, #0]
 c005490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c005494:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c005496:	68fb      	ldr	r3, [r7, #12]
 c005498:	681b      	ldr	r3, [r3, #0]
 c00549a:	681a      	ldr	r2, [r3, #0]
 c00549c:	68fb      	ldr	r3, [r7, #12]
 c00549e:	681b      	ldr	r3, [r3, #0]
 c0054a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c0054a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c0054a6:	68fb      	ldr	r3, [r7, #12]
 c0054a8:	681b      	ldr	r3, [r3, #0]
 c0054aa:	689a      	ldr	r2, [r3, #8]
 c0054ac:	68fb      	ldr	r3, [r7, #12]
 c0054ae:	681b      	ldr	r3, [r3, #0]
 c0054b0:	f022 0201 	bic.w	r2, r2, #1
 c0054b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 c0054b6:	68fb      	ldr	r3, [r7, #12]
 c0054b8:	2220      	movs	r2, #32
 c0054ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 c0054be:	68fb      	ldr	r3, [r7, #12]
 c0054c0:	2220      	movs	r2, #32
 c0054c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c0054c6:	68fb      	ldr	r3, [r7, #12]
 c0054c8:	2220      	movs	r2, #32
 c0054ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c0054ce:	68fb      	ldr	r3, [r7, #12]
 c0054d0:	2200      	movs	r2, #0
 c0054d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 c0054d6:	2303      	movs	r3, #3
 c0054d8:	e00f      	b.n	c0054fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c0054da:	68fb      	ldr	r3, [r7, #12]
 c0054dc:	681b      	ldr	r3, [r3, #0]
 c0054de:	69da      	ldr	r2, [r3, #28]
 c0054e0:	68bb      	ldr	r3, [r7, #8]
 c0054e2:	4013      	ands	r3, r2
 c0054e4:	68ba      	ldr	r2, [r7, #8]
 c0054e6:	429a      	cmp	r2, r3
 c0054e8:	bf0c      	ite	eq
 c0054ea:	2301      	moveq	r3, #1
 c0054ec:	2300      	movne	r3, #0
 c0054ee:	b2db      	uxtb	r3, r3
 c0054f0:	461a      	mov	r2, r3
 c0054f2:	79fb      	ldrb	r3, [r7, #7]
 c0054f4:	429a      	cmp	r2, r3
 c0054f6:	d08d      	beq.n	c005414 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c0054f8:	2300      	movs	r3, #0
}
 c0054fa:	4618      	mov	r0, r3
 c0054fc:	3710      	adds	r7, #16
 c0054fe:	46bd      	mov	sp, r7
 c005500:	bd80      	pop	{r7, pc}

0c005502 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c005502:	b480      	push	{r7}
 c005504:	b085      	sub	sp, #20
 c005506:	af00      	add	r7, sp, #0
 c005508:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00550a:	687b      	ldr	r3, [r7, #4]
 c00550c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c005510:	2b01      	cmp	r3, #1
 c005512:	d101      	bne.n	c005518 <HAL_UARTEx_DisableFifoMode+0x16>
 c005514:	2302      	movs	r3, #2
 c005516:	e027      	b.n	c005568 <HAL_UARTEx_DisableFifoMode+0x66>
 c005518:	687b      	ldr	r3, [r7, #4]
 c00551a:	2201      	movs	r2, #1
 c00551c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c005520:	687b      	ldr	r3, [r7, #4]
 c005522:	2224      	movs	r2, #36	; 0x24
 c005524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c005528:	687b      	ldr	r3, [r7, #4]
 c00552a:	681b      	ldr	r3, [r3, #0]
 c00552c:	681b      	ldr	r3, [r3, #0]
 c00552e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c005530:	687b      	ldr	r3, [r7, #4]
 c005532:	681b      	ldr	r3, [r3, #0]
 c005534:	681a      	ldr	r2, [r3, #0]
 c005536:	687b      	ldr	r3, [r7, #4]
 c005538:	681b      	ldr	r3, [r3, #0]
 c00553a:	f022 0201 	bic.w	r2, r2, #1
 c00553e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c005540:	68fb      	ldr	r3, [r7, #12]
 c005542:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 c005546:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c005548:	687b      	ldr	r3, [r7, #4]
 c00554a:	2200      	movs	r2, #0
 c00554c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00554e:	687b      	ldr	r3, [r7, #4]
 c005550:	681b      	ldr	r3, [r3, #0]
 c005552:	68fa      	ldr	r2, [r7, #12]
 c005554:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c005556:	687b      	ldr	r3, [r7, #4]
 c005558:	2220      	movs	r2, #32
 c00555a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00555e:	687b      	ldr	r3, [r7, #4]
 c005560:	2200      	movs	r2, #0
 c005562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c005566:	2300      	movs	r3, #0
}
 c005568:	4618      	mov	r0, r3
 c00556a:	3714      	adds	r7, #20
 c00556c:	46bd      	mov	sp, r7
 c00556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005572:	4770      	bx	lr

0c005574 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c005574:	b580      	push	{r7, lr}
 c005576:	b084      	sub	sp, #16
 c005578:	af00      	add	r7, sp, #0
 c00557a:	6078      	str	r0, [r7, #4]
 c00557c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00557e:	687b      	ldr	r3, [r7, #4]
 c005580:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c005584:	2b01      	cmp	r3, #1
 c005586:	d101      	bne.n	c00558c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c005588:	2302      	movs	r3, #2
 c00558a:	e02d      	b.n	c0055e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c00558c:	687b      	ldr	r3, [r7, #4]
 c00558e:	2201      	movs	r2, #1
 c005590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c005594:	687b      	ldr	r3, [r7, #4]
 c005596:	2224      	movs	r2, #36	; 0x24
 c005598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c00559c:	687b      	ldr	r3, [r7, #4]
 c00559e:	681b      	ldr	r3, [r3, #0]
 c0055a0:	681b      	ldr	r3, [r3, #0]
 c0055a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c0055a4:	687b      	ldr	r3, [r7, #4]
 c0055a6:	681b      	ldr	r3, [r3, #0]
 c0055a8:	681a      	ldr	r2, [r3, #0]
 c0055aa:	687b      	ldr	r3, [r7, #4]
 c0055ac:	681b      	ldr	r3, [r3, #0]
 c0055ae:	f022 0201 	bic.w	r2, r2, #1
 c0055b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c0055b4:	687b      	ldr	r3, [r7, #4]
 c0055b6:	681b      	ldr	r3, [r3, #0]
 c0055b8:	689b      	ldr	r3, [r3, #8]
 c0055ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 c0055be:	687b      	ldr	r3, [r7, #4]
 c0055c0:	681b      	ldr	r3, [r3, #0]
 c0055c2:	683a      	ldr	r2, [r7, #0]
 c0055c4:	430a      	orrs	r2, r1
 c0055c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c0055c8:	6878      	ldr	r0, [r7, #4]
 c0055ca:	f000 f84f 	bl	c00566c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0055ce:	687b      	ldr	r3, [r7, #4]
 c0055d0:	681b      	ldr	r3, [r3, #0]
 c0055d2:	68fa      	ldr	r2, [r7, #12]
 c0055d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c0055d6:	687b      	ldr	r3, [r7, #4]
 c0055d8:	2220      	movs	r2, #32
 c0055da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c0055de:	687b      	ldr	r3, [r7, #4]
 c0055e0:	2200      	movs	r2, #0
 c0055e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c0055e6:	2300      	movs	r3, #0
}
 c0055e8:	4618      	mov	r0, r3
 c0055ea:	3710      	adds	r7, #16
 c0055ec:	46bd      	mov	sp, r7
 c0055ee:	bd80      	pop	{r7, pc}

0c0055f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c0055f0:	b580      	push	{r7, lr}
 c0055f2:	b084      	sub	sp, #16
 c0055f4:	af00      	add	r7, sp, #0
 c0055f6:	6078      	str	r0, [r7, #4]
 c0055f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c0055fa:	687b      	ldr	r3, [r7, #4]
 c0055fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c005600:	2b01      	cmp	r3, #1
 c005602:	d101      	bne.n	c005608 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c005604:	2302      	movs	r3, #2
 c005606:	e02d      	b.n	c005664 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c005608:	687b      	ldr	r3, [r7, #4]
 c00560a:	2201      	movs	r2, #1
 c00560c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c005610:	687b      	ldr	r3, [r7, #4]
 c005612:	2224      	movs	r2, #36	; 0x24
 c005614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c005618:	687b      	ldr	r3, [r7, #4]
 c00561a:	681b      	ldr	r3, [r3, #0]
 c00561c:	681b      	ldr	r3, [r3, #0]
 c00561e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c005620:	687b      	ldr	r3, [r7, #4]
 c005622:	681b      	ldr	r3, [r3, #0]
 c005624:	681a      	ldr	r2, [r3, #0]
 c005626:	687b      	ldr	r3, [r7, #4]
 c005628:	681b      	ldr	r3, [r3, #0]
 c00562a:	f022 0201 	bic.w	r2, r2, #1
 c00562e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c005630:	687b      	ldr	r3, [r7, #4]
 c005632:	681b      	ldr	r3, [r3, #0]
 c005634:	689b      	ldr	r3, [r3, #8]
 c005636:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 c00563a:	687b      	ldr	r3, [r7, #4]
 c00563c:	681b      	ldr	r3, [r3, #0]
 c00563e:	683a      	ldr	r2, [r7, #0]
 c005640:	430a      	orrs	r2, r1
 c005642:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c005644:	6878      	ldr	r0, [r7, #4]
 c005646:	f000 f811 	bl	c00566c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00564a:	687b      	ldr	r3, [r7, #4]
 c00564c:	681b      	ldr	r3, [r3, #0]
 c00564e:	68fa      	ldr	r2, [r7, #12]
 c005650:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c005652:	687b      	ldr	r3, [r7, #4]
 c005654:	2220      	movs	r2, #32
 c005656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00565a:	687b      	ldr	r3, [r7, #4]
 c00565c:	2200      	movs	r2, #0
 c00565e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c005662:	2300      	movs	r3, #0
}
 c005664:	4618      	mov	r0, r3
 c005666:	3710      	adds	r7, #16
 c005668:	46bd      	mov	sp, r7
 c00566a:	bd80      	pop	{r7, pc}

0c00566c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c00566c:	b480      	push	{r7}
 c00566e:	b085      	sub	sp, #20
 c005670:	af00      	add	r7, sp, #0
 c005672:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c005674:	687b      	ldr	r3, [r7, #4]
 c005676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c005678:	2b00      	cmp	r3, #0
 c00567a:	d108      	bne.n	c00568e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 c00567c:	687b      	ldr	r3, [r7, #4]
 c00567e:	2201      	movs	r2, #1
 c005680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 c005684:	687b      	ldr	r3, [r7, #4]
 c005686:	2201      	movs	r2, #1
 c005688:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c00568c:	e031      	b.n	c0056f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c00568e:	2308      	movs	r3, #8
 c005690:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c005692:	2308      	movs	r3, #8
 c005694:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c005696:	687b      	ldr	r3, [r7, #4]
 c005698:	681b      	ldr	r3, [r3, #0]
 c00569a:	689b      	ldr	r3, [r3, #8]
 c00569c:	0e5b      	lsrs	r3, r3, #25
 c00569e:	b2db      	uxtb	r3, r3
 c0056a0:	f003 0307 	and.w	r3, r3, #7
 c0056a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c0056a6:	687b      	ldr	r3, [r7, #4]
 c0056a8:	681b      	ldr	r3, [r3, #0]
 c0056aa:	689b      	ldr	r3, [r3, #8]
 c0056ac:	0f5b      	lsrs	r3, r3, #29
 c0056ae:	b2db      	uxtb	r3, r3
 c0056b0:	f003 0307 	and.w	r3, r3, #7
 c0056b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c0056b6:	7bbb      	ldrb	r3, [r7, #14]
 c0056b8:	7b3a      	ldrb	r2, [r7, #12]
 c0056ba:	4911      	ldr	r1, [pc, #68]	; (c005700 <UARTEx_SetNbDataToProcess+0x94>)
 c0056bc:	5c8a      	ldrb	r2, [r1, r2]
 c0056be:	fb02 f303 	mul.w	r3, r2, r3
 c0056c2:	7b3a      	ldrb	r2, [r7, #12]
 c0056c4:	490f      	ldr	r1, [pc, #60]	; (c005704 <UARTEx_SetNbDataToProcess+0x98>)
 c0056c6:	5c8a      	ldrb	r2, [r1, r2]
 c0056c8:	fb93 f3f2 	sdiv	r3, r3, r2
 c0056cc:	b29a      	uxth	r2, r3
 c0056ce:	687b      	ldr	r3, [r7, #4]
 c0056d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c0056d4:	7bfb      	ldrb	r3, [r7, #15]
 c0056d6:	7b7a      	ldrb	r2, [r7, #13]
 c0056d8:	4909      	ldr	r1, [pc, #36]	; (c005700 <UARTEx_SetNbDataToProcess+0x94>)
 c0056da:	5c8a      	ldrb	r2, [r1, r2]
 c0056dc:	fb02 f303 	mul.w	r3, r2, r3
 c0056e0:	7b7a      	ldrb	r2, [r7, #13]
 c0056e2:	4908      	ldr	r1, [pc, #32]	; (c005704 <UARTEx_SetNbDataToProcess+0x98>)
 c0056e4:	5c8a      	ldrb	r2, [r1, r2]
 c0056e6:	fb93 f3f2 	sdiv	r3, r3, r2
 c0056ea:	b29a      	uxth	r2, r3
 c0056ec:	687b      	ldr	r3, [r7, #4]
 c0056ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 c0056f2:	bf00      	nop
 c0056f4:	3714      	adds	r7, #20
 c0056f6:	46bd      	mov	sp, r7
 c0056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0056fc:	4770      	bx	lr
 c0056fe:	bf00      	nop
 c005700:	0c00af64 	.word	0x0c00af64
 c005704:	0c00af6c 	.word	0x0c00af6c

0c005708 <abort>:
 c005708:	2006      	movs	r0, #6
 c00570a:	b508      	push	{r3, lr}
 c00570c:	f001 f84c 	bl	c0067a8 <raise>
 c005710:	2001      	movs	r0, #1
 c005712:	f7fc fa7f 	bl	c001c14 <_exit>
	...

0c005718 <__errno>:
 c005718:	4b01      	ldr	r3, [pc, #4]	; (c005720 <__errno+0x8>)
 c00571a:	6818      	ldr	r0, [r3, #0]
 c00571c:	4770      	bx	lr
 c00571e:	bf00      	nop
 c005720:	30000010 	.word	0x30000010

0c005724 <__libc_init_array>:
 c005724:	b570      	push	{r4, r5, r6, lr}
 c005726:	4d0d      	ldr	r5, [pc, #52]	; (c00575c <__libc_init_array+0x38>)
 c005728:	2600      	movs	r6, #0
 c00572a:	4c0d      	ldr	r4, [pc, #52]	; (c005760 <__libc_init_array+0x3c>)
 c00572c:	1b64      	subs	r4, r4, r5
 c00572e:	10a4      	asrs	r4, r4, #2
 c005730:	42a6      	cmp	r6, r4
 c005732:	d109      	bne.n	c005748 <__libc_init_array+0x24>
 c005734:	4d0b      	ldr	r5, [pc, #44]	; (c005764 <__libc_init_array+0x40>)
 c005736:	2600      	movs	r6, #0
 c005738:	4c0b      	ldr	r4, [pc, #44]	; (c005768 <__libc_init_array+0x44>)
 c00573a:	f005 fb65 	bl	c00ae08 <_init>
 c00573e:	1b64      	subs	r4, r4, r5
 c005740:	10a4      	asrs	r4, r4, #2
 c005742:	42a6      	cmp	r6, r4
 c005744:	d105      	bne.n	c005752 <__libc_init_array+0x2e>
 c005746:	bd70      	pop	{r4, r5, r6, pc}
 c005748:	f855 3b04 	ldr.w	r3, [r5], #4
 c00574c:	3601      	adds	r6, #1
 c00574e:	4798      	blx	r3
 c005750:	e7ee      	b.n	c005730 <__libc_init_array+0xc>
 c005752:	f855 3b04 	ldr.w	r3, [r5], #4
 c005756:	3601      	adds	r6, #1
 c005758:	4798      	blx	r3
 c00575a:	e7f2      	b.n	c005742 <__libc_init_array+0x1e>
 c00575c:	0c00b440 	.word	0x0c00b440
 c005760:	0c00b440 	.word	0x0c00b440
 c005764:	0c00b440 	.word	0x0c00b440
 c005768:	0c00b444 	.word	0x0c00b444

0c00576c <memset>:
 c00576c:	4402      	add	r2, r0
 c00576e:	4603      	mov	r3, r0
 c005770:	4293      	cmp	r3, r2
 c005772:	d100      	bne.n	c005776 <memset+0xa>
 c005774:	4770      	bx	lr
 c005776:	f803 1b01 	strb.w	r1, [r3], #1
 c00577a:	e7f9      	b.n	c005770 <memset+0x4>

0c00577c <__cvt>:
 c00577c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c005780:	ec55 4b10 	vmov	r4, r5, d0
 c005784:	2d00      	cmp	r5, #0
 c005786:	460e      	mov	r6, r1
 c005788:	4619      	mov	r1, r3
 c00578a:	462b      	mov	r3, r5
 c00578c:	bfb4      	ite	lt
 c00578e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 c005792:	2300      	movge	r3, #0
 c005794:	4691      	mov	r9, r2
 c005796:	bfbf      	itttt	lt
 c005798:	4622      	movlt	r2, r4
 c00579a:	461d      	movlt	r5, r3
 c00579c:	232d      	movlt	r3, #45	; 0x2d
 c00579e:	4614      	movlt	r4, r2
 c0057a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 c0057a4:	700b      	strb	r3, [r1, #0]
 c0057a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c0057a8:	f023 0820 	bic.w	r8, r3, #32
 c0057ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 c0057b0:	d005      	beq.n	c0057be <__cvt+0x42>
 c0057b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 c0057b6:	d100      	bne.n	c0057ba <__cvt+0x3e>
 c0057b8:	3601      	adds	r6, #1
 c0057ba:	2102      	movs	r1, #2
 c0057bc:	e000      	b.n	c0057c0 <__cvt+0x44>
 c0057be:	2103      	movs	r1, #3
 c0057c0:	ab03      	add	r3, sp, #12
 c0057c2:	4632      	mov	r2, r6
 c0057c4:	9301      	str	r3, [sp, #4]
 c0057c6:	ab02      	add	r3, sp, #8
 c0057c8:	ec45 4b10 	vmov	d0, r4, r5
 c0057cc:	9300      	str	r3, [sp, #0]
 c0057ce:	4653      	mov	r3, sl
 c0057d0:	f002 f822 	bl	c007818 <_dtoa_r>
 c0057d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 c0057d8:	4607      	mov	r7, r0
 c0057da:	d102      	bne.n	c0057e2 <__cvt+0x66>
 c0057dc:	f019 0f01 	tst.w	r9, #1
 c0057e0:	d022      	beq.n	c005828 <__cvt+0xac>
 c0057e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 c0057e6:	eb07 0906 	add.w	r9, r7, r6
 c0057ea:	d110      	bne.n	c00580e <__cvt+0x92>
 c0057ec:	783b      	ldrb	r3, [r7, #0]
 c0057ee:	2b30      	cmp	r3, #48	; 0x30
 c0057f0:	d10a      	bne.n	c005808 <__cvt+0x8c>
 c0057f2:	2200      	movs	r2, #0
 c0057f4:	2300      	movs	r3, #0
 c0057f6:	4620      	mov	r0, r4
 c0057f8:	4629      	mov	r1, r5
 c0057fa:	f7fb f9eb 	bl	c000bd4 <__aeabi_dcmpeq>
 c0057fe:	b918      	cbnz	r0, c005808 <__cvt+0x8c>
 c005800:	f1c6 0601 	rsb	r6, r6, #1
 c005804:	f8ca 6000 	str.w	r6, [sl]
 c005808:	f8da 3000 	ldr.w	r3, [sl]
 c00580c:	4499      	add	r9, r3
 c00580e:	2200      	movs	r2, #0
 c005810:	2300      	movs	r3, #0
 c005812:	4620      	mov	r0, r4
 c005814:	4629      	mov	r1, r5
 c005816:	f7fb f9dd 	bl	c000bd4 <__aeabi_dcmpeq>
 c00581a:	b108      	cbz	r0, c005820 <__cvt+0xa4>
 c00581c:	f8cd 900c 	str.w	r9, [sp, #12]
 c005820:	2230      	movs	r2, #48	; 0x30
 c005822:	9b03      	ldr	r3, [sp, #12]
 c005824:	454b      	cmp	r3, r9
 c005826:	d307      	bcc.n	c005838 <__cvt+0xbc>
 c005828:	9b03      	ldr	r3, [sp, #12]
 c00582a:	4638      	mov	r0, r7
 c00582c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 c00582e:	1bdb      	subs	r3, r3, r7
 c005830:	6013      	str	r3, [r2, #0]
 c005832:	b004      	add	sp, #16
 c005834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c005838:	1c59      	adds	r1, r3, #1
 c00583a:	9103      	str	r1, [sp, #12]
 c00583c:	701a      	strb	r2, [r3, #0]
 c00583e:	e7f0      	b.n	c005822 <__cvt+0xa6>

0c005840 <__exponent>:
 c005840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c005842:	2900      	cmp	r1, #0
 c005844:	4603      	mov	r3, r0
 c005846:	bfb8      	it	lt
 c005848:	4249      	neglt	r1, r1
 c00584a:	f803 2b02 	strb.w	r2, [r3], #2
 c00584e:	bfb4      	ite	lt
 c005850:	222d      	movlt	r2, #45	; 0x2d
 c005852:	222b      	movge	r2, #43	; 0x2b
 c005854:	2909      	cmp	r1, #9
 c005856:	7042      	strb	r2, [r0, #1]
 c005858:	dd2a      	ble.n	c0058b0 <__exponent+0x70>
 c00585a:	f10d 0407 	add.w	r4, sp, #7
 c00585e:	270a      	movs	r7, #10
 c005860:	46a4      	mov	ip, r4
 c005862:	460a      	mov	r2, r1
 c005864:	46a6      	mov	lr, r4
 c005866:	3c01      	subs	r4, #1
 c005868:	2a63      	cmp	r2, #99	; 0x63
 c00586a:	fb91 f6f7 	sdiv	r6, r1, r7
 c00586e:	fb07 1516 	mls	r5, r7, r6, r1
 c005872:	4631      	mov	r1, r6
 c005874:	f105 0530 	add.w	r5, r5, #48	; 0x30
 c005878:	f80e 5c01 	strb.w	r5, [lr, #-1]
 c00587c:	dcf1      	bgt.n	c005862 <__exponent+0x22>
 c00587e:	3130      	adds	r1, #48	; 0x30
 c005880:	f1ae 0502 	sub.w	r5, lr, #2
 c005884:	f804 1c01 	strb.w	r1, [r4, #-1]
 c005888:	1c44      	adds	r4, r0, #1
 c00588a:	4629      	mov	r1, r5
 c00588c:	4561      	cmp	r1, ip
 c00588e:	d30a      	bcc.n	c0058a6 <__exponent+0x66>
 c005890:	f10d 0209 	add.w	r2, sp, #9
 c005894:	eba2 020e 	sub.w	r2, r2, lr
 c005898:	4565      	cmp	r5, ip
 c00589a:	bf88      	it	hi
 c00589c:	2200      	movhi	r2, #0
 c00589e:	4413      	add	r3, r2
 c0058a0:	1a18      	subs	r0, r3, r0
 c0058a2:	b003      	add	sp, #12
 c0058a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c0058a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 c0058aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 c0058ae:	e7ed      	b.n	c00588c <__exponent+0x4c>
 c0058b0:	2330      	movs	r3, #48	; 0x30
 c0058b2:	3130      	adds	r1, #48	; 0x30
 c0058b4:	7083      	strb	r3, [r0, #2]
 c0058b6:	1d03      	adds	r3, r0, #4
 c0058b8:	70c1      	strb	r1, [r0, #3]
 c0058ba:	e7f1      	b.n	c0058a0 <__exponent+0x60>

0c0058bc <_printf_float>:
 c0058bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0058c0:	ed2d 8b02 	vpush	{d8}
 c0058c4:	b08d      	sub	sp, #52	; 0x34
 c0058c6:	460c      	mov	r4, r1
 c0058c8:	4616      	mov	r6, r2
 c0058ca:	461f      	mov	r7, r3
 c0058cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 c0058d0:	4605      	mov	r5, r0
 c0058d2:	f003 fadf 	bl	c008e94 <_localeconv_r>
 c0058d6:	f8d0 a000 	ldr.w	sl, [r0]
 c0058da:	4650      	mov	r0, sl
 c0058dc:	f7fa fcac 	bl	c000238 <strlen>
 c0058e0:	2300      	movs	r3, #0
 c0058e2:	f894 b018 	ldrb.w	fp, [r4, #24]
 c0058e6:	ee08 0a10 	vmov	s16, r0
 c0058ea:	930a      	str	r3, [sp, #40]	; 0x28
 c0058ec:	6823      	ldr	r3, [r4, #0]
 c0058ee:	9305      	str	r3, [sp, #20]
 c0058f0:	f8d8 3000 	ldr.w	r3, [r8]
 c0058f4:	3307      	adds	r3, #7
 c0058f6:	f023 0307 	bic.w	r3, r3, #7
 c0058fa:	f103 0208 	add.w	r2, r3, #8
 c0058fe:	f8c8 2000 	str.w	r2, [r8]
 c005902:	e9d3 2300 	ldrd	r2, r3, [r3]
 c005906:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 c00590a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 c00590e:	f04f 32ff 	mov.w	r2, #4294967295
 c005912:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 c005916:	f8cd 8018 	str.w	r8, [sp, #24]
 c00591a:	9307      	str	r3, [sp, #28]
 c00591c:	4b9e      	ldr	r3, [pc, #632]	; (c005b98 <_printf_float+0x2dc>)
 c00591e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 c005922:	f7fb f989 	bl	c000c38 <__aeabi_dcmpun>
 c005926:	bb88      	cbnz	r0, c00598c <_printf_float+0xd0>
 c005928:	f04f 32ff 	mov.w	r2, #4294967295
 c00592c:	4b9a      	ldr	r3, [pc, #616]	; (c005b98 <_printf_float+0x2dc>)
 c00592e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 c005932:	f7fb f963 	bl	c000bfc <__aeabi_dcmple>
 c005936:	bb48      	cbnz	r0, c00598c <_printf_float+0xd0>
 c005938:	2200      	movs	r2, #0
 c00593a:	2300      	movs	r3, #0
 c00593c:	4640      	mov	r0, r8
 c00593e:	4649      	mov	r1, r9
 c005940:	f7fb f952 	bl	c000be8 <__aeabi_dcmplt>
 c005944:	b110      	cbz	r0, c00594c <_printf_float+0x90>
 c005946:	232d      	movs	r3, #45	; 0x2d
 c005948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c00594c:	4b93      	ldr	r3, [pc, #588]	; (c005b9c <_printf_float+0x2e0>)
 c00594e:	4894      	ldr	r0, [pc, #592]	; (c005ba0 <_printf_float+0x2e4>)
 c005950:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 c005954:	bf94      	ite	ls
 c005956:	4698      	movls	r8, r3
 c005958:	4680      	movhi	r8, r0
 c00595a:	2303      	movs	r3, #3
 c00595c:	f04f 0900 	mov.w	r9, #0
 c005960:	6123      	str	r3, [r4, #16]
 c005962:	9b05      	ldr	r3, [sp, #20]
 c005964:	f023 0204 	bic.w	r2, r3, #4
 c005968:	6022      	str	r2, [r4, #0]
 c00596a:	4633      	mov	r3, r6
 c00596c:	aa0b      	add	r2, sp, #44	; 0x2c
 c00596e:	4621      	mov	r1, r4
 c005970:	4628      	mov	r0, r5
 c005972:	9700      	str	r7, [sp, #0]
 c005974:	f000 f9d8 	bl	c005d28 <_printf_common>
 c005978:	3001      	adds	r0, #1
 c00597a:	f040 8090 	bne.w	c005a9e <_printf_float+0x1e2>
 c00597e:	f04f 30ff 	mov.w	r0, #4294967295
 c005982:	b00d      	add	sp, #52	; 0x34
 c005984:	ecbd 8b02 	vpop	{d8}
 c005988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c00598c:	4642      	mov	r2, r8
 c00598e:	464b      	mov	r3, r9
 c005990:	4640      	mov	r0, r8
 c005992:	4649      	mov	r1, r9
 c005994:	f7fb f950 	bl	c000c38 <__aeabi_dcmpun>
 c005998:	b140      	cbz	r0, c0059ac <_printf_float+0xf0>
 c00599a:	464b      	mov	r3, r9
 c00599c:	4881      	ldr	r0, [pc, #516]	; (c005ba4 <_printf_float+0x2e8>)
 c00599e:	2b00      	cmp	r3, #0
 c0059a0:	bfbc      	itt	lt
 c0059a2:	232d      	movlt	r3, #45	; 0x2d
 c0059a4:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 c0059a8:	4b7f      	ldr	r3, [pc, #508]	; (c005ba8 <_printf_float+0x2ec>)
 c0059aa:	e7d1      	b.n	c005950 <_printf_float+0x94>
 c0059ac:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 c0059b0:	6863      	ldr	r3, [r4, #4]
 c0059b2:	9206      	str	r2, [sp, #24]
 c0059b4:	1c5a      	adds	r2, r3, #1
 c0059b6:	d13f      	bne.n	c005a38 <_printf_float+0x17c>
 c0059b8:	2306      	movs	r3, #6
 c0059ba:	6063      	str	r3, [r4, #4]
 c0059bc:	9b05      	ldr	r3, [sp, #20]
 c0059be:	4628      	mov	r0, r5
 c0059c0:	6861      	ldr	r1, [r4, #4]
 c0059c2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 c0059c6:	2300      	movs	r3, #0
 c0059c8:	9303      	str	r3, [sp, #12]
 c0059ca:	ab0a      	add	r3, sp, #40	; 0x28
 c0059cc:	6022      	str	r2, [r4, #0]
 c0059ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 c0059d2:	ab09      	add	r3, sp, #36	; 0x24
 c0059d4:	ec49 8b10 	vmov	d0, r8, r9
 c0059d8:	9300      	str	r3, [sp, #0]
 c0059da:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 c0059de:	f7ff fecd 	bl	c00577c <__cvt>
 c0059e2:	9b06      	ldr	r3, [sp, #24]
 c0059e4:	4680      	mov	r8, r0
 c0059e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 c0059e8:	2b47      	cmp	r3, #71	; 0x47
 c0059ea:	d108      	bne.n	c0059fe <_printf_float+0x142>
 c0059ec:	1cc8      	adds	r0, r1, #3
 c0059ee:	db02      	blt.n	c0059f6 <_printf_float+0x13a>
 c0059f0:	6863      	ldr	r3, [r4, #4]
 c0059f2:	4299      	cmp	r1, r3
 c0059f4:	dd41      	ble.n	c005a7a <_printf_float+0x1be>
 c0059f6:	f1ab 0b02 	sub.w	fp, fp, #2
 c0059fa:	fa5f fb8b 	uxtb.w	fp, fp
 c0059fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 c005a02:	d820      	bhi.n	c005a46 <_printf_float+0x18a>
 c005a04:	3901      	subs	r1, #1
 c005a06:	465a      	mov	r2, fp
 c005a08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 c005a0c:	9109      	str	r1, [sp, #36]	; 0x24
 c005a0e:	f7ff ff17 	bl	c005840 <__exponent>
 c005a12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c005a14:	4681      	mov	r9, r0
 c005a16:	1813      	adds	r3, r2, r0
 c005a18:	2a01      	cmp	r2, #1
 c005a1a:	6123      	str	r3, [r4, #16]
 c005a1c:	dc02      	bgt.n	c005a24 <_printf_float+0x168>
 c005a1e:	6822      	ldr	r2, [r4, #0]
 c005a20:	07d2      	lsls	r2, r2, #31
 c005a22:	d501      	bpl.n	c005a28 <_printf_float+0x16c>
 c005a24:	3301      	adds	r3, #1
 c005a26:	6123      	str	r3, [r4, #16]
 c005a28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 c005a2c:	2b00      	cmp	r3, #0
 c005a2e:	d09c      	beq.n	c00596a <_printf_float+0xae>
 c005a30:	232d      	movs	r3, #45	; 0x2d
 c005a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c005a36:	e798      	b.n	c00596a <_printf_float+0xae>
 c005a38:	9a06      	ldr	r2, [sp, #24]
 c005a3a:	2a47      	cmp	r2, #71	; 0x47
 c005a3c:	d1be      	bne.n	c0059bc <_printf_float+0x100>
 c005a3e:	2b00      	cmp	r3, #0
 c005a40:	d1bc      	bne.n	c0059bc <_printf_float+0x100>
 c005a42:	2301      	movs	r3, #1
 c005a44:	e7b9      	b.n	c0059ba <_printf_float+0xfe>
 c005a46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 c005a4a:	d118      	bne.n	c005a7e <_printf_float+0x1c2>
 c005a4c:	2900      	cmp	r1, #0
 c005a4e:	6863      	ldr	r3, [r4, #4]
 c005a50:	dd0b      	ble.n	c005a6a <_printf_float+0x1ae>
 c005a52:	6121      	str	r1, [r4, #16]
 c005a54:	b913      	cbnz	r3, c005a5c <_printf_float+0x1a0>
 c005a56:	6822      	ldr	r2, [r4, #0]
 c005a58:	07d0      	lsls	r0, r2, #31
 c005a5a:	d502      	bpl.n	c005a62 <_printf_float+0x1a6>
 c005a5c:	3301      	adds	r3, #1
 c005a5e:	440b      	add	r3, r1
 c005a60:	6123      	str	r3, [r4, #16]
 c005a62:	f04f 0900 	mov.w	r9, #0
 c005a66:	65a1      	str	r1, [r4, #88]	; 0x58
 c005a68:	e7de      	b.n	c005a28 <_printf_float+0x16c>
 c005a6a:	b913      	cbnz	r3, c005a72 <_printf_float+0x1b6>
 c005a6c:	6822      	ldr	r2, [r4, #0]
 c005a6e:	07d2      	lsls	r2, r2, #31
 c005a70:	d501      	bpl.n	c005a76 <_printf_float+0x1ba>
 c005a72:	3302      	adds	r3, #2
 c005a74:	e7f4      	b.n	c005a60 <_printf_float+0x1a4>
 c005a76:	2301      	movs	r3, #1
 c005a78:	e7f2      	b.n	c005a60 <_printf_float+0x1a4>
 c005a7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 c005a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c005a80:	4299      	cmp	r1, r3
 c005a82:	db05      	blt.n	c005a90 <_printf_float+0x1d4>
 c005a84:	6823      	ldr	r3, [r4, #0]
 c005a86:	6121      	str	r1, [r4, #16]
 c005a88:	07d8      	lsls	r0, r3, #31
 c005a8a:	d5ea      	bpl.n	c005a62 <_printf_float+0x1a6>
 c005a8c:	1c4b      	adds	r3, r1, #1
 c005a8e:	e7e7      	b.n	c005a60 <_printf_float+0x1a4>
 c005a90:	2900      	cmp	r1, #0
 c005a92:	bfd4      	ite	le
 c005a94:	f1c1 0202 	rsble	r2, r1, #2
 c005a98:	2201      	movgt	r2, #1
 c005a9a:	4413      	add	r3, r2
 c005a9c:	e7e0      	b.n	c005a60 <_printf_float+0x1a4>
 c005a9e:	6823      	ldr	r3, [r4, #0]
 c005aa0:	055a      	lsls	r2, r3, #21
 c005aa2:	d407      	bmi.n	c005ab4 <_printf_float+0x1f8>
 c005aa4:	6923      	ldr	r3, [r4, #16]
 c005aa6:	4642      	mov	r2, r8
 c005aa8:	4631      	mov	r1, r6
 c005aaa:	4628      	mov	r0, r5
 c005aac:	47b8      	blx	r7
 c005aae:	3001      	adds	r0, #1
 c005ab0:	d12c      	bne.n	c005b0c <_printf_float+0x250>
 c005ab2:	e764      	b.n	c00597e <_printf_float+0xc2>
 c005ab4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 c005ab8:	f240 80e0 	bls.w	c005c7c <_printf_float+0x3c0>
 c005abc:	2200      	movs	r2, #0
 c005abe:	2300      	movs	r3, #0
 c005ac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 c005ac4:	f7fb f886 	bl	c000bd4 <__aeabi_dcmpeq>
 c005ac8:	2800      	cmp	r0, #0
 c005aca:	d034      	beq.n	c005b36 <_printf_float+0x27a>
 c005acc:	2301      	movs	r3, #1
 c005ace:	4a37      	ldr	r2, [pc, #220]	; (c005bac <_printf_float+0x2f0>)
 c005ad0:	4631      	mov	r1, r6
 c005ad2:	4628      	mov	r0, r5
 c005ad4:	47b8      	blx	r7
 c005ad6:	3001      	adds	r0, #1
 c005ad8:	f43f af51 	beq.w	c00597e <_printf_float+0xc2>
 c005adc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 c005ae0:	429a      	cmp	r2, r3
 c005ae2:	db02      	blt.n	c005aea <_printf_float+0x22e>
 c005ae4:	6823      	ldr	r3, [r4, #0]
 c005ae6:	07d8      	lsls	r0, r3, #31
 c005ae8:	d510      	bpl.n	c005b0c <_printf_float+0x250>
 c005aea:	ee18 3a10 	vmov	r3, s16
 c005aee:	4652      	mov	r2, sl
 c005af0:	4631      	mov	r1, r6
 c005af2:	4628      	mov	r0, r5
 c005af4:	47b8      	blx	r7
 c005af6:	3001      	adds	r0, #1
 c005af8:	f43f af41 	beq.w	c00597e <_printf_float+0xc2>
 c005afc:	f04f 0800 	mov.w	r8, #0
 c005b00:	f104 091a 	add.w	r9, r4, #26
 c005b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c005b06:	3b01      	subs	r3, #1
 c005b08:	4543      	cmp	r3, r8
 c005b0a:	dc09      	bgt.n	c005b20 <_printf_float+0x264>
 c005b0c:	6823      	ldr	r3, [r4, #0]
 c005b0e:	079b      	lsls	r3, r3, #30
 c005b10:	f100 8105 	bmi.w	c005d1e <_printf_float+0x462>
 c005b14:	68e0      	ldr	r0, [r4, #12]
 c005b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c005b18:	4298      	cmp	r0, r3
 c005b1a:	bfb8      	it	lt
 c005b1c:	4618      	movlt	r0, r3
 c005b1e:	e730      	b.n	c005982 <_printf_float+0xc6>
 c005b20:	2301      	movs	r3, #1
 c005b22:	464a      	mov	r2, r9
 c005b24:	4631      	mov	r1, r6
 c005b26:	4628      	mov	r0, r5
 c005b28:	47b8      	blx	r7
 c005b2a:	3001      	adds	r0, #1
 c005b2c:	f43f af27 	beq.w	c00597e <_printf_float+0xc2>
 c005b30:	f108 0801 	add.w	r8, r8, #1
 c005b34:	e7e6      	b.n	c005b04 <_printf_float+0x248>
 c005b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c005b38:	2b00      	cmp	r3, #0
 c005b3a:	dc39      	bgt.n	c005bb0 <_printf_float+0x2f4>
 c005b3c:	2301      	movs	r3, #1
 c005b3e:	4a1b      	ldr	r2, [pc, #108]	; (c005bac <_printf_float+0x2f0>)
 c005b40:	4631      	mov	r1, r6
 c005b42:	4628      	mov	r0, r5
 c005b44:	47b8      	blx	r7
 c005b46:	3001      	adds	r0, #1
 c005b48:	f43f af19 	beq.w	c00597e <_printf_float+0xc2>
 c005b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 c005b50:	4313      	orrs	r3, r2
 c005b52:	d102      	bne.n	c005b5a <_printf_float+0x29e>
 c005b54:	6823      	ldr	r3, [r4, #0]
 c005b56:	07d9      	lsls	r1, r3, #31
 c005b58:	d5d8      	bpl.n	c005b0c <_printf_float+0x250>
 c005b5a:	ee18 3a10 	vmov	r3, s16
 c005b5e:	4652      	mov	r2, sl
 c005b60:	4631      	mov	r1, r6
 c005b62:	4628      	mov	r0, r5
 c005b64:	47b8      	blx	r7
 c005b66:	3001      	adds	r0, #1
 c005b68:	f43f af09 	beq.w	c00597e <_printf_float+0xc2>
 c005b6c:	f04f 0900 	mov.w	r9, #0
 c005b70:	f104 0a1a 	add.w	sl, r4, #26
 c005b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c005b76:	425b      	negs	r3, r3
 c005b78:	454b      	cmp	r3, r9
 c005b7a:	dc01      	bgt.n	c005b80 <_printf_float+0x2c4>
 c005b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c005b7e:	e792      	b.n	c005aa6 <_printf_float+0x1ea>
 c005b80:	2301      	movs	r3, #1
 c005b82:	4652      	mov	r2, sl
 c005b84:	4631      	mov	r1, r6
 c005b86:	4628      	mov	r0, r5
 c005b88:	47b8      	blx	r7
 c005b8a:	3001      	adds	r0, #1
 c005b8c:	f43f aef7 	beq.w	c00597e <_printf_float+0xc2>
 c005b90:	f109 0901 	add.w	r9, r9, #1
 c005b94:	e7ee      	b.n	c005b74 <_printf_float+0x2b8>
 c005b96:	bf00      	nop
 c005b98:	7fefffff 	.word	0x7fefffff
 c005b9c:	0c00af78 	.word	0x0c00af78
 c005ba0:	0c00af7c 	.word	0x0c00af7c
 c005ba4:	0c00af84 	.word	0x0c00af84
 c005ba8:	0c00af80 	.word	0x0c00af80
 c005bac:	0c00b3e1 	.word	0x0c00b3e1
 c005bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c005bb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 c005bb4:	429a      	cmp	r2, r3
 c005bb6:	bfa8      	it	ge
 c005bb8:	461a      	movge	r2, r3
 c005bba:	2a00      	cmp	r2, #0
 c005bbc:	4691      	mov	r9, r2
 c005bbe:	dc37      	bgt.n	c005c30 <_printf_float+0x374>
 c005bc0:	f04f 0b00 	mov.w	fp, #0
 c005bc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 c005bc8:	f104 021a 	add.w	r2, r4, #26
 c005bcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 c005bce:	9305      	str	r3, [sp, #20]
 c005bd0:	eba3 0309 	sub.w	r3, r3, r9
 c005bd4:	455b      	cmp	r3, fp
 c005bd6:	dc33      	bgt.n	c005c40 <_printf_float+0x384>
 c005bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 c005bdc:	429a      	cmp	r2, r3
 c005bde:	db3b      	blt.n	c005c58 <_printf_float+0x39c>
 c005be0:	6823      	ldr	r3, [r4, #0]
 c005be2:	07da      	lsls	r2, r3, #31
 c005be4:	d438      	bmi.n	c005c58 <_printf_float+0x39c>
 c005be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c005be8:	9a05      	ldr	r2, [sp, #20]
 c005bea:	9909      	ldr	r1, [sp, #36]	; 0x24
 c005bec:	1a9a      	subs	r2, r3, r2
 c005bee:	eba3 0901 	sub.w	r9, r3, r1
 c005bf2:	4591      	cmp	r9, r2
 c005bf4:	bfa8      	it	ge
 c005bf6:	4691      	movge	r9, r2
 c005bf8:	f1b9 0f00 	cmp.w	r9, #0
 c005bfc:	dc35      	bgt.n	c005c6a <_printf_float+0x3ae>
 c005bfe:	f04f 0800 	mov.w	r8, #0
 c005c02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 c005c06:	f104 0a1a 	add.w	sl, r4, #26
 c005c0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 c005c0e:	1a9b      	subs	r3, r3, r2
 c005c10:	eba3 0309 	sub.w	r3, r3, r9
 c005c14:	4543      	cmp	r3, r8
 c005c16:	f77f af79 	ble.w	c005b0c <_printf_float+0x250>
 c005c1a:	2301      	movs	r3, #1
 c005c1c:	4652      	mov	r2, sl
 c005c1e:	4631      	mov	r1, r6
 c005c20:	4628      	mov	r0, r5
 c005c22:	47b8      	blx	r7
 c005c24:	3001      	adds	r0, #1
 c005c26:	f43f aeaa 	beq.w	c00597e <_printf_float+0xc2>
 c005c2a:	f108 0801 	add.w	r8, r8, #1
 c005c2e:	e7ec      	b.n	c005c0a <_printf_float+0x34e>
 c005c30:	4613      	mov	r3, r2
 c005c32:	4631      	mov	r1, r6
 c005c34:	4642      	mov	r2, r8
 c005c36:	4628      	mov	r0, r5
 c005c38:	47b8      	blx	r7
 c005c3a:	3001      	adds	r0, #1
 c005c3c:	d1c0      	bne.n	c005bc0 <_printf_float+0x304>
 c005c3e:	e69e      	b.n	c00597e <_printf_float+0xc2>
 c005c40:	2301      	movs	r3, #1
 c005c42:	4631      	mov	r1, r6
 c005c44:	4628      	mov	r0, r5
 c005c46:	9205      	str	r2, [sp, #20]
 c005c48:	47b8      	blx	r7
 c005c4a:	3001      	adds	r0, #1
 c005c4c:	f43f ae97 	beq.w	c00597e <_printf_float+0xc2>
 c005c50:	f10b 0b01 	add.w	fp, fp, #1
 c005c54:	9a05      	ldr	r2, [sp, #20]
 c005c56:	e7b9      	b.n	c005bcc <_printf_float+0x310>
 c005c58:	ee18 3a10 	vmov	r3, s16
 c005c5c:	4652      	mov	r2, sl
 c005c5e:	4631      	mov	r1, r6
 c005c60:	4628      	mov	r0, r5
 c005c62:	47b8      	blx	r7
 c005c64:	3001      	adds	r0, #1
 c005c66:	d1be      	bne.n	c005be6 <_printf_float+0x32a>
 c005c68:	e689      	b.n	c00597e <_printf_float+0xc2>
 c005c6a:	9a05      	ldr	r2, [sp, #20]
 c005c6c:	464b      	mov	r3, r9
 c005c6e:	4631      	mov	r1, r6
 c005c70:	4628      	mov	r0, r5
 c005c72:	4442      	add	r2, r8
 c005c74:	47b8      	blx	r7
 c005c76:	3001      	adds	r0, #1
 c005c78:	d1c1      	bne.n	c005bfe <_printf_float+0x342>
 c005c7a:	e680      	b.n	c00597e <_printf_float+0xc2>
 c005c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c005c7e:	2a01      	cmp	r2, #1
 c005c80:	dc01      	bgt.n	c005c86 <_printf_float+0x3ca>
 c005c82:	07db      	lsls	r3, r3, #31
 c005c84:	d538      	bpl.n	c005cf8 <_printf_float+0x43c>
 c005c86:	2301      	movs	r3, #1
 c005c88:	4642      	mov	r2, r8
 c005c8a:	4631      	mov	r1, r6
 c005c8c:	4628      	mov	r0, r5
 c005c8e:	47b8      	blx	r7
 c005c90:	3001      	adds	r0, #1
 c005c92:	f43f ae74 	beq.w	c00597e <_printf_float+0xc2>
 c005c96:	ee18 3a10 	vmov	r3, s16
 c005c9a:	4652      	mov	r2, sl
 c005c9c:	4631      	mov	r1, r6
 c005c9e:	4628      	mov	r0, r5
 c005ca0:	47b8      	blx	r7
 c005ca2:	3001      	adds	r0, #1
 c005ca4:	f43f ae6b 	beq.w	c00597e <_printf_float+0xc2>
 c005ca8:	2200      	movs	r2, #0
 c005caa:	2300      	movs	r3, #0
 c005cac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 c005cb0:	f7fa ff90 	bl	c000bd4 <__aeabi_dcmpeq>
 c005cb4:	b9d8      	cbnz	r0, c005cee <_printf_float+0x432>
 c005cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c005cb8:	f108 0201 	add.w	r2, r8, #1
 c005cbc:	3b01      	subs	r3, #1
 c005cbe:	4631      	mov	r1, r6
 c005cc0:	4628      	mov	r0, r5
 c005cc2:	47b8      	blx	r7
 c005cc4:	3001      	adds	r0, #1
 c005cc6:	d10e      	bne.n	c005ce6 <_printf_float+0x42a>
 c005cc8:	e659      	b.n	c00597e <_printf_float+0xc2>
 c005cca:	2301      	movs	r3, #1
 c005ccc:	4652      	mov	r2, sl
 c005cce:	4631      	mov	r1, r6
 c005cd0:	4628      	mov	r0, r5
 c005cd2:	47b8      	blx	r7
 c005cd4:	3001      	adds	r0, #1
 c005cd6:	f43f ae52 	beq.w	c00597e <_printf_float+0xc2>
 c005cda:	f108 0801 	add.w	r8, r8, #1
 c005cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c005ce0:	3b01      	subs	r3, #1
 c005ce2:	4543      	cmp	r3, r8
 c005ce4:	dcf1      	bgt.n	c005cca <_printf_float+0x40e>
 c005ce6:	464b      	mov	r3, r9
 c005ce8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 c005cec:	e6dc      	b.n	c005aa8 <_printf_float+0x1ec>
 c005cee:	f04f 0800 	mov.w	r8, #0
 c005cf2:	f104 0a1a 	add.w	sl, r4, #26
 c005cf6:	e7f2      	b.n	c005cde <_printf_float+0x422>
 c005cf8:	2301      	movs	r3, #1
 c005cfa:	4642      	mov	r2, r8
 c005cfc:	e7df      	b.n	c005cbe <_printf_float+0x402>
 c005cfe:	2301      	movs	r3, #1
 c005d00:	464a      	mov	r2, r9
 c005d02:	4631      	mov	r1, r6
 c005d04:	4628      	mov	r0, r5
 c005d06:	47b8      	blx	r7
 c005d08:	3001      	adds	r0, #1
 c005d0a:	f43f ae38 	beq.w	c00597e <_printf_float+0xc2>
 c005d0e:	f108 0801 	add.w	r8, r8, #1
 c005d12:	68e3      	ldr	r3, [r4, #12]
 c005d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 c005d16:	1a5b      	subs	r3, r3, r1
 c005d18:	4543      	cmp	r3, r8
 c005d1a:	dcf0      	bgt.n	c005cfe <_printf_float+0x442>
 c005d1c:	e6fa      	b.n	c005b14 <_printf_float+0x258>
 c005d1e:	f04f 0800 	mov.w	r8, #0
 c005d22:	f104 0919 	add.w	r9, r4, #25
 c005d26:	e7f4      	b.n	c005d12 <_printf_float+0x456>

0c005d28 <_printf_common>:
 c005d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c005d2c:	4616      	mov	r6, r2
 c005d2e:	4699      	mov	r9, r3
 c005d30:	688a      	ldr	r2, [r1, #8]
 c005d32:	4607      	mov	r7, r0
 c005d34:	690b      	ldr	r3, [r1, #16]
 c005d36:	460c      	mov	r4, r1
 c005d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 c005d3c:	4293      	cmp	r3, r2
 c005d3e:	bfb8      	it	lt
 c005d40:	4613      	movlt	r3, r2
 c005d42:	6033      	str	r3, [r6, #0]
 c005d44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 c005d48:	b10a      	cbz	r2, c005d4e <_printf_common+0x26>
 c005d4a:	3301      	adds	r3, #1
 c005d4c:	6033      	str	r3, [r6, #0]
 c005d4e:	6823      	ldr	r3, [r4, #0]
 c005d50:	0699      	lsls	r1, r3, #26
 c005d52:	bf42      	ittt	mi
 c005d54:	6833      	ldrmi	r3, [r6, #0]
 c005d56:	3302      	addmi	r3, #2
 c005d58:	6033      	strmi	r3, [r6, #0]
 c005d5a:	6825      	ldr	r5, [r4, #0]
 c005d5c:	f015 0506 	ands.w	r5, r5, #6
 c005d60:	d106      	bne.n	c005d70 <_printf_common+0x48>
 c005d62:	f104 0a19 	add.w	sl, r4, #25
 c005d66:	68e3      	ldr	r3, [r4, #12]
 c005d68:	6832      	ldr	r2, [r6, #0]
 c005d6a:	1a9b      	subs	r3, r3, r2
 c005d6c:	42ab      	cmp	r3, r5
 c005d6e:	dc29      	bgt.n	c005dc4 <_printf_common+0x9c>
 c005d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 c005d74:	1e13      	subs	r3, r2, #0
 c005d76:	6822      	ldr	r2, [r4, #0]
 c005d78:	bf18      	it	ne
 c005d7a:	2301      	movne	r3, #1
 c005d7c:	0692      	lsls	r2, r2, #26
 c005d7e:	d42e      	bmi.n	c005dde <_printf_common+0xb6>
 c005d80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 c005d84:	4649      	mov	r1, r9
 c005d86:	4638      	mov	r0, r7
 c005d88:	47c0      	blx	r8
 c005d8a:	3001      	adds	r0, #1
 c005d8c:	d021      	beq.n	c005dd2 <_printf_common+0xaa>
 c005d8e:	6823      	ldr	r3, [r4, #0]
 c005d90:	341a      	adds	r4, #26
 c005d92:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 c005d96:	f003 0306 	and.w	r3, r3, #6
 c005d9a:	6832      	ldr	r2, [r6, #0]
 c005d9c:	2600      	movs	r6, #0
 c005d9e:	2b04      	cmp	r3, #4
 c005da0:	f854 3c12 	ldr.w	r3, [r4, #-18]
 c005da4:	bf08      	it	eq
 c005da6:	1aad      	subeq	r5, r5, r2
 c005da8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 c005dac:	bf14      	ite	ne
 c005dae:	2500      	movne	r5, #0
 c005db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 c005db4:	4293      	cmp	r3, r2
 c005db6:	bfc4      	itt	gt
 c005db8:	1a9b      	subgt	r3, r3, r2
 c005dba:	18ed      	addgt	r5, r5, r3
 c005dbc:	42b5      	cmp	r5, r6
 c005dbe:	d11a      	bne.n	c005df6 <_printf_common+0xce>
 c005dc0:	2000      	movs	r0, #0
 c005dc2:	e008      	b.n	c005dd6 <_printf_common+0xae>
 c005dc4:	2301      	movs	r3, #1
 c005dc6:	4652      	mov	r2, sl
 c005dc8:	4649      	mov	r1, r9
 c005dca:	4638      	mov	r0, r7
 c005dcc:	47c0      	blx	r8
 c005dce:	3001      	adds	r0, #1
 c005dd0:	d103      	bne.n	c005dda <_printf_common+0xb2>
 c005dd2:	f04f 30ff 	mov.w	r0, #4294967295
 c005dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c005dda:	3501      	adds	r5, #1
 c005ddc:	e7c3      	b.n	c005d66 <_printf_common+0x3e>
 c005dde:	18e1      	adds	r1, r4, r3
 c005de0:	1c5a      	adds	r2, r3, #1
 c005de2:	2030      	movs	r0, #48	; 0x30
 c005de4:	3302      	adds	r3, #2
 c005de6:	4422      	add	r2, r4
 c005de8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 c005dec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 c005df0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 c005df4:	e7c4      	b.n	c005d80 <_printf_common+0x58>
 c005df6:	2301      	movs	r3, #1
 c005df8:	4622      	mov	r2, r4
 c005dfa:	4649      	mov	r1, r9
 c005dfc:	4638      	mov	r0, r7
 c005dfe:	47c0      	blx	r8
 c005e00:	3001      	adds	r0, #1
 c005e02:	d0e6      	beq.n	c005dd2 <_printf_common+0xaa>
 c005e04:	3601      	adds	r6, #1
 c005e06:	e7d9      	b.n	c005dbc <_printf_common+0x94>

0c005e08 <_printf_i>:
 c005e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c005e0c:	7e0f      	ldrb	r7, [r1, #24]
 c005e0e:	4691      	mov	r9, r2
 c005e10:	4680      	mov	r8, r0
 c005e12:	460c      	mov	r4, r1
 c005e14:	2f78      	cmp	r7, #120	; 0x78
 c005e16:	469a      	mov	sl, r3
 c005e18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 c005e1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 c005e1e:	d807      	bhi.n	c005e30 <_printf_i+0x28>
 c005e20:	2f62      	cmp	r7, #98	; 0x62
 c005e22:	d80a      	bhi.n	c005e3a <_printf_i+0x32>
 c005e24:	2f00      	cmp	r7, #0
 c005e26:	f000 80d8 	beq.w	c005fda <_printf_i+0x1d2>
 c005e2a:	2f58      	cmp	r7, #88	; 0x58
 c005e2c:	f000 80a3 	beq.w	c005f76 <_printf_i+0x16e>
 c005e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c005e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 c005e38:	e03a      	b.n	c005eb0 <_printf_i+0xa8>
 c005e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 c005e3e:	2b15      	cmp	r3, #21
 c005e40:	d8f6      	bhi.n	c005e30 <_printf_i+0x28>
 c005e42:	a101      	add	r1, pc, #4	; (adr r1, c005e48 <_printf_i+0x40>)
 c005e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 c005e48:	0c005ea1 	.word	0x0c005ea1
 c005e4c:	0c005eb5 	.word	0x0c005eb5
 c005e50:	0c005e31 	.word	0x0c005e31
 c005e54:	0c005e31 	.word	0x0c005e31
 c005e58:	0c005e31 	.word	0x0c005e31
 c005e5c:	0c005e31 	.word	0x0c005e31
 c005e60:	0c005eb5 	.word	0x0c005eb5
 c005e64:	0c005e31 	.word	0x0c005e31
 c005e68:	0c005e31 	.word	0x0c005e31
 c005e6c:	0c005e31 	.word	0x0c005e31
 c005e70:	0c005e31 	.word	0x0c005e31
 c005e74:	0c005fc1 	.word	0x0c005fc1
 c005e78:	0c005ee5 	.word	0x0c005ee5
 c005e7c:	0c005fa3 	.word	0x0c005fa3
 c005e80:	0c005e31 	.word	0x0c005e31
 c005e84:	0c005e31 	.word	0x0c005e31
 c005e88:	0c005fe3 	.word	0x0c005fe3
 c005e8c:	0c005e31 	.word	0x0c005e31
 c005e90:	0c005ee5 	.word	0x0c005ee5
 c005e94:	0c005e31 	.word	0x0c005e31
 c005e98:	0c005e31 	.word	0x0c005e31
 c005e9c:	0c005fab 	.word	0x0c005fab
 c005ea0:	682b      	ldr	r3, [r5, #0]
 c005ea2:	1d1a      	adds	r2, r3, #4
 c005ea4:	681b      	ldr	r3, [r3, #0]
 c005ea6:	602a      	str	r2, [r5, #0]
 c005ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c005eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c005eb0:	2301      	movs	r3, #1
 c005eb2:	e0a3      	b.n	c005ffc <_printf_i+0x1f4>
 c005eb4:	6820      	ldr	r0, [r4, #0]
 c005eb6:	6829      	ldr	r1, [r5, #0]
 c005eb8:	0606      	lsls	r6, r0, #24
 c005eba:	f101 0304 	add.w	r3, r1, #4
 c005ebe:	d50a      	bpl.n	c005ed6 <_printf_i+0xce>
 c005ec0:	680e      	ldr	r6, [r1, #0]
 c005ec2:	602b      	str	r3, [r5, #0]
 c005ec4:	2e00      	cmp	r6, #0
 c005ec6:	da03      	bge.n	c005ed0 <_printf_i+0xc8>
 c005ec8:	232d      	movs	r3, #45	; 0x2d
 c005eca:	4276      	negs	r6, r6
 c005ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c005ed0:	485e      	ldr	r0, [pc, #376]	; (c00604c <_printf_i+0x244>)
 c005ed2:	230a      	movs	r3, #10
 c005ed4:	e019      	b.n	c005f0a <_printf_i+0x102>
 c005ed6:	680e      	ldr	r6, [r1, #0]
 c005ed8:	f010 0f40 	tst.w	r0, #64	; 0x40
 c005edc:	602b      	str	r3, [r5, #0]
 c005ede:	bf18      	it	ne
 c005ee0:	b236      	sxthne	r6, r6
 c005ee2:	e7ef      	b.n	c005ec4 <_printf_i+0xbc>
 c005ee4:	682b      	ldr	r3, [r5, #0]
 c005ee6:	6820      	ldr	r0, [r4, #0]
 c005ee8:	1d19      	adds	r1, r3, #4
 c005eea:	6029      	str	r1, [r5, #0]
 c005eec:	0601      	lsls	r1, r0, #24
 c005eee:	d501      	bpl.n	c005ef4 <_printf_i+0xec>
 c005ef0:	681e      	ldr	r6, [r3, #0]
 c005ef2:	e002      	b.n	c005efa <_printf_i+0xf2>
 c005ef4:	0646      	lsls	r6, r0, #25
 c005ef6:	d5fb      	bpl.n	c005ef0 <_printf_i+0xe8>
 c005ef8:	881e      	ldrh	r6, [r3, #0]
 c005efa:	2f6f      	cmp	r7, #111	; 0x6f
 c005efc:	4853      	ldr	r0, [pc, #332]	; (c00604c <_printf_i+0x244>)
 c005efe:	bf0c      	ite	eq
 c005f00:	2308      	moveq	r3, #8
 c005f02:	230a      	movne	r3, #10
 c005f04:	2100      	movs	r1, #0
 c005f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 c005f0a:	6865      	ldr	r5, [r4, #4]
 c005f0c:	2d00      	cmp	r5, #0
 c005f0e:	60a5      	str	r5, [r4, #8]
 c005f10:	bfa2      	ittt	ge
 c005f12:	6821      	ldrge	r1, [r4, #0]
 c005f14:	f021 0104 	bicge.w	r1, r1, #4
 c005f18:	6021      	strge	r1, [r4, #0]
 c005f1a:	b90e      	cbnz	r6, c005f20 <_printf_i+0x118>
 c005f1c:	2d00      	cmp	r5, #0
 c005f1e:	d04d      	beq.n	c005fbc <_printf_i+0x1b4>
 c005f20:	4615      	mov	r5, r2
 c005f22:	fbb6 f1f3 	udiv	r1, r6, r3
 c005f26:	fb03 6711 	mls	r7, r3, r1, r6
 c005f2a:	5dc7      	ldrb	r7, [r0, r7]
 c005f2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 c005f30:	4637      	mov	r7, r6
 c005f32:	460e      	mov	r6, r1
 c005f34:	42bb      	cmp	r3, r7
 c005f36:	d9f4      	bls.n	c005f22 <_printf_i+0x11a>
 c005f38:	2b08      	cmp	r3, #8
 c005f3a:	d10b      	bne.n	c005f54 <_printf_i+0x14c>
 c005f3c:	6823      	ldr	r3, [r4, #0]
 c005f3e:	07de      	lsls	r6, r3, #31
 c005f40:	d508      	bpl.n	c005f54 <_printf_i+0x14c>
 c005f42:	6923      	ldr	r3, [r4, #16]
 c005f44:	6861      	ldr	r1, [r4, #4]
 c005f46:	4299      	cmp	r1, r3
 c005f48:	bfde      	ittt	le
 c005f4a:	2330      	movle	r3, #48	; 0x30
 c005f4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 c005f50:	f105 35ff 	addle.w	r5, r5, #4294967295
 c005f54:	1b52      	subs	r2, r2, r5
 c005f56:	6122      	str	r2, [r4, #16]
 c005f58:	464b      	mov	r3, r9
 c005f5a:	aa03      	add	r2, sp, #12
 c005f5c:	4621      	mov	r1, r4
 c005f5e:	4640      	mov	r0, r8
 c005f60:	f8cd a000 	str.w	sl, [sp]
 c005f64:	f7ff fee0 	bl	c005d28 <_printf_common>
 c005f68:	3001      	adds	r0, #1
 c005f6a:	d14c      	bne.n	c006006 <_printf_i+0x1fe>
 c005f6c:	f04f 30ff 	mov.w	r0, #4294967295
 c005f70:	b004      	add	sp, #16
 c005f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c005f76:	4835      	ldr	r0, [pc, #212]	; (c00604c <_printf_i+0x244>)
 c005f78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 c005f7c:	6829      	ldr	r1, [r5, #0]
 c005f7e:	6823      	ldr	r3, [r4, #0]
 c005f80:	f851 6b04 	ldr.w	r6, [r1], #4
 c005f84:	6029      	str	r1, [r5, #0]
 c005f86:	061d      	lsls	r5, r3, #24
 c005f88:	d514      	bpl.n	c005fb4 <_printf_i+0x1ac>
 c005f8a:	07df      	lsls	r7, r3, #31
 c005f8c:	bf44      	itt	mi
 c005f8e:	f043 0320 	orrmi.w	r3, r3, #32
 c005f92:	6023      	strmi	r3, [r4, #0]
 c005f94:	b91e      	cbnz	r6, c005f9e <_printf_i+0x196>
 c005f96:	6823      	ldr	r3, [r4, #0]
 c005f98:	f023 0320 	bic.w	r3, r3, #32
 c005f9c:	6023      	str	r3, [r4, #0]
 c005f9e:	2310      	movs	r3, #16
 c005fa0:	e7b0      	b.n	c005f04 <_printf_i+0xfc>
 c005fa2:	6823      	ldr	r3, [r4, #0]
 c005fa4:	f043 0320 	orr.w	r3, r3, #32
 c005fa8:	6023      	str	r3, [r4, #0]
 c005faa:	2378      	movs	r3, #120	; 0x78
 c005fac:	4828      	ldr	r0, [pc, #160]	; (c006050 <_printf_i+0x248>)
 c005fae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 c005fb2:	e7e3      	b.n	c005f7c <_printf_i+0x174>
 c005fb4:	0659      	lsls	r1, r3, #25
 c005fb6:	bf48      	it	mi
 c005fb8:	b2b6      	uxthmi	r6, r6
 c005fba:	e7e6      	b.n	c005f8a <_printf_i+0x182>
 c005fbc:	4615      	mov	r5, r2
 c005fbe:	e7bb      	b.n	c005f38 <_printf_i+0x130>
 c005fc0:	682b      	ldr	r3, [r5, #0]
 c005fc2:	6826      	ldr	r6, [r4, #0]
 c005fc4:	1d18      	adds	r0, r3, #4
 c005fc6:	6961      	ldr	r1, [r4, #20]
 c005fc8:	6028      	str	r0, [r5, #0]
 c005fca:	0635      	lsls	r5, r6, #24
 c005fcc:	681b      	ldr	r3, [r3, #0]
 c005fce:	d501      	bpl.n	c005fd4 <_printf_i+0x1cc>
 c005fd0:	6019      	str	r1, [r3, #0]
 c005fd2:	e002      	b.n	c005fda <_printf_i+0x1d2>
 c005fd4:	0670      	lsls	r0, r6, #25
 c005fd6:	d5fb      	bpl.n	c005fd0 <_printf_i+0x1c8>
 c005fd8:	8019      	strh	r1, [r3, #0]
 c005fda:	2300      	movs	r3, #0
 c005fdc:	4615      	mov	r5, r2
 c005fde:	6123      	str	r3, [r4, #16]
 c005fe0:	e7ba      	b.n	c005f58 <_printf_i+0x150>
 c005fe2:	682b      	ldr	r3, [r5, #0]
 c005fe4:	2100      	movs	r1, #0
 c005fe6:	1d1a      	adds	r2, r3, #4
 c005fe8:	602a      	str	r2, [r5, #0]
 c005fea:	681d      	ldr	r5, [r3, #0]
 c005fec:	6862      	ldr	r2, [r4, #4]
 c005fee:	4628      	mov	r0, r5
 c005ff0:	f002 ffd6 	bl	c008fa0 <memchr>
 c005ff4:	b108      	cbz	r0, c005ffa <_printf_i+0x1f2>
 c005ff6:	1b40      	subs	r0, r0, r5
 c005ff8:	6060      	str	r0, [r4, #4]
 c005ffa:	6863      	ldr	r3, [r4, #4]
 c005ffc:	6123      	str	r3, [r4, #16]
 c005ffe:	2300      	movs	r3, #0
 c006000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c006004:	e7a8      	b.n	c005f58 <_printf_i+0x150>
 c006006:	6923      	ldr	r3, [r4, #16]
 c006008:	462a      	mov	r2, r5
 c00600a:	4649      	mov	r1, r9
 c00600c:	4640      	mov	r0, r8
 c00600e:	47d0      	blx	sl
 c006010:	3001      	adds	r0, #1
 c006012:	d0ab      	beq.n	c005f6c <_printf_i+0x164>
 c006014:	6823      	ldr	r3, [r4, #0]
 c006016:	079b      	lsls	r3, r3, #30
 c006018:	d413      	bmi.n	c006042 <_printf_i+0x23a>
 c00601a:	68e0      	ldr	r0, [r4, #12]
 c00601c:	9b03      	ldr	r3, [sp, #12]
 c00601e:	4298      	cmp	r0, r3
 c006020:	bfb8      	it	lt
 c006022:	4618      	movlt	r0, r3
 c006024:	e7a4      	b.n	c005f70 <_printf_i+0x168>
 c006026:	2301      	movs	r3, #1
 c006028:	4632      	mov	r2, r6
 c00602a:	4649      	mov	r1, r9
 c00602c:	4640      	mov	r0, r8
 c00602e:	47d0      	blx	sl
 c006030:	3001      	adds	r0, #1
 c006032:	d09b      	beq.n	c005f6c <_printf_i+0x164>
 c006034:	3501      	adds	r5, #1
 c006036:	68e3      	ldr	r3, [r4, #12]
 c006038:	9903      	ldr	r1, [sp, #12]
 c00603a:	1a5b      	subs	r3, r3, r1
 c00603c:	42ab      	cmp	r3, r5
 c00603e:	dcf2      	bgt.n	c006026 <_printf_i+0x21e>
 c006040:	e7eb      	b.n	c00601a <_printf_i+0x212>
 c006042:	2500      	movs	r5, #0
 c006044:	f104 0619 	add.w	r6, r4, #25
 c006048:	e7f5      	b.n	c006036 <_printf_i+0x22e>
 c00604a:	bf00      	nop
 c00604c:	0c00af88 	.word	0x0c00af88
 c006050:	0c00af99 	.word	0x0c00af99

0c006054 <_scanf_float>:
 c006054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c006058:	b087      	sub	sp, #28
 c00605a:	4617      	mov	r7, r2
 c00605c:	468b      	mov	fp, r1
 c00605e:	4680      	mov	r8, r0
 c006060:	9303      	str	r3, [sp, #12]
 c006062:	460c      	mov	r4, r1
 c006064:	688b      	ldr	r3, [r1, #8]
 c006066:	1e5a      	subs	r2, r3, #1
 c006068:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 c00606c:	bf8b      	itete	hi
 c00606e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 c006072:	2300      	movls	r3, #0
 c006074:	195b      	addhi	r3, r3, r5
 c006076:	9302      	strls	r3, [sp, #8]
 c006078:	f04f 0500 	mov.w	r5, #0
 c00607c:	bf84      	itt	hi
 c00607e:	9302      	strhi	r3, [sp, #8]
 c006080:	f240 135d 	movwhi	r3, #349	; 0x15d
 c006084:	46aa      	mov	sl, r5
 c006086:	46a9      	mov	r9, r5
 c006088:	bf88      	it	hi
 c00608a:	608b      	strhi	r3, [r1, #8]
 c00608c:	680b      	ldr	r3, [r1, #0]
 c00608e:	9501      	str	r5, [sp, #4]
 c006090:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 c006094:	f84b 3b1c 	str.w	r3, [fp], #28
 c006098:	465e      	mov	r6, fp
 c00609a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 c00609e:	68a2      	ldr	r2, [r4, #8]
 c0060a0:	b152      	cbz	r2, c0060b8 <_scanf_float+0x64>
 c0060a2:	683b      	ldr	r3, [r7, #0]
 c0060a4:	781b      	ldrb	r3, [r3, #0]
 c0060a6:	2b4e      	cmp	r3, #78	; 0x4e
 c0060a8:	d864      	bhi.n	c006174 <_scanf_float+0x120>
 c0060aa:	2b40      	cmp	r3, #64	; 0x40
 c0060ac:	d83c      	bhi.n	c006128 <_scanf_float+0xd4>
 c0060ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 c0060b2:	b2c8      	uxtb	r0, r1
 c0060b4:	280e      	cmp	r0, #14
 c0060b6:	d93a      	bls.n	c00612e <_scanf_float+0xda>
 c0060b8:	f1b9 0f00 	cmp.w	r9, #0
 c0060bc:	d003      	beq.n	c0060c6 <_scanf_float+0x72>
 c0060be:	6823      	ldr	r3, [r4, #0]
 c0060c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c0060c4:	6023      	str	r3, [r4, #0]
 c0060c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 c0060ca:	f1ba 0f01 	cmp.w	sl, #1
 c0060ce:	f200 8113 	bhi.w	c0062f8 <_scanf_float+0x2a4>
 c0060d2:	455e      	cmp	r6, fp
 c0060d4:	f200 8105 	bhi.w	c0062e2 <_scanf_float+0x28e>
 c0060d8:	2501      	movs	r5, #1
 c0060da:	4628      	mov	r0, r5
 c0060dc:	b007      	add	sp, #28
 c0060de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0060e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 c0060e6:	2a0d      	cmp	r2, #13
 c0060e8:	d8e6      	bhi.n	c0060b8 <_scanf_float+0x64>
 c0060ea:	a101      	add	r1, pc, #4	; (adr r1, c0060f0 <_scanf_float+0x9c>)
 c0060ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 c0060f0:	0c00622f 	.word	0x0c00622f
 c0060f4:	0c0060b9 	.word	0x0c0060b9
 c0060f8:	0c0060b9 	.word	0x0c0060b9
 c0060fc:	0c0060b9 	.word	0x0c0060b9
 c006100:	0c00628f 	.word	0x0c00628f
 c006104:	0c006267 	.word	0x0c006267
 c006108:	0c0060b9 	.word	0x0c0060b9
 c00610c:	0c0060b9 	.word	0x0c0060b9
 c006110:	0c00623d 	.word	0x0c00623d
 c006114:	0c0060b9 	.word	0x0c0060b9
 c006118:	0c0060b9 	.word	0x0c0060b9
 c00611c:	0c0060b9 	.word	0x0c0060b9
 c006120:	0c0060b9 	.word	0x0c0060b9
 c006124:	0c0061f5 	.word	0x0c0061f5
 c006128:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 c00612c:	e7db      	b.n	c0060e6 <_scanf_float+0x92>
 c00612e:	290e      	cmp	r1, #14
 c006130:	d8c2      	bhi.n	c0060b8 <_scanf_float+0x64>
 c006132:	a001      	add	r0, pc, #4	; (adr r0, c006138 <_scanf_float+0xe4>)
 c006134:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 c006138:	0c0061e7 	.word	0x0c0061e7
 c00613c:	0c0060b9 	.word	0x0c0060b9
 c006140:	0c0061e7 	.word	0x0c0061e7
 c006144:	0c00627b 	.word	0x0c00627b
 c006148:	0c0060b9 	.word	0x0c0060b9
 c00614c:	0c006195 	.word	0x0c006195
 c006150:	0c0061d1 	.word	0x0c0061d1
 c006154:	0c0061d1 	.word	0x0c0061d1
 c006158:	0c0061d1 	.word	0x0c0061d1
 c00615c:	0c0061d1 	.word	0x0c0061d1
 c006160:	0c0061d1 	.word	0x0c0061d1
 c006164:	0c0061d1 	.word	0x0c0061d1
 c006168:	0c0061d1 	.word	0x0c0061d1
 c00616c:	0c0061d1 	.word	0x0c0061d1
 c006170:	0c0061d1 	.word	0x0c0061d1
 c006174:	2b6e      	cmp	r3, #110	; 0x6e
 c006176:	d809      	bhi.n	c00618c <_scanf_float+0x138>
 c006178:	2b60      	cmp	r3, #96	; 0x60
 c00617a:	d8b2      	bhi.n	c0060e2 <_scanf_float+0x8e>
 c00617c:	2b54      	cmp	r3, #84	; 0x54
 c00617e:	d077      	beq.n	c006270 <_scanf_float+0x21c>
 c006180:	2b59      	cmp	r3, #89	; 0x59
 c006182:	d199      	bne.n	c0060b8 <_scanf_float+0x64>
 c006184:	2d07      	cmp	r5, #7
 c006186:	d197      	bne.n	c0060b8 <_scanf_float+0x64>
 c006188:	2508      	movs	r5, #8
 c00618a:	e029      	b.n	c0061e0 <_scanf_float+0x18c>
 c00618c:	2b74      	cmp	r3, #116	; 0x74
 c00618e:	d06f      	beq.n	c006270 <_scanf_float+0x21c>
 c006190:	2b79      	cmp	r3, #121	; 0x79
 c006192:	e7f6      	b.n	c006182 <_scanf_float+0x12e>
 c006194:	6821      	ldr	r1, [r4, #0]
 c006196:	05c8      	lsls	r0, r1, #23
 c006198:	d51a      	bpl.n	c0061d0 <_scanf_float+0x17c>
 c00619a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 c00619e:	9b02      	ldr	r3, [sp, #8]
 c0061a0:	f109 0901 	add.w	r9, r9, #1
 c0061a4:	6021      	str	r1, [r4, #0]
 c0061a6:	b11b      	cbz	r3, c0061b0 <_scanf_float+0x15c>
 c0061a8:	3b01      	subs	r3, #1
 c0061aa:	3201      	adds	r2, #1
 c0061ac:	9302      	str	r3, [sp, #8]
 c0061ae:	60a2      	str	r2, [r4, #8]
 c0061b0:	68a3      	ldr	r3, [r4, #8]
 c0061b2:	3b01      	subs	r3, #1
 c0061b4:	60a3      	str	r3, [r4, #8]
 c0061b6:	6923      	ldr	r3, [r4, #16]
 c0061b8:	3301      	adds	r3, #1
 c0061ba:	6123      	str	r3, [r4, #16]
 c0061bc:	687b      	ldr	r3, [r7, #4]
 c0061be:	3b01      	subs	r3, #1
 c0061c0:	2b00      	cmp	r3, #0
 c0061c2:	607b      	str	r3, [r7, #4]
 c0061c4:	f340 8084 	ble.w	c0062d0 <_scanf_float+0x27c>
 c0061c8:	683b      	ldr	r3, [r7, #0]
 c0061ca:	3301      	adds	r3, #1
 c0061cc:	603b      	str	r3, [r7, #0]
 c0061ce:	e766      	b.n	c00609e <_scanf_float+0x4a>
 c0061d0:	eb1a 0f05 	cmn.w	sl, r5
 c0061d4:	f47f af70 	bne.w	c0060b8 <_scanf_float+0x64>
 c0061d8:	6822      	ldr	r2, [r4, #0]
 c0061da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 c0061de:	6022      	str	r2, [r4, #0]
 c0061e0:	f806 3b01 	strb.w	r3, [r6], #1
 c0061e4:	e7e4      	b.n	c0061b0 <_scanf_float+0x15c>
 c0061e6:	6822      	ldr	r2, [r4, #0]
 c0061e8:	0610      	lsls	r0, r2, #24
 c0061ea:	f57f af65 	bpl.w	c0060b8 <_scanf_float+0x64>
 c0061ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 c0061f2:	e7f4      	b.n	c0061de <_scanf_float+0x18a>
 c0061f4:	f1ba 0f00 	cmp.w	sl, #0
 c0061f8:	d10e      	bne.n	c006218 <_scanf_float+0x1c4>
 c0061fa:	f1b9 0f00 	cmp.w	r9, #0
 c0061fe:	d10e      	bne.n	c00621e <_scanf_float+0x1ca>
 c006200:	6822      	ldr	r2, [r4, #0]
 c006202:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 c006206:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 c00620a:	d108      	bne.n	c00621e <_scanf_float+0x1ca>
 c00620c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 c006210:	f04f 0a01 	mov.w	sl, #1
 c006214:	6022      	str	r2, [r4, #0]
 c006216:	e7e3      	b.n	c0061e0 <_scanf_float+0x18c>
 c006218:	f1ba 0f02 	cmp.w	sl, #2
 c00621c:	d055      	beq.n	c0062ca <_scanf_float+0x276>
 c00621e:	2d01      	cmp	r5, #1
 c006220:	d002      	beq.n	c006228 <_scanf_float+0x1d4>
 c006222:	2d04      	cmp	r5, #4
 c006224:	f47f af48 	bne.w	c0060b8 <_scanf_float+0x64>
 c006228:	3501      	adds	r5, #1
 c00622a:	b2ed      	uxtb	r5, r5
 c00622c:	e7d8      	b.n	c0061e0 <_scanf_float+0x18c>
 c00622e:	f1ba 0f01 	cmp.w	sl, #1
 c006232:	f47f af41 	bne.w	c0060b8 <_scanf_float+0x64>
 c006236:	f04f 0a02 	mov.w	sl, #2
 c00623a:	e7d1      	b.n	c0061e0 <_scanf_float+0x18c>
 c00623c:	b97d      	cbnz	r5, c00625e <_scanf_float+0x20a>
 c00623e:	f1b9 0f00 	cmp.w	r9, #0
 c006242:	f47f af3c 	bne.w	c0060be <_scanf_float+0x6a>
 c006246:	6822      	ldr	r2, [r4, #0]
 c006248:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 c00624c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 c006250:	f47f af39 	bne.w	c0060c6 <_scanf_float+0x72>
 c006254:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 c006258:	2501      	movs	r5, #1
 c00625a:	6022      	str	r2, [r4, #0]
 c00625c:	e7c0      	b.n	c0061e0 <_scanf_float+0x18c>
 c00625e:	2d03      	cmp	r5, #3
 c006260:	d0e2      	beq.n	c006228 <_scanf_float+0x1d4>
 c006262:	2d05      	cmp	r5, #5
 c006264:	e7de      	b.n	c006224 <_scanf_float+0x1d0>
 c006266:	2d02      	cmp	r5, #2
 c006268:	f47f af26 	bne.w	c0060b8 <_scanf_float+0x64>
 c00626c:	2503      	movs	r5, #3
 c00626e:	e7b7      	b.n	c0061e0 <_scanf_float+0x18c>
 c006270:	2d06      	cmp	r5, #6
 c006272:	f47f af21 	bne.w	c0060b8 <_scanf_float+0x64>
 c006276:	2507      	movs	r5, #7
 c006278:	e7b2      	b.n	c0061e0 <_scanf_float+0x18c>
 c00627a:	6822      	ldr	r2, [r4, #0]
 c00627c:	0591      	lsls	r1, r2, #22
 c00627e:	f57f af1b 	bpl.w	c0060b8 <_scanf_float+0x64>
 c006282:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 c006286:	f8cd 9004 	str.w	r9, [sp, #4]
 c00628a:	6022      	str	r2, [r4, #0]
 c00628c:	e7a8      	b.n	c0061e0 <_scanf_float+0x18c>
 c00628e:	6822      	ldr	r2, [r4, #0]
 c006290:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 c006294:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 c006298:	d006      	beq.n	c0062a8 <_scanf_float+0x254>
 c00629a:	0550      	lsls	r0, r2, #21
 c00629c:	f57f af0c 	bpl.w	c0060b8 <_scanf_float+0x64>
 c0062a0:	f1b9 0f00 	cmp.w	r9, #0
 c0062a4:	f43f af0f 	beq.w	c0060c6 <_scanf_float+0x72>
 c0062a8:	0591      	lsls	r1, r2, #22
 c0062aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 c0062ae:	bf58      	it	pl
 c0062b0:	9901      	ldrpl	r1, [sp, #4]
 c0062b2:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 c0062b6:	bf58      	it	pl
 c0062b8:	eba9 0101 	subpl.w	r1, r9, r1
 c0062bc:	6022      	str	r2, [r4, #0]
 c0062be:	f04f 0900 	mov.w	r9, #0
 c0062c2:	bf58      	it	pl
 c0062c4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 c0062c8:	e78a      	b.n	c0061e0 <_scanf_float+0x18c>
 c0062ca:	f04f 0a03 	mov.w	sl, #3
 c0062ce:	e787      	b.n	c0061e0 <_scanf_float+0x18c>
 c0062d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 c0062d4:	4639      	mov	r1, r7
 c0062d6:	4640      	mov	r0, r8
 c0062d8:	4798      	blx	r3
 c0062da:	2800      	cmp	r0, #0
 c0062dc:	f43f aedf 	beq.w	c00609e <_scanf_float+0x4a>
 c0062e0:	e6ea      	b.n	c0060b8 <_scanf_float+0x64>
 c0062e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 c0062e6:	463a      	mov	r2, r7
 c0062e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 c0062ec:	4640      	mov	r0, r8
 c0062ee:	4798      	blx	r3
 c0062f0:	6923      	ldr	r3, [r4, #16]
 c0062f2:	3b01      	subs	r3, #1
 c0062f4:	6123      	str	r3, [r4, #16]
 c0062f6:	e6ec      	b.n	c0060d2 <_scanf_float+0x7e>
 c0062f8:	1e6b      	subs	r3, r5, #1
 c0062fa:	2b06      	cmp	r3, #6
 c0062fc:	d825      	bhi.n	c00634a <_scanf_float+0x2f6>
 c0062fe:	2d02      	cmp	r5, #2
 c006300:	d836      	bhi.n	c006370 <_scanf_float+0x31c>
 c006302:	455e      	cmp	r6, fp
 c006304:	f67f aee8 	bls.w	c0060d8 <_scanf_float+0x84>
 c006308:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 c00630c:	463a      	mov	r2, r7
 c00630e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 c006312:	4640      	mov	r0, r8
 c006314:	4798      	blx	r3
 c006316:	6923      	ldr	r3, [r4, #16]
 c006318:	3b01      	subs	r3, #1
 c00631a:	6123      	str	r3, [r4, #16]
 c00631c:	e7f1      	b.n	c006302 <_scanf_float+0x2ae>
 c00631e:	9802      	ldr	r0, [sp, #8]
 c006320:	463a      	mov	r2, r7
 c006322:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 c006326:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 c00632a:	9002      	str	r0, [sp, #8]
 c00632c:	4640      	mov	r0, r8
 c00632e:	4798      	blx	r3
 c006330:	6923      	ldr	r3, [r4, #16]
 c006332:	3b01      	subs	r3, #1
 c006334:	6123      	str	r3, [r4, #16]
 c006336:	f10a 3aff 	add.w	sl, sl, #4294967295
 c00633a:	fa5f fa8a 	uxtb.w	sl, sl
 c00633e:	f1ba 0f02 	cmp.w	sl, #2
 c006342:	d1ec      	bne.n	c00631e <_scanf_float+0x2ca>
 c006344:	3d03      	subs	r5, #3
 c006346:	b2ed      	uxtb	r5, r5
 c006348:	1b76      	subs	r6, r6, r5
 c00634a:	6823      	ldr	r3, [r4, #0]
 c00634c:	05da      	lsls	r2, r3, #23
 c00634e:	d52e      	bpl.n	c0063ae <_scanf_float+0x35a>
 c006350:	055b      	lsls	r3, r3, #21
 c006352:	d510      	bpl.n	c006376 <_scanf_float+0x322>
 c006354:	455e      	cmp	r6, fp
 c006356:	f67f aebf 	bls.w	c0060d8 <_scanf_float+0x84>
 c00635a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 c00635e:	463a      	mov	r2, r7
 c006360:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 c006364:	4640      	mov	r0, r8
 c006366:	4798      	blx	r3
 c006368:	6923      	ldr	r3, [r4, #16]
 c00636a:	3b01      	subs	r3, #1
 c00636c:	6123      	str	r3, [r4, #16]
 c00636e:	e7f1      	b.n	c006354 <_scanf_float+0x300>
 c006370:	46aa      	mov	sl, r5
 c006372:	9602      	str	r6, [sp, #8]
 c006374:	e7df      	b.n	c006336 <_scanf_float+0x2e2>
 c006376:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 c00637a:	1e75      	subs	r5, r6, #1
 c00637c:	6923      	ldr	r3, [r4, #16]
 c00637e:	2965      	cmp	r1, #101	; 0x65
 c006380:	f103 33ff 	add.w	r3, r3, #4294967295
 c006384:	6123      	str	r3, [r4, #16]
 c006386:	d00c      	beq.n	c0063a2 <_scanf_float+0x34e>
 c006388:	2945      	cmp	r1, #69	; 0x45
 c00638a:	d00a      	beq.n	c0063a2 <_scanf_float+0x34e>
 c00638c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 c006390:	463a      	mov	r2, r7
 c006392:	4640      	mov	r0, r8
 c006394:	1eb5      	subs	r5, r6, #2
 c006396:	4798      	blx	r3
 c006398:	6923      	ldr	r3, [r4, #16]
 c00639a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 c00639e:	3b01      	subs	r3, #1
 c0063a0:	6123      	str	r3, [r4, #16]
 c0063a2:	462e      	mov	r6, r5
 c0063a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 c0063a8:	463a      	mov	r2, r7
 c0063aa:	4640      	mov	r0, r8
 c0063ac:	4798      	blx	r3
 c0063ae:	6825      	ldr	r5, [r4, #0]
 c0063b0:	f015 0510 	ands.w	r5, r5, #16
 c0063b4:	d159      	bne.n	c00646a <_scanf_float+0x416>
 c0063b6:	7035      	strb	r5, [r6, #0]
 c0063b8:	6823      	ldr	r3, [r4, #0]
 c0063ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c0063be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0063c2:	d11b      	bne.n	c0063fc <_scanf_float+0x3a8>
 c0063c4:	9b01      	ldr	r3, [sp, #4]
 c0063c6:	454b      	cmp	r3, r9
 c0063c8:	eba3 0209 	sub.w	r2, r3, r9
 c0063cc:	d123      	bne.n	c006416 <_scanf_float+0x3c2>
 c0063ce:	2200      	movs	r2, #0
 c0063d0:	4659      	mov	r1, fp
 c0063d2:	4640      	mov	r0, r8
 c0063d4:	f001 f842 	bl	c00745c <_strtod_r>
 c0063d8:	6822      	ldr	r2, [r4, #0]
 c0063da:	9b03      	ldr	r3, [sp, #12]
 c0063dc:	f012 0f02 	tst.w	r2, #2
 c0063e0:	681b      	ldr	r3, [r3, #0]
 c0063e2:	ec57 6b10 	vmov	r6, r7, d0
 c0063e6:	d021      	beq.n	c00642c <_scanf_float+0x3d8>
 c0063e8:	1d1a      	adds	r2, r3, #4
 c0063ea:	9903      	ldr	r1, [sp, #12]
 c0063ec:	600a      	str	r2, [r1, #0]
 c0063ee:	681b      	ldr	r3, [r3, #0]
 c0063f0:	e9c3 6700 	strd	r6, r7, [r3]
 c0063f4:	68e3      	ldr	r3, [r4, #12]
 c0063f6:	3301      	adds	r3, #1
 c0063f8:	60e3      	str	r3, [r4, #12]
 c0063fa:	e66e      	b.n	c0060da <_scanf_float+0x86>
 c0063fc:	9b04      	ldr	r3, [sp, #16]
 c0063fe:	2b00      	cmp	r3, #0
 c006400:	d0e5      	beq.n	c0063ce <_scanf_float+0x37a>
 c006402:	9905      	ldr	r1, [sp, #20]
 c006404:	230a      	movs	r3, #10
 c006406:	462a      	mov	r2, r5
 c006408:	4640      	mov	r0, r8
 c00640a:	3101      	adds	r1, #1
 c00640c:	f001 f8ae 	bl	c00756c <_strtol_r>
 c006410:	9b04      	ldr	r3, [sp, #16]
 c006412:	9e05      	ldr	r6, [sp, #20]
 c006414:	1ac2      	subs	r2, r0, r3
 c006416:	f204 136f 	addw	r3, r4, #367	; 0x16f
 c00641a:	4915      	ldr	r1, [pc, #84]	; (c006470 <_scanf_float+0x41c>)
 c00641c:	429e      	cmp	r6, r3
 c00641e:	bf28      	it	cs
 c006420:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 c006424:	4630      	mov	r0, r6
 c006426:	f000 f9db 	bl	c0067e0 <siprintf>
 c00642a:	e7d0      	b.n	c0063ce <_scanf_float+0x37a>
 c00642c:	9903      	ldr	r1, [sp, #12]
 c00642e:	f012 0f04 	tst.w	r2, #4
 c006432:	f103 0204 	add.w	r2, r3, #4
 c006436:	600a      	str	r2, [r1, #0]
 c006438:	d1d9      	bne.n	c0063ee <_scanf_float+0x39a>
 c00643a:	f8d3 8000 	ldr.w	r8, [r3]
 c00643e:	ee10 2a10 	vmov	r2, s0
 c006442:	463b      	mov	r3, r7
 c006444:	ee10 0a10 	vmov	r0, s0
 c006448:	4639      	mov	r1, r7
 c00644a:	f7fa fbf5 	bl	c000c38 <__aeabi_dcmpun>
 c00644e:	b128      	cbz	r0, c00645c <_scanf_float+0x408>
 c006450:	4808      	ldr	r0, [pc, #32]	; (c006474 <_scanf_float+0x420>)
 c006452:	f000 f97b 	bl	c00674c <nanf>
 c006456:	ed88 0a00 	vstr	s0, [r8]
 c00645a:	e7cb      	b.n	c0063f4 <_scanf_float+0x3a0>
 c00645c:	4630      	mov	r0, r6
 c00645e:	4639      	mov	r1, r7
 c006460:	f7fa fc48 	bl	c000cf4 <__aeabi_d2f>
 c006464:	f8c8 0000 	str.w	r0, [r8]
 c006468:	e7c4      	b.n	c0063f4 <_scanf_float+0x3a0>
 c00646a:	2500      	movs	r5, #0
 c00646c:	e635      	b.n	c0060da <_scanf_float+0x86>
 c00646e:	bf00      	nop
 c006470:	0c00afaa 	.word	0x0c00afaa
 c006474:	0c00b433 	.word	0x0c00b433

0c006478 <iprintf>:
 c006478:	b40f      	push	{r0, r1, r2, r3}
 c00647a:	4b0a      	ldr	r3, [pc, #40]	; (c0064a4 <iprintf+0x2c>)
 c00647c:	b513      	push	{r0, r1, r4, lr}
 c00647e:	681c      	ldr	r4, [r3, #0]
 c006480:	b124      	cbz	r4, c00648c <iprintf+0x14>
 c006482:	69a3      	ldr	r3, [r4, #24]
 c006484:	b913      	cbnz	r3, c00648c <iprintf+0x14>
 c006486:	4620      	mov	r0, r4
 c006488:	f002 f8dc 	bl	c008644 <__sinit>
 c00648c:	ab05      	add	r3, sp, #20
 c00648e:	9a04      	ldr	r2, [sp, #16]
 c006490:	68a1      	ldr	r1, [r4, #8]
 c006492:	4620      	mov	r0, r4
 c006494:	9301      	str	r3, [sp, #4]
 c006496:	f003 fce1 	bl	c009e5c <_vfiprintf_r>
 c00649a:	b002      	add	sp, #8
 c00649c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c0064a0:	b004      	add	sp, #16
 c0064a2:	4770      	bx	lr
 c0064a4:	30000010 	.word	0x30000010

0c0064a8 <_puts_r>:
 c0064a8:	b570      	push	{r4, r5, r6, lr}
 c0064aa:	460e      	mov	r6, r1
 c0064ac:	4605      	mov	r5, r0
 c0064ae:	b118      	cbz	r0, c0064b8 <_puts_r+0x10>
 c0064b0:	6983      	ldr	r3, [r0, #24]
 c0064b2:	b90b      	cbnz	r3, c0064b8 <_puts_r+0x10>
 c0064b4:	f002 f8c6 	bl	c008644 <__sinit>
 c0064b8:	69ab      	ldr	r3, [r5, #24]
 c0064ba:	68ac      	ldr	r4, [r5, #8]
 c0064bc:	b913      	cbnz	r3, c0064c4 <_puts_r+0x1c>
 c0064be:	4628      	mov	r0, r5
 c0064c0:	f002 f8c0 	bl	c008644 <__sinit>
 c0064c4:	4b2c      	ldr	r3, [pc, #176]	; (c006578 <_puts_r+0xd0>)
 c0064c6:	429c      	cmp	r4, r3
 c0064c8:	d120      	bne.n	c00650c <_puts_r+0x64>
 c0064ca:	686c      	ldr	r4, [r5, #4]
 c0064cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c0064ce:	07db      	lsls	r3, r3, #31
 c0064d0:	d405      	bmi.n	c0064de <_puts_r+0x36>
 c0064d2:	89a3      	ldrh	r3, [r4, #12]
 c0064d4:	0598      	lsls	r0, r3, #22
 c0064d6:	d402      	bmi.n	c0064de <_puts_r+0x36>
 c0064d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c0064da:	f002 fce0 	bl	c008e9e <__retarget_lock_acquire_recursive>
 c0064de:	89a3      	ldrh	r3, [r4, #12]
 c0064e0:	0719      	lsls	r1, r3, #28
 c0064e2:	d51d      	bpl.n	c006520 <_puts_r+0x78>
 c0064e4:	6923      	ldr	r3, [r4, #16]
 c0064e6:	b1db      	cbz	r3, c006520 <_puts_r+0x78>
 c0064e8:	3e01      	subs	r6, #1
 c0064ea:	68a3      	ldr	r3, [r4, #8]
 c0064ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 c0064f0:	3b01      	subs	r3, #1
 c0064f2:	60a3      	str	r3, [r4, #8]
 c0064f4:	bb39      	cbnz	r1, c006546 <_puts_r+0x9e>
 c0064f6:	2b00      	cmp	r3, #0
 c0064f8:	da38      	bge.n	c00656c <_puts_r+0xc4>
 c0064fa:	4622      	mov	r2, r4
 c0064fc:	210a      	movs	r1, #10
 c0064fe:	4628      	mov	r0, r5
 c006500:	f001 f836 	bl	c007570 <__swbuf_r>
 c006504:	3001      	adds	r0, #1
 c006506:	d011      	beq.n	c00652c <_puts_r+0x84>
 c006508:	250a      	movs	r5, #10
 c00650a:	e011      	b.n	c006530 <_puts_r+0x88>
 c00650c:	4b1b      	ldr	r3, [pc, #108]	; (c00657c <_puts_r+0xd4>)
 c00650e:	429c      	cmp	r4, r3
 c006510:	d101      	bne.n	c006516 <_puts_r+0x6e>
 c006512:	68ac      	ldr	r4, [r5, #8]
 c006514:	e7da      	b.n	c0064cc <_puts_r+0x24>
 c006516:	4b1a      	ldr	r3, [pc, #104]	; (c006580 <_puts_r+0xd8>)
 c006518:	429c      	cmp	r4, r3
 c00651a:	bf08      	it	eq
 c00651c:	68ec      	ldreq	r4, [r5, #12]
 c00651e:	e7d5      	b.n	c0064cc <_puts_r+0x24>
 c006520:	4621      	mov	r1, r4
 c006522:	4628      	mov	r0, r5
 c006524:	f001 f876 	bl	c007614 <__swsetup_r>
 c006528:	2800      	cmp	r0, #0
 c00652a:	d0dd      	beq.n	c0064e8 <_puts_r+0x40>
 c00652c:	f04f 35ff 	mov.w	r5, #4294967295
 c006530:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c006532:	07da      	lsls	r2, r3, #31
 c006534:	d405      	bmi.n	c006542 <_puts_r+0x9a>
 c006536:	89a3      	ldrh	r3, [r4, #12]
 c006538:	059b      	lsls	r3, r3, #22
 c00653a:	d402      	bmi.n	c006542 <_puts_r+0x9a>
 c00653c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00653e:	f002 fcaf 	bl	c008ea0 <__retarget_lock_release_recursive>
 c006542:	4628      	mov	r0, r5
 c006544:	bd70      	pop	{r4, r5, r6, pc}
 c006546:	2b00      	cmp	r3, #0
 c006548:	da04      	bge.n	c006554 <_puts_r+0xac>
 c00654a:	69a2      	ldr	r2, [r4, #24]
 c00654c:	429a      	cmp	r2, r3
 c00654e:	dc06      	bgt.n	c00655e <_puts_r+0xb6>
 c006550:	290a      	cmp	r1, #10
 c006552:	d004      	beq.n	c00655e <_puts_r+0xb6>
 c006554:	6823      	ldr	r3, [r4, #0]
 c006556:	1c5a      	adds	r2, r3, #1
 c006558:	6022      	str	r2, [r4, #0]
 c00655a:	7019      	strb	r1, [r3, #0]
 c00655c:	e7c5      	b.n	c0064ea <_puts_r+0x42>
 c00655e:	4622      	mov	r2, r4
 c006560:	4628      	mov	r0, r5
 c006562:	f001 f805 	bl	c007570 <__swbuf_r>
 c006566:	3001      	adds	r0, #1
 c006568:	d1bf      	bne.n	c0064ea <_puts_r+0x42>
 c00656a:	e7df      	b.n	c00652c <_puts_r+0x84>
 c00656c:	6823      	ldr	r3, [r4, #0]
 c00656e:	250a      	movs	r5, #10
 c006570:	1c5a      	adds	r2, r3, #1
 c006572:	6022      	str	r2, [r4, #0]
 c006574:	701d      	strb	r5, [r3, #0]
 c006576:	e7db      	b.n	c006530 <_puts_r+0x88>
 c006578:	0c00b1b4 	.word	0x0c00b1b4
 c00657c:	0c00b1d4 	.word	0x0c00b1d4
 c006580:	0c00b194 	.word	0x0c00b194

0c006584 <puts>:
 c006584:	4b02      	ldr	r3, [pc, #8]	; (c006590 <puts+0xc>)
 c006586:	4601      	mov	r1, r0
 c006588:	6818      	ldr	r0, [r3, #0]
 c00658a:	f7ff bf8d 	b.w	c0064a8 <_puts_r>
 c00658e:	bf00      	nop
 c006590:	30000010 	.word	0x30000010

0c006594 <iscanf>:
 c006594:	b40f      	push	{r0, r1, r2, r3}
 c006596:	4b0a      	ldr	r3, [pc, #40]	; (c0065c0 <iscanf+0x2c>)
 c006598:	b513      	push	{r0, r1, r4, lr}
 c00659a:	681c      	ldr	r4, [r3, #0]
 c00659c:	b124      	cbz	r4, c0065a8 <iscanf+0x14>
 c00659e:	69a3      	ldr	r3, [r4, #24]
 c0065a0:	b913      	cbnz	r3, c0065a8 <iscanf+0x14>
 c0065a2:	4620      	mov	r0, r4
 c0065a4:	f002 f84e 	bl	c008644 <__sinit>
 c0065a8:	ab05      	add	r3, sp, #20
 c0065aa:	9a04      	ldr	r2, [sp, #16]
 c0065ac:	6861      	ldr	r1, [r4, #4]
 c0065ae:	4620      	mov	r0, r4
 c0065b0:	9301      	str	r3, [sp, #4]
 c0065b2:	f003 ff29 	bl	c00a408 <_vfiscanf_r>
 c0065b6:	b002      	add	sp, #8
 c0065b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c0065bc:	b004      	add	sp, #16
 c0065be:	4770      	bx	lr
 c0065c0:	30000010 	.word	0x30000010

0c0065c4 <setvbuf>:
 c0065c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c0065c8:	461d      	mov	r5, r3
 c0065ca:	4b5c      	ldr	r3, [pc, #368]	; (c00673c <setvbuf+0x178>)
 c0065cc:	4604      	mov	r4, r0
 c0065ce:	460e      	mov	r6, r1
 c0065d0:	681f      	ldr	r7, [r3, #0]
 c0065d2:	4690      	mov	r8, r2
 c0065d4:	b127      	cbz	r7, c0065e0 <setvbuf+0x1c>
 c0065d6:	69bb      	ldr	r3, [r7, #24]
 c0065d8:	b913      	cbnz	r3, c0065e0 <setvbuf+0x1c>
 c0065da:	4638      	mov	r0, r7
 c0065dc:	f002 f832 	bl	c008644 <__sinit>
 c0065e0:	4b57      	ldr	r3, [pc, #348]	; (c006740 <setvbuf+0x17c>)
 c0065e2:	429c      	cmp	r4, r3
 c0065e4:	d167      	bne.n	c0066b6 <setvbuf+0xf2>
 c0065e6:	687c      	ldr	r4, [r7, #4]
 c0065e8:	f1b8 0f02 	cmp.w	r8, #2
 c0065ec:	d006      	beq.n	c0065fc <setvbuf+0x38>
 c0065ee:	f1b8 0f01 	cmp.w	r8, #1
 c0065f2:	f200 809e 	bhi.w	c006732 <setvbuf+0x16e>
 c0065f6:	2d00      	cmp	r5, #0
 c0065f8:	f2c0 809b 	blt.w	c006732 <setvbuf+0x16e>
 c0065fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c0065fe:	07db      	lsls	r3, r3, #31
 c006600:	d405      	bmi.n	c00660e <setvbuf+0x4a>
 c006602:	89a3      	ldrh	r3, [r4, #12]
 c006604:	0598      	lsls	r0, r3, #22
 c006606:	d402      	bmi.n	c00660e <setvbuf+0x4a>
 c006608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00660a:	f002 fc48 	bl	c008e9e <__retarget_lock_acquire_recursive>
 c00660e:	4621      	mov	r1, r4
 c006610:	4638      	mov	r0, r7
 c006612:	f001 ff71 	bl	c0084f8 <_fflush_r>
 c006616:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c006618:	b141      	cbz	r1, c00662c <setvbuf+0x68>
 c00661a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c00661e:	4299      	cmp	r1, r3
 c006620:	d002      	beq.n	c006628 <setvbuf+0x64>
 c006622:	4638      	mov	r0, r7
 c006624:	f003 f9b4 	bl	c009990 <_free_r>
 c006628:	2300      	movs	r3, #0
 c00662a:	6363      	str	r3, [r4, #52]	; 0x34
 c00662c:	2300      	movs	r3, #0
 c00662e:	61a3      	str	r3, [r4, #24]
 c006630:	6063      	str	r3, [r4, #4]
 c006632:	89a3      	ldrh	r3, [r4, #12]
 c006634:	0619      	lsls	r1, r3, #24
 c006636:	d503      	bpl.n	c006640 <setvbuf+0x7c>
 c006638:	6921      	ldr	r1, [r4, #16]
 c00663a:	4638      	mov	r0, r7
 c00663c:	f003 f9a8 	bl	c009990 <_free_r>
 c006640:	89a3      	ldrh	r3, [r4, #12]
 c006642:	f1b8 0f02 	cmp.w	r8, #2
 c006646:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 c00664a:	f023 0303 	bic.w	r3, r3, #3
 c00664e:	81a3      	strh	r3, [r4, #12]
 c006650:	d06b      	beq.n	c00672a <setvbuf+0x166>
 c006652:	ab01      	add	r3, sp, #4
 c006654:	466a      	mov	r2, sp
 c006656:	4621      	mov	r1, r4
 c006658:	4638      	mov	r0, r7
 c00665a:	f002 fc22 	bl	c008ea2 <__swhatbuf_r>
 c00665e:	89a3      	ldrh	r3, [r4, #12]
 c006660:	4318      	orrs	r0, r3
 c006662:	81a0      	strh	r0, [r4, #12]
 c006664:	2d00      	cmp	r5, #0
 c006666:	d130      	bne.n	c0066ca <setvbuf+0x106>
 c006668:	9d00      	ldr	r5, [sp, #0]
 c00666a:	4628      	mov	r0, r5
 c00666c:	f002 fc7e 	bl	c008f6c <malloc>
 c006670:	4606      	mov	r6, r0
 c006672:	2800      	cmp	r0, #0
 c006674:	d154      	bne.n	c006720 <setvbuf+0x15c>
 c006676:	f8dd 9000 	ldr.w	r9, [sp]
 c00667a:	45a9      	cmp	r9, r5
 c00667c:	d149      	bne.n	c006712 <setvbuf+0x14e>
 c00667e:	f04f 35ff 	mov.w	r5, #4294967295
 c006682:	2200      	movs	r2, #0
 c006684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c006688:	60a2      	str	r2, [r4, #8]
 c00668a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 c00668e:	f043 0302 	orr.w	r3, r3, #2
 c006692:	6022      	str	r2, [r4, #0]
 c006694:	6122      	str	r2, [r4, #16]
 c006696:	2201      	movs	r2, #1
 c006698:	81a3      	strh	r3, [r4, #12]
 c00669a:	6162      	str	r2, [r4, #20]
 c00669c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 c00669e:	07d2      	lsls	r2, r2, #31
 c0066a0:	d405      	bmi.n	c0066ae <setvbuf+0xea>
 c0066a2:	f413 7f00 	tst.w	r3, #512	; 0x200
 c0066a6:	d102      	bne.n	c0066ae <setvbuf+0xea>
 c0066a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c0066aa:	f002 fbf9 	bl	c008ea0 <__retarget_lock_release_recursive>
 c0066ae:	4628      	mov	r0, r5
 c0066b0:	b003      	add	sp, #12
 c0066b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 c0066b6:	4b23      	ldr	r3, [pc, #140]	; (c006744 <setvbuf+0x180>)
 c0066b8:	429c      	cmp	r4, r3
 c0066ba:	d101      	bne.n	c0066c0 <setvbuf+0xfc>
 c0066bc:	68bc      	ldr	r4, [r7, #8]
 c0066be:	e793      	b.n	c0065e8 <setvbuf+0x24>
 c0066c0:	4b21      	ldr	r3, [pc, #132]	; (c006748 <setvbuf+0x184>)
 c0066c2:	429c      	cmp	r4, r3
 c0066c4:	bf08      	it	eq
 c0066c6:	68fc      	ldreq	r4, [r7, #12]
 c0066c8:	e78e      	b.n	c0065e8 <setvbuf+0x24>
 c0066ca:	2e00      	cmp	r6, #0
 c0066cc:	d0cd      	beq.n	c00666a <setvbuf+0xa6>
 c0066ce:	69bb      	ldr	r3, [r7, #24]
 c0066d0:	b913      	cbnz	r3, c0066d8 <setvbuf+0x114>
 c0066d2:	4638      	mov	r0, r7
 c0066d4:	f001 ffb6 	bl	c008644 <__sinit>
 c0066d8:	f1b8 0f01 	cmp.w	r8, #1
 c0066dc:	6026      	str	r6, [r4, #0]
 c0066de:	bf02      	ittt	eq
 c0066e0:	89a3      	ldrheq	r3, [r4, #12]
 c0066e2:	f043 0301 	orreq.w	r3, r3, #1
 c0066e6:	81a3      	strheq	r3, [r4, #12]
 c0066e8:	89a2      	ldrh	r2, [r4, #12]
 c0066ea:	f012 0308 	ands.w	r3, r2, #8
 c0066ee:	e9c4 6504 	strd	r6, r5, [r4, #16]
 c0066f2:	d01c      	beq.n	c00672e <setvbuf+0x16a>
 c0066f4:	07d3      	lsls	r3, r2, #31
 c0066f6:	bf45      	ittet	mi
 c0066f8:	2300      	movmi	r3, #0
 c0066fa:	426d      	negmi	r5, r5
 c0066fc:	60a5      	strpl	r5, [r4, #8]
 c0066fe:	60a3      	strmi	r3, [r4, #8]
 c006700:	bf48      	it	mi
 c006702:	61a5      	strmi	r5, [r4, #24]
 c006704:	6e65      	ldr	r5, [r4, #100]	; 0x64
 c006706:	f015 0501 	ands.w	r5, r5, #1
 c00670a:	d115      	bne.n	c006738 <setvbuf+0x174>
 c00670c:	f412 7f00 	tst.w	r2, #512	; 0x200
 c006710:	e7c9      	b.n	c0066a6 <setvbuf+0xe2>
 c006712:	4648      	mov	r0, r9
 c006714:	f002 fc2a 	bl	c008f6c <malloc>
 c006718:	4606      	mov	r6, r0
 c00671a:	2800      	cmp	r0, #0
 c00671c:	d0af      	beq.n	c00667e <setvbuf+0xba>
 c00671e:	464d      	mov	r5, r9
 c006720:	89a3      	ldrh	r3, [r4, #12]
 c006722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c006726:	81a3      	strh	r3, [r4, #12]
 c006728:	e7d1      	b.n	c0066ce <setvbuf+0x10a>
 c00672a:	2500      	movs	r5, #0
 c00672c:	e7a9      	b.n	c006682 <setvbuf+0xbe>
 c00672e:	60a3      	str	r3, [r4, #8]
 c006730:	e7e8      	b.n	c006704 <setvbuf+0x140>
 c006732:	f04f 35ff 	mov.w	r5, #4294967295
 c006736:	e7ba      	b.n	c0066ae <setvbuf+0xea>
 c006738:	2500      	movs	r5, #0
 c00673a:	e7b8      	b.n	c0066ae <setvbuf+0xea>
 c00673c:	30000010 	.word	0x30000010
 c006740:	0c00b1b4 	.word	0x0c00b1b4
 c006744:	0c00b1d4 	.word	0x0c00b1d4
 c006748:	0c00b194 	.word	0x0c00b194

0c00674c <nanf>:
 c00674c:	ed9f 0a01 	vldr	s0, [pc, #4]	; c006754 <nanf+0x8>
 c006750:	4770      	bx	lr
 c006752:	bf00      	nop
 c006754:	7fc00000 	.word	0x7fc00000

0c006758 <_raise_r>:
 c006758:	291f      	cmp	r1, #31
 c00675a:	b538      	push	{r3, r4, r5, lr}
 c00675c:	4604      	mov	r4, r0
 c00675e:	460d      	mov	r5, r1
 c006760:	d904      	bls.n	c00676c <_raise_r+0x14>
 c006762:	2316      	movs	r3, #22
 c006764:	6003      	str	r3, [r0, #0]
 c006766:	f04f 30ff 	mov.w	r0, #4294967295
 c00676a:	bd38      	pop	{r3, r4, r5, pc}
 c00676c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 c00676e:	b112      	cbz	r2, c006776 <_raise_r+0x1e>
 c006770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 c006774:	b94b      	cbnz	r3, c00678a <_raise_r+0x32>
 c006776:	4620      	mov	r0, r4
 c006778:	f000 f830 	bl	c0067dc <_getpid_r>
 c00677c:	462a      	mov	r2, r5
 c00677e:	4601      	mov	r1, r0
 c006780:	4620      	mov	r0, r4
 c006782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 c006786:	f000 b817 	b.w	c0067b8 <_kill_r>
 c00678a:	2b01      	cmp	r3, #1
 c00678c:	d00a      	beq.n	c0067a4 <_raise_r+0x4c>
 c00678e:	1c59      	adds	r1, r3, #1
 c006790:	d103      	bne.n	c00679a <_raise_r+0x42>
 c006792:	2316      	movs	r3, #22
 c006794:	6003      	str	r3, [r0, #0]
 c006796:	2001      	movs	r0, #1
 c006798:	e7e7      	b.n	c00676a <_raise_r+0x12>
 c00679a:	2400      	movs	r4, #0
 c00679c:	4628      	mov	r0, r5
 c00679e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 c0067a2:	4798      	blx	r3
 c0067a4:	2000      	movs	r0, #0
 c0067a6:	e7e0      	b.n	c00676a <_raise_r+0x12>

0c0067a8 <raise>:
 c0067a8:	4b02      	ldr	r3, [pc, #8]	; (c0067b4 <raise+0xc>)
 c0067aa:	4601      	mov	r1, r0
 c0067ac:	6818      	ldr	r0, [r3, #0]
 c0067ae:	f7ff bfd3 	b.w	c006758 <_raise_r>
 c0067b2:	bf00      	nop
 c0067b4:	30000010 	.word	0x30000010

0c0067b8 <_kill_r>:
 c0067b8:	b538      	push	{r3, r4, r5, lr}
 c0067ba:	2300      	movs	r3, #0
 c0067bc:	4d06      	ldr	r5, [pc, #24]	; (c0067d8 <_kill_r+0x20>)
 c0067be:	4604      	mov	r4, r0
 c0067c0:	4608      	mov	r0, r1
 c0067c2:	4611      	mov	r1, r2
 c0067c4:	602b      	str	r3, [r5, #0]
 c0067c6:	f7fb fa15 	bl	c001bf4 <_kill>
 c0067ca:	1c43      	adds	r3, r0, #1
 c0067cc:	d102      	bne.n	c0067d4 <_kill_r+0x1c>
 c0067ce:	682b      	ldr	r3, [r5, #0]
 c0067d0:	b103      	cbz	r3, c0067d4 <_kill_r+0x1c>
 c0067d2:	6023      	str	r3, [r4, #0]
 c0067d4:	bd38      	pop	{r3, r4, r5, pc}
 c0067d6:	bf00      	nop
 c0067d8:	300002b0 	.word	0x300002b0

0c0067dc <_getpid_r>:
 c0067dc:	f7fb ba02 	b.w	c001be4 <_getpid>

0c0067e0 <siprintf>:
 c0067e0:	b40e      	push	{r1, r2, r3}
 c0067e2:	b500      	push	{lr}
 c0067e4:	b09c      	sub	sp, #112	; 0x70
 c0067e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 c0067ea:	ab1d      	add	r3, sp, #116	; 0x74
 c0067ec:	9002      	str	r0, [sp, #8]
 c0067ee:	9006      	str	r0, [sp, #24]
 c0067f0:	9107      	str	r1, [sp, #28]
 c0067f2:	9104      	str	r1, [sp, #16]
 c0067f4:	4808      	ldr	r0, [pc, #32]	; (c006818 <siprintf+0x38>)
 c0067f6:	4909      	ldr	r1, [pc, #36]	; (c00681c <siprintf+0x3c>)
 c0067f8:	f853 2b04 	ldr.w	r2, [r3], #4
 c0067fc:	9105      	str	r1, [sp, #20]
 c0067fe:	a902      	add	r1, sp, #8
 c006800:	6800      	ldr	r0, [r0, #0]
 c006802:	9301      	str	r3, [sp, #4]
 c006804:	f003 fa00 	bl	c009c08 <_svfiprintf_r>
 c006808:	9b02      	ldr	r3, [sp, #8]
 c00680a:	2200      	movs	r2, #0
 c00680c:	701a      	strb	r2, [r3, #0]
 c00680e:	b01c      	add	sp, #112	; 0x70
 c006810:	f85d eb04 	ldr.w	lr, [sp], #4
 c006814:	b003      	add	sp, #12
 c006816:	4770      	bx	lr
 c006818:	30000010 	.word	0x30000010
 c00681c:	ffff0208 	.word	0xffff0208

0c006820 <sulp>:
 c006820:	b570      	push	{r4, r5, r6, lr}
 c006822:	4604      	mov	r4, r0
 c006824:	460d      	mov	r5, r1
 c006826:	4616      	mov	r6, r2
 c006828:	ec45 4b10 	vmov	d0, r4, r5
 c00682c:	f002 ff4c 	bl	c0096c8 <__ulp>
 c006830:	ec51 0b10 	vmov	r0, r1, d0
 c006834:	b17e      	cbz	r6, c006856 <sulp+0x36>
 c006836:	f3c5 530a 	ubfx	r3, r5, #20, #11
 c00683a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 c00683e:	2b00      	cmp	r3, #0
 c006840:	dd09      	ble.n	c006856 <sulp+0x36>
 c006842:	051b      	lsls	r3, r3, #20
 c006844:	2400      	movs	r4, #0
 c006846:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 c00684a:	4622      	mov	r2, r4
 c00684c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 c006850:	462b      	mov	r3, r5
 c006852:	f7f9 ff57 	bl	c000704 <__aeabi_dmul>
 c006856:	bd70      	pop	{r4, r5, r6, pc}

0c006858 <_strtod_l>:
 c006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c00685c:	461f      	mov	r7, r3
 c00685e:	2300      	movs	r3, #0
 c006860:	4604      	mov	r4, r0
 c006862:	4688      	mov	r8, r1
 c006864:	f04f 0a00 	mov.w	sl, #0
 c006868:	f04f 0b00 	mov.w	fp, #0
 c00686c:	ed2d 8b02 	vpush	{d8}
 c006870:	b09d      	sub	sp, #116	; 0x74
 c006872:	9318      	str	r3, [sp, #96]	; 0x60
 c006874:	4b9f      	ldr	r3, [pc, #636]	; (c006af4 <_strtod_l+0x29c>)
 c006876:	9213      	str	r2, [sp, #76]	; 0x4c
 c006878:	681b      	ldr	r3, [r3, #0]
 c00687a:	4618      	mov	r0, r3
 c00687c:	9305      	str	r3, [sp, #20]
 c00687e:	f7f9 fcdb 	bl	c000238 <strlen>
 c006882:	4605      	mov	r5, r0
 c006884:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 c006888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 c00688a:	781a      	ldrb	r2, [r3, #0]
 c00688c:	2a2b      	cmp	r2, #43	; 0x2b
 c00688e:	d04e      	beq.n	c00692e <_strtod_l+0xd6>
 c006890:	d83b      	bhi.n	c00690a <_strtod_l+0xb2>
 c006892:	2a0d      	cmp	r2, #13
 c006894:	d834      	bhi.n	c006900 <_strtod_l+0xa8>
 c006896:	2a08      	cmp	r2, #8
 c006898:	d834      	bhi.n	c006904 <_strtod_l+0xac>
 c00689a:	2a00      	cmp	r2, #0
 c00689c:	d03e      	beq.n	c00691c <_strtod_l+0xc4>
 c00689e:	2300      	movs	r3, #0
 c0068a0:	930a      	str	r3, [sp, #40]	; 0x28
 c0068a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 c0068a4:	7833      	ldrb	r3, [r6, #0]
 c0068a6:	2b30      	cmp	r3, #48	; 0x30
 c0068a8:	f040 80b0 	bne.w	c006a0c <_strtod_l+0x1b4>
 c0068ac:	7873      	ldrb	r3, [r6, #1]
 c0068ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 c0068b2:	2b58      	cmp	r3, #88	; 0x58
 c0068b4:	d168      	bne.n	c006988 <_strtod_l+0x130>
 c0068b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c0068b8:	a917      	add	r1, sp, #92	; 0x5c
 c0068ba:	9702      	str	r7, [sp, #8]
 c0068bc:	4620      	mov	r0, r4
 c0068be:	9301      	str	r3, [sp, #4]
 c0068c0:	ab18      	add	r3, sp, #96	; 0x60
 c0068c2:	4a8d      	ldr	r2, [pc, #564]	; (c006af8 <_strtod_l+0x2a0>)
 c0068c4:	9300      	str	r3, [sp, #0]
 c0068c6:	ab19      	add	r3, sp, #100	; 0x64
 c0068c8:	f001 ffdc 	bl	c008884 <__gethex>
 c0068cc:	f010 0707 	ands.w	r7, r0, #7
 c0068d0:	4605      	mov	r5, r0
 c0068d2:	d005      	beq.n	c0068e0 <_strtod_l+0x88>
 c0068d4:	2f06      	cmp	r7, #6
 c0068d6:	d12c      	bne.n	c006932 <_strtod_l+0xda>
 c0068d8:	3601      	adds	r6, #1
 c0068da:	2300      	movs	r3, #0
 c0068dc:	9617      	str	r6, [sp, #92]	; 0x5c
 c0068de:	930a      	str	r3, [sp, #40]	; 0x28
 c0068e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 c0068e2:	2b00      	cmp	r3, #0
 c0068e4:	f040 858e 	bne.w	c007404 <_strtod_l+0xbac>
 c0068e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c0068ea:	b1eb      	cbz	r3, c006928 <_strtod_l+0xd0>
 c0068ec:	4652      	mov	r2, sl
 c0068ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 c0068f2:	ec43 2b10 	vmov	d0, r2, r3
 c0068f6:	b01d      	add	sp, #116	; 0x74
 c0068f8:	ecbd 8b02 	vpop	{d8}
 c0068fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c006900:	2a20      	cmp	r2, #32
 c006902:	d1cc      	bne.n	c00689e <_strtod_l+0x46>
 c006904:	3301      	adds	r3, #1
 c006906:	9317      	str	r3, [sp, #92]	; 0x5c
 c006908:	e7be      	b.n	c006888 <_strtod_l+0x30>
 c00690a:	2a2d      	cmp	r2, #45	; 0x2d
 c00690c:	d1c7      	bne.n	c00689e <_strtod_l+0x46>
 c00690e:	2201      	movs	r2, #1
 c006910:	920a      	str	r2, [sp, #40]	; 0x28
 c006912:	1c5a      	adds	r2, r3, #1
 c006914:	9217      	str	r2, [sp, #92]	; 0x5c
 c006916:	785b      	ldrb	r3, [r3, #1]
 c006918:	2b00      	cmp	r3, #0
 c00691a:	d1c2      	bne.n	c0068a2 <_strtod_l+0x4a>
 c00691c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 c00691e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 c006922:	2b00      	cmp	r3, #0
 c006924:	f040 856c 	bne.w	c007400 <_strtod_l+0xba8>
 c006928:	4652      	mov	r2, sl
 c00692a:	465b      	mov	r3, fp
 c00692c:	e7e1      	b.n	c0068f2 <_strtod_l+0x9a>
 c00692e:	2200      	movs	r2, #0
 c006930:	e7ee      	b.n	c006910 <_strtod_l+0xb8>
 c006932:	9a18      	ldr	r2, [sp, #96]	; 0x60
 c006934:	b13a      	cbz	r2, c006946 <_strtod_l+0xee>
 c006936:	2135      	movs	r1, #53	; 0x35
 c006938:	a81a      	add	r0, sp, #104	; 0x68
 c00693a:	f002 ffce 	bl	c0098da <__copybits>
 c00693e:	9918      	ldr	r1, [sp, #96]	; 0x60
 c006940:	4620      	mov	r0, r4
 c006942:	f002 fb89 	bl	c009058 <_Bfree>
 c006946:	3f01      	subs	r7, #1
 c006948:	2f04      	cmp	r7, #4
 c00694a:	d806      	bhi.n	c00695a <_strtod_l+0x102>
 c00694c:	e8df f007 	tbb	[pc, r7]
 c006950:	1714030a 	.word	0x1714030a
 c006954:	0a          	.byte	0x0a
 c006955:	00          	.byte	0x00
 c006956:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 c00695a:	0728      	lsls	r0, r5, #28
 c00695c:	d5c0      	bpl.n	c0068e0 <_strtod_l+0x88>
 c00695e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 c006962:	e7bd      	b.n	c0068e0 <_strtod_l+0x88>
 c006964:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 c006968:	9a19      	ldr	r2, [sp, #100]	; 0x64
 c00696a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c00696e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 c006972:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 c006976:	e7f0      	b.n	c00695a <_strtod_l+0x102>
 c006978:	f8df b180 	ldr.w	fp, [pc, #384]	; c006afc <_strtod_l+0x2a4>
 c00697c:	e7ed      	b.n	c00695a <_strtod_l+0x102>
 c00697e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 c006982:	f04f 3aff 	mov.w	sl, #4294967295
 c006986:	e7e8      	b.n	c00695a <_strtod_l+0x102>
 c006988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 c00698a:	1c5a      	adds	r2, r3, #1
 c00698c:	9217      	str	r2, [sp, #92]	; 0x5c
 c00698e:	785b      	ldrb	r3, [r3, #1]
 c006990:	2b30      	cmp	r3, #48	; 0x30
 c006992:	d0f9      	beq.n	c006988 <_strtod_l+0x130>
 c006994:	2b00      	cmp	r3, #0
 c006996:	d0a3      	beq.n	c0068e0 <_strtod_l+0x88>
 c006998:	2301      	movs	r3, #1
 c00699a:	f04f 0900 	mov.w	r9, #0
 c00699e:	9304      	str	r3, [sp, #16]
 c0069a0:	220a      	movs	r2, #10
 c0069a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 c0069a4:	464f      	mov	r7, r9
 c0069a6:	f8cd 901c 	str.w	r9, [sp, #28]
 c0069aa:	9308      	str	r3, [sp, #32]
 c0069ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 c0069ae:	7806      	ldrb	r6, [r0, #0]
 c0069b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 c0069b4:	b2d9      	uxtb	r1, r3
 c0069b6:	2909      	cmp	r1, #9
 c0069b8:	d92a      	bls.n	c006a10 <_strtod_l+0x1b8>
 c0069ba:	462a      	mov	r2, r5
 c0069bc:	9905      	ldr	r1, [sp, #20]
 c0069be:	f003 ffc6 	bl	c00a94e <strncmp>
 c0069c2:	b3a0      	cbz	r0, c006a2e <_strtod_l+0x1d6>
 c0069c4:	2000      	movs	r0, #0
 c0069c6:	4632      	mov	r2, r6
 c0069c8:	463d      	mov	r5, r7
 c0069ca:	4603      	mov	r3, r0
 c0069cc:	9005      	str	r0, [sp, #20]
 c0069ce:	2a65      	cmp	r2, #101	; 0x65
 c0069d0:	d001      	beq.n	c0069d6 <_strtod_l+0x17e>
 c0069d2:	2a45      	cmp	r2, #69	; 0x45
 c0069d4:	d118      	bne.n	c006a08 <_strtod_l+0x1b0>
 c0069d6:	b91d      	cbnz	r5, c0069e0 <_strtod_l+0x188>
 c0069d8:	9a04      	ldr	r2, [sp, #16]
 c0069da:	4302      	orrs	r2, r0
 c0069dc:	d09e      	beq.n	c00691c <_strtod_l+0xc4>
 c0069de:	2500      	movs	r5, #0
 c0069e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 c0069e4:	f108 0201 	add.w	r2, r8, #1
 c0069e8:	9217      	str	r2, [sp, #92]	; 0x5c
 c0069ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 c0069ee:	2a2b      	cmp	r2, #43	; 0x2b
 c0069f0:	d075      	beq.n	c006ade <_strtod_l+0x286>
 c0069f2:	2a2d      	cmp	r2, #45	; 0x2d
 c0069f4:	d07b      	beq.n	c006aee <_strtod_l+0x296>
 c0069f6:	f04f 0c00 	mov.w	ip, #0
 c0069fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 c0069fe:	2909      	cmp	r1, #9
 c006a00:	f240 8082 	bls.w	c006b08 <_strtod_l+0x2b0>
 c006a04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 c006a08:	2600      	movs	r6, #0
 c006a0a:	e09d      	b.n	c006b48 <_strtod_l+0x2f0>
 c006a0c:	2300      	movs	r3, #0
 c006a0e:	e7c4      	b.n	c00699a <_strtod_l+0x142>
 c006a10:	2f08      	cmp	r7, #8
 c006a12:	f100 0001 	add.w	r0, r0, #1
 c006a16:	f107 0701 	add.w	r7, r7, #1
 c006a1a:	bfd4      	ite	le
 c006a1c:	9907      	ldrle	r1, [sp, #28]
 c006a1e:	fb02 3909 	mlagt	r9, r2, r9, r3
 c006a22:	9017      	str	r0, [sp, #92]	; 0x5c
 c006a24:	bfdc      	itt	le
 c006a26:	fb02 3301 	mlale	r3, r2, r1, r3
 c006a2a:	9307      	strle	r3, [sp, #28]
 c006a2c:	e7be      	b.n	c0069ac <_strtod_l+0x154>
 c006a2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 c006a30:	195a      	adds	r2, r3, r5
 c006a32:	9217      	str	r2, [sp, #92]	; 0x5c
 c006a34:	5d5a      	ldrb	r2, [r3, r5]
 c006a36:	2f00      	cmp	r7, #0
 c006a38:	d036      	beq.n	c006aa8 <_strtod_l+0x250>
 c006a3a:	463d      	mov	r5, r7
 c006a3c:	9005      	str	r0, [sp, #20]
 c006a3e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 c006a42:	2b09      	cmp	r3, #9
 c006a44:	d912      	bls.n	c006a6c <_strtod_l+0x214>
 c006a46:	2301      	movs	r3, #1
 c006a48:	e7c1      	b.n	c0069ce <_strtod_l+0x176>
 c006a4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 c006a4c:	3001      	adds	r0, #1
 c006a4e:	1c5a      	adds	r2, r3, #1
 c006a50:	9217      	str	r2, [sp, #92]	; 0x5c
 c006a52:	785a      	ldrb	r2, [r3, #1]
 c006a54:	2a30      	cmp	r2, #48	; 0x30
 c006a56:	d0f8      	beq.n	c006a4a <_strtod_l+0x1f2>
 c006a58:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 c006a5c:	2b08      	cmp	r3, #8
 c006a5e:	f200 84d6 	bhi.w	c00740e <_strtod_l+0xbb6>
 c006a62:	9005      	str	r0, [sp, #20]
 c006a64:	2000      	movs	r0, #0
 c006a66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 c006a68:	4605      	mov	r5, r0
 c006a6a:	9308      	str	r3, [sp, #32]
 c006a6c:	3a30      	subs	r2, #48	; 0x30
 c006a6e:	f100 0301 	add.w	r3, r0, #1
 c006a72:	d013      	beq.n	c006a9c <_strtod_l+0x244>
 c006a74:	9905      	ldr	r1, [sp, #20]
 c006a76:	eb00 0e05 	add.w	lr, r0, r5
 c006a7a:	4419      	add	r1, r3
 c006a7c:	462b      	mov	r3, r5
 c006a7e:	9105      	str	r1, [sp, #20]
 c006a80:	210a      	movs	r1, #10
 c006a82:	4573      	cmp	r3, lr
 c006a84:	d112      	bne.n	c006aac <_strtod_l+0x254>
 c006a86:	182b      	adds	r3, r5, r0
 c006a88:	3501      	adds	r5, #1
 c006a8a:	2b08      	cmp	r3, #8
 c006a8c:	4405      	add	r5, r0
 c006a8e:	dc1c      	bgt.n	c006aca <_strtod_l+0x272>
 c006a90:	9907      	ldr	r1, [sp, #28]
 c006a92:	230a      	movs	r3, #10
 c006a94:	fb03 2301 	mla	r3, r3, r1, r2
 c006a98:	9307      	str	r3, [sp, #28]
 c006a9a:	2300      	movs	r3, #0
 c006a9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 c006a9e:	4618      	mov	r0, r3
 c006aa0:	1c51      	adds	r1, r2, #1
 c006aa2:	9117      	str	r1, [sp, #92]	; 0x5c
 c006aa4:	7852      	ldrb	r2, [r2, #1]
 c006aa6:	e7ca      	b.n	c006a3e <_strtod_l+0x1e6>
 c006aa8:	4638      	mov	r0, r7
 c006aaa:	e7d3      	b.n	c006a54 <_strtod_l+0x1fc>
 c006aac:	2b08      	cmp	r3, #8
 c006aae:	dc04      	bgt.n	c006aba <_strtod_l+0x262>
 c006ab0:	9e07      	ldr	r6, [sp, #28]
 c006ab2:	434e      	muls	r6, r1
 c006ab4:	9607      	str	r6, [sp, #28]
 c006ab6:	3301      	adds	r3, #1
 c006ab8:	e7e3      	b.n	c006a82 <_strtod_l+0x22a>
 c006aba:	f103 0c01 	add.w	ip, r3, #1
 c006abe:	f1bc 0f10 	cmp.w	ip, #16
 c006ac2:	bfd8      	it	le
 c006ac4:	fb01 f909 	mulle.w	r9, r1, r9
 c006ac8:	e7f5      	b.n	c006ab6 <_strtod_l+0x25e>
 c006aca:	2d10      	cmp	r5, #16
 c006acc:	bfdc      	itt	le
 c006ace:	230a      	movle	r3, #10
 c006ad0:	fb03 2909 	mlale	r9, r3, r9, r2
 c006ad4:	e7e1      	b.n	c006a9a <_strtod_l+0x242>
 c006ad6:	2300      	movs	r3, #0
 c006ad8:	9305      	str	r3, [sp, #20]
 c006ada:	2301      	movs	r3, #1
 c006adc:	e77c      	b.n	c0069d8 <_strtod_l+0x180>
 c006ade:	f04f 0c00 	mov.w	ip, #0
 c006ae2:	f108 0202 	add.w	r2, r8, #2
 c006ae6:	9217      	str	r2, [sp, #92]	; 0x5c
 c006ae8:	f898 2002 	ldrb.w	r2, [r8, #2]
 c006aec:	e785      	b.n	c0069fa <_strtod_l+0x1a2>
 c006aee:	f04f 0c01 	mov.w	ip, #1
 c006af2:	e7f6      	b.n	c006ae2 <_strtod_l+0x28a>
 c006af4:	0c00b25c 	.word	0x0c00b25c
 c006af8:	0c00afb0 	.word	0x0c00afb0
 c006afc:	7ff00000 	.word	0x7ff00000
 c006b00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 c006b02:	1c51      	adds	r1, r2, #1
 c006b04:	9117      	str	r1, [sp, #92]	; 0x5c
 c006b06:	7852      	ldrb	r2, [r2, #1]
 c006b08:	2a30      	cmp	r2, #48	; 0x30
 c006b0a:	d0f9      	beq.n	c006b00 <_strtod_l+0x2a8>
 c006b0c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 c006b10:	2908      	cmp	r1, #8
 c006b12:	f63f af79 	bhi.w	c006a08 <_strtod_l+0x1b0>
 c006b16:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 c006b1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 c006b1c:	9206      	str	r2, [sp, #24]
 c006b1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 c006b20:	1c51      	adds	r1, r2, #1
 c006b22:	9117      	str	r1, [sp, #92]	; 0x5c
 c006b24:	7852      	ldrb	r2, [r2, #1]
 c006b26:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 c006b2a:	2e09      	cmp	r6, #9
 c006b2c:	d937      	bls.n	c006b9e <_strtod_l+0x346>
 c006b2e:	9e06      	ldr	r6, [sp, #24]
 c006b30:	1b89      	subs	r1, r1, r6
 c006b32:	f644 661f 	movw	r6, #19999	; 0x4e1f
 c006b36:	2908      	cmp	r1, #8
 c006b38:	dc02      	bgt.n	c006b40 <_strtod_l+0x2e8>
 c006b3a:	4576      	cmp	r6, lr
 c006b3c:	bfa8      	it	ge
 c006b3e:	4676      	movge	r6, lr
 c006b40:	f1bc 0f00 	cmp.w	ip, #0
 c006b44:	d000      	beq.n	c006b48 <_strtod_l+0x2f0>
 c006b46:	4276      	negs	r6, r6
 c006b48:	2d00      	cmp	r5, #0
 c006b4a:	d14d      	bne.n	c006be8 <_strtod_l+0x390>
 c006b4c:	9904      	ldr	r1, [sp, #16]
 c006b4e:	4301      	orrs	r1, r0
 c006b50:	f47f aec6 	bne.w	c0068e0 <_strtod_l+0x88>
 c006b54:	2b00      	cmp	r3, #0
 c006b56:	f47f aee1 	bne.w	c00691c <_strtod_l+0xc4>
 c006b5a:	2a69      	cmp	r2, #105	; 0x69
 c006b5c:	d027      	beq.n	c006bae <_strtod_l+0x356>
 c006b5e:	dc24      	bgt.n	c006baa <_strtod_l+0x352>
 c006b60:	2a49      	cmp	r2, #73	; 0x49
 c006b62:	d024      	beq.n	c006bae <_strtod_l+0x356>
 c006b64:	2a4e      	cmp	r2, #78	; 0x4e
 c006b66:	f47f aed9 	bne.w	c00691c <_strtod_l+0xc4>
 c006b6a:	499f      	ldr	r1, [pc, #636]	; (c006de8 <_strtod_l+0x590>)
 c006b6c:	a817      	add	r0, sp, #92	; 0x5c
 c006b6e:	f002 f8e1 	bl	c008d34 <__match>
 c006b72:	2800      	cmp	r0, #0
 c006b74:	f43f aed2 	beq.w	c00691c <_strtod_l+0xc4>
 c006b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 c006b7a:	781b      	ldrb	r3, [r3, #0]
 c006b7c:	2b28      	cmp	r3, #40	; 0x28
 c006b7e:	d12d      	bne.n	c006bdc <_strtod_l+0x384>
 c006b80:	aa1a      	add	r2, sp, #104	; 0x68
 c006b82:	499a      	ldr	r1, [pc, #616]	; (c006dec <_strtod_l+0x594>)
 c006b84:	a817      	add	r0, sp, #92	; 0x5c
 c006b86:	f002 f8e9 	bl	c008d5c <__hexnan>
 c006b8a:	2805      	cmp	r0, #5
 c006b8c:	d126      	bne.n	c006bdc <_strtod_l+0x384>
 c006b8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 c006b90:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 c006b94:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 c006b98:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 c006b9c:	e6a0      	b.n	c0068e0 <_strtod_l+0x88>
 c006b9e:	210a      	movs	r1, #10
 c006ba0:	fb01 2e0e 	mla	lr, r1, lr, r2
 c006ba4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 c006ba8:	e7b9      	b.n	c006b1e <_strtod_l+0x2c6>
 c006baa:	2a6e      	cmp	r2, #110	; 0x6e
 c006bac:	e7db      	b.n	c006b66 <_strtod_l+0x30e>
 c006bae:	4990      	ldr	r1, [pc, #576]	; (c006df0 <_strtod_l+0x598>)
 c006bb0:	a817      	add	r0, sp, #92	; 0x5c
 c006bb2:	f002 f8bf 	bl	c008d34 <__match>
 c006bb6:	2800      	cmp	r0, #0
 c006bb8:	f43f aeb0 	beq.w	c00691c <_strtod_l+0xc4>
 c006bbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 c006bbe:	a817      	add	r0, sp, #92	; 0x5c
 c006bc0:	498c      	ldr	r1, [pc, #560]	; (c006df4 <_strtod_l+0x59c>)
 c006bc2:	3b01      	subs	r3, #1
 c006bc4:	9317      	str	r3, [sp, #92]	; 0x5c
 c006bc6:	f002 f8b5 	bl	c008d34 <__match>
 c006bca:	b910      	cbnz	r0, c006bd2 <_strtod_l+0x37a>
 c006bcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 c006bce:	3301      	adds	r3, #1
 c006bd0:	9317      	str	r3, [sp, #92]	; 0x5c
 c006bd2:	f8df b230 	ldr.w	fp, [pc, #560]	; c006e04 <_strtod_l+0x5ac>
 c006bd6:	f04f 0a00 	mov.w	sl, #0
 c006bda:	e681      	b.n	c0068e0 <_strtod_l+0x88>
 c006bdc:	4886      	ldr	r0, [pc, #536]	; (c006df8 <_strtod_l+0x5a0>)
 c006bde:	f003 fe23 	bl	c00a828 <nan>
 c006be2:	ec5b ab10 	vmov	sl, fp, d0
 c006be6:	e67b      	b.n	c0068e0 <_strtod_l+0x88>
 c006be8:	9b05      	ldr	r3, [sp, #20]
 c006bea:	2f00      	cmp	r7, #0
 c006bec:	bf08      	it	eq
 c006bee:	462f      	moveq	r7, r5
 c006bf0:	2d10      	cmp	r5, #16
 c006bf2:	9807      	ldr	r0, [sp, #28]
 c006bf4:	eba6 0303 	sub.w	r3, r6, r3
 c006bf8:	46a8      	mov	r8, r5
 c006bfa:	bfa8      	it	ge
 c006bfc:	f04f 0810 	movge.w	r8, #16
 c006c00:	9306      	str	r3, [sp, #24]
 c006c02:	f7f9 fd05 	bl	c000610 <__aeabi_ui2d>
 c006c06:	2d09      	cmp	r5, #9
 c006c08:	4682      	mov	sl, r0
 c006c0a:	468b      	mov	fp, r1
 c006c0c:	dd13      	ble.n	c006c36 <_strtod_l+0x3de>
 c006c0e:	4b7b      	ldr	r3, [pc, #492]	; (c006dfc <_strtod_l+0x5a4>)
 c006c10:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 c006c14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 c006c18:	f7f9 fd74 	bl	c000704 <__aeabi_dmul>
 c006c1c:	4682      	mov	sl, r0
 c006c1e:	468b      	mov	fp, r1
 c006c20:	4648      	mov	r0, r9
 c006c22:	f7f9 fcf5 	bl	c000610 <__aeabi_ui2d>
 c006c26:	4602      	mov	r2, r0
 c006c28:	460b      	mov	r3, r1
 c006c2a:	4650      	mov	r0, sl
 c006c2c:	4659      	mov	r1, fp
 c006c2e:	f7f9 fbb3 	bl	c000398 <__adddf3>
 c006c32:	4682      	mov	sl, r0
 c006c34:	468b      	mov	fp, r1
 c006c36:	2d0f      	cmp	r5, #15
 c006c38:	dc38      	bgt.n	c006cac <_strtod_l+0x454>
 c006c3a:	9b06      	ldr	r3, [sp, #24]
 c006c3c:	2b00      	cmp	r3, #0
 c006c3e:	f43f ae4f 	beq.w	c0068e0 <_strtod_l+0x88>
 c006c42:	dd24      	ble.n	c006c8e <_strtod_l+0x436>
 c006c44:	2b16      	cmp	r3, #22
 c006c46:	dc0b      	bgt.n	c006c60 <_strtod_l+0x408>
 c006c48:	496c      	ldr	r1, [pc, #432]	; (c006dfc <_strtod_l+0x5a4>)
 c006c4a:	4652      	mov	r2, sl
 c006c4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 c006c50:	465b      	mov	r3, fp
 c006c52:	e9d1 0100 	ldrd	r0, r1, [r1]
 c006c56:	f7f9 fd55 	bl	c000704 <__aeabi_dmul>
 c006c5a:	4682      	mov	sl, r0
 c006c5c:	468b      	mov	fp, r1
 c006c5e:	e63f      	b.n	c0068e0 <_strtod_l+0x88>
 c006c60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 c006c64:	9a06      	ldr	r2, [sp, #24]
 c006c66:	4293      	cmp	r3, r2
 c006c68:	db20      	blt.n	c006cac <_strtod_l+0x454>
 c006c6a:	f1c5 050f 	rsb	r5, r5, #15
 c006c6e:	4c63      	ldr	r4, [pc, #396]	; (c006dfc <_strtod_l+0x5a4>)
 c006c70:	4652      	mov	r2, sl
 c006c72:	465b      	mov	r3, fp
 c006c74:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 c006c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 c006c7c:	f7f9 fd42 	bl	c000704 <__aeabi_dmul>
 c006c80:	9b06      	ldr	r3, [sp, #24]
 c006c82:	1b5d      	subs	r5, r3, r5
 c006c84:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 c006c88:	e9d4 2300 	ldrd	r2, r3, [r4]
 c006c8c:	e7e3      	b.n	c006c56 <_strtod_l+0x3fe>
 c006c8e:	9b06      	ldr	r3, [sp, #24]
 c006c90:	3316      	adds	r3, #22
 c006c92:	db0b      	blt.n	c006cac <_strtod_l+0x454>
 c006c94:	9b05      	ldr	r3, [sp, #20]
 c006c96:	4650      	mov	r0, sl
 c006c98:	4659      	mov	r1, fp
 c006c9a:	1b9e      	subs	r6, r3, r6
 c006c9c:	4b57      	ldr	r3, [pc, #348]	; (c006dfc <_strtod_l+0x5a4>)
 c006c9e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 c006ca2:	e9d6 2300 	ldrd	r2, r3, [r6]
 c006ca6:	f7f9 fe57 	bl	c000958 <__aeabi_ddiv>
 c006caa:	e7d6      	b.n	c006c5a <_strtod_l+0x402>
 c006cac:	eba5 0808 	sub.w	r8, r5, r8
 c006cb0:	9b06      	ldr	r3, [sp, #24]
 c006cb2:	4498      	add	r8, r3
 c006cb4:	f1b8 0f00 	cmp.w	r8, #0
 c006cb8:	dd74      	ble.n	c006da4 <_strtod_l+0x54c>
 c006cba:	f018 030f 	ands.w	r3, r8, #15
 c006cbe:	d00a      	beq.n	c006cd6 <_strtod_l+0x47e>
 c006cc0:	494e      	ldr	r1, [pc, #312]	; (c006dfc <_strtod_l+0x5a4>)
 c006cc2:	4652      	mov	r2, sl
 c006cc4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 c006cc8:	465b      	mov	r3, fp
 c006cca:	e9d1 0100 	ldrd	r0, r1, [r1]
 c006cce:	f7f9 fd19 	bl	c000704 <__aeabi_dmul>
 c006cd2:	4682      	mov	sl, r0
 c006cd4:	468b      	mov	fp, r1
 c006cd6:	f038 080f 	bics.w	r8, r8, #15
 c006cda:	d04f      	beq.n	c006d7c <_strtod_l+0x524>
 c006cdc:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 c006ce0:	dd22      	ble.n	c006d28 <_strtod_l+0x4d0>
 c006ce2:	2500      	movs	r5, #0
 c006ce4:	462e      	mov	r6, r5
 c006ce6:	9507      	str	r5, [sp, #28]
 c006ce8:	9505      	str	r5, [sp, #20]
 c006cea:	2322      	movs	r3, #34	; 0x22
 c006cec:	f8df b114 	ldr.w	fp, [pc, #276]	; c006e04 <_strtod_l+0x5ac>
 c006cf0:	f04f 0a00 	mov.w	sl, #0
 c006cf4:	6023      	str	r3, [r4, #0]
 c006cf6:	9b07      	ldr	r3, [sp, #28]
 c006cf8:	2b00      	cmp	r3, #0
 c006cfa:	f43f adf1 	beq.w	c0068e0 <_strtod_l+0x88>
 c006cfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 c006d00:	4620      	mov	r0, r4
 c006d02:	f002 f9a9 	bl	c009058 <_Bfree>
 c006d06:	9905      	ldr	r1, [sp, #20]
 c006d08:	4620      	mov	r0, r4
 c006d0a:	f002 f9a5 	bl	c009058 <_Bfree>
 c006d0e:	4631      	mov	r1, r6
 c006d10:	4620      	mov	r0, r4
 c006d12:	f002 f9a1 	bl	c009058 <_Bfree>
 c006d16:	9907      	ldr	r1, [sp, #28]
 c006d18:	4620      	mov	r0, r4
 c006d1a:	f002 f99d 	bl	c009058 <_Bfree>
 c006d1e:	4629      	mov	r1, r5
 c006d20:	4620      	mov	r0, r4
 c006d22:	f002 f999 	bl	c009058 <_Bfree>
 c006d26:	e5db      	b.n	c0068e0 <_strtod_l+0x88>
 c006d28:	4b35      	ldr	r3, [pc, #212]	; (c006e00 <_strtod_l+0x5a8>)
 c006d2a:	ea4f 1828 	mov.w	r8, r8, asr #4
 c006d2e:	4650      	mov	r0, sl
 c006d30:	4659      	mov	r1, fp
 c006d32:	9304      	str	r3, [sp, #16]
 c006d34:	2300      	movs	r3, #0
 c006d36:	4699      	mov	r9, r3
 c006d38:	f1b8 0f01 	cmp.w	r8, #1
 c006d3c:	dc21      	bgt.n	c006d82 <_strtod_l+0x52a>
 c006d3e:	b10b      	cbz	r3, c006d44 <_strtod_l+0x4ec>
 c006d40:	4682      	mov	sl, r0
 c006d42:	468b      	mov	fp, r1
 c006d44:	4b2e      	ldr	r3, [pc, #184]	; (c006e00 <_strtod_l+0x5a8>)
 c006d46:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 c006d4a:	4652      	mov	r2, sl
 c006d4c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 c006d50:	465b      	mov	r3, fp
 c006d52:	e9d9 0100 	ldrd	r0, r1, [r9]
 c006d56:	f7f9 fcd5 	bl	c000704 <__aeabi_dmul>
 c006d5a:	4b2a      	ldr	r3, [pc, #168]	; (c006e04 <_strtod_l+0x5ac>)
 c006d5c:	460a      	mov	r2, r1
 c006d5e:	4682      	mov	sl, r0
 c006d60:	400b      	ands	r3, r1
 c006d62:	4929      	ldr	r1, [pc, #164]	; (c006e08 <_strtod_l+0x5b0>)
 c006d64:	428b      	cmp	r3, r1
 c006d66:	d8bc      	bhi.n	c006ce2 <_strtod_l+0x48a>
 c006d68:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 c006d6c:	428b      	cmp	r3, r1
 c006d6e:	bf86      	itte	hi
 c006d70:	f8df b098 	ldrhi.w	fp, [pc, #152]	; c006e0c <_strtod_l+0x5b4>
 c006d74:	f04f 3aff 	movhi.w	sl, #4294967295
 c006d78:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 c006d7c:	2300      	movs	r3, #0
 c006d7e:	9304      	str	r3, [sp, #16]
 c006d80:	e083      	b.n	c006e8a <_strtod_l+0x632>
 c006d82:	f018 0f01 	tst.w	r8, #1
 c006d86:	d005      	beq.n	c006d94 <_strtod_l+0x53c>
 c006d88:	9b04      	ldr	r3, [sp, #16]
 c006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c006d8e:	f7f9 fcb9 	bl	c000704 <__aeabi_dmul>
 c006d92:	2301      	movs	r3, #1
 c006d94:	9a04      	ldr	r2, [sp, #16]
 c006d96:	f109 0901 	add.w	r9, r9, #1
 c006d9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 c006d9e:	3208      	adds	r2, #8
 c006da0:	9204      	str	r2, [sp, #16]
 c006da2:	e7c9      	b.n	c006d38 <_strtod_l+0x4e0>
 c006da4:	d0ea      	beq.n	c006d7c <_strtod_l+0x524>
 c006da6:	f1c8 0800 	rsb	r8, r8, #0
 c006daa:	f018 020f 	ands.w	r2, r8, #15
 c006dae:	d00a      	beq.n	c006dc6 <_strtod_l+0x56e>
 c006db0:	4b12      	ldr	r3, [pc, #72]	; (c006dfc <_strtod_l+0x5a4>)
 c006db2:	4650      	mov	r0, sl
 c006db4:	4659      	mov	r1, fp
 c006db6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 c006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 c006dbe:	f7f9 fdcb 	bl	c000958 <__aeabi_ddiv>
 c006dc2:	4682      	mov	sl, r0
 c006dc4:	468b      	mov	fp, r1
 c006dc6:	ea5f 1828 	movs.w	r8, r8, asr #4
 c006dca:	d0d7      	beq.n	c006d7c <_strtod_l+0x524>
 c006dcc:	f1b8 0f1f 	cmp.w	r8, #31
 c006dd0:	dd1e      	ble.n	c006e10 <_strtod_l+0x5b8>
 c006dd2:	2500      	movs	r5, #0
 c006dd4:	462e      	mov	r6, r5
 c006dd6:	9507      	str	r5, [sp, #28]
 c006dd8:	9505      	str	r5, [sp, #20]
 c006dda:	2322      	movs	r3, #34	; 0x22
 c006ddc:	f04f 0a00 	mov.w	sl, #0
 c006de0:	f04f 0b00 	mov.w	fp, #0
 c006de4:	6023      	str	r3, [r4, #0]
 c006de6:	e786      	b.n	c006cf6 <_strtod_l+0x49e>
 c006de8:	0c00af85 	.word	0x0c00af85
 c006dec:	0c00afc4 	.word	0x0c00afc4
 c006df0:	0c00af7d 	.word	0x0c00af7d
 c006df4:	0c00b104 	.word	0x0c00b104
 c006df8:	0c00b433 	.word	0x0c00b433
 c006dfc:	0c00b2f8 	.word	0x0c00b2f8
 c006e00:	0c00b2d0 	.word	0x0c00b2d0
 c006e04:	7ff00000 	.word	0x7ff00000
 c006e08:	7ca00000 	.word	0x7ca00000
 c006e0c:	7fefffff 	.word	0x7fefffff
 c006e10:	f018 0310 	ands.w	r3, r8, #16
 c006e14:	4650      	mov	r0, sl
 c006e16:	4659      	mov	r1, fp
 c006e18:	f8df 93a8 	ldr.w	r9, [pc, #936]	; c0071c4 <_strtod_l+0x96c>
 c006e1c:	bf18      	it	ne
 c006e1e:	236a      	movne	r3, #106	; 0x6a
 c006e20:	9304      	str	r3, [sp, #16]
 c006e22:	2300      	movs	r3, #0
 c006e24:	f018 0f01 	tst.w	r8, #1
 c006e28:	d004      	beq.n	c006e34 <_strtod_l+0x5dc>
 c006e2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 c006e2e:	f7f9 fc69 	bl	c000704 <__aeabi_dmul>
 c006e32:	2301      	movs	r3, #1
 c006e34:	ea5f 0868 	movs.w	r8, r8, asr #1
 c006e38:	f109 0908 	add.w	r9, r9, #8
 c006e3c:	d1f2      	bne.n	c006e24 <_strtod_l+0x5cc>
 c006e3e:	b10b      	cbz	r3, c006e44 <_strtod_l+0x5ec>
 c006e40:	4682      	mov	sl, r0
 c006e42:	468b      	mov	fp, r1
 c006e44:	9b04      	ldr	r3, [sp, #16]
 c006e46:	b1c3      	cbz	r3, c006e7a <_strtod_l+0x622>
 c006e48:	f3cb 520a 	ubfx	r2, fp, #20, #11
 c006e4c:	4659      	mov	r1, fp
 c006e4e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 c006e52:	2b00      	cmp	r3, #0
 c006e54:	dd11      	ble.n	c006e7a <_strtod_l+0x622>
 c006e56:	2b1f      	cmp	r3, #31
 c006e58:	f340 8121 	ble.w	c00709e <_strtod_l+0x846>
 c006e5c:	2b34      	cmp	r3, #52	; 0x34
 c006e5e:	f04f 0a00 	mov.w	sl, #0
 c006e62:	bfdb      	ittet	le
 c006e64:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 c006e68:	f04f 33ff 	movle.w	r3, #4294967295
 c006e6c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 c006e70:	fa03 f202 	lslle.w	r2, r3, r2
 c006e74:	bfd8      	it	le
 c006e76:	ea02 0b01 	andle.w	fp, r2, r1
 c006e7a:	2200      	movs	r2, #0
 c006e7c:	2300      	movs	r3, #0
 c006e7e:	4650      	mov	r0, sl
 c006e80:	4659      	mov	r1, fp
 c006e82:	f7f9 fea7 	bl	c000bd4 <__aeabi_dcmpeq>
 c006e86:	2800      	cmp	r0, #0
 c006e88:	d1a3      	bne.n	c006dd2 <_strtod_l+0x57a>
 c006e8a:	9b07      	ldr	r3, [sp, #28]
 c006e8c:	463a      	mov	r2, r7
 c006e8e:	9908      	ldr	r1, [sp, #32]
 c006e90:	4620      	mov	r0, r4
 c006e92:	9300      	str	r3, [sp, #0]
 c006e94:	462b      	mov	r3, r5
 c006e96:	f002 f949 	bl	c00912c <__s2b>
 c006e9a:	9007      	str	r0, [sp, #28]
 c006e9c:	2800      	cmp	r0, #0
 c006e9e:	f43f af20 	beq.w	c006ce2 <_strtod_l+0x48a>
 c006ea2:	9b05      	ldr	r3, [sp, #20]
 c006ea4:	2500      	movs	r5, #0
 c006ea6:	1b9e      	subs	r6, r3, r6
 c006ea8:	9b06      	ldr	r3, [sp, #24]
 c006eaa:	2b00      	cmp	r3, #0
 c006eac:	bfb4      	ite	lt
 c006eae:	4633      	movlt	r3, r6
 c006eb0:	2300      	movge	r3, #0
 c006eb2:	462e      	mov	r6, r5
 c006eb4:	930c      	str	r3, [sp, #48]	; 0x30
 c006eb6:	9b06      	ldr	r3, [sp, #24]
 c006eb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 c006ebc:	9312      	str	r3, [sp, #72]	; 0x48
 c006ebe:	9b07      	ldr	r3, [sp, #28]
 c006ec0:	4620      	mov	r0, r4
 c006ec2:	6859      	ldr	r1, [r3, #4]
 c006ec4:	f002 f888 	bl	c008fd8 <_Balloc>
 c006ec8:	9005      	str	r0, [sp, #20]
 c006eca:	2800      	cmp	r0, #0
 c006ecc:	f43f af0d 	beq.w	c006cea <_strtod_l+0x492>
 c006ed0:	9b07      	ldr	r3, [sp, #28]
 c006ed2:	300c      	adds	r0, #12
 c006ed4:	691a      	ldr	r2, [r3, #16]
 c006ed6:	f103 010c 	add.w	r1, r3, #12
 c006eda:	3202      	adds	r2, #2
 c006edc:	0092      	lsls	r2, r2, #2
 c006ede:	f002 f86d 	bl	c008fbc <memcpy>
 c006ee2:	aa1a      	add	r2, sp, #104	; 0x68
 c006ee4:	a919      	add	r1, sp, #100	; 0x64
 c006ee6:	4620      	mov	r0, r4
 c006ee8:	ec4b ab10 	vmov	d0, sl, fp
 c006eec:	f002 fc66 	bl	c0097bc <__d2b>
 c006ef0:	9018      	str	r0, [sp, #96]	; 0x60
 c006ef2:	ec4b ab18 	vmov	d8, sl, fp
 c006ef6:	2800      	cmp	r0, #0
 c006ef8:	f43f aef7 	beq.w	c006cea <_strtod_l+0x492>
 c006efc:	2101      	movs	r1, #1
 c006efe:	4620      	mov	r0, r4
 c006f00:	f002 f9ae 	bl	c009260 <__i2b>
 c006f04:	4606      	mov	r6, r0
 c006f06:	2800      	cmp	r0, #0
 c006f08:	f43f aeef 	beq.w	c006cea <_strtod_l+0x492>
 c006f0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 c006f0e:	9904      	ldr	r1, [sp, #16]
 c006f10:	2b00      	cmp	r3, #0
 c006f12:	eba3 0801 	sub.w	r8, r3, r1
 c006f16:	bfa9      	itett	ge
 c006f18:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 c006f1a:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 c006f1c:	eb03 0902 	addge.w	r9, r3, r2
 c006f20:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 c006f22:	bfb8      	it	lt
 c006f24:	1ad7      	sublt	r7, r2, r3
 c006f26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 c006f28:	4ba1      	ldr	r3, [pc, #644]	; (c0071b0 <_strtod_l+0x958>)
 c006f2a:	4490      	add	r8, r2
 c006f2c:	bfb8      	it	lt
 c006f2e:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 c006f32:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 c006f36:	f108 38ff 	add.w	r8, r8, #4294967295
 c006f3a:	4598      	cmp	r8, r3
 c006f3c:	f280 80c3 	bge.w	c0070c6 <_strtod_l+0x86e>
 c006f40:	eba3 0308 	sub.w	r3, r3, r8
 c006f44:	2101      	movs	r1, #1
 c006f46:	2b1f      	cmp	r3, #31
 c006f48:	eba2 0203 	sub.w	r2, r2, r3
 c006f4c:	f300 80ae 	bgt.w	c0070ac <_strtod_l+0x854>
 c006f50:	fa01 f303 	lsl.w	r3, r1, r3
 c006f54:	930d      	str	r3, [sp, #52]	; 0x34
 c006f56:	2300      	movs	r3, #0
 c006f58:	9308      	str	r3, [sp, #32]
 c006f5a:	eb09 0802 	add.w	r8, r9, r2
 c006f5e:	9b04      	ldr	r3, [sp, #16]
 c006f60:	4417      	add	r7, r2
 c006f62:	45c1      	cmp	r9, r8
 c006f64:	441f      	add	r7, r3
 c006f66:	464b      	mov	r3, r9
 c006f68:	bfa8      	it	ge
 c006f6a:	4643      	movge	r3, r8
 c006f6c:	42bb      	cmp	r3, r7
 c006f6e:	bfa8      	it	ge
 c006f70:	463b      	movge	r3, r7
 c006f72:	2b00      	cmp	r3, #0
 c006f74:	bfc2      	ittt	gt
 c006f76:	eba8 0803 	subgt.w	r8, r8, r3
 c006f7a:	1aff      	subgt	r7, r7, r3
 c006f7c:	eba9 0903 	subgt.w	r9, r9, r3
 c006f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 c006f82:	2b00      	cmp	r3, #0
 c006f84:	dd17      	ble.n	c006fb6 <_strtod_l+0x75e>
 c006f86:	4631      	mov	r1, r6
 c006f88:	461a      	mov	r2, r3
 c006f8a:	4620      	mov	r0, r4
 c006f8c:	f002 fa26 	bl	c0093dc <__pow5mult>
 c006f90:	4606      	mov	r6, r0
 c006f92:	2800      	cmp	r0, #0
 c006f94:	f43f aea9 	beq.w	c006cea <_strtod_l+0x492>
 c006f98:	4601      	mov	r1, r0
 c006f9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 c006f9c:	4620      	mov	r0, r4
 c006f9e:	f002 f975 	bl	c00928c <__multiply>
 c006fa2:	900b      	str	r0, [sp, #44]	; 0x2c
 c006fa4:	2800      	cmp	r0, #0
 c006fa6:	f43f aea0 	beq.w	c006cea <_strtod_l+0x492>
 c006faa:	9918      	ldr	r1, [sp, #96]	; 0x60
 c006fac:	4620      	mov	r0, r4
 c006fae:	f002 f853 	bl	c009058 <_Bfree>
 c006fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c006fb4:	9318      	str	r3, [sp, #96]	; 0x60
 c006fb6:	f1b8 0f00 	cmp.w	r8, #0
 c006fba:	f300 8089 	bgt.w	c0070d0 <_strtod_l+0x878>
 c006fbe:	9b06      	ldr	r3, [sp, #24]
 c006fc0:	2b00      	cmp	r3, #0
 c006fc2:	dd08      	ble.n	c006fd6 <_strtod_l+0x77e>
 c006fc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 c006fc6:	4620      	mov	r0, r4
 c006fc8:	9905      	ldr	r1, [sp, #20]
 c006fca:	f002 fa07 	bl	c0093dc <__pow5mult>
 c006fce:	9005      	str	r0, [sp, #20]
 c006fd0:	2800      	cmp	r0, #0
 c006fd2:	f43f ae8a 	beq.w	c006cea <_strtod_l+0x492>
 c006fd6:	2f00      	cmp	r7, #0
 c006fd8:	dd08      	ble.n	c006fec <_strtod_l+0x794>
 c006fda:	463a      	mov	r2, r7
 c006fdc:	9905      	ldr	r1, [sp, #20]
 c006fde:	4620      	mov	r0, r4
 c006fe0:	f002 fa56 	bl	c009490 <__lshift>
 c006fe4:	9005      	str	r0, [sp, #20]
 c006fe6:	2800      	cmp	r0, #0
 c006fe8:	f43f ae7f 	beq.w	c006cea <_strtod_l+0x492>
 c006fec:	f1b9 0f00 	cmp.w	r9, #0
 c006ff0:	dd08      	ble.n	c007004 <_strtod_l+0x7ac>
 c006ff2:	4631      	mov	r1, r6
 c006ff4:	464a      	mov	r2, r9
 c006ff6:	4620      	mov	r0, r4
 c006ff8:	f002 fa4a 	bl	c009490 <__lshift>
 c006ffc:	4606      	mov	r6, r0
 c006ffe:	2800      	cmp	r0, #0
 c007000:	f43f ae73 	beq.w	c006cea <_strtod_l+0x492>
 c007004:	9a05      	ldr	r2, [sp, #20]
 c007006:	4620      	mov	r0, r4
 c007008:	9918      	ldr	r1, [sp, #96]	; 0x60
 c00700a:	f002 facd 	bl	c0095a8 <__mdiff>
 c00700e:	4605      	mov	r5, r0
 c007010:	2800      	cmp	r0, #0
 c007012:	f43f ae6a 	beq.w	c006cea <_strtod_l+0x492>
 c007016:	68c3      	ldr	r3, [r0, #12]
 c007018:	4631      	mov	r1, r6
 c00701a:	930b      	str	r3, [sp, #44]	; 0x2c
 c00701c:	2300      	movs	r3, #0
 c00701e:	60c3      	str	r3, [r0, #12]
 c007020:	f002 faa6 	bl	c009570 <__mcmp>
 c007024:	2800      	cmp	r0, #0
 c007026:	da5d      	bge.n	c0070e4 <_strtod_l+0x88c>
 c007028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c00702a:	ea53 030a 	orrs.w	r3, r3, sl
 c00702e:	d17f      	bne.n	c007130 <_strtod_l+0x8d8>
 c007030:	f3cb 0313 	ubfx	r3, fp, #0, #20
 c007034:	2b00      	cmp	r3, #0
 c007036:	d17b      	bne.n	c007130 <_strtod_l+0x8d8>
 c007038:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 c00703c:	0d1b      	lsrs	r3, r3, #20
 c00703e:	051b      	lsls	r3, r3, #20
 c007040:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 c007044:	d974      	bls.n	c007130 <_strtod_l+0x8d8>
 c007046:	696b      	ldr	r3, [r5, #20]
 c007048:	b913      	cbnz	r3, c007050 <_strtod_l+0x7f8>
 c00704a:	692b      	ldr	r3, [r5, #16]
 c00704c:	2b01      	cmp	r3, #1
 c00704e:	dd6f      	ble.n	c007130 <_strtod_l+0x8d8>
 c007050:	4629      	mov	r1, r5
 c007052:	2201      	movs	r2, #1
 c007054:	4620      	mov	r0, r4
 c007056:	f002 fa1b 	bl	c009490 <__lshift>
 c00705a:	4631      	mov	r1, r6
 c00705c:	4605      	mov	r5, r0
 c00705e:	f002 fa87 	bl	c009570 <__mcmp>
 c007062:	2800      	cmp	r0, #0
 c007064:	dd64      	ble.n	c007130 <_strtod_l+0x8d8>
 c007066:	9904      	ldr	r1, [sp, #16]
 c007068:	465b      	mov	r3, fp
 c00706a:	4a52      	ldr	r2, [pc, #328]	; (c0071b4 <_strtod_l+0x95c>)
 c00706c:	2900      	cmp	r1, #0
 c00706e:	d07f      	beq.n	c007170 <_strtod_l+0x918>
 c007070:	ea02 010b 	and.w	r1, r2, fp
 c007074:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 c007078:	dc7a      	bgt.n	c007170 <_strtod_l+0x918>
 c00707a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 c00707e:	f77f aeac 	ble.w	c006dda <_strtod_l+0x582>
 c007082:	4b4d      	ldr	r3, [pc, #308]	; (c0071b8 <_strtod_l+0x960>)
 c007084:	4650      	mov	r0, sl
 c007086:	4659      	mov	r1, fp
 c007088:	2200      	movs	r2, #0
 c00708a:	f7f9 fb3b 	bl	c000704 <__aeabi_dmul>
 c00708e:	460b      	mov	r3, r1
 c007090:	4682      	mov	sl, r0
 c007092:	468b      	mov	fp, r1
 c007094:	4303      	orrs	r3, r0
 c007096:	bf04      	itt	eq
 c007098:	2322      	moveq	r3, #34	; 0x22
 c00709a:	6023      	streq	r3, [r4, #0]
 c00709c:	e62f      	b.n	c006cfe <_strtod_l+0x4a6>
 c00709e:	f04f 32ff 	mov.w	r2, #4294967295
 c0070a2:	fa02 f303 	lsl.w	r3, r2, r3
 c0070a6:	ea03 0a0a 	and.w	sl, r3, sl
 c0070aa:	e6e6      	b.n	c006e7a <_strtod_l+0x622>
 c0070ac:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 c0070b0:	910d      	str	r1, [sp, #52]	; 0x34
 c0070b2:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 c0070b6:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 c0070ba:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 c0070be:	fa01 f308 	lsl.w	r3, r1, r8
 c0070c2:	9308      	str	r3, [sp, #32]
 c0070c4:	e749      	b.n	c006f5a <_strtod_l+0x702>
 c0070c6:	2300      	movs	r3, #0
 c0070c8:	9308      	str	r3, [sp, #32]
 c0070ca:	2301      	movs	r3, #1
 c0070cc:	930d      	str	r3, [sp, #52]	; 0x34
 c0070ce:	e744      	b.n	c006f5a <_strtod_l+0x702>
 c0070d0:	4642      	mov	r2, r8
 c0070d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 c0070d4:	4620      	mov	r0, r4
 c0070d6:	f002 f9db 	bl	c009490 <__lshift>
 c0070da:	9018      	str	r0, [sp, #96]	; 0x60
 c0070dc:	2800      	cmp	r0, #0
 c0070de:	f47f af6e 	bne.w	c006fbe <_strtod_l+0x766>
 c0070e2:	e602      	b.n	c006cea <_strtod_l+0x492>
 c0070e4:	465f      	mov	r7, fp
 c0070e6:	d16f      	bne.n	c0071c8 <_strtod_l+0x970>
 c0070e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 c0070ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 c0070ee:	b342      	cbz	r2, c007142 <_strtod_l+0x8ea>
 c0070f0:	4a32      	ldr	r2, [pc, #200]	; (c0071bc <_strtod_l+0x964>)
 c0070f2:	4293      	cmp	r3, r2
 c0070f4:	d128      	bne.n	c007148 <_strtod_l+0x8f0>
 c0070f6:	9b04      	ldr	r3, [sp, #16]
 c0070f8:	4651      	mov	r1, sl
 c0070fa:	b1eb      	cbz	r3, c007138 <_strtod_l+0x8e0>
 c0070fc:	4b2d      	ldr	r3, [pc, #180]	; (c0071b4 <_strtod_l+0x95c>)
 c0070fe:	f04f 32ff 	mov.w	r2, #4294967295
 c007102:	403b      	ands	r3, r7
 c007104:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 c007108:	d819      	bhi.n	c00713e <_strtod_l+0x8e6>
 c00710a:	0d1b      	lsrs	r3, r3, #20
 c00710c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 c007110:	fa02 f303 	lsl.w	r3, r2, r3
 c007114:	4299      	cmp	r1, r3
 c007116:	d117      	bne.n	c007148 <_strtod_l+0x8f0>
 c007118:	4b29      	ldr	r3, [pc, #164]	; (c0071c0 <_strtod_l+0x968>)
 c00711a:	429f      	cmp	r7, r3
 c00711c:	d102      	bne.n	c007124 <_strtod_l+0x8cc>
 c00711e:	3101      	adds	r1, #1
 c007120:	f43f ade3 	beq.w	c006cea <_strtod_l+0x492>
 c007124:	4b23      	ldr	r3, [pc, #140]	; (c0071b4 <_strtod_l+0x95c>)
 c007126:	f04f 0a00 	mov.w	sl, #0
 c00712a:	403b      	ands	r3, r7
 c00712c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 c007130:	9b04      	ldr	r3, [sp, #16]
 c007132:	2b00      	cmp	r3, #0
 c007134:	d1a5      	bne.n	c007082 <_strtod_l+0x82a>
 c007136:	e5e2      	b.n	c006cfe <_strtod_l+0x4a6>
 c007138:	f04f 33ff 	mov.w	r3, #4294967295
 c00713c:	e7ea      	b.n	c007114 <_strtod_l+0x8bc>
 c00713e:	4613      	mov	r3, r2
 c007140:	e7e8      	b.n	c007114 <_strtod_l+0x8bc>
 c007142:	ea53 030a 	orrs.w	r3, r3, sl
 c007146:	d08e      	beq.n	c007066 <_strtod_l+0x80e>
 c007148:	9b08      	ldr	r3, [sp, #32]
 c00714a:	b1db      	cbz	r3, c007184 <_strtod_l+0x92c>
 c00714c:	423b      	tst	r3, r7
 c00714e:	d0ef      	beq.n	c007130 <_strtod_l+0x8d8>
 c007150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c007152:	4650      	mov	r0, sl
 c007154:	9a04      	ldr	r2, [sp, #16]
 c007156:	4659      	mov	r1, fp
 c007158:	b1c3      	cbz	r3, c00718c <_strtod_l+0x934>
 c00715a:	f7ff fb61 	bl	c006820 <sulp>
 c00715e:	4602      	mov	r2, r0
 c007160:	460b      	mov	r3, r1
 c007162:	ec51 0b18 	vmov	r0, r1, d8
 c007166:	f7f9 f917 	bl	c000398 <__adddf3>
 c00716a:	4682      	mov	sl, r0
 c00716c:	468b      	mov	fp, r1
 c00716e:	e7df      	b.n	c007130 <_strtod_l+0x8d8>
 c007170:	4013      	ands	r3, r2
 c007172:	f04f 3aff 	mov.w	sl, #4294967295
 c007176:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 c00717a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 c00717e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 c007182:	e7d5      	b.n	c007130 <_strtod_l+0x8d8>
 c007184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c007186:	ea13 0f0a 	tst.w	r3, sl
 c00718a:	e7e0      	b.n	c00714e <_strtod_l+0x8f6>
 c00718c:	f7ff fb48 	bl	c006820 <sulp>
 c007190:	4602      	mov	r2, r0
 c007192:	460b      	mov	r3, r1
 c007194:	ec51 0b18 	vmov	r0, r1, d8
 c007198:	f7f9 f8fc 	bl	c000394 <__aeabi_dsub>
 c00719c:	2200      	movs	r2, #0
 c00719e:	2300      	movs	r3, #0
 c0071a0:	4682      	mov	sl, r0
 c0071a2:	468b      	mov	fp, r1
 c0071a4:	f7f9 fd16 	bl	c000bd4 <__aeabi_dcmpeq>
 c0071a8:	2800      	cmp	r0, #0
 c0071aa:	d0c1      	beq.n	c007130 <_strtod_l+0x8d8>
 c0071ac:	e615      	b.n	c006dda <_strtod_l+0x582>
 c0071ae:	bf00      	nop
 c0071b0:	fffffc02 	.word	0xfffffc02
 c0071b4:	7ff00000 	.word	0x7ff00000
 c0071b8:	39500000 	.word	0x39500000
 c0071bc:	000fffff 	.word	0x000fffff
 c0071c0:	7fefffff 	.word	0x7fefffff
 c0071c4:	0c00afd8 	.word	0x0c00afd8
 c0071c8:	4631      	mov	r1, r6
 c0071ca:	4628      	mov	r0, r5
 c0071cc:	f002 fb52 	bl	c009874 <__ratio>
 c0071d0:	2200      	movs	r2, #0
 c0071d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 c0071d6:	ee10 0a10 	vmov	r0, s0
 c0071da:	ec59 8b10 	vmov	r8, r9, d0
 c0071de:	4649      	mov	r1, r9
 c0071e0:	f7f9 fd0c 	bl	c000bfc <__aeabi_dcmple>
 c0071e4:	2800      	cmp	r0, #0
 c0071e6:	d07a      	beq.n	c0072de <_strtod_l+0xa86>
 c0071e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c0071ea:	2b00      	cmp	r3, #0
 c0071ec:	d04a      	beq.n	c007284 <_strtod_l+0xa2c>
 c0071ee:	2200      	movs	r2, #0
 c0071f0:	4b93      	ldr	r3, [pc, #588]	; (c007440 <_strtod_l+0xbe8>)
 c0071f2:	f04f 0800 	mov.w	r8, #0
 c0071f6:	f8df 9248 	ldr.w	r9, [pc, #584]	; c007440 <_strtod_l+0xbe8>
 c0071fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 c0071fe:	4b91      	ldr	r3, [pc, #580]	; (c007444 <_strtod_l+0xbec>)
 c007200:	403b      	ands	r3, r7
 c007202:	930d      	str	r3, [sp, #52]	; 0x34
 c007204:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 c007206:	4b90      	ldr	r3, [pc, #576]	; (c007448 <_strtod_l+0xbf0>)
 c007208:	429a      	cmp	r2, r3
 c00720a:	f040 80b0 	bne.w	c00736e <_strtod_l+0xb16>
 c00720e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 c007212:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c007216:	ec4b ab10 	vmov	d0, sl, fp
 c00721a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 c00721e:	f002 fa53 	bl	c0096c8 <__ulp>
 c007222:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c007226:	ec53 2b10 	vmov	r2, r3, d0
 c00722a:	f7f9 fa6b 	bl	c000704 <__aeabi_dmul>
 c00722e:	4652      	mov	r2, sl
 c007230:	465b      	mov	r3, fp
 c007232:	f7f9 f8b1 	bl	c000398 <__adddf3>
 c007236:	460b      	mov	r3, r1
 c007238:	4982      	ldr	r1, [pc, #520]	; (c007444 <_strtod_l+0xbec>)
 c00723a:	4682      	mov	sl, r0
 c00723c:	4a83      	ldr	r2, [pc, #524]	; (c00744c <_strtod_l+0xbf4>)
 c00723e:	4019      	ands	r1, r3
 c007240:	4291      	cmp	r1, r2
 c007242:	d960      	bls.n	c007306 <_strtod_l+0xaae>
 c007244:	ee18 3a90 	vmov	r3, s17
 c007248:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 c00724c:	4293      	cmp	r3, r2
 c00724e:	d104      	bne.n	c00725a <_strtod_l+0xa02>
 c007250:	ee18 3a10 	vmov	r3, s16
 c007254:	3301      	adds	r3, #1
 c007256:	f43f ad48 	beq.w	c006cea <_strtod_l+0x492>
 c00725a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; c007458 <_strtod_l+0xc00>
 c00725e:	f04f 3aff 	mov.w	sl, #4294967295
 c007262:	9918      	ldr	r1, [sp, #96]	; 0x60
 c007264:	4620      	mov	r0, r4
 c007266:	f001 fef7 	bl	c009058 <_Bfree>
 c00726a:	9905      	ldr	r1, [sp, #20]
 c00726c:	4620      	mov	r0, r4
 c00726e:	f001 fef3 	bl	c009058 <_Bfree>
 c007272:	4631      	mov	r1, r6
 c007274:	4620      	mov	r0, r4
 c007276:	f001 feef 	bl	c009058 <_Bfree>
 c00727a:	4629      	mov	r1, r5
 c00727c:	4620      	mov	r0, r4
 c00727e:	f001 feeb 	bl	c009058 <_Bfree>
 c007282:	e61c      	b.n	c006ebe <_strtod_l+0x666>
 c007284:	f1ba 0f00 	cmp.w	sl, #0
 c007288:	d11b      	bne.n	c0072c2 <_strtod_l+0xa6a>
 c00728a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 c00728e:	b9f3      	cbnz	r3, c0072ce <_strtod_l+0xa76>
 c007290:	2200      	movs	r2, #0
 c007292:	4b6b      	ldr	r3, [pc, #428]	; (c007440 <_strtod_l+0xbe8>)
 c007294:	4640      	mov	r0, r8
 c007296:	4649      	mov	r1, r9
 c007298:	f7f9 fca6 	bl	c000be8 <__aeabi_dcmplt>
 c00729c:	b9d0      	cbnz	r0, c0072d4 <_strtod_l+0xa7c>
 c00729e:	4640      	mov	r0, r8
 c0072a0:	4649      	mov	r1, r9
 c0072a2:	2200      	movs	r2, #0
 c0072a4:	4b6a      	ldr	r3, [pc, #424]	; (c007450 <_strtod_l+0xbf8>)
 c0072a6:	f7f9 fa2d 	bl	c000704 <__aeabi_dmul>
 c0072aa:	4680      	mov	r8, r0
 c0072ac:	4689      	mov	r9, r1
 c0072ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 c0072b2:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 c0072b6:	9315      	str	r3, [sp, #84]	; 0x54
 c0072b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 c0072bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 c0072c0:	e79d      	b.n	c0071fe <_strtod_l+0x9a6>
 c0072c2:	f1ba 0f01 	cmp.w	sl, #1
 c0072c6:	d102      	bne.n	c0072ce <_strtod_l+0xa76>
 c0072c8:	2f00      	cmp	r7, #0
 c0072ca:	f43f ad86 	beq.w	c006dda <_strtod_l+0x582>
 c0072ce:	2200      	movs	r2, #0
 c0072d0:	4b60      	ldr	r3, [pc, #384]	; (c007454 <_strtod_l+0xbfc>)
 c0072d2:	e78e      	b.n	c0071f2 <_strtod_l+0x99a>
 c0072d4:	f04f 0800 	mov.w	r8, #0
 c0072d8:	f8df 9174 	ldr.w	r9, [pc, #372]	; c007450 <_strtod_l+0xbf8>
 c0072dc:	e7e7      	b.n	c0072ae <_strtod_l+0xa56>
 c0072de:	4b5c      	ldr	r3, [pc, #368]	; (c007450 <_strtod_l+0xbf8>)
 c0072e0:	4640      	mov	r0, r8
 c0072e2:	4649      	mov	r1, r9
 c0072e4:	2200      	movs	r2, #0
 c0072e6:	f7f9 fa0d 	bl	c000704 <__aeabi_dmul>
 c0072ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c0072ec:	4680      	mov	r8, r0
 c0072ee:	4689      	mov	r9, r1
 c0072f0:	b933      	cbnz	r3, c007300 <_strtod_l+0xaa8>
 c0072f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 c0072f6:	900e      	str	r0, [sp, #56]	; 0x38
 c0072f8:	930f      	str	r3, [sp, #60]	; 0x3c
 c0072fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 c0072fe:	e7dd      	b.n	c0072bc <_strtod_l+0xa64>
 c007300:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 c007304:	e7f9      	b.n	c0072fa <_strtod_l+0xaa2>
 c007306:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 c00730a:	9b04      	ldr	r3, [sp, #16]
 c00730c:	2b00      	cmp	r3, #0
 c00730e:	d1a8      	bne.n	c007262 <_strtod_l+0xa0a>
 c007310:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 c007314:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 c007316:	0d1b      	lsrs	r3, r3, #20
 c007318:	051b      	lsls	r3, r3, #20
 c00731a:	429a      	cmp	r2, r3
 c00731c:	d1a1      	bne.n	c007262 <_strtod_l+0xa0a>
 c00731e:	4640      	mov	r0, r8
 c007320:	4649      	mov	r1, r9
 c007322:	f7f9 fd4f 	bl	c000dc4 <__aeabi_d2lz>
 c007326:	f7f9 f9bf 	bl	c0006a8 <__aeabi_l2d>
 c00732a:	4602      	mov	r2, r0
 c00732c:	460b      	mov	r3, r1
 c00732e:	4640      	mov	r0, r8
 c007330:	4649      	mov	r1, r9
 c007332:	f7f9 f82f 	bl	c000394 <__aeabi_dsub>
 c007336:	f3cb 0313 	ubfx	r3, fp, #0, #20
 c00733a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 c00733c:	4680      	mov	r8, r0
 c00733e:	ea43 030a 	orr.w	r3, r3, sl
 c007342:	4689      	mov	r9, r1
 c007344:	4313      	orrs	r3, r2
 c007346:	d055      	beq.n	c0073f4 <_strtod_l+0xb9c>
 c007348:	a335      	add	r3, pc, #212	; (adr r3, c007420 <_strtod_l+0xbc8>)
 c00734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00734e:	f7f9 fc4b 	bl	c000be8 <__aeabi_dcmplt>
 c007352:	2800      	cmp	r0, #0
 c007354:	f47f acd3 	bne.w	c006cfe <_strtod_l+0x4a6>
 c007358:	4640      	mov	r0, r8
 c00735a:	4649      	mov	r1, r9
 c00735c:	a332      	add	r3, pc, #200	; (adr r3, c007428 <_strtod_l+0xbd0>)
 c00735e:	e9d3 2300 	ldrd	r2, r3, [r3]
 c007362:	f7f9 fc5f 	bl	c000c24 <__aeabi_dcmpgt>
 c007366:	2800      	cmp	r0, #0
 c007368:	f43f af7b 	beq.w	c007262 <_strtod_l+0xa0a>
 c00736c:	e4c7      	b.n	c006cfe <_strtod_l+0x4a6>
 c00736e:	9b04      	ldr	r3, [sp, #16]
 c007370:	b333      	cbz	r3, c0073c0 <_strtod_l+0xb68>
 c007372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c007374:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 c007378:	d822      	bhi.n	c0073c0 <_strtod_l+0xb68>
 c00737a:	4640      	mov	r0, r8
 c00737c:	4649      	mov	r1, r9
 c00737e:	a32c      	add	r3, pc, #176	; (adr r3, c007430 <_strtod_l+0xbd8>)
 c007380:	e9d3 2300 	ldrd	r2, r3, [r3]
 c007384:	f7f9 fc3a 	bl	c000bfc <__aeabi_dcmple>
 c007388:	b1a0      	cbz	r0, c0073b4 <_strtod_l+0xb5c>
 c00738a:	4649      	mov	r1, r9
 c00738c:	4640      	mov	r0, r8
 c00738e:	f7f9 fc91 	bl	c000cb4 <__aeabi_d2uiz>
 c007392:	2801      	cmp	r0, #1
 c007394:	bf38      	it	cc
 c007396:	2001      	movcc	r0, #1
 c007398:	f7f9 f93a 	bl	c000610 <__aeabi_ui2d>
 c00739c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c00739e:	4680      	mov	r8, r0
 c0073a0:	4689      	mov	r9, r1
 c0073a2:	bb23      	cbnz	r3, c0073ee <_strtod_l+0xb96>
 c0073a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 c0073a8:	9010      	str	r0, [sp, #64]	; 0x40
 c0073aa:	9311      	str	r3, [sp, #68]	; 0x44
 c0073ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 c0073b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 c0073b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c0073b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 c0073b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 c0073bc:	1a9b      	subs	r3, r3, r2
 c0073be:	9309      	str	r3, [sp, #36]	; 0x24
 c0073c0:	eeb0 0a48 	vmov.f32	s0, s16
 c0073c4:	eef0 0a68 	vmov.f32	s1, s17
 c0073c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c0073cc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 c0073d0:	f002 f97a 	bl	c0096c8 <__ulp>
 c0073d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c0073d8:	ec53 2b10 	vmov	r2, r3, d0
 c0073dc:	f7f9 f992 	bl	c000704 <__aeabi_dmul>
 c0073e0:	ec53 2b18 	vmov	r2, r3, d8
 c0073e4:	f7f8 ffd8 	bl	c000398 <__adddf3>
 c0073e8:	4682      	mov	sl, r0
 c0073ea:	468b      	mov	fp, r1
 c0073ec:	e78d      	b.n	c00730a <_strtod_l+0xab2>
 c0073ee:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 c0073f2:	e7db      	b.n	c0073ac <_strtod_l+0xb54>
 c0073f4:	a310      	add	r3, pc, #64	; (adr r3, c007438 <_strtod_l+0xbe0>)
 c0073f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0073fa:	f7f9 fbf5 	bl	c000be8 <__aeabi_dcmplt>
 c0073fe:	e7b2      	b.n	c007366 <_strtod_l+0xb0e>
 c007400:	2300      	movs	r3, #0
 c007402:	930a      	str	r3, [sp, #40]	; 0x28
 c007404:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 c007406:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 c007408:	6013      	str	r3, [r2, #0]
 c00740a:	f7ff ba6d 	b.w	c0068e8 <_strtod_l+0x90>
 c00740e:	2a65      	cmp	r2, #101	; 0x65
 c007410:	f43f ab61 	beq.w	c006ad6 <_strtod_l+0x27e>
 c007414:	2a45      	cmp	r2, #69	; 0x45
 c007416:	f43f ab5e 	beq.w	c006ad6 <_strtod_l+0x27e>
 c00741a:	2301      	movs	r3, #1
 c00741c:	f7ff bb96 	b.w	c006b4c <_strtod_l+0x2f4>
 c007420:	94a03595 	.word	0x94a03595
 c007424:	3fdfffff 	.word	0x3fdfffff
 c007428:	35afe535 	.word	0x35afe535
 c00742c:	3fe00000 	.word	0x3fe00000
 c007430:	ffc00000 	.word	0xffc00000
 c007434:	41dfffff 	.word	0x41dfffff
 c007438:	94a03595 	.word	0x94a03595
 c00743c:	3fcfffff 	.word	0x3fcfffff
 c007440:	3ff00000 	.word	0x3ff00000
 c007444:	7ff00000 	.word	0x7ff00000
 c007448:	7fe00000 	.word	0x7fe00000
 c00744c:	7c9fffff 	.word	0x7c9fffff
 c007450:	3fe00000 	.word	0x3fe00000
 c007454:	bff00000 	.word	0xbff00000
 c007458:	7fefffff 	.word	0x7fefffff

0c00745c <_strtod_r>:
 c00745c:	4b01      	ldr	r3, [pc, #4]	; (c007464 <_strtod_r+0x8>)
 c00745e:	f7ff b9fb 	b.w	c006858 <_strtod_l>
 c007462:	bf00      	nop
 c007464:	30000078 	.word	0x30000078

0c007468 <_strtol_l.constprop.0>:
 c007468:	2b01      	cmp	r3, #1
 c00746a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c00746e:	d001      	beq.n	c007474 <_strtol_l.constprop.0+0xc>
 c007470:	2b24      	cmp	r3, #36	; 0x24
 c007472:	d906      	bls.n	c007482 <_strtol_l.constprop.0+0x1a>
 c007474:	f7fe f950 	bl	c005718 <__errno>
 c007478:	2316      	movs	r3, #22
 c00747a:	6003      	str	r3, [r0, #0]
 c00747c:	2000      	movs	r0, #0
 c00747e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c007482:	460d      	mov	r5, r1
 c007484:	f8df c0e0 	ldr.w	ip, [pc, #224]	; c007568 <_strtol_l.constprop.0+0x100>
 c007488:	462e      	mov	r6, r5
 c00748a:	f815 4b01 	ldrb.w	r4, [r5], #1
 c00748e:	f814 700c 	ldrb.w	r7, [r4, ip]
 c007492:	f017 0708 	ands.w	r7, r7, #8
 c007496:	d1f7      	bne.n	c007488 <_strtol_l.constprop.0+0x20>
 c007498:	2c2d      	cmp	r4, #45	; 0x2d
 c00749a:	d132      	bne.n	c007502 <_strtol_l.constprop.0+0x9a>
 c00749c:	782c      	ldrb	r4, [r5, #0]
 c00749e:	2701      	movs	r7, #1
 c0074a0:	1cb5      	adds	r5, r6, #2
 c0074a2:	2b00      	cmp	r3, #0
 c0074a4:	d05b      	beq.n	c00755e <_strtol_l.constprop.0+0xf6>
 c0074a6:	2b10      	cmp	r3, #16
 c0074a8:	d109      	bne.n	c0074be <_strtol_l.constprop.0+0x56>
 c0074aa:	2c30      	cmp	r4, #48	; 0x30
 c0074ac:	d107      	bne.n	c0074be <_strtol_l.constprop.0+0x56>
 c0074ae:	782c      	ldrb	r4, [r5, #0]
 c0074b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 c0074b4:	2c58      	cmp	r4, #88	; 0x58
 c0074b6:	d14d      	bne.n	c007554 <_strtol_l.constprop.0+0xec>
 c0074b8:	786c      	ldrb	r4, [r5, #1]
 c0074ba:	2310      	movs	r3, #16
 c0074bc:	3502      	adds	r5, #2
 c0074be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 c0074c2:	f04f 0c00 	mov.w	ip, #0
 c0074c6:	f108 38ff 	add.w	r8, r8, #4294967295
 c0074ca:	4666      	mov	r6, ip
 c0074cc:	fbb8 f9f3 	udiv	r9, r8, r3
 c0074d0:	fb03 8a19 	mls	sl, r3, r9, r8
 c0074d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 c0074d8:	f1be 0f09 	cmp.w	lr, #9
 c0074dc:	d816      	bhi.n	c00750c <_strtol_l.constprop.0+0xa4>
 c0074de:	4674      	mov	r4, lr
 c0074e0:	42a3      	cmp	r3, r4
 c0074e2:	dd24      	ble.n	c00752e <_strtol_l.constprop.0+0xc6>
 c0074e4:	f1bc 0f00 	cmp.w	ip, #0
 c0074e8:	db1e      	blt.n	c007528 <_strtol_l.constprop.0+0xc0>
 c0074ea:	45b1      	cmp	r9, r6
 c0074ec:	d31c      	bcc.n	c007528 <_strtol_l.constprop.0+0xc0>
 c0074ee:	d101      	bne.n	c0074f4 <_strtol_l.constprop.0+0x8c>
 c0074f0:	45a2      	cmp	sl, r4
 c0074f2:	db19      	blt.n	c007528 <_strtol_l.constprop.0+0xc0>
 c0074f4:	fb06 4603 	mla	r6, r6, r3, r4
 c0074f8:	f04f 0c01 	mov.w	ip, #1
 c0074fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 c007500:	e7e8      	b.n	c0074d4 <_strtol_l.constprop.0+0x6c>
 c007502:	2c2b      	cmp	r4, #43	; 0x2b
 c007504:	bf04      	itt	eq
 c007506:	782c      	ldrbeq	r4, [r5, #0]
 c007508:	1cb5      	addeq	r5, r6, #2
 c00750a:	e7ca      	b.n	c0074a2 <_strtol_l.constprop.0+0x3a>
 c00750c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 c007510:	f1be 0f19 	cmp.w	lr, #25
 c007514:	d801      	bhi.n	c00751a <_strtol_l.constprop.0+0xb2>
 c007516:	3c37      	subs	r4, #55	; 0x37
 c007518:	e7e2      	b.n	c0074e0 <_strtol_l.constprop.0+0x78>
 c00751a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 c00751e:	f1be 0f19 	cmp.w	lr, #25
 c007522:	d804      	bhi.n	c00752e <_strtol_l.constprop.0+0xc6>
 c007524:	3c57      	subs	r4, #87	; 0x57
 c007526:	e7db      	b.n	c0074e0 <_strtol_l.constprop.0+0x78>
 c007528:	f04f 3cff 	mov.w	ip, #4294967295
 c00752c:	e7e6      	b.n	c0074fc <_strtol_l.constprop.0+0x94>
 c00752e:	f1bc 0f00 	cmp.w	ip, #0
 c007532:	da05      	bge.n	c007540 <_strtol_l.constprop.0+0xd8>
 c007534:	2322      	movs	r3, #34	; 0x22
 c007536:	4646      	mov	r6, r8
 c007538:	6003      	str	r3, [r0, #0]
 c00753a:	b942      	cbnz	r2, c00754e <_strtol_l.constprop.0+0xe6>
 c00753c:	4630      	mov	r0, r6
 c00753e:	e79e      	b.n	c00747e <_strtol_l.constprop.0+0x16>
 c007540:	b107      	cbz	r7, c007544 <_strtol_l.constprop.0+0xdc>
 c007542:	4276      	negs	r6, r6
 c007544:	2a00      	cmp	r2, #0
 c007546:	d0f9      	beq.n	c00753c <_strtol_l.constprop.0+0xd4>
 c007548:	f1bc 0f00 	cmp.w	ip, #0
 c00754c:	d000      	beq.n	c007550 <_strtol_l.constprop.0+0xe8>
 c00754e:	1e69      	subs	r1, r5, #1
 c007550:	6011      	str	r1, [r2, #0]
 c007552:	e7f3      	b.n	c00753c <_strtol_l.constprop.0+0xd4>
 c007554:	2430      	movs	r4, #48	; 0x30
 c007556:	2b00      	cmp	r3, #0
 c007558:	d1b1      	bne.n	c0074be <_strtol_l.constprop.0+0x56>
 c00755a:	2308      	movs	r3, #8
 c00755c:	e7af      	b.n	c0074be <_strtol_l.constprop.0+0x56>
 c00755e:	2c30      	cmp	r4, #48	; 0x30
 c007560:	d0a5      	beq.n	c0074ae <_strtol_l.constprop.0+0x46>
 c007562:	230a      	movs	r3, #10
 c007564:	e7ab      	b.n	c0074be <_strtol_l.constprop.0+0x56>
 c007566:	bf00      	nop
 c007568:	0c00b001 	.word	0x0c00b001

0c00756c <_strtol_r>:
 c00756c:	f7ff bf7c 	b.w	c007468 <_strtol_l.constprop.0>

0c007570 <__swbuf_r>:
 c007570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c007572:	460e      	mov	r6, r1
 c007574:	4614      	mov	r4, r2
 c007576:	4605      	mov	r5, r0
 c007578:	b118      	cbz	r0, c007582 <__swbuf_r+0x12>
 c00757a:	6983      	ldr	r3, [r0, #24]
 c00757c:	b90b      	cbnz	r3, c007582 <__swbuf_r+0x12>
 c00757e:	f001 f861 	bl	c008644 <__sinit>
 c007582:	4b21      	ldr	r3, [pc, #132]	; (c007608 <__swbuf_r+0x98>)
 c007584:	429c      	cmp	r4, r3
 c007586:	d12b      	bne.n	c0075e0 <__swbuf_r+0x70>
 c007588:	686c      	ldr	r4, [r5, #4]
 c00758a:	69a3      	ldr	r3, [r4, #24]
 c00758c:	60a3      	str	r3, [r4, #8]
 c00758e:	89a3      	ldrh	r3, [r4, #12]
 c007590:	071a      	lsls	r2, r3, #28
 c007592:	d52f      	bpl.n	c0075f4 <__swbuf_r+0x84>
 c007594:	6923      	ldr	r3, [r4, #16]
 c007596:	b36b      	cbz	r3, c0075f4 <__swbuf_r+0x84>
 c007598:	6923      	ldr	r3, [r4, #16]
 c00759a:	b2f6      	uxtb	r6, r6
 c00759c:	6820      	ldr	r0, [r4, #0]
 c00759e:	4637      	mov	r7, r6
 c0075a0:	1ac0      	subs	r0, r0, r3
 c0075a2:	6963      	ldr	r3, [r4, #20]
 c0075a4:	4283      	cmp	r3, r0
 c0075a6:	dc04      	bgt.n	c0075b2 <__swbuf_r+0x42>
 c0075a8:	4621      	mov	r1, r4
 c0075aa:	4628      	mov	r0, r5
 c0075ac:	f000 ffa4 	bl	c0084f8 <_fflush_r>
 c0075b0:	bb30      	cbnz	r0, c007600 <__swbuf_r+0x90>
 c0075b2:	68a3      	ldr	r3, [r4, #8]
 c0075b4:	3001      	adds	r0, #1
 c0075b6:	3b01      	subs	r3, #1
 c0075b8:	60a3      	str	r3, [r4, #8]
 c0075ba:	6823      	ldr	r3, [r4, #0]
 c0075bc:	1c5a      	adds	r2, r3, #1
 c0075be:	6022      	str	r2, [r4, #0]
 c0075c0:	701e      	strb	r6, [r3, #0]
 c0075c2:	6963      	ldr	r3, [r4, #20]
 c0075c4:	4283      	cmp	r3, r0
 c0075c6:	d004      	beq.n	c0075d2 <__swbuf_r+0x62>
 c0075c8:	89a3      	ldrh	r3, [r4, #12]
 c0075ca:	07db      	lsls	r3, r3, #31
 c0075cc:	d506      	bpl.n	c0075dc <__swbuf_r+0x6c>
 c0075ce:	2e0a      	cmp	r6, #10
 c0075d0:	d104      	bne.n	c0075dc <__swbuf_r+0x6c>
 c0075d2:	4621      	mov	r1, r4
 c0075d4:	4628      	mov	r0, r5
 c0075d6:	f000 ff8f 	bl	c0084f8 <_fflush_r>
 c0075da:	b988      	cbnz	r0, c007600 <__swbuf_r+0x90>
 c0075dc:	4638      	mov	r0, r7
 c0075de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c0075e0:	4b0a      	ldr	r3, [pc, #40]	; (c00760c <__swbuf_r+0x9c>)
 c0075e2:	429c      	cmp	r4, r3
 c0075e4:	d101      	bne.n	c0075ea <__swbuf_r+0x7a>
 c0075e6:	68ac      	ldr	r4, [r5, #8]
 c0075e8:	e7cf      	b.n	c00758a <__swbuf_r+0x1a>
 c0075ea:	4b09      	ldr	r3, [pc, #36]	; (c007610 <__swbuf_r+0xa0>)
 c0075ec:	429c      	cmp	r4, r3
 c0075ee:	bf08      	it	eq
 c0075f0:	68ec      	ldreq	r4, [r5, #12]
 c0075f2:	e7ca      	b.n	c00758a <__swbuf_r+0x1a>
 c0075f4:	4621      	mov	r1, r4
 c0075f6:	4628      	mov	r0, r5
 c0075f8:	f000 f80c 	bl	c007614 <__swsetup_r>
 c0075fc:	2800      	cmp	r0, #0
 c0075fe:	d0cb      	beq.n	c007598 <__swbuf_r+0x28>
 c007600:	f04f 37ff 	mov.w	r7, #4294967295
 c007604:	e7ea      	b.n	c0075dc <__swbuf_r+0x6c>
 c007606:	bf00      	nop
 c007608:	0c00b1b4 	.word	0x0c00b1b4
 c00760c:	0c00b1d4 	.word	0x0c00b1d4
 c007610:	0c00b194 	.word	0x0c00b194

0c007614 <__swsetup_r>:
 c007614:	4b32      	ldr	r3, [pc, #200]	; (c0076e0 <__swsetup_r+0xcc>)
 c007616:	b570      	push	{r4, r5, r6, lr}
 c007618:	681d      	ldr	r5, [r3, #0]
 c00761a:	4606      	mov	r6, r0
 c00761c:	460c      	mov	r4, r1
 c00761e:	b125      	cbz	r5, c00762a <__swsetup_r+0x16>
 c007620:	69ab      	ldr	r3, [r5, #24]
 c007622:	b913      	cbnz	r3, c00762a <__swsetup_r+0x16>
 c007624:	4628      	mov	r0, r5
 c007626:	f001 f80d 	bl	c008644 <__sinit>
 c00762a:	4b2e      	ldr	r3, [pc, #184]	; (c0076e4 <__swsetup_r+0xd0>)
 c00762c:	429c      	cmp	r4, r3
 c00762e:	d10f      	bne.n	c007650 <__swsetup_r+0x3c>
 c007630:	686c      	ldr	r4, [r5, #4]
 c007632:	89a3      	ldrh	r3, [r4, #12]
 c007634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c007638:	0719      	lsls	r1, r3, #28
 c00763a:	d42c      	bmi.n	c007696 <__swsetup_r+0x82>
 c00763c:	06dd      	lsls	r5, r3, #27
 c00763e:	d411      	bmi.n	c007664 <__swsetup_r+0x50>
 c007640:	2309      	movs	r3, #9
 c007642:	6033      	str	r3, [r6, #0]
 c007644:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 c007648:	f04f 30ff 	mov.w	r0, #4294967295
 c00764c:	81a3      	strh	r3, [r4, #12]
 c00764e:	e03e      	b.n	c0076ce <__swsetup_r+0xba>
 c007650:	4b25      	ldr	r3, [pc, #148]	; (c0076e8 <__swsetup_r+0xd4>)
 c007652:	429c      	cmp	r4, r3
 c007654:	d101      	bne.n	c00765a <__swsetup_r+0x46>
 c007656:	68ac      	ldr	r4, [r5, #8]
 c007658:	e7eb      	b.n	c007632 <__swsetup_r+0x1e>
 c00765a:	4b24      	ldr	r3, [pc, #144]	; (c0076ec <__swsetup_r+0xd8>)
 c00765c:	429c      	cmp	r4, r3
 c00765e:	bf08      	it	eq
 c007660:	68ec      	ldreq	r4, [r5, #12]
 c007662:	e7e6      	b.n	c007632 <__swsetup_r+0x1e>
 c007664:	0758      	lsls	r0, r3, #29
 c007666:	d512      	bpl.n	c00768e <__swsetup_r+0x7a>
 c007668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c00766a:	b141      	cbz	r1, c00767e <__swsetup_r+0x6a>
 c00766c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c007670:	4299      	cmp	r1, r3
 c007672:	d002      	beq.n	c00767a <__swsetup_r+0x66>
 c007674:	4630      	mov	r0, r6
 c007676:	f002 f98b 	bl	c009990 <_free_r>
 c00767a:	2300      	movs	r3, #0
 c00767c:	6363      	str	r3, [r4, #52]	; 0x34
 c00767e:	89a3      	ldrh	r3, [r4, #12]
 c007680:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 c007684:	81a3      	strh	r3, [r4, #12]
 c007686:	2300      	movs	r3, #0
 c007688:	6063      	str	r3, [r4, #4]
 c00768a:	6923      	ldr	r3, [r4, #16]
 c00768c:	6023      	str	r3, [r4, #0]
 c00768e:	89a3      	ldrh	r3, [r4, #12]
 c007690:	f043 0308 	orr.w	r3, r3, #8
 c007694:	81a3      	strh	r3, [r4, #12]
 c007696:	6923      	ldr	r3, [r4, #16]
 c007698:	b94b      	cbnz	r3, c0076ae <__swsetup_r+0x9a>
 c00769a:	89a3      	ldrh	r3, [r4, #12]
 c00769c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 c0076a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0076a4:	d003      	beq.n	c0076ae <__swsetup_r+0x9a>
 c0076a6:	4621      	mov	r1, r4
 c0076a8:	4630      	mov	r0, r6
 c0076aa:	f001 fc1f 	bl	c008eec <__smakebuf_r>
 c0076ae:	89a0      	ldrh	r0, [r4, #12]
 c0076b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c0076b4:	f010 0301 	ands.w	r3, r0, #1
 c0076b8:	d00a      	beq.n	c0076d0 <__swsetup_r+0xbc>
 c0076ba:	2300      	movs	r3, #0
 c0076bc:	60a3      	str	r3, [r4, #8]
 c0076be:	6963      	ldr	r3, [r4, #20]
 c0076c0:	425b      	negs	r3, r3
 c0076c2:	61a3      	str	r3, [r4, #24]
 c0076c4:	6923      	ldr	r3, [r4, #16]
 c0076c6:	b943      	cbnz	r3, c0076da <__swsetup_r+0xc6>
 c0076c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 c0076cc:	d1ba      	bne.n	c007644 <__swsetup_r+0x30>
 c0076ce:	bd70      	pop	{r4, r5, r6, pc}
 c0076d0:	0781      	lsls	r1, r0, #30
 c0076d2:	bf58      	it	pl
 c0076d4:	6963      	ldrpl	r3, [r4, #20]
 c0076d6:	60a3      	str	r3, [r4, #8]
 c0076d8:	e7f4      	b.n	c0076c4 <__swsetup_r+0xb0>
 c0076da:	2000      	movs	r0, #0
 c0076dc:	e7f7      	b.n	c0076ce <__swsetup_r+0xba>
 c0076de:	bf00      	nop
 c0076e0:	30000010 	.word	0x30000010
 c0076e4:	0c00b1b4 	.word	0x0c00b1b4
 c0076e8:	0c00b1d4 	.word	0x0c00b1d4
 c0076ec:	0c00b194 	.word	0x0c00b194

0c0076f0 <quorem>:
 c0076f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0076f4:	6903      	ldr	r3, [r0, #16]
 c0076f6:	4607      	mov	r7, r0
 c0076f8:	690c      	ldr	r4, [r1, #16]
 c0076fa:	42a3      	cmp	r3, r4
 c0076fc:	f2c0 8087 	blt.w	c00780e <quorem+0x11e>
 c007700:	3c01      	subs	r4, #1
 c007702:	f100 0514 	add.w	r5, r0, #20
 c007706:	f101 0814 	add.w	r8, r1, #20
 c00770a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 c00770e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 c007712:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 c007716:	9301      	str	r3, [sp, #4]
 c007718:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 c00771c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 c007720:	3301      	adds	r3, #1
 c007722:	429a      	cmp	r2, r3
 c007724:	fbb2 f6f3 	udiv	r6, r2, r3
 c007728:	d335      	bcc.n	c007796 <quorem+0xa6>
 c00772a:	f04f 0e00 	mov.w	lr, #0
 c00772e:	4640      	mov	r0, r8
 c007730:	46ac      	mov	ip, r5
 c007732:	46f2      	mov	sl, lr
 c007734:	f850 2b04 	ldr.w	r2, [r0], #4
 c007738:	b293      	uxth	r3, r2
 c00773a:	4581      	cmp	r9, r0
 c00773c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 c007740:	fb06 e303 	mla	r3, r6, r3, lr
 c007744:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 c007748:	b29b      	uxth	r3, r3
 c00774a:	fb06 e202 	mla	r2, r6, r2, lr
 c00774e:	ebaa 0303 	sub.w	r3, sl, r3
 c007752:	f8dc a000 	ldr.w	sl, [ip]
 c007756:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c00775a:	fa1f fa8a 	uxth.w	sl, sl
 c00775e:	b292      	uxth	r2, r2
 c007760:	4453      	add	r3, sl
 c007762:	9300      	str	r3, [sp, #0]
 c007764:	f8dc 3000 	ldr.w	r3, [ip]
 c007768:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 c00776c:	9b00      	ldr	r3, [sp, #0]
 c00776e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 c007772:	f8bd 3000 	ldrh.w	r3, [sp]
 c007776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 c00777a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 c00777e:	f84c 3b04 	str.w	r3, [ip], #4
 c007782:	d2d7      	bcs.n	c007734 <quorem+0x44>
 c007784:	f855 300b 	ldr.w	r3, [r5, fp]
 c007788:	b92b      	cbnz	r3, c007796 <quorem+0xa6>
 c00778a:	9b01      	ldr	r3, [sp, #4]
 c00778c:	3b04      	subs	r3, #4
 c00778e:	429d      	cmp	r5, r3
 c007790:	461a      	mov	r2, r3
 c007792:	d330      	bcc.n	c0077f6 <quorem+0x106>
 c007794:	613c      	str	r4, [r7, #16]
 c007796:	4638      	mov	r0, r7
 c007798:	f001 feea 	bl	c009570 <__mcmp>
 c00779c:	2800      	cmp	r0, #0
 c00779e:	db26      	blt.n	c0077ee <quorem+0xfe>
 c0077a0:	3601      	adds	r6, #1
 c0077a2:	4628      	mov	r0, r5
 c0077a4:	f04f 0c00 	mov.w	ip, #0
 c0077a8:	f858 1b04 	ldr.w	r1, [r8], #4
 c0077ac:	f8d0 e000 	ldr.w	lr, [r0]
 c0077b0:	b28b      	uxth	r3, r1
 c0077b2:	45c1      	cmp	r9, r8
 c0077b4:	fa1f f28e 	uxth.w	r2, lr
 c0077b8:	ebac 0303 	sub.w	r3, ip, r3
 c0077bc:	4413      	add	r3, r2
 c0077be:	ea4f 4211 	mov.w	r2, r1, lsr #16
 c0077c2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 c0077c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 c0077ca:	b29b      	uxth	r3, r3
 c0077cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 c0077d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 c0077d4:	f840 3b04 	str.w	r3, [r0], #4
 c0077d8:	d2e6      	bcs.n	c0077a8 <quorem+0xb8>
 c0077da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 c0077de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 c0077e2:	b922      	cbnz	r2, c0077ee <quorem+0xfe>
 c0077e4:	3b04      	subs	r3, #4
 c0077e6:	429d      	cmp	r5, r3
 c0077e8:	461a      	mov	r2, r3
 c0077ea:	d30a      	bcc.n	c007802 <quorem+0x112>
 c0077ec:	613c      	str	r4, [r7, #16]
 c0077ee:	4630      	mov	r0, r6
 c0077f0:	b003      	add	sp, #12
 c0077f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0077f6:	6812      	ldr	r2, [r2, #0]
 c0077f8:	3b04      	subs	r3, #4
 c0077fa:	2a00      	cmp	r2, #0
 c0077fc:	d1ca      	bne.n	c007794 <quorem+0xa4>
 c0077fe:	3c01      	subs	r4, #1
 c007800:	e7c5      	b.n	c00778e <quorem+0x9e>
 c007802:	6812      	ldr	r2, [r2, #0]
 c007804:	3b04      	subs	r3, #4
 c007806:	2a00      	cmp	r2, #0
 c007808:	d1f0      	bne.n	c0077ec <quorem+0xfc>
 c00780a:	3c01      	subs	r4, #1
 c00780c:	e7eb      	b.n	c0077e6 <quorem+0xf6>
 c00780e:	2000      	movs	r0, #0
 c007810:	e7ee      	b.n	c0077f0 <quorem+0x100>
 c007812:	0000      	movs	r0, r0
 c007814:	0000      	movs	r0, r0
	...

0c007818 <_dtoa_r>:
 c007818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c00781c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 c00781e:	4604      	mov	r4, r0
 c007820:	ee10 aa10 	vmov	sl, s0
 c007824:	ed2d 8b04 	vpush	{d8-d9}
 c007828:	b093      	sub	sp, #76	; 0x4c
 c00782a:	ec57 6b10 	vmov	r6, r7, d0
 c00782e:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 c007832:	46bb      	mov	fp, r7
 c007834:	9106      	str	r1, [sp, #24]
 c007836:	9209      	str	r2, [sp, #36]	; 0x24
 c007838:	930c      	str	r3, [sp, #48]	; 0x30
 c00783a:	b975      	cbnz	r5, c00785a <_dtoa_r+0x42>
 c00783c:	2010      	movs	r0, #16
 c00783e:	f001 fb95 	bl	c008f6c <malloc>
 c007842:	4602      	mov	r2, r0
 c007844:	6260      	str	r0, [r4, #36]	; 0x24
 c007846:	b920      	cbnz	r0, c007852 <_dtoa_r+0x3a>
 c007848:	4ba7      	ldr	r3, [pc, #668]	; (c007ae8 <_dtoa_r+0x2d0>)
 c00784a:	21ea      	movs	r1, #234	; 0xea
 c00784c:	48a7      	ldr	r0, [pc, #668]	; (c007aec <_dtoa_r+0x2d4>)
 c00784e:	f003 f9f7 	bl	c00ac40 <__assert_func>
 c007852:	e9c0 5501 	strd	r5, r5, [r0, #4]
 c007856:	6005      	str	r5, [r0, #0]
 c007858:	60c5      	str	r5, [r0, #12]
 c00785a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c00785c:	6819      	ldr	r1, [r3, #0]
 c00785e:	b151      	cbz	r1, c007876 <_dtoa_r+0x5e>
 c007860:	685a      	ldr	r2, [r3, #4]
 c007862:	2301      	movs	r3, #1
 c007864:	4620      	mov	r0, r4
 c007866:	4093      	lsls	r3, r2
 c007868:	604a      	str	r2, [r1, #4]
 c00786a:	608b      	str	r3, [r1, #8]
 c00786c:	f001 fbf4 	bl	c009058 <_Bfree>
 c007870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c007872:	2200      	movs	r2, #0
 c007874:	601a      	str	r2, [r3, #0]
 c007876:	1e3b      	subs	r3, r7, #0
 c007878:	bfad      	iteet	ge
 c00787a:	2300      	movge	r3, #0
 c00787c:	2201      	movlt	r2, #1
 c00787e:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 c007882:	f8c8 3000 	strge.w	r3, [r8]
 c007886:	4b9a      	ldr	r3, [pc, #616]	; (c007af0 <_dtoa_r+0x2d8>)
 c007888:	bfb8      	it	lt
 c00788a:	f8c8 2000 	strlt.w	r2, [r8]
 c00788e:	ea33 030b 	bics.w	r3, r3, fp
 c007892:	d11b      	bne.n	c0078cc <_dtoa_r+0xb4>
 c007894:	f242 730f 	movw	r3, #9999	; 0x270f
 c007898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 c00789a:	6013      	str	r3, [r2, #0]
 c00789c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 c0078a0:	4333      	orrs	r3, r6
 c0078a2:	f000 858f 	beq.w	c0083c4 <_dtoa_r+0xbac>
 c0078a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 c0078a8:	b963      	cbnz	r3, c0078c4 <_dtoa_r+0xac>
 c0078aa:	4b92      	ldr	r3, [pc, #584]	; (c007af4 <_dtoa_r+0x2dc>)
 c0078ac:	e022      	b.n	c0078f4 <_dtoa_r+0xdc>
 c0078ae:	4b92      	ldr	r3, [pc, #584]	; (c007af8 <_dtoa_r+0x2e0>)
 c0078b0:	9301      	str	r3, [sp, #4]
 c0078b2:	3308      	adds	r3, #8
 c0078b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 c0078b6:	6013      	str	r3, [r2, #0]
 c0078b8:	9801      	ldr	r0, [sp, #4]
 c0078ba:	b013      	add	sp, #76	; 0x4c
 c0078bc:	ecbd 8b04 	vpop	{d8-d9}
 c0078c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0078c4:	4b8b      	ldr	r3, [pc, #556]	; (c007af4 <_dtoa_r+0x2dc>)
 c0078c6:	9301      	str	r3, [sp, #4]
 c0078c8:	3303      	adds	r3, #3
 c0078ca:	e7f3      	b.n	c0078b4 <_dtoa_r+0x9c>
 c0078cc:	2200      	movs	r2, #0
 c0078ce:	2300      	movs	r3, #0
 c0078d0:	4650      	mov	r0, sl
 c0078d2:	4659      	mov	r1, fp
 c0078d4:	f7f9 f97e 	bl	c000bd4 <__aeabi_dcmpeq>
 c0078d8:	4680      	mov	r8, r0
 c0078da:	ec4b ab19 	vmov	d9, sl, fp
 c0078de:	b158      	cbz	r0, c0078f8 <_dtoa_r+0xe0>
 c0078e0:	2301      	movs	r3, #1
 c0078e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 c0078e4:	6013      	str	r3, [r2, #0]
 c0078e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 c0078e8:	2b00      	cmp	r3, #0
 c0078ea:	f000 8568 	beq.w	c0083be <_dtoa_r+0xba6>
 c0078ee:	4883      	ldr	r0, [pc, #524]	; (c007afc <_dtoa_r+0x2e4>)
 c0078f0:	6018      	str	r0, [r3, #0]
 c0078f2:	1e43      	subs	r3, r0, #1
 c0078f4:	9301      	str	r3, [sp, #4]
 c0078f6:	e7df      	b.n	c0078b8 <_dtoa_r+0xa0>
 c0078f8:	f3cb 550a 	ubfx	r5, fp, #20, #11
 c0078fc:	aa10      	add	r2, sp, #64	; 0x40
 c0078fe:	a911      	add	r1, sp, #68	; 0x44
 c007900:	4620      	mov	r0, r4
 c007902:	ec4b ab10 	vmov	d0, sl, fp
 c007906:	f001 ff59 	bl	c0097bc <__d2b>
 c00790a:	ee08 0a10 	vmov	s16, r0
 c00790e:	2d00      	cmp	r5, #0
 c007910:	f000 8082 	beq.w	c007a18 <_dtoa_r+0x200>
 c007914:	ee19 3a90 	vmov	r3, s19
 c007918:	4656      	mov	r6, sl
 c00791a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 c00791e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 c007922:	f3c3 0313 	ubfx	r3, r3, #0, #20
 c007926:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 c00792a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 c00792e:	2200      	movs	r2, #0
 c007930:	4b73      	ldr	r3, [pc, #460]	; (c007b00 <_dtoa_r+0x2e8>)
 c007932:	4630      	mov	r0, r6
 c007934:	4639      	mov	r1, r7
 c007936:	f7f8 fd2d 	bl	c000394 <__aeabi_dsub>
 c00793a:	a365      	add	r3, pc, #404	; (adr r3, c007ad0 <_dtoa_r+0x2b8>)
 c00793c:	e9d3 2300 	ldrd	r2, r3, [r3]
 c007940:	f7f8 fee0 	bl	c000704 <__aeabi_dmul>
 c007944:	a364      	add	r3, pc, #400	; (adr r3, c007ad8 <_dtoa_r+0x2c0>)
 c007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00794a:	f7f8 fd25 	bl	c000398 <__adddf3>
 c00794e:	4606      	mov	r6, r0
 c007950:	460f      	mov	r7, r1
 c007952:	4628      	mov	r0, r5
 c007954:	f7f8 fe6c 	bl	c000630 <__aeabi_i2d>
 c007958:	a361      	add	r3, pc, #388	; (adr r3, c007ae0 <_dtoa_r+0x2c8>)
 c00795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00795e:	f7f8 fed1 	bl	c000704 <__aeabi_dmul>
 c007962:	4602      	mov	r2, r0
 c007964:	460b      	mov	r3, r1
 c007966:	4630      	mov	r0, r6
 c007968:	4639      	mov	r1, r7
 c00796a:	f7f8 fd15 	bl	c000398 <__adddf3>
 c00796e:	4606      	mov	r6, r0
 c007970:	460f      	mov	r7, r1
 c007972:	f7f9 f977 	bl	c000c64 <__aeabi_d2iz>
 c007976:	2200      	movs	r2, #0
 c007978:	9000      	str	r0, [sp, #0]
 c00797a:	2300      	movs	r3, #0
 c00797c:	4630      	mov	r0, r6
 c00797e:	4639      	mov	r1, r7
 c007980:	f7f9 f932 	bl	c000be8 <__aeabi_dcmplt>
 c007984:	b150      	cbz	r0, c00799c <_dtoa_r+0x184>
 c007986:	9800      	ldr	r0, [sp, #0]
 c007988:	f7f8 fe52 	bl	c000630 <__aeabi_i2d>
 c00798c:	4632      	mov	r2, r6
 c00798e:	463b      	mov	r3, r7
 c007990:	f7f9 f920 	bl	c000bd4 <__aeabi_dcmpeq>
 c007994:	b910      	cbnz	r0, c00799c <_dtoa_r+0x184>
 c007996:	9b00      	ldr	r3, [sp, #0]
 c007998:	3b01      	subs	r3, #1
 c00799a:	9300      	str	r3, [sp, #0]
 c00799c:	9b00      	ldr	r3, [sp, #0]
 c00799e:	2b16      	cmp	r3, #22
 c0079a0:	d859      	bhi.n	c007a56 <_dtoa_r+0x23e>
 c0079a2:	9a00      	ldr	r2, [sp, #0]
 c0079a4:	4b57      	ldr	r3, [pc, #348]	; (c007b04 <_dtoa_r+0x2ec>)
 c0079a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 c0079aa:	ec51 0b19 	vmov	r0, r1, d9
 c0079ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0079b2:	f7f9 f919 	bl	c000be8 <__aeabi_dcmplt>
 c0079b6:	2800      	cmp	r0, #0
 c0079b8:	d04f      	beq.n	c007a5a <_dtoa_r+0x242>
 c0079ba:	9b00      	ldr	r3, [sp, #0]
 c0079bc:	3b01      	subs	r3, #1
 c0079be:	9300      	str	r3, [sp, #0]
 c0079c0:	2300      	movs	r3, #0
 c0079c2:	930b      	str	r3, [sp, #44]	; 0x2c
 c0079c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c0079c6:	1b5d      	subs	r5, r3, r5
 c0079c8:	1e6b      	subs	r3, r5, #1
 c0079ca:	9305      	str	r3, [sp, #20]
 c0079cc:	bf49      	itett	mi
 c0079ce:	f1c5 0301 	rsbmi	r3, r5, #1
 c0079d2:	2300      	movpl	r3, #0
 c0079d4:	9304      	strmi	r3, [sp, #16]
 c0079d6:	2300      	movmi	r3, #0
 c0079d8:	bf54      	ite	pl
 c0079da:	9304      	strpl	r3, [sp, #16]
 c0079dc:	9305      	strmi	r3, [sp, #20]
 c0079de:	9b00      	ldr	r3, [sp, #0]
 c0079e0:	2b00      	cmp	r3, #0
 c0079e2:	db3c      	blt.n	c007a5e <_dtoa_r+0x246>
 c0079e4:	9b05      	ldr	r3, [sp, #20]
 c0079e6:	9a00      	ldr	r2, [sp, #0]
 c0079e8:	4413      	add	r3, r2
 c0079ea:	920a      	str	r2, [sp, #40]	; 0x28
 c0079ec:	9305      	str	r3, [sp, #20]
 c0079ee:	2300      	movs	r3, #0
 c0079f0:	9307      	str	r3, [sp, #28]
 c0079f2:	9b06      	ldr	r3, [sp, #24]
 c0079f4:	2b09      	cmp	r3, #9
 c0079f6:	f200 8089 	bhi.w	c007b0c <_dtoa_r+0x2f4>
 c0079fa:	2b05      	cmp	r3, #5
 c0079fc:	bfc5      	ittet	gt
 c0079fe:	3b04      	subgt	r3, #4
 c007a00:	2500      	movgt	r5, #0
 c007a02:	2501      	movle	r5, #1
 c007a04:	9306      	strgt	r3, [sp, #24]
 c007a06:	9b06      	ldr	r3, [sp, #24]
 c007a08:	3b02      	subs	r3, #2
 c007a0a:	2b03      	cmp	r3, #3
 c007a0c:	f200 8089 	bhi.w	c007b22 <_dtoa_r+0x30a>
 c007a10:	e8df f003 	tbb	[pc, r3]
 c007a14:	5a393b2e 	.word	0x5a393b2e
 c007a18:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 c007a1c:	441d      	add	r5, r3
 c007a1e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 c007a22:	2b20      	cmp	r3, #32
 c007a24:	bfc6      	itte	gt
 c007a26:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 c007a2a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 c007a2e:	f1c3 0320 	rsble	r3, r3, #32
 c007a32:	f105 35ff 	add.w	r5, r5, #4294967295
 c007a36:	bfc5      	ittet	gt
 c007a38:	fa0b f303 	lslgt.w	r3, fp, r3
 c007a3c:	fa26 f000 	lsrgt.w	r0, r6, r0
 c007a40:	fa06 f003 	lslle.w	r0, r6, r3
 c007a44:	4318      	orrgt	r0, r3
 c007a46:	f7f8 fde3 	bl	c000610 <__aeabi_ui2d>
 c007a4a:	2301      	movs	r3, #1
 c007a4c:	4606      	mov	r6, r0
 c007a4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 c007a52:	930e      	str	r3, [sp, #56]	; 0x38
 c007a54:	e76b      	b.n	c00792e <_dtoa_r+0x116>
 c007a56:	2301      	movs	r3, #1
 c007a58:	e7b3      	b.n	c0079c2 <_dtoa_r+0x1aa>
 c007a5a:	900b      	str	r0, [sp, #44]	; 0x2c
 c007a5c:	e7b2      	b.n	c0079c4 <_dtoa_r+0x1ac>
 c007a5e:	9b04      	ldr	r3, [sp, #16]
 c007a60:	9a00      	ldr	r2, [sp, #0]
 c007a62:	1a9b      	subs	r3, r3, r2
 c007a64:	9304      	str	r3, [sp, #16]
 c007a66:	4253      	negs	r3, r2
 c007a68:	9307      	str	r3, [sp, #28]
 c007a6a:	2300      	movs	r3, #0
 c007a6c:	930a      	str	r3, [sp, #40]	; 0x28
 c007a6e:	e7c0      	b.n	c0079f2 <_dtoa_r+0x1da>
 c007a70:	2300      	movs	r3, #0
 c007a72:	9308      	str	r3, [sp, #32]
 c007a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c007a76:	2b00      	cmp	r3, #0
 c007a78:	dc56      	bgt.n	c007b28 <_dtoa_r+0x310>
 c007a7a:	2301      	movs	r3, #1
 c007a7c:	461a      	mov	r2, r3
 c007a7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 c007a82:	9209      	str	r2, [sp, #36]	; 0x24
 c007a84:	e00c      	b.n	c007aa0 <_dtoa_r+0x288>
 c007a86:	2301      	movs	r3, #1
 c007a88:	e7f3      	b.n	c007a72 <_dtoa_r+0x25a>
 c007a8a:	2300      	movs	r3, #0
 c007a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c007a8e:	9308      	str	r3, [sp, #32]
 c007a90:	9b00      	ldr	r3, [sp, #0]
 c007a92:	4413      	add	r3, r2
 c007a94:	9302      	str	r3, [sp, #8]
 c007a96:	3301      	adds	r3, #1
 c007a98:	2b01      	cmp	r3, #1
 c007a9a:	9303      	str	r3, [sp, #12]
 c007a9c:	bfb8      	it	lt
 c007a9e:	2301      	movlt	r3, #1
 c007aa0:	2200      	movs	r2, #0
 c007aa2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 c007aa4:	6042      	str	r2, [r0, #4]
 c007aa6:	2204      	movs	r2, #4
 c007aa8:	f102 0614 	add.w	r6, r2, #20
 c007aac:	6841      	ldr	r1, [r0, #4]
 c007aae:	429e      	cmp	r6, r3
 c007ab0:	d93e      	bls.n	c007b30 <_dtoa_r+0x318>
 c007ab2:	4620      	mov	r0, r4
 c007ab4:	f001 fa90 	bl	c008fd8 <_Balloc>
 c007ab8:	9001      	str	r0, [sp, #4]
 c007aba:	2800      	cmp	r0, #0
 c007abc:	d13c      	bne.n	c007b38 <_dtoa_r+0x320>
 c007abe:	4b12      	ldr	r3, [pc, #72]	; (c007b08 <_dtoa_r+0x2f0>)
 c007ac0:	4602      	mov	r2, r0
 c007ac2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 c007ac6:	e6c1      	b.n	c00784c <_dtoa_r+0x34>
 c007ac8:	2301      	movs	r3, #1
 c007aca:	e7df      	b.n	c007a8c <_dtoa_r+0x274>
 c007acc:	f3af 8000 	nop.w
 c007ad0:	636f4361 	.word	0x636f4361
 c007ad4:	3fd287a7 	.word	0x3fd287a7
 c007ad8:	8b60c8b3 	.word	0x8b60c8b3
 c007adc:	3fc68a28 	.word	0x3fc68a28
 c007ae0:	509f79fb 	.word	0x509f79fb
 c007ae4:	3fd34413 	.word	0x3fd34413
 c007ae8:	0c00b10e 	.word	0x0c00b10e
 c007aec:	0c00b125 	.word	0x0c00b125
 c007af0:	7ff00000 	.word	0x7ff00000
 c007af4:	0c00b10a 	.word	0x0c00b10a
 c007af8:	0c00b101 	.word	0x0c00b101
 c007afc:	0c00b3e2 	.word	0x0c00b3e2
 c007b00:	3ff80000 	.word	0x3ff80000
 c007b04:	0c00b2f8 	.word	0x0c00b2f8
 c007b08:	0c00b180 	.word	0x0c00b180
 c007b0c:	2501      	movs	r5, #1
 c007b0e:	2300      	movs	r3, #0
 c007b10:	9508      	str	r5, [sp, #32]
 c007b12:	9306      	str	r3, [sp, #24]
 c007b14:	f04f 33ff 	mov.w	r3, #4294967295
 c007b18:	2200      	movs	r2, #0
 c007b1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 c007b1e:	2312      	movs	r3, #18
 c007b20:	e7af      	b.n	c007a82 <_dtoa_r+0x26a>
 c007b22:	2301      	movs	r3, #1
 c007b24:	9308      	str	r3, [sp, #32]
 c007b26:	e7f5      	b.n	c007b14 <_dtoa_r+0x2fc>
 c007b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c007b2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 c007b2e:	e7b7      	b.n	c007aa0 <_dtoa_r+0x288>
 c007b30:	3101      	adds	r1, #1
 c007b32:	0052      	lsls	r2, r2, #1
 c007b34:	6041      	str	r1, [r0, #4]
 c007b36:	e7b7      	b.n	c007aa8 <_dtoa_r+0x290>
 c007b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c007b3a:	9a01      	ldr	r2, [sp, #4]
 c007b3c:	601a      	str	r2, [r3, #0]
 c007b3e:	9b03      	ldr	r3, [sp, #12]
 c007b40:	2b0e      	cmp	r3, #14
 c007b42:	f200 809d 	bhi.w	c007c80 <_dtoa_r+0x468>
 c007b46:	2d00      	cmp	r5, #0
 c007b48:	f000 809a 	beq.w	c007c80 <_dtoa_r+0x468>
 c007b4c:	9b00      	ldr	r3, [sp, #0]
 c007b4e:	2b00      	cmp	r3, #0
 c007b50:	dd32      	ble.n	c007bb8 <_dtoa_r+0x3a0>
 c007b52:	f003 030f 	and.w	r3, r3, #15
 c007b56:	4ab6      	ldr	r2, [pc, #728]	; (c007e30 <_dtoa_r+0x618>)
 c007b58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 c007b5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 c007b60:	9b00      	ldr	r3, [sp, #0]
 c007b62:	05d8      	lsls	r0, r3, #23
 c007b64:	ea4f 1723 	mov.w	r7, r3, asr #4
 c007b68:	d516      	bpl.n	c007b98 <_dtoa_r+0x380>
 c007b6a:	4bb2      	ldr	r3, [pc, #712]	; (c007e34 <_dtoa_r+0x61c>)
 c007b6c:	f007 070f 	and.w	r7, r7, #15
 c007b70:	2503      	movs	r5, #3
 c007b72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 c007b76:	ec51 0b19 	vmov	r0, r1, d9
 c007b7a:	f7f8 feed 	bl	c000958 <__aeabi_ddiv>
 c007b7e:	4682      	mov	sl, r0
 c007b80:	468b      	mov	fp, r1
 c007b82:	4eac      	ldr	r6, [pc, #688]	; (c007e34 <_dtoa_r+0x61c>)
 c007b84:	b957      	cbnz	r7, c007b9c <_dtoa_r+0x384>
 c007b86:	4642      	mov	r2, r8
 c007b88:	464b      	mov	r3, r9
 c007b8a:	4650      	mov	r0, sl
 c007b8c:	4659      	mov	r1, fp
 c007b8e:	f7f8 fee3 	bl	c000958 <__aeabi_ddiv>
 c007b92:	4682      	mov	sl, r0
 c007b94:	468b      	mov	fp, r1
 c007b96:	e028      	b.n	c007bea <_dtoa_r+0x3d2>
 c007b98:	2502      	movs	r5, #2
 c007b9a:	e7f2      	b.n	c007b82 <_dtoa_r+0x36a>
 c007b9c:	07f9      	lsls	r1, r7, #31
 c007b9e:	d508      	bpl.n	c007bb2 <_dtoa_r+0x39a>
 c007ba0:	4640      	mov	r0, r8
 c007ba2:	4649      	mov	r1, r9
 c007ba4:	3501      	adds	r5, #1
 c007ba6:	e9d6 2300 	ldrd	r2, r3, [r6]
 c007baa:	f7f8 fdab 	bl	c000704 <__aeabi_dmul>
 c007bae:	4680      	mov	r8, r0
 c007bb0:	4689      	mov	r9, r1
 c007bb2:	107f      	asrs	r7, r7, #1
 c007bb4:	3608      	adds	r6, #8
 c007bb6:	e7e5      	b.n	c007b84 <_dtoa_r+0x36c>
 c007bb8:	f000 809b 	beq.w	c007cf2 <_dtoa_r+0x4da>
 c007bbc:	9b00      	ldr	r3, [sp, #0]
 c007bbe:	2502      	movs	r5, #2
 c007bc0:	4f9c      	ldr	r7, [pc, #624]	; (c007e34 <_dtoa_r+0x61c>)
 c007bc2:	425e      	negs	r6, r3
 c007bc4:	4b9a      	ldr	r3, [pc, #616]	; (c007e30 <_dtoa_r+0x618>)
 c007bc6:	f006 020f 	and.w	r2, r6, #15
 c007bca:	1136      	asrs	r6, r6, #4
 c007bcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 c007bd0:	ec51 0b19 	vmov	r0, r1, d9
 c007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 c007bd8:	f7f8 fd94 	bl	c000704 <__aeabi_dmul>
 c007bdc:	2300      	movs	r3, #0
 c007bde:	4682      	mov	sl, r0
 c007be0:	468b      	mov	fp, r1
 c007be2:	2e00      	cmp	r6, #0
 c007be4:	d17a      	bne.n	c007cdc <_dtoa_r+0x4c4>
 c007be6:	2b00      	cmp	r3, #0
 c007be8:	d1d3      	bne.n	c007b92 <_dtoa_r+0x37a>
 c007bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c007bec:	2b00      	cmp	r3, #0
 c007bee:	f000 8082 	beq.w	c007cf6 <_dtoa_r+0x4de>
 c007bf2:	2200      	movs	r2, #0
 c007bf4:	4b90      	ldr	r3, [pc, #576]	; (c007e38 <_dtoa_r+0x620>)
 c007bf6:	4650      	mov	r0, sl
 c007bf8:	4659      	mov	r1, fp
 c007bfa:	f7f8 fff5 	bl	c000be8 <__aeabi_dcmplt>
 c007bfe:	2800      	cmp	r0, #0
 c007c00:	d079      	beq.n	c007cf6 <_dtoa_r+0x4de>
 c007c02:	9b03      	ldr	r3, [sp, #12]
 c007c04:	2b00      	cmp	r3, #0
 c007c06:	d076      	beq.n	c007cf6 <_dtoa_r+0x4de>
 c007c08:	9b02      	ldr	r3, [sp, #8]
 c007c0a:	2b00      	cmp	r3, #0
 c007c0c:	dd36      	ble.n	c007c7c <_dtoa_r+0x464>
 c007c0e:	9b00      	ldr	r3, [sp, #0]
 c007c10:	4650      	mov	r0, sl
 c007c12:	4659      	mov	r1, fp
 c007c14:	2200      	movs	r2, #0
 c007c16:	1e5f      	subs	r7, r3, #1
 c007c18:	4b88      	ldr	r3, [pc, #544]	; (c007e3c <_dtoa_r+0x624>)
 c007c1a:	f7f8 fd73 	bl	c000704 <__aeabi_dmul>
 c007c1e:	3501      	adds	r5, #1
 c007c20:	4682      	mov	sl, r0
 c007c22:	468b      	mov	fp, r1
 c007c24:	9e02      	ldr	r6, [sp, #8]
 c007c26:	4628      	mov	r0, r5
 c007c28:	46d0      	mov	r8, sl
 c007c2a:	f7f8 fd01 	bl	c000630 <__aeabi_i2d>
 c007c2e:	4652      	mov	r2, sl
 c007c30:	465b      	mov	r3, fp
 c007c32:	46d9      	mov	r9, fp
 c007c34:	f7f8 fd66 	bl	c000704 <__aeabi_dmul>
 c007c38:	2200      	movs	r2, #0
 c007c3a:	4b81      	ldr	r3, [pc, #516]	; (c007e40 <_dtoa_r+0x628>)
 c007c3c:	f7f8 fbac 	bl	c000398 <__adddf3>
 c007c40:	4682      	mov	sl, r0
 c007c42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 c007c46:	2e00      	cmp	r6, #0
 c007c48:	d158      	bne.n	c007cfc <_dtoa_r+0x4e4>
 c007c4a:	2200      	movs	r2, #0
 c007c4c:	4b7d      	ldr	r3, [pc, #500]	; (c007e44 <_dtoa_r+0x62c>)
 c007c4e:	4640      	mov	r0, r8
 c007c50:	4649      	mov	r1, r9
 c007c52:	f7f8 fb9f 	bl	c000394 <__aeabi_dsub>
 c007c56:	4652      	mov	r2, sl
 c007c58:	465b      	mov	r3, fp
 c007c5a:	4680      	mov	r8, r0
 c007c5c:	4689      	mov	r9, r1
 c007c5e:	f7f8 ffe1 	bl	c000c24 <__aeabi_dcmpgt>
 c007c62:	2800      	cmp	r0, #0
 c007c64:	f040 8293 	bne.w	c00818e <_dtoa_r+0x976>
 c007c68:	4652      	mov	r2, sl
 c007c6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 c007c6e:	4640      	mov	r0, r8
 c007c70:	4649      	mov	r1, r9
 c007c72:	f7f8 ffb9 	bl	c000be8 <__aeabi_dcmplt>
 c007c76:	2800      	cmp	r0, #0
 c007c78:	f040 8287 	bne.w	c00818a <_dtoa_r+0x972>
 c007c7c:	ec5b ab19 	vmov	sl, fp, d9
 c007c80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 c007c82:	2b00      	cmp	r3, #0
 c007c84:	f2c0 8148 	blt.w	c007f18 <_dtoa_r+0x700>
 c007c88:	9a00      	ldr	r2, [sp, #0]
 c007c8a:	2a0e      	cmp	r2, #14
 c007c8c:	f300 8144 	bgt.w	c007f18 <_dtoa_r+0x700>
 c007c90:	4b67      	ldr	r3, [pc, #412]	; (c007e30 <_dtoa_r+0x618>)
 c007c92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 c007c96:	e9d3 8900 	ldrd	r8, r9, [r3]
 c007c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c007c9c:	2b00      	cmp	r3, #0
 c007c9e:	f280 80d5 	bge.w	c007e4c <_dtoa_r+0x634>
 c007ca2:	9b03      	ldr	r3, [sp, #12]
 c007ca4:	2b00      	cmp	r3, #0
 c007ca6:	f300 80d1 	bgt.w	c007e4c <_dtoa_r+0x634>
 c007caa:	f040 826d 	bne.w	c008188 <_dtoa_r+0x970>
 c007cae:	2200      	movs	r2, #0
 c007cb0:	4b64      	ldr	r3, [pc, #400]	; (c007e44 <_dtoa_r+0x62c>)
 c007cb2:	4640      	mov	r0, r8
 c007cb4:	4649      	mov	r1, r9
 c007cb6:	f7f8 fd25 	bl	c000704 <__aeabi_dmul>
 c007cba:	4652      	mov	r2, sl
 c007cbc:	465b      	mov	r3, fp
 c007cbe:	f7f8 ffa7 	bl	c000c10 <__aeabi_dcmpge>
 c007cc2:	9e03      	ldr	r6, [sp, #12]
 c007cc4:	4637      	mov	r7, r6
 c007cc6:	2800      	cmp	r0, #0
 c007cc8:	f040 8243 	bne.w	c008152 <_dtoa_r+0x93a>
 c007ccc:	2331      	movs	r3, #49	; 0x31
 c007cce:	9d01      	ldr	r5, [sp, #4]
 c007cd0:	f805 3b01 	strb.w	r3, [r5], #1
 c007cd4:	9b00      	ldr	r3, [sp, #0]
 c007cd6:	3301      	adds	r3, #1
 c007cd8:	9300      	str	r3, [sp, #0]
 c007cda:	e23e      	b.n	c00815a <_dtoa_r+0x942>
 c007cdc:	07f2      	lsls	r2, r6, #31
 c007cde:	d505      	bpl.n	c007cec <_dtoa_r+0x4d4>
 c007ce0:	3501      	adds	r5, #1
 c007ce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 c007ce6:	f7f8 fd0d 	bl	c000704 <__aeabi_dmul>
 c007cea:	2301      	movs	r3, #1
 c007cec:	1076      	asrs	r6, r6, #1
 c007cee:	3708      	adds	r7, #8
 c007cf0:	e777      	b.n	c007be2 <_dtoa_r+0x3ca>
 c007cf2:	2502      	movs	r5, #2
 c007cf4:	e779      	b.n	c007bea <_dtoa_r+0x3d2>
 c007cf6:	9f00      	ldr	r7, [sp, #0]
 c007cf8:	9e03      	ldr	r6, [sp, #12]
 c007cfa:	e794      	b.n	c007c26 <_dtoa_r+0x40e>
 c007cfc:	9901      	ldr	r1, [sp, #4]
 c007cfe:	4b4c      	ldr	r3, [pc, #304]	; (c007e30 <_dtoa_r+0x618>)
 c007d00:	4431      	add	r1, r6
 c007d02:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 c007d06:	910d      	str	r1, [sp, #52]	; 0x34
 c007d08:	9908      	ldr	r1, [sp, #32]
 c007d0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 c007d0e:	2900      	cmp	r1, #0
 c007d10:	d043      	beq.n	c007d9a <_dtoa_r+0x582>
 c007d12:	2000      	movs	r0, #0
 c007d14:	494c      	ldr	r1, [pc, #304]	; (c007e48 <_dtoa_r+0x630>)
 c007d16:	f7f8 fe1f 	bl	c000958 <__aeabi_ddiv>
 c007d1a:	4652      	mov	r2, sl
 c007d1c:	465b      	mov	r3, fp
 c007d1e:	f7f8 fb39 	bl	c000394 <__aeabi_dsub>
 c007d22:	9d01      	ldr	r5, [sp, #4]
 c007d24:	4682      	mov	sl, r0
 c007d26:	468b      	mov	fp, r1
 c007d28:	4649      	mov	r1, r9
 c007d2a:	4640      	mov	r0, r8
 c007d2c:	f7f8 ff9a 	bl	c000c64 <__aeabi_d2iz>
 c007d30:	4606      	mov	r6, r0
 c007d32:	f7f8 fc7d 	bl	c000630 <__aeabi_i2d>
 c007d36:	4602      	mov	r2, r0
 c007d38:	3630      	adds	r6, #48	; 0x30
 c007d3a:	460b      	mov	r3, r1
 c007d3c:	4640      	mov	r0, r8
 c007d3e:	4649      	mov	r1, r9
 c007d40:	f7f8 fb28 	bl	c000394 <__aeabi_dsub>
 c007d44:	4652      	mov	r2, sl
 c007d46:	465b      	mov	r3, fp
 c007d48:	f805 6b01 	strb.w	r6, [r5], #1
 c007d4c:	4680      	mov	r8, r0
 c007d4e:	4689      	mov	r9, r1
 c007d50:	f7f8 ff4a 	bl	c000be8 <__aeabi_dcmplt>
 c007d54:	2800      	cmp	r0, #0
 c007d56:	d163      	bne.n	c007e20 <_dtoa_r+0x608>
 c007d58:	4642      	mov	r2, r8
 c007d5a:	464b      	mov	r3, r9
 c007d5c:	2000      	movs	r0, #0
 c007d5e:	4936      	ldr	r1, [pc, #216]	; (c007e38 <_dtoa_r+0x620>)
 c007d60:	f7f8 fb18 	bl	c000394 <__aeabi_dsub>
 c007d64:	4652      	mov	r2, sl
 c007d66:	465b      	mov	r3, fp
 c007d68:	f7f8 ff3e 	bl	c000be8 <__aeabi_dcmplt>
 c007d6c:	2800      	cmp	r0, #0
 c007d6e:	f040 80b5 	bne.w	c007edc <_dtoa_r+0x6c4>
 c007d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c007d74:	429d      	cmp	r5, r3
 c007d76:	d081      	beq.n	c007c7c <_dtoa_r+0x464>
 c007d78:	2200      	movs	r2, #0
 c007d7a:	4b30      	ldr	r3, [pc, #192]	; (c007e3c <_dtoa_r+0x624>)
 c007d7c:	4650      	mov	r0, sl
 c007d7e:	4659      	mov	r1, fp
 c007d80:	f7f8 fcc0 	bl	c000704 <__aeabi_dmul>
 c007d84:	2200      	movs	r2, #0
 c007d86:	4682      	mov	sl, r0
 c007d88:	468b      	mov	fp, r1
 c007d8a:	4640      	mov	r0, r8
 c007d8c:	4649      	mov	r1, r9
 c007d8e:	4b2b      	ldr	r3, [pc, #172]	; (c007e3c <_dtoa_r+0x624>)
 c007d90:	f7f8 fcb8 	bl	c000704 <__aeabi_dmul>
 c007d94:	4680      	mov	r8, r0
 c007d96:	4689      	mov	r9, r1
 c007d98:	e7c6      	b.n	c007d28 <_dtoa_r+0x510>
 c007d9a:	4650      	mov	r0, sl
 c007d9c:	4659      	mov	r1, fp
 c007d9e:	f7f8 fcb1 	bl	c000704 <__aeabi_dmul>
 c007da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c007da4:	4682      	mov	sl, r0
 c007da6:	468b      	mov	fp, r1
 c007da8:	9d01      	ldr	r5, [sp, #4]
 c007daa:	930f      	str	r3, [sp, #60]	; 0x3c
 c007dac:	4649      	mov	r1, r9
 c007dae:	4640      	mov	r0, r8
 c007db0:	f7f8 ff58 	bl	c000c64 <__aeabi_d2iz>
 c007db4:	4606      	mov	r6, r0
 c007db6:	f7f8 fc3b 	bl	c000630 <__aeabi_i2d>
 c007dba:	4602      	mov	r2, r0
 c007dbc:	460b      	mov	r3, r1
 c007dbe:	4640      	mov	r0, r8
 c007dc0:	4649      	mov	r1, r9
 c007dc2:	3630      	adds	r6, #48	; 0x30
 c007dc4:	f7f8 fae6 	bl	c000394 <__aeabi_dsub>
 c007dc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c007dca:	f805 6b01 	strb.w	r6, [r5], #1
 c007dce:	4680      	mov	r8, r0
 c007dd0:	429d      	cmp	r5, r3
 c007dd2:	4689      	mov	r9, r1
 c007dd4:	f04f 0200 	mov.w	r2, #0
 c007dd8:	d124      	bne.n	c007e24 <_dtoa_r+0x60c>
 c007dda:	4b1b      	ldr	r3, [pc, #108]	; (c007e48 <_dtoa_r+0x630>)
 c007ddc:	4650      	mov	r0, sl
 c007dde:	4659      	mov	r1, fp
 c007de0:	f7f8 fada 	bl	c000398 <__adddf3>
 c007de4:	4602      	mov	r2, r0
 c007de6:	460b      	mov	r3, r1
 c007de8:	4640      	mov	r0, r8
 c007dea:	4649      	mov	r1, r9
 c007dec:	f7f8 ff1a 	bl	c000c24 <__aeabi_dcmpgt>
 c007df0:	2800      	cmp	r0, #0
 c007df2:	d173      	bne.n	c007edc <_dtoa_r+0x6c4>
 c007df4:	4652      	mov	r2, sl
 c007df6:	465b      	mov	r3, fp
 c007df8:	2000      	movs	r0, #0
 c007dfa:	4913      	ldr	r1, [pc, #76]	; (c007e48 <_dtoa_r+0x630>)
 c007dfc:	f7f8 faca 	bl	c000394 <__aeabi_dsub>
 c007e00:	4602      	mov	r2, r0
 c007e02:	460b      	mov	r3, r1
 c007e04:	4640      	mov	r0, r8
 c007e06:	4649      	mov	r1, r9
 c007e08:	f7f8 feee 	bl	c000be8 <__aeabi_dcmplt>
 c007e0c:	2800      	cmp	r0, #0
 c007e0e:	f43f af35 	beq.w	c007c7c <_dtoa_r+0x464>
 c007e12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 c007e14:	1e6b      	subs	r3, r5, #1
 c007e16:	930f      	str	r3, [sp, #60]	; 0x3c
 c007e18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 c007e1c:	2b30      	cmp	r3, #48	; 0x30
 c007e1e:	d0f8      	beq.n	c007e12 <_dtoa_r+0x5fa>
 c007e20:	9700      	str	r7, [sp, #0]
 c007e22:	e049      	b.n	c007eb8 <_dtoa_r+0x6a0>
 c007e24:	4b05      	ldr	r3, [pc, #20]	; (c007e3c <_dtoa_r+0x624>)
 c007e26:	f7f8 fc6d 	bl	c000704 <__aeabi_dmul>
 c007e2a:	4680      	mov	r8, r0
 c007e2c:	4689      	mov	r9, r1
 c007e2e:	e7bd      	b.n	c007dac <_dtoa_r+0x594>
 c007e30:	0c00b2f8 	.word	0x0c00b2f8
 c007e34:	0c00b2d0 	.word	0x0c00b2d0
 c007e38:	3ff00000 	.word	0x3ff00000
 c007e3c:	40240000 	.word	0x40240000
 c007e40:	401c0000 	.word	0x401c0000
 c007e44:	40140000 	.word	0x40140000
 c007e48:	3fe00000 	.word	0x3fe00000
 c007e4c:	4656      	mov	r6, sl
 c007e4e:	465f      	mov	r7, fp
 c007e50:	9d01      	ldr	r5, [sp, #4]
 c007e52:	4642      	mov	r2, r8
 c007e54:	464b      	mov	r3, r9
 c007e56:	4630      	mov	r0, r6
 c007e58:	4639      	mov	r1, r7
 c007e5a:	f7f8 fd7d 	bl	c000958 <__aeabi_ddiv>
 c007e5e:	f7f8 ff01 	bl	c000c64 <__aeabi_d2iz>
 c007e62:	4682      	mov	sl, r0
 c007e64:	f7f8 fbe4 	bl	c000630 <__aeabi_i2d>
 c007e68:	4642      	mov	r2, r8
 c007e6a:	464b      	mov	r3, r9
 c007e6c:	f7f8 fc4a 	bl	c000704 <__aeabi_dmul>
 c007e70:	4602      	mov	r2, r0
 c007e72:	4630      	mov	r0, r6
 c007e74:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 c007e78:	460b      	mov	r3, r1
 c007e7a:	4639      	mov	r1, r7
 c007e7c:	f7f8 fa8a 	bl	c000394 <__aeabi_dsub>
 c007e80:	f805 6b01 	strb.w	r6, [r5], #1
 c007e84:	9e01      	ldr	r6, [sp, #4]
 c007e86:	4602      	mov	r2, r0
 c007e88:	9f03      	ldr	r7, [sp, #12]
 c007e8a:	460b      	mov	r3, r1
 c007e8c:	1bae      	subs	r6, r5, r6
 c007e8e:	42b7      	cmp	r7, r6
 c007e90:	d135      	bne.n	c007efe <_dtoa_r+0x6e6>
 c007e92:	f7f8 fa81 	bl	c000398 <__adddf3>
 c007e96:	4642      	mov	r2, r8
 c007e98:	464b      	mov	r3, r9
 c007e9a:	4606      	mov	r6, r0
 c007e9c:	460f      	mov	r7, r1
 c007e9e:	f7f8 fec1 	bl	c000c24 <__aeabi_dcmpgt>
 c007ea2:	b9d0      	cbnz	r0, c007eda <_dtoa_r+0x6c2>
 c007ea4:	4642      	mov	r2, r8
 c007ea6:	464b      	mov	r3, r9
 c007ea8:	4630      	mov	r0, r6
 c007eaa:	4639      	mov	r1, r7
 c007eac:	f7f8 fe92 	bl	c000bd4 <__aeabi_dcmpeq>
 c007eb0:	b110      	cbz	r0, c007eb8 <_dtoa_r+0x6a0>
 c007eb2:	f01a 0f01 	tst.w	sl, #1
 c007eb6:	d110      	bne.n	c007eda <_dtoa_r+0x6c2>
 c007eb8:	4620      	mov	r0, r4
 c007eba:	ee18 1a10 	vmov	r1, s16
 c007ebe:	f001 f8cb 	bl	c009058 <_Bfree>
 c007ec2:	2300      	movs	r3, #0
 c007ec4:	9800      	ldr	r0, [sp, #0]
 c007ec6:	702b      	strb	r3, [r5, #0]
 c007ec8:	3001      	adds	r0, #1
 c007eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 c007ecc:	6018      	str	r0, [r3, #0]
 c007ece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 c007ed0:	2b00      	cmp	r3, #0
 c007ed2:	f43f acf1 	beq.w	c0078b8 <_dtoa_r+0xa0>
 c007ed6:	601d      	str	r5, [r3, #0]
 c007ed8:	e4ee      	b.n	c0078b8 <_dtoa_r+0xa0>
 c007eda:	9f00      	ldr	r7, [sp, #0]
 c007edc:	462b      	mov	r3, r5
 c007ede:	461d      	mov	r5, r3
 c007ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 c007ee4:	2a39      	cmp	r2, #57	; 0x39
 c007ee6:	d106      	bne.n	c007ef6 <_dtoa_r+0x6de>
 c007ee8:	9a01      	ldr	r2, [sp, #4]
 c007eea:	429a      	cmp	r2, r3
 c007eec:	d1f7      	bne.n	c007ede <_dtoa_r+0x6c6>
 c007eee:	2230      	movs	r2, #48	; 0x30
 c007ef0:	9901      	ldr	r1, [sp, #4]
 c007ef2:	3701      	adds	r7, #1
 c007ef4:	700a      	strb	r2, [r1, #0]
 c007ef6:	781a      	ldrb	r2, [r3, #0]
 c007ef8:	3201      	adds	r2, #1
 c007efa:	701a      	strb	r2, [r3, #0]
 c007efc:	e790      	b.n	c007e20 <_dtoa_r+0x608>
 c007efe:	2200      	movs	r2, #0
 c007f00:	4ba4      	ldr	r3, [pc, #656]	; (c008194 <_dtoa_r+0x97c>)
 c007f02:	f7f8 fbff 	bl	c000704 <__aeabi_dmul>
 c007f06:	2200      	movs	r2, #0
 c007f08:	2300      	movs	r3, #0
 c007f0a:	4606      	mov	r6, r0
 c007f0c:	460f      	mov	r7, r1
 c007f0e:	f7f8 fe61 	bl	c000bd4 <__aeabi_dcmpeq>
 c007f12:	2800      	cmp	r0, #0
 c007f14:	d09d      	beq.n	c007e52 <_dtoa_r+0x63a>
 c007f16:	e7cf      	b.n	c007eb8 <_dtoa_r+0x6a0>
 c007f18:	9a08      	ldr	r2, [sp, #32]
 c007f1a:	2a00      	cmp	r2, #0
 c007f1c:	f000 80d5 	beq.w	c0080ca <_dtoa_r+0x8b2>
 c007f20:	9a06      	ldr	r2, [sp, #24]
 c007f22:	2a01      	cmp	r2, #1
 c007f24:	f300 80b9 	bgt.w	c00809a <_dtoa_r+0x882>
 c007f28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 c007f2a:	2a00      	cmp	r2, #0
 c007f2c:	f000 80b1 	beq.w	c008092 <_dtoa_r+0x87a>
 c007f30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 c007f34:	9e07      	ldr	r6, [sp, #28]
 c007f36:	9d04      	ldr	r5, [sp, #16]
 c007f38:	9a04      	ldr	r2, [sp, #16]
 c007f3a:	2101      	movs	r1, #1
 c007f3c:	4620      	mov	r0, r4
 c007f3e:	441a      	add	r2, r3
 c007f40:	9204      	str	r2, [sp, #16]
 c007f42:	9a05      	ldr	r2, [sp, #20]
 c007f44:	441a      	add	r2, r3
 c007f46:	9205      	str	r2, [sp, #20]
 c007f48:	f001 f98a 	bl	c009260 <__i2b>
 c007f4c:	4607      	mov	r7, r0
 c007f4e:	2d00      	cmp	r5, #0
 c007f50:	dd0c      	ble.n	c007f6c <_dtoa_r+0x754>
 c007f52:	9b05      	ldr	r3, [sp, #20]
 c007f54:	2b00      	cmp	r3, #0
 c007f56:	dd09      	ble.n	c007f6c <_dtoa_r+0x754>
 c007f58:	42ab      	cmp	r3, r5
 c007f5a:	9a04      	ldr	r2, [sp, #16]
 c007f5c:	bfa8      	it	ge
 c007f5e:	462b      	movge	r3, r5
 c007f60:	1ad2      	subs	r2, r2, r3
 c007f62:	1aed      	subs	r5, r5, r3
 c007f64:	9204      	str	r2, [sp, #16]
 c007f66:	9a05      	ldr	r2, [sp, #20]
 c007f68:	1ad3      	subs	r3, r2, r3
 c007f6a:	9305      	str	r3, [sp, #20]
 c007f6c:	9b07      	ldr	r3, [sp, #28]
 c007f6e:	b31b      	cbz	r3, c007fb8 <_dtoa_r+0x7a0>
 c007f70:	9b08      	ldr	r3, [sp, #32]
 c007f72:	2b00      	cmp	r3, #0
 c007f74:	f000 80ad 	beq.w	c0080d2 <_dtoa_r+0x8ba>
 c007f78:	2e00      	cmp	r6, #0
 c007f7a:	dd13      	ble.n	c007fa4 <_dtoa_r+0x78c>
 c007f7c:	4639      	mov	r1, r7
 c007f7e:	4632      	mov	r2, r6
 c007f80:	4620      	mov	r0, r4
 c007f82:	f001 fa2b 	bl	c0093dc <__pow5mult>
 c007f86:	ee18 2a10 	vmov	r2, s16
 c007f8a:	4601      	mov	r1, r0
 c007f8c:	4607      	mov	r7, r0
 c007f8e:	4620      	mov	r0, r4
 c007f90:	f001 f97c 	bl	c00928c <__multiply>
 c007f94:	4680      	mov	r8, r0
 c007f96:	ee18 1a10 	vmov	r1, s16
 c007f9a:	4620      	mov	r0, r4
 c007f9c:	ee08 8a10 	vmov	s16, r8
 c007fa0:	f001 f85a 	bl	c009058 <_Bfree>
 c007fa4:	9b07      	ldr	r3, [sp, #28]
 c007fa6:	1b9a      	subs	r2, r3, r6
 c007fa8:	d006      	beq.n	c007fb8 <_dtoa_r+0x7a0>
 c007faa:	ee18 1a10 	vmov	r1, s16
 c007fae:	4620      	mov	r0, r4
 c007fb0:	f001 fa14 	bl	c0093dc <__pow5mult>
 c007fb4:	ee08 0a10 	vmov	s16, r0
 c007fb8:	2101      	movs	r1, #1
 c007fba:	4620      	mov	r0, r4
 c007fbc:	f001 f950 	bl	c009260 <__i2b>
 c007fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c007fc2:	4606      	mov	r6, r0
 c007fc4:	2b00      	cmp	r3, #0
 c007fc6:	f340 8086 	ble.w	c0080d6 <_dtoa_r+0x8be>
 c007fca:	461a      	mov	r2, r3
 c007fcc:	4601      	mov	r1, r0
 c007fce:	4620      	mov	r0, r4
 c007fd0:	f001 fa04 	bl	c0093dc <__pow5mult>
 c007fd4:	9b06      	ldr	r3, [sp, #24]
 c007fd6:	4606      	mov	r6, r0
 c007fd8:	2b01      	cmp	r3, #1
 c007fda:	dd7f      	ble.n	c0080dc <_dtoa_r+0x8c4>
 c007fdc:	f04f 0800 	mov.w	r8, #0
 c007fe0:	6933      	ldr	r3, [r6, #16]
 c007fe2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 c007fe6:	6918      	ldr	r0, [r3, #16]
 c007fe8:	f001 f8ea 	bl	c0091c0 <__hi0bits>
 c007fec:	f1c0 0020 	rsb	r0, r0, #32
 c007ff0:	9b05      	ldr	r3, [sp, #20]
 c007ff2:	4418      	add	r0, r3
 c007ff4:	f010 001f 	ands.w	r0, r0, #31
 c007ff8:	f000 8091 	beq.w	c00811e <_dtoa_r+0x906>
 c007ffc:	f1c0 0320 	rsb	r3, r0, #32
 c008000:	2b04      	cmp	r3, #4
 c008002:	f340 8089 	ble.w	c008118 <_dtoa_r+0x900>
 c008006:	f1c0 001c 	rsb	r0, r0, #28
 c00800a:	9b04      	ldr	r3, [sp, #16]
 c00800c:	4405      	add	r5, r0
 c00800e:	4403      	add	r3, r0
 c008010:	9304      	str	r3, [sp, #16]
 c008012:	9b05      	ldr	r3, [sp, #20]
 c008014:	4403      	add	r3, r0
 c008016:	9305      	str	r3, [sp, #20]
 c008018:	9b04      	ldr	r3, [sp, #16]
 c00801a:	2b00      	cmp	r3, #0
 c00801c:	dd07      	ble.n	c00802e <_dtoa_r+0x816>
 c00801e:	ee18 1a10 	vmov	r1, s16
 c008022:	461a      	mov	r2, r3
 c008024:	4620      	mov	r0, r4
 c008026:	f001 fa33 	bl	c009490 <__lshift>
 c00802a:	ee08 0a10 	vmov	s16, r0
 c00802e:	9b05      	ldr	r3, [sp, #20]
 c008030:	2b00      	cmp	r3, #0
 c008032:	dd05      	ble.n	c008040 <_dtoa_r+0x828>
 c008034:	4631      	mov	r1, r6
 c008036:	461a      	mov	r2, r3
 c008038:	4620      	mov	r0, r4
 c00803a:	f001 fa29 	bl	c009490 <__lshift>
 c00803e:	4606      	mov	r6, r0
 c008040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c008042:	2b00      	cmp	r3, #0
 c008044:	d06d      	beq.n	c008122 <_dtoa_r+0x90a>
 c008046:	4631      	mov	r1, r6
 c008048:	ee18 0a10 	vmov	r0, s16
 c00804c:	f001 fa90 	bl	c009570 <__mcmp>
 c008050:	2800      	cmp	r0, #0
 c008052:	da66      	bge.n	c008122 <_dtoa_r+0x90a>
 c008054:	9b00      	ldr	r3, [sp, #0]
 c008056:	ee18 1a10 	vmov	r1, s16
 c00805a:	220a      	movs	r2, #10
 c00805c:	4620      	mov	r0, r4
 c00805e:	3b01      	subs	r3, #1
 c008060:	9300      	str	r3, [sp, #0]
 c008062:	2300      	movs	r3, #0
 c008064:	f001 f81a 	bl	c00909c <__multadd>
 c008068:	9b08      	ldr	r3, [sp, #32]
 c00806a:	ee08 0a10 	vmov	s16, r0
 c00806e:	2b00      	cmp	r3, #0
 c008070:	f000 81af 	beq.w	c0083d2 <_dtoa_r+0xbba>
 c008074:	2300      	movs	r3, #0
 c008076:	4639      	mov	r1, r7
 c008078:	220a      	movs	r2, #10
 c00807a:	4620      	mov	r0, r4
 c00807c:	f001 f80e 	bl	c00909c <__multadd>
 c008080:	9b02      	ldr	r3, [sp, #8]
 c008082:	4607      	mov	r7, r0
 c008084:	2b00      	cmp	r3, #0
 c008086:	f300 808d 	bgt.w	c0081a4 <_dtoa_r+0x98c>
 c00808a:	9b06      	ldr	r3, [sp, #24]
 c00808c:	2b02      	cmp	r3, #2
 c00808e:	dc50      	bgt.n	c008132 <_dtoa_r+0x91a>
 c008090:	e088      	b.n	c0081a4 <_dtoa_r+0x98c>
 c008092:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c008094:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 c008098:	e74c      	b.n	c007f34 <_dtoa_r+0x71c>
 c00809a:	9b03      	ldr	r3, [sp, #12]
 c00809c:	1e5e      	subs	r6, r3, #1
 c00809e:	9b07      	ldr	r3, [sp, #28]
 c0080a0:	42b3      	cmp	r3, r6
 c0080a2:	bfb7      	itett	lt
 c0080a4:	9b07      	ldrlt	r3, [sp, #28]
 c0080a6:	1b9e      	subge	r6, r3, r6
 c0080a8:	9607      	strlt	r6, [sp, #28]
 c0080aa:	1af2      	sublt	r2, r6, r3
 c0080ac:	bfbf      	itttt	lt
 c0080ae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 c0080b0:	2600      	movlt	r6, #0
 c0080b2:	189b      	addlt	r3, r3, r2
 c0080b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 c0080b6:	9b03      	ldr	r3, [sp, #12]
 c0080b8:	2b00      	cmp	r3, #0
 c0080ba:	bfb7      	itett	lt
 c0080bc:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 c0080c0:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 c0080c4:	1a9d      	sublt	r5, r3, r2
 c0080c6:	2300      	movlt	r3, #0
 c0080c8:	e736      	b.n	c007f38 <_dtoa_r+0x720>
 c0080ca:	9e07      	ldr	r6, [sp, #28]
 c0080cc:	9d04      	ldr	r5, [sp, #16]
 c0080ce:	9f08      	ldr	r7, [sp, #32]
 c0080d0:	e73d      	b.n	c007f4e <_dtoa_r+0x736>
 c0080d2:	9a07      	ldr	r2, [sp, #28]
 c0080d4:	e769      	b.n	c007faa <_dtoa_r+0x792>
 c0080d6:	9b06      	ldr	r3, [sp, #24]
 c0080d8:	2b01      	cmp	r3, #1
 c0080da:	dc18      	bgt.n	c00810e <_dtoa_r+0x8f6>
 c0080dc:	f1ba 0f00 	cmp.w	sl, #0
 c0080e0:	d115      	bne.n	c00810e <_dtoa_r+0x8f6>
 c0080e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 c0080e6:	b993      	cbnz	r3, c00810e <_dtoa_r+0x8f6>
 c0080e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 c0080ec:	0d1b      	lsrs	r3, r3, #20
 c0080ee:	051b      	lsls	r3, r3, #20
 c0080f0:	b183      	cbz	r3, c008114 <_dtoa_r+0x8fc>
 c0080f2:	9b04      	ldr	r3, [sp, #16]
 c0080f4:	f04f 0801 	mov.w	r8, #1
 c0080f8:	3301      	adds	r3, #1
 c0080fa:	9304      	str	r3, [sp, #16]
 c0080fc:	9b05      	ldr	r3, [sp, #20]
 c0080fe:	3301      	adds	r3, #1
 c008100:	9305      	str	r3, [sp, #20]
 c008102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c008104:	2b00      	cmp	r3, #0
 c008106:	f47f af6b 	bne.w	c007fe0 <_dtoa_r+0x7c8>
 c00810a:	2001      	movs	r0, #1
 c00810c:	e770      	b.n	c007ff0 <_dtoa_r+0x7d8>
 c00810e:	f04f 0800 	mov.w	r8, #0
 c008112:	e7f6      	b.n	c008102 <_dtoa_r+0x8ea>
 c008114:	4698      	mov	r8, r3
 c008116:	e7f4      	b.n	c008102 <_dtoa_r+0x8ea>
 c008118:	f43f af7e 	beq.w	c008018 <_dtoa_r+0x800>
 c00811c:	4618      	mov	r0, r3
 c00811e:	301c      	adds	r0, #28
 c008120:	e773      	b.n	c00800a <_dtoa_r+0x7f2>
 c008122:	9b03      	ldr	r3, [sp, #12]
 c008124:	2b00      	cmp	r3, #0
 c008126:	dc37      	bgt.n	c008198 <_dtoa_r+0x980>
 c008128:	9b06      	ldr	r3, [sp, #24]
 c00812a:	2b02      	cmp	r3, #2
 c00812c:	dd34      	ble.n	c008198 <_dtoa_r+0x980>
 c00812e:	9b03      	ldr	r3, [sp, #12]
 c008130:	9302      	str	r3, [sp, #8]
 c008132:	9b02      	ldr	r3, [sp, #8]
 c008134:	b96b      	cbnz	r3, c008152 <_dtoa_r+0x93a>
 c008136:	4631      	mov	r1, r6
 c008138:	2205      	movs	r2, #5
 c00813a:	4620      	mov	r0, r4
 c00813c:	f000 ffae 	bl	c00909c <__multadd>
 c008140:	4601      	mov	r1, r0
 c008142:	4606      	mov	r6, r0
 c008144:	ee18 0a10 	vmov	r0, s16
 c008148:	f001 fa12 	bl	c009570 <__mcmp>
 c00814c:	2800      	cmp	r0, #0
 c00814e:	f73f adbd 	bgt.w	c007ccc <_dtoa_r+0x4b4>
 c008152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c008154:	9d01      	ldr	r5, [sp, #4]
 c008156:	43db      	mvns	r3, r3
 c008158:	9300      	str	r3, [sp, #0]
 c00815a:	f04f 0800 	mov.w	r8, #0
 c00815e:	4631      	mov	r1, r6
 c008160:	4620      	mov	r0, r4
 c008162:	f000 ff79 	bl	c009058 <_Bfree>
 c008166:	2f00      	cmp	r7, #0
 c008168:	f43f aea6 	beq.w	c007eb8 <_dtoa_r+0x6a0>
 c00816c:	f1b8 0f00 	cmp.w	r8, #0
 c008170:	d005      	beq.n	c00817e <_dtoa_r+0x966>
 c008172:	45b8      	cmp	r8, r7
 c008174:	d003      	beq.n	c00817e <_dtoa_r+0x966>
 c008176:	4641      	mov	r1, r8
 c008178:	4620      	mov	r0, r4
 c00817a:	f000 ff6d 	bl	c009058 <_Bfree>
 c00817e:	4639      	mov	r1, r7
 c008180:	4620      	mov	r0, r4
 c008182:	f000 ff69 	bl	c009058 <_Bfree>
 c008186:	e697      	b.n	c007eb8 <_dtoa_r+0x6a0>
 c008188:	2600      	movs	r6, #0
 c00818a:	4637      	mov	r7, r6
 c00818c:	e7e1      	b.n	c008152 <_dtoa_r+0x93a>
 c00818e:	9700      	str	r7, [sp, #0]
 c008190:	4637      	mov	r7, r6
 c008192:	e59b      	b.n	c007ccc <_dtoa_r+0x4b4>
 c008194:	40240000 	.word	0x40240000
 c008198:	9b08      	ldr	r3, [sp, #32]
 c00819a:	2b00      	cmp	r3, #0
 c00819c:	f000 80ca 	beq.w	c008334 <_dtoa_r+0xb1c>
 c0081a0:	9b03      	ldr	r3, [sp, #12]
 c0081a2:	9302      	str	r3, [sp, #8]
 c0081a4:	2d00      	cmp	r5, #0
 c0081a6:	dd05      	ble.n	c0081b4 <_dtoa_r+0x99c>
 c0081a8:	4639      	mov	r1, r7
 c0081aa:	462a      	mov	r2, r5
 c0081ac:	4620      	mov	r0, r4
 c0081ae:	f001 f96f 	bl	c009490 <__lshift>
 c0081b2:	4607      	mov	r7, r0
 c0081b4:	f1b8 0f00 	cmp.w	r8, #0
 c0081b8:	d05b      	beq.n	c008272 <_dtoa_r+0xa5a>
 c0081ba:	6879      	ldr	r1, [r7, #4]
 c0081bc:	4620      	mov	r0, r4
 c0081be:	f000 ff0b 	bl	c008fd8 <_Balloc>
 c0081c2:	4605      	mov	r5, r0
 c0081c4:	b928      	cbnz	r0, c0081d2 <_dtoa_r+0x9ba>
 c0081c6:	4b87      	ldr	r3, [pc, #540]	; (c0083e4 <_dtoa_r+0xbcc>)
 c0081c8:	4602      	mov	r2, r0
 c0081ca:	f240 21ea 	movw	r1, #746	; 0x2ea
 c0081ce:	f7ff bb3d 	b.w	c00784c <_dtoa_r+0x34>
 c0081d2:	693a      	ldr	r2, [r7, #16]
 c0081d4:	f107 010c 	add.w	r1, r7, #12
 c0081d8:	300c      	adds	r0, #12
 c0081da:	3202      	adds	r2, #2
 c0081dc:	0092      	lsls	r2, r2, #2
 c0081de:	f000 feed 	bl	c008fbc <memcpy>
 c0081e2:	2201      	movs	r2, #1
 c0081e4:	4629      	mov	r1, r5
 c0081e6:	4620      	mov	r0, r4
 c0081e8:	f001 f952 	bl	c009490 <__lshift>
 c0081ec:	9b01      	ldr	r3, [sp, #4]
 c0081ee:	46b8      	mov	r8, r7
 c0081f0:	4607      	mov	r7, r0
 c0081f2:	f103 0901 	add.w	r9, r3, #1
 c0081f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 c0081fa:	4413      	add	r3, r2
 c0081fc:	9305      	str	r3, [sp, #20]
 c0081fe:	f00a 0301 	and.w	r3, sl, #1
 c008202:	9304      	str	r3, [sp, #16]
 c008204:	4631      	mov	r1, r6
 c008206:	ee18 0a10 	vmov	r0, s16
 c00820a:	f7ff fa71 	bl	c0076f0 <quorem>
 c00820e:	4641      	mov	r1, r8
 c008210:	9002      	str	r0, [sp, #8]
 c008212:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 c008216:	ee18 0a10 	vmov	r0, s16
 c00821a:	f109 3bff 	add.w	fp, r9, #4294967295
 c00821e:	f001 f9a7 	bl	c009570 <__mcmp>
 c008222:	463a      	mov	r2, r7
 c008224:	9003      	str	r0, [sp, #12]
 c008226:	4631      	mov	r1, r6
 c008228:	4620      	mov	r0, r4
 c00822a:	f001 f9bd 	bl	c0095a8 <__mdiff>
 c00822e:	68c2      	ldr	r2, [r0, #12]
 c008230:	4605      	mov	r5, r0
 c008232:	bb02      	cbnz	r2, c008276 <_dtoa_r+0xa5e>
 c008234:	4601      	mov	r1, r0
 c008236:	ee18 0a10 	vmov	r0, s16
 c00823a:	f001 f999 	bl	c009570 <__mcmp>
 c00823e:	4602      	mov	r2, r0
 c008240:	4629      	mov	r1, r5
 c008242:	4620      	mov	r0, r4
 c008244:	9207      	str	r2, [sp, #28]
 c008246:	f000 ff07 	bl	c009058 <_Bfree>
 c00824a:	464d      	mov	r5, r9
 c00824c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 c008250:	ea43 0102 	orr.w	r1, r3, r2
 c008254:	9b04      	ldr	r3, [sp, #16]
 c008256:	430b      	orrs	r3, r1
 c008258:	d10f      	bne.n	c00827a <_dtoa_r+0xa62>
 c00825a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 c00825e:	d02a      	beq.n	c0082b6 <_dtoa_r+0xa9e>
 c008260:	9b03      	ldr	r3, [sp, #12]
 c008262:	2b00      	cmp	r3, #0
 c008264:	dd02      	ble.n	c00826c <_dtoa_r+0xa54>
 c008266:	9b02      	ldr	r3, [sp, #8]
 c008268:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 c00826c:	f88b a000 	strb.w	sl, [fp]
 c008270:	e775      	b.n	c00815e <_dtoa_r+0x946>
 c008272:	4638      	mov	r0, r7
 c008274:	e7ba      	b.n	c0081ec <_dtoa_r+0x9d4>
 c008276:	2201      	movs	r2, #1
 c008278:	e7e2      	b.n	c008240 <_dtoa_r+0xa28>
 c00827a:	9b03      	ldr	r3, [sp, #12]
 c00827c:	2b00      	cmp	r3, #0
 c00827e:	db04      	blt.n	c00828a <_dtoa_r+0xa72>
 c008280:	9906      	ldr	r1, [sp, #24]
 c008282:	430b      	orrs	r3, r1
 c008284:	9904      	ldr	r1, [sp, #16]
 c008286:	430b      	orrs	r3, r1
 c008288:	d122      	bne.n	c0082d0 <_dtoa_r+0xab8>
 c00828a:	2a00      	cmp	r2, #0
 c00828c:	ddee      	ble.n	c00826c <_dtoa_r+0xa54>
 c00828e:	ee18 1a10 	vmov	r1, s16
 c008292:	2201      	movs	r2, #1
 c008294:	4620      	mov	r0, r4
 c008296:	f001 f8fb 	bl	c009490 <__lshift>
 c00829a:	4631      	mov	r1, r6
 c00829c:	ee08 0a10 	vmov	s16, r0
 c0082a0:	f001 f966 	bl	c009570 <__mcmp>
 c0082a4:	2800      	cmp	r0, #0
 c0082a6:	dc03      	bgt.n	c0082b0 <_dtoa_r+0xa98>
 c0082a8:	d1e0      	bne.n	c00826c <_dtoa_r+0xa54>
 c0082aa:	f01a 0f01 	tst.w	sl, #1
 c0082ae:	d0dd      	beq.n	c00826c <_dtoa_r+0xa54>
 c0082b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 c0082b4:	d1d7      	bne.n	c008266 <_dtoa_r+0xa4e>
 c0082b6:	2339      	movs	r3, #57	; 0x39
 c0082b8:	f88b 3000 	strb.w	r3, [fp]
 c0082bc:	462b      	mov	r3, r5
 c0082be:	461d      	mov	r5, r3
 c0082c0:	3b01      	subs	r3, #1
 c0082c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 c0082c6:	2a39      	cmp	r2, #57	; 0x39
 c0082c8:	d070      	beq.n	c0083ac <_dtoa_r+0xb94>
 c0082ca:	3201      	adds	r2, #1
 c0082cc:	701a      	strb	r2, [r3, #0]
 c0082ce:	e746      	b.n	c00815e <_dtoa_r+0x946>
 c0082d0:	2a00      	cmp	r2, #0
 c0082d2:	dd07      	ble.n	c0082e4 <_dtoa_r+0xacc>
 c0082d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 c0082d8:	d0ed      	beq.n	c0082b6 <_dtoa_r+0xa9e>
 c0082da:	f10a 0301 	add.w	r3, sl, #1
 c0082de:	f88b 3000 	strb.w	r3, [fp]
 c0082e2:	e73c      	b.n	c00815e <_dtoa_r+0x946>
 c0082e4:	9b05      	ldr	r3, [sp, #20]
 c0082e6:	f809 ac01 	strb.w	sl, [r9, #-1]
 c0082ea:	4599      	cmp	r9, r3
 c0082ec:	d046      	beq.n	c00837c <_dtoa_r+0xb64>
 c0082ee:	ee18 1a10 	vmov	r1, s16
 c0082f2:	2300      	movs	r3, #0
 c0082f4:	220a      	movs	r2, #10
 c0082f6:	4620      	mov	r0, r4
 c0082f8:	f000 fed0 	bl	c00909c <__multadd>
 c0082fc:	45b8      	cmp	r8, r7
 c0082fe:	ee08 0a10 	vmov	s16, r0
 c008302:	f04f 0300 	mov.w	r3, #0
 c008306:	f04f 020a 	mov.w	r2, #10
 c00830a:	4641      	mov	r1, r8
 c00830c:	4620      	mov	r0, r4
 c00830e:	d106      	bne.n	c00831e <_dtoa_r+0xb06>
 c008310:	f000 fec4 	bl	c00909c <__multadd>
 c008314:	4680      	mov	r8, r0
 c008316:	4607      	mov	r7, r0
 c008318:	f109 0901 	add.w	r9, r9, #1
 c00831c:	e772      	b.n	c008204 <_dtoa_r+0x9ec>
 c00831e:	f000 febd 	bl	c00909c <__multadd>
 c008322:	4639      	mov	r1, r7
 c008324:	4680      	mov	r8, r0
 c008326:	2300      	movs	r3, #0
 c008328:	220a      	movs	r2, #10
 c00832a:	4620      	mov	r0, r4
 c00832c:	f000 feb6 	bl	c00909c <__multadd>
 c008330:	4607      	mov	r7, r0
 c008332:	e7f1      	b.n	c008318 <_dtoa_r+0xb00>
 c008334:	9b03      	ldr	r3, [sp, #12]
 c008336:	9302      	str	r3, [sp, #8]
 c008338:	9d01      	ldr	r5, [sp, #4]
 c00833a:	4631      	mov	r1, r6
 c00833c:	ee18 0a10 	vmov	r0, s16
 c008340:	f7ff f9d6 	bl	c0076f0 <quorem>
 c008344:	9b01      	ldr	r3, [sp, #4]
 c008346:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 c00834a:	f805 ab01 	strb.w	sl, [r5], #1
 c00834e:	1aea      	subs	r2, r5, r3
 c008350:	9b02      	ldr	r3, [sp, #8]
 c008352:	4293      	cmp	r3, r2
 c008354:	dd09      	ble.n	c00836a <_dtoa_r+0xb52>
 c008356:	ee18 1a10 	vmov	r1, s16
 c00835a:	2300      	movs	r3, #0
 c00835c:	220a      	movs	r2, #10
 c00835e:	4620      	mov	r0, r4
 c008360:	f000 fe9c 	bl	c00909c <__multadd>
 c008364:	ee08 0a10 	vmov	s16, r0
 c008368:	e7e7      	b.n	c00833a <_dtoa_r+0xb22>
 c00836a:	9b02      	ldr	r3, [sp, #8]
 c00836c:	f04f 0800 	mov.w	r8, #0
 c008370:	2b00      	cmp	r3, #0
 c008372:	bfcc      	ite	gt
 c008374:	461d      	movgt	r5, r3
 c008376:	2501      	movle	r5, #1
 c008378:	9b01      	ldr	r3, [sp, #4]
 c00837a:	441d      	add	r5, r3
 c00837c:	ee18 1a10 	vmov	r1, s16
 c008380:	2201      	movs	r2, #1
 c008382:	4620      	mov	r0, r4
 c008384:	f001 f884 	bl	c009490 <__lshift>
 c008388:	4631      	mov	r1, r6
 c00838a:	ee08 0a10 	vmov	s16, r0
 c00838e:	f001 f8ef 	bl	c009570 <__mcmp>
 c008392:	2800      	cmp	r0, #0
 c008394:	dc92      	bgt.n	c0082bc <_dtoa_r+0xaa4>
 c008396:	d102      	bne.n	c00839e <_dtoa_r+0xb86>
 c008398:	f01a 0f01 	tst.w	sl, #1
 c00839c:	d18e      	bne.n	c0082bc <_dtoa_r+0xaa4>
 c00839e:	462b      	mov	r3, r5
 c0083a0:	461d      	mov	r5, r3
 c0083a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 c0083a6:	2a30      	cmp	r2, #48	; 0x30
 c0083a8:	d0fa      	beq.n	c0083a0 <_dtoa_r+0xb88>
 c0083aa:	e6d8      	b.n	c00815e <_dtoa_r+0x946>
 c0083ac:	9a01      	ldr	r2, [sp, #4]
 c0083ae:	429a      	cmp	r2, r3
 c0083b0:	d185      	bne.n	c0082be <_dtoa_r+0xaa6>
 c0083b2:	9b00      	ldr	r3, [sp, #0]
 c0083b4:	3301      	adds	r3, #1
 c0083b6:	9300      	str	r3, [sp, #0]
 c0083b8:	2331      	movs	r3, #49	; 0x31
 c0083ba:	7013      	strb	r3, [r2, #0]
 c0083bc:	e6cf      	b.n	c00815e <_dtoa_r+0x946>
 c0083be:	4b0a      	ldr	r3, [pc, #40]	; (c0083e8 <_dtoa_r+0xbd0>)
 c0083c0:	f7ff ba98 	b.w	c0078f4 <_dtoa_r+0xdc>
 c0083c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 c0083c6:	2b00      	cmp	r3, #0
 c0083c8:	f47f aa71 	bne.w	c0078ae <_dtoa_r+0x96>
 c0083cc:	4b07      	ldr	r3, [pc, #28]	; (c0083ec <_dtoa_r+0xbd4>)
 c0083ce:	f7ff ba91 	b.w	c0078f4 <_dtoa_r+0xdc>
 c0083d2:	9b02      	ldr	r3, [sp, #8]
 c0083d4:	2b00      	cmp	r3, #0
 c0083d6:	dcaf      	bgt.n	c008338 <_dtoa_r+0xb20>
 c0083d8:	9b06      	ldr	r3, [sp, #24]
 c0083da:	2b02      	cmp	r3, #2
 c0083dc:	f73f aea9 	bgt.w	c008132 <_dtoa_r+0x91a>
 c0083e0:	e7aa      	b.n	c008338 <_dtoa_r+0xb20>
 c0083e2:	bf00      	nop
 c0083e4:	0c00b180 	.word	0x0c00b180
 c0083e8:	0c00b3e1 	.word	0x0c00b3e1
 c0083ec:	0c00b101 	.word	0x0c00b101

0c0083f0 <__sflush_r>:
 c0083f0:	898a      	ldrh	r2, [r1, #12]
 c0083f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0083f6:	4605      	mov	r5, r0
 c0083f8:	0710      	lsls	r0, r2, #28
 c0083fa:	460c      	mov	r4, r1
 c0083fc:	d458      	bmi.n	c0084b0 <__sflush_r+0xc0>
 c0083fe:	684b      	ldr	r3, [r1, #4]
 c008400:	2b00      	cmp	r3, #0
 c008402:	dc05      	bgt.n	c008410 <__sflush_r+0x20>
 c008404:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 c008406:	2b00      	cmp	r3, #0
 c008408:	dc02      	bgt.n	c008410 <__sflush_r+0x20>
 c00840a:	2000      	movs	r0, #0
 c00840c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c008410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c008412:	2e00      	cmp	r6, #0
 c008414:	d0f9      	beq.n	c00840a <__sflush_r+0x1a>
 c008416:	2300      	movs	r3, #0
 c008418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 c00841c:	682f      	ldr	r7, [r5, #0]
 c00841e:	602b      	str	r3, [r5, #0]
 c008420:	d032      	beq.n	c008488 <__sflush_r+0x98>
 c008422:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c008424:	89a3      	ldrh	r3, [r4, #12]
 c008426:	075a      	lsls	r2, r3, #29
 c008428:	d505      	bpl.n	c008436 <__sflush_r+0x46>
 c00842a:	6863      	ldr	r3, [r4, #4]
 c00842c:	1ac0      	subs	r0, r0, r3
 c00842e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c008430:	b10b      	cbz	r3, c008436 <__sflush_r+0x46>
 c008432:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c008434:	1ac0      	subs	r0, r0, r3
 c008436:	2300      	movs	r3, #0
 c008438:	4602      	mov	r2, r0
 c00843a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c00843c:	4628      	mov	r0, r5
 c00843e:	6a21      	ldr	r1, [r4, #32]
 c008440:	47b0      	blx	r6
 c008442:	1c43      	adds	r3, r0, #1
 c008444:	89a3      	ldrh	r3, [r4, #12]
 c008446:	d106      	bne.n	c008456 <__sflush_r+0x66>
 c008448:	6829      	ldr	r1, [r5, #0]
 c00844a:	291d      	cmp	r1, #29
 c00844c:	d82c      	bhi.n	c0084a8 <__sflush_r+0xb8>
 c00844e:	4a29      	ldr	r2, [pc, #164]	; (c0084f4 <__sflush_r+0x104>)
 c008450:	40ca      	lsrs	r2, r1
 c008452:	07d6      	lsls	r6, r2, #31
 c008454:	d528      	bpl.n	c0084a8 <__sflush_r+0xb8>
 c008456:	2200      	movs	r2, #0
 c008458:	04d9      	lsls	r1, r3, #19
 c00845a:	6062      	str	r2, [r4, #4]
 c00845c:	6922      	ldr	r2, [r4, #16]
 c00845e:	6022      	str	r2, [r4, #0]
 c008460:	d504      	bpl.n	c00846c <__sflush_r+0x7c>
 c008462:	1c42      	adds	r2, r0, #1
 c008464:	d101      	bne.n	c00846a <__sflush_r+0x7a>
 c008466:	682b      	ldr	r3, [r5, #0]
 c008468:	b903      	cbnz	r3, c00846c <__sflush_r+0x7c>
 c00846a:	6560      	str	r0, [r4, #84]	; 0x54
 c00846c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c00846e:	602f      	str	r7, [r5, #0]
 c008470:	2900      	cmp	r1, #0
 c008472:	d0ca      	beq.n	c00840a <__sflush_r+0x1a>
 c008474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c008478:	4299      	cmp	r1, r3
 c00847a:	d002      	beq.n	c008482 <__sflush_r+0x92>
 c00847c:	4628      	mov	r0, r5
 c00847e:	f001 fa87 	bl	c009990 <_free_r>
 c008482:	2000      	movs	r0, #0
 c008484:	6360      	str	r0, [r4, #52]	; 0x34
 c008486:	e7c1      	b.n	c00840c <__sflush_r+0x1c>
 c008488:	6a21      	ldr	r1, [r4, #32]
 c00848a:	2301      	movs	r3, #1
 c00848c:	4628      	mov	r0, r5
 c00848e:	47b0      	blx	r6
 c008490:	1c41      	adds	r1, r0, #1
 c008492:	d1c7      	bne.n	c008424 <__sflush_r+0x34>
 c008494:	682b      	ldr	r3, [r5, #0]
 c008496:	2b00      	cmp	r3, #0
 c008498:	d0c4      	beq.n	c008424 <__sflush_r+0x34>
 c00849a:	2b1d      	cmp	r3, #29
 c00849c:	d001      	beq.n	c0084a2 <__sflush_r+0xb2>
 c00849e:	2b16      	cmp	r3, #22
 c0084a0:	d101      	bne.n	c0084a6 <__sflush_r+0xb6>
 c0084a2:	602f      	str	r7, [r5, #0]
 c0084a4:	e7b1      	b.n	c00840a <__sflush_r+0x1a>
 c0084a6:	89a3      	ldrh	r3, [r4, #12]
 c0084a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c0084ac:	81a3      	strh	r3, [r4, #12]
 c0084ae:	e7ad      	b.n	c00840c <__sflush_r+0x1c>
 c0084b0:	690f      	ldr	r7, [r1, #16]
 c0084b2:	2f00      	cmp	r7, #0
 c0084b4:	d0a9      	beq.n	c00840a <__sflush_r+0x1a>
 c0084b6:	0793      	lsls	r3, r2, #30
 c0084b8:	680e      	ldr	r6, [r1, #0]
 c0084ba:	600f      	str	r7, [r1, #0]
 c0084bc:	bf0c      	ite	eq
 c0084be:	694b      	ldreq	r3, [r1, #20]
 c0084c0:	2300      	movne	r3, #0
 c0084c2:	eba6 0807 	sub.w	r8, r6, r7
 c0084c6:	608b      	str	r3, [r1, #8]
 c0084c8:	f1b8 0f00 	cmp.w	r8, #0
 c0084cc:	dd9d      	ble.n	c00840a <__sflush_r+0x1a>
 c0084ce:	4643      	mov	r3, r8
 c0084d0:	463a      	mov	r2, r7
 c0084d2:	6a21      	ldr	r1, [r4, #32]
 c0084d4:	4628      	mov	r0, r5
 c0084d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 c0084d8:	47b0      	blx	r6
 c0084da:	2800      	cmp	r0, #0
 c0084dc:	dc06      	bgt.n	c0084ec <__sflush_r+0xfc>
 c0084de:	89a3      	ldrh	r3, [r4, #12]
 c0084e0:	f04f 30ff 	mov.w	r0, #4294967295
 c0084e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c0084e8:	81a3      	strh	r3, [r4, #12]
 c0084ea:	e78f      	b.n	c00840c <__sflush_r+0x1c>
 c0084ec:	4407      	add	r7, r0
 c0084ee:	eba8 0800 	sub.w	r8, r8, r0
 c0084f2:	e7e9      	b.n	c0084c8 <__sflush_r+0xd8>
 c0084f4:	20400001 	.word	0x20400001

0c0084f8 <_fflush_r>:
 c0084f8:	b538      	push	{r3, r4, r5, lr}
 c0084fa:	690b      	ldr	r3, [r1, #16]
 c0084fc:	4605      	mov	r5, r0
 c0084fe:	460c      	mov	r4, r1
 c008500:	b913      	cbnz	r3, c008508 <_fflush_r+0x10>
 c008502:	2500      	movs	r5, #0
 c008504:	4628      	mov	r0, r5
 c008506:	bd38      	pop	{r3, r4, r5, pc}
 c008508:	b118      	cbz	r0, c008512 <_fflush_r+0x1a>
 c00850a:	6983      	ldr	r3, [r0, #24]
 c00850c:	b90b      	cbnz	r3, c008512 <_fflush_r+0x1a>
 c00850e:	f000 f899 	bl	c008644 <__sinit>
 c008512:	4b14      	ldr	r3, [pc, #80]	; (c008564 <_fflush_r+0x6c>)
 c008514:	429c      	cmp	r4, r3
 c008516:	d11b      	bne.n	c008550 <_fflush_r+0x58>
 c008518:	686c      	ldr	r4, [r5, #4]
 c00851a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c00851e:	2b00      	cmp	r3, #0
 c008520:	d0ef      	beq.n	c008502 <_fflush_r+0xa>
 c008522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 c008524:	07d0      	lsls	r0, r2, #31
 c008526:	d404      	bmi.n	c008532 <_fflush_r+0x3a>
 c008528:	0599      	lsls	r1, r3, #22
 c00852a:	d402      	bmi.n	c008532 <_fflush_r+0x3a>
 c00852c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00852e:	f000 fcb6 	bl	c008e9e <__retarget_lock_acquire_recursive>
 c008532:	4628      	mov	r0, r5
 c008534:	4621      	mov	r1, r4
 c008536:	f7ff ff5b 	bl	c0083f0 <__sflush_r>
 c00853a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c00853c:	4605      	mov	r5, r0
 c00853e:	07da      	lsls	r2, r3, #31
 c008540:	d4e0      	bmi.n	c008504 <_fflush_r+0xc>
 c008542:	89a3      	ldrh	r3, [r4, #12]
 c008544:	059b      	lsls	r3, r3, #22
 c008546:	d4dd      	bmi.n	c008504 <_fflush_r+0xc>
 c008548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00854a:	f000 fca9 	bl	c008ea0 <__retarget_lock_release_recursive>
 c00854e:	e7d9      	b.n	c008504 <_fflush_r+0xc>
 c008550:	4b05      	ldr	r3, [pc, #20]	; (c008568 <_fflush_r+0x70>)
 c008552:	429c      	cmp	r4, r3
 c008554:	d101      	bne.n	c00855a <_fflush_r+0x62>
 c008556:	68ac      	ldr	r4, [r5, #8]
 c008558:	e7df      	b.n	c00851a <_fflush_r+0x22>
 c00855a:	4b04      	ldr	r3, [pc, #16]	; (c00856c <_fflush_r+0x74>)
 c00855c:	429c      	cmp	r4, r3
 c00855e:	bf08      	it	eq
 c008560:	68ec      	ldreq	r4, [r5, #12]
 c008562:	e7da      	b.n	c00851a <_fflush_r+0x22>
 c008564:	0c00b1b4 	.word	0x0c00b1b4
 c008568:	0c00b1d4 	.word	0x0c00b1d4
 c00856c:	0c00b194 	.word	0x0c00b194

0c008570 <fflush>:
 c008570:	4601      	mov	r1, r0
 c008572:	b920      	cbnz	r0, c00857e <fflush+0xe>
 c008574:	4b04      	ldr	r3, [pc, #16]	; (c008588 <fflush+0x18>)
 c008576:	4905      	ldr	r1, [pc, #20]	; (c00858c <fflush+0x1c>)
 c008578:	6818      	ldr	r0, [r3, #0]
 c00857a:	f000 b8fe 	b.w	c00877a <_fwalk_reent>
 c00857e:	4b04      	ldr	r3, [pc, #16]	; (c008590 <fflush+0x20>)
 c008580:	6818      	ldr	r0, [r3, #0]
 c008582:	f7ff bfb9 	b.w	c0084f8 <_fflush_r>
 c008586:	bf00      	nop
 c008588:	0c00af74 	.word	0x0c00af74
 c00858c:	0c0084f9 	.word	0x0c0084f9
 c008590:	30000010 	.word	0x30000010

0c008594 <std>:
 c008594:	2300      	movs	r3, #0
 c008596:	b510      	push	{r4, lr}
 c008598:	4604      	mov	r4, r0
 c00859a:	6083      	str	r3, [r0, #8]
 c00859c:	8181      	strh	r1, [r0, #12]
 c00859e:	4619      	mov	r1, r3
 c0085a0:	6643      	str	r3, [r0, #100]	; 0x64
 c0085a2:	81c2      	strh	r2, [r0, #14]
 c0085a4:	2208      	movs	r2, #8
 c0085a6:	6183      	str	r3, [r0, #24]
 c0085a8:	e9c0 3300 	strd	r3, r3, [r0]
 c0085ac:	e9c0 3304 	strd	r3, r3, [r0, #16]
 c0085b0:	305c      	adds	r0, #92	; 0x5c
 c0085b2:	f7fd f8db 	bl	c00576c <memset>
 c0085b6:	4b05      	ldr	r3, [pc, #20]	; (c0085cc <std+0x38>)
 c0085b8:	6224      	str	r4, [r4, #32]
 c0085ba:	6263      	str	r3, [r4, #36]	; 0x24
 c0085bc:	4b04      	ldr	r3, [pc, #16]	; (c0085d0 <std+0x3c>)
 c0085be:	62a3      	str	r3, [r4, #40]	; 0x28
 c0085c0:	4b04      	ldr	r3, [pc, #16]	; (c0085d4 <std+0x40>)
 c0085c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 c0085c4:	4b04      	ldr	r3, [pc, #16]	; (c0085d8 <std+0x44>)
 c0085c6:	6323      	str	r3, [r4, #48]	; 0x30
 c0085c8:	bd10      	pop	{r4, pc}
 c0085ca:	bf00      	nop
 c0085cc:	0c00a8c9 	.word	0x0c00a8c9
 c0085d0:	0c00a8eb 	.word	0x0c00a8eb
 c0085d4:	0c00a923 	.word	0x0c00a923
 c0085d8:	0c00a947 	.word	0x0c00a947

0c0085dc <_cleanup_r>:
 c0085dc:	4901      	ldr	r1, [pc, #4]	; (c0085e4 <_cleanup_r+0x8>)
 c0085de:	f000 b8cc 	b.w	c00877a <_fwalk_reent>
 c0085e2:	bf00      	nop
 c0085e4:	0c0084f9 	.word	0x0c0084f9

0c0085e8 <__sfmoreglue>:
 c0085e8:	b570      	push	{r4, r5, r6, lr}
 c0085ea:	2268      	movs	r2, #104	; 0x68
 c0085ec:	1e4d      	subs	r5, r1, #1
 c0085ee:	460e      	mov	r6, r1
 c0085f0:	4355      	muls	r5, r2
 c0085f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 c0085f6:	f001 fa37 	bl	c009a68 <_malloc_r>
 c0085fa:	4604      	mov	r4, r0
 c0085fc:	b140      	cbz	r0, c008610 <__sfmoreglue+0x28>
 c0085fe:	2100      	movs	r1, #0
 c008600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 c008604:	e9c0 1600 	strd	r1, r6, [r0]
 c008608:	300c      	adds	r0, #12
 c00860a:	60a0      	str	r0, [r4, #8]
 c00860c:	f7fd f8ae 	bl	c00576c <memset>
 c008610:	4620      	mov	r0, r4
 c008612:	bd70      	pop	{r4, r5, r6, pc}

0c008614 <__sfp_lock_acquire>:
 c008614:	4801      	ldr	r0, [pc, #4]	; (c00861c <__sfp_lock_acquire+0x8>)
 c008616:	f000 bc42 	b.w	c008e9e <__retarget_lock_acquire_recursive>
 c00861a:	bf00      	nop
 c00861c:	300002a5 	.word	0x300002a5

0c008620 <__sfp_lock_release>:
 c008620:	4801      	ldr	r0, [pc, #4]	; (c008628 <__sfp_lock_release+0x8>)
 c008622:	f000 bc3d 	b.w	c008ea0 <__retarget_lock_release_recursive>
 c008626:	bf00      	nop
 c008628:	300002a5 	.word	0x300002a5

0c00862c <__sinit_lock_acquire>:
 c00862c:	4801      	ldr	r0, [pc, #4]	; (c008634 <__sinit_lock_acquire+0x8>)
 c00862e:	f000 bc36 	b.w	c008e9e <__retarget_lock_acquire_recursive>
 c008632:	bf00      	nop
 c008634:	300002a6 	.word	0x300002a6

0c008638 <__sinit_lock_release>:
 c008638:	4801      	ldr	r0, [pc, #4]	; (c008640 <__sinit_lock_release+0x8>)
 c00863a:	f000 bc31 	b.w	c008ea0 <__retarget_lock_release_recursive>
 c00863e:	bf00      	nop
 c008640:	300002a6 	.word	0x300002a6

0c008644 <__sinit>:
 c008644:	b510      	push	{r4, lr}
 c008646:	4604      	mov	r4, r0
 c008648:	f7ff fff0 	bl	c00862c <__sinit_lock_acquire>
 c00864c:	69a3      	ldr	r3, [r4, #24]
 c00864e:	b11b      	cbz	r3, c008658 <__sinit+0x14>
 c008650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c008654:	f7ff bff0 	b.w	c008638 <__sinit_lock_release>
 c008658:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 c00865c:	6523      	str	r3, [r4, #80]	; 0x50
 c00865e:	4620      	mov	r0, r4
 c008660:	4b12      	ldr	r3, [pc, #72]	; (c0086ac <__sinit+0x68>)
 c008662:	4a13      	ldr	r2, [pc, #76]	; (c0086b0 <__sinit+0x6c>)
 c008664:	681b      	ldr	r3, [r3, #0]
 c008666:	62a2      	str	r2, [r4, #40]	; 0x28
 c008668:	42a3      	cmp	r3, r4
 c00866a:	bf04      	itt	eq
 c00866c:	2301      	moveq	r3, #1
 c00866e:	61a3      	streq	r3, [r4, #24]
 c008670:	f000 f820 	bl	c0086b4 <__sfp>
 c008674:	6060      	str	r0, [r4, #4]
 c008676:	4620      	mov	r0, r4
 c008678:	f000 f81c 	bl	c0086b4 <__sfp>
 c00867c:	60a0      	str	r0, [r4, #8]
 c00867e:	4620      	mov	r0, r4
 c008680:	f000 f818 	bl	c0086b4 <__sfp>
 c008684:	2200      	movs	r2, #0
 c008686:	2104      	movs	r1, #4
 c008688:	60e0      	str	r0, [r4, #12]
 c00868a:	6860      	ldr	r0, [r4, #4]
 c00868c:	f7ff ff82 	bl	c008594 <std>
 c008690:	2201      	movs	r2, #1
 c008692:	2109      	movs	r1, #9
 c008694:	68a0      	ldr	r0, [r4, #8]
 c008696:	f7ff ff7d 	bl	c008594 <std>
 c00869a:	2202      	movs	r2, #2
 c00869c:	2112      	movs	r1, #18
 c00869e:	68e0      	ldr	r0, [r4, #12]
 c0086a0:	f7ff ff78 	bl	c008594 <std>
 c0086a4:	2301      	movs	r3, #1
 c0086a6:	61a3      	str	r3, [r4, #24]
 c0086a8:	e7d2      	b.n	c008650 <__sinit+0xc>
 c0086aa:	bf00      	nop
 c0086ac:	0c00af74 	.word	0x0c00af74
 c0086b0:	0c0085dd 	.word	0x0c0085dd

0c0086b4 <__sfp>:
 c0086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0086b6:	4607      	mov	r7, r0
 c0086b8:	f7ff ffac 	bl	c008614 <__sfp_lock_acquire>
 c0086bc:	4b1e      	ldr	r3, [pc, #120]	; (c008738 <__sfp+0x84>)
 c0086be:	681e      	ldr	r6, [r3, #0]
 c0086c0:	69b3      	ldr	r3, [r6, #24]
 c0086c2:	b913      	cbnz	r3, c0086ca <__sfp+0x16>
 c0086c4:	4630      	mov	r0, r6
 c0086c6:	f7ff ffbd 	bl	c008644 <__sinit>
 c0086ca:	3648      	adds	r6, #72	; 0x48
 c0086cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 c0086d0:	3b01      	subs	r3, #1
 c0086d2:	d503      	bpl.n	c0086dc <__sfp+0x28>
 c0086d4:	6833      	ldr	r3, [r6, #0]
 c0086d6:	b30b      	cbz	r3, c00871c <__sfp+0x68>
 c0086d8:	6836      	ldr	r6, [r6, #0]
 c0086da:	e7f7      	b.n	c0086cc <__sfp+0x18>
 c0086dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 c0086e0:	b9d5      	cbnz	r5, c008718 <__sfp+0x64>
 c0086e2:	4b16      	ldr	r3, [pc, #88]	; (c00873c <__sfp+0x88>)
 c0086e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 c0086e8:	6665      	str	r5, [r4, #100]	; 0x64
 c0086ea:	60e3      	str	r3, [r4, #12]
 c0086ec:	f000 fbd6 	bl	c008e9c <__retarget_lock_init_recursive>
 c0086f0:	f7ff ff96 	bl	c008620 <__sfp_lock_release>
 c0086f4:	2208      	movs	r2, #8
 c0086f6:	4629      	mov	r1, r5
 c0086f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 c0086fc:	6025      	str	r5, [r4, #0]
 c0086fe:	61a5      	str	r5, [r4, #24]
 c008700:	e9c4 5501 	strd	r5, r5, [r4, #4]
 c008704:	e9c4 5504 	strd	r5, r5, [r4, #16]
 c008708:	f7fd f830 	bl	c00576c <memset>
 c00870c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 c008710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 c008714:	4620      	mov	r0, r4
 c008716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c008718:	3468      	adds	r4, #104	; 0x68
 c00871a:	e7d9      	b.n	c0086d0 <__sfp+0x1c>
 c00871c:	2104      	movs	r1, #4
 c00871e:	4638      	mov	r0, r7
 c008720:	f7ff ff62 	bl	c0085e8 <__sfmoreglue>
 c008724:	4604      	mov	r4, r0
 c008726:	6030      	str	r0, [r6, #0]
 c008728:	2800      	cmp	r0, #0
 c00872a:	d1d5      	bne.n	c0086d8 <__sfp+0x24>
 c00872c:	f7ff ff78 	bl	c008620 <__sfp_lock_release>
 c008730:	230c      	movs	r3, #12
 c008732:	603b      	str	r3, [r7, #0]
 c008734:	e7ee      	b.n	c008714 <__sfp+0x60>
 c008736:	bf00      	nop
 c008738:	0c00af74 	.word	0x0c00af74
 c00873c:	ffff0001 	.word	0xffff0001

0c008740 <_fwalk>:
 c008740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c008744:	460f      	mov	r7, r1
 c008746:	f100 0448 	add.w	r4, r0, #72	; 0x48
 c00874a:	2600      	movs	r6, #0
 c00874c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 c008750:	f1b8 0801 	subs.w	r8, r8, #1
 c008754:	d505      	bpl.n	c008762 <_fwalk+0x22>
 c008756:	6824      	ldr	r4, [r4, #0]
 c008758:	2c00      	cmp	r4, #0
 c00875a:	d1f7      	bne.n	c00874c <_fwalk+0xc>
 c00875c:	4630      	mov	r0, r6
 c00875e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c008762:	89ab      	ldrh	r3, [r5, #12]
 c008764:	2b01      	cmp	r3, #1
 c008766:	d906      	bls.n	c008776 <_fwalk+0x36>
 c008768:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c00876c:	3301      	adds	r3, #1
 c00876e:	d002      	beq.n	c008776 <_fwalk+0x36>
 c008770:	4628      	mov	r0, r5
 c008772:	47b8      	blx	r7
 c008774:	4306      	orrs	r6, r0
 c008776:	3568      	adds	r5, #104	; 0x68
 c008778:	e7ea      	b.n	c008750 <_fwalk+0x10>

0c00877a <_fwalk_reent>:
 c00877a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c00877e:	4606      	mov	r6, r0
 c008780:	4688      	mov	r8, r1
 c008782:	f100 0448 	add.w	r4, r0, #72	; 0x48
 c008786:	2700      	movs	r7, #0
 c008788:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 c00878c:	f1b9 0901 	subs.w	r9, r9, #1
 c008790:	d505      	bpl.n	c00879e <_fwalk_reent+0x24>
 c008792:	6824      	ldr	r4, [r4, #0]
 c008794:	2c00      	cmp	r4, #0
 c008796:	d1f7      	bne.n	c008788 <_fwalk_reent+0xe>
 c008798:	4638      	mov	r0, r7
 c00879a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c00879e:	89ab      	ldrh	r3, [r5, #12]
 c0087a0:	2b01      	cmp	r3, #1
 c0087a2:	d907      	bls.n	c0087b4 <_fwalk_reent+0x3a>
 c0087a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c0087a8:	3301      	adds	r3, #1
 c0087aa:	d003      	beq.n	c0087b4 <_fwalk_reent+0x3a>
 c0087ac:	4629      	mov	r1, r5
 c0087ae:	4630      	mov	r0, r6
 c0087b0:	47c0      	blx	r8
 c0087b2:	4307      	orrs	r7, r0
 c0087b4:	3568      	adds	r5, #104	; 0x68
 c0087b6:	e7e9      	b.n	c00878c <_fwalk_reent+0x12>

0c0087b8 <rshift>:
 c0087b8:	6903      	ldr	r3, [r0, #16]
 c0087ba:	114a      	asrs	r2, r1, #5
 c0087bc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 c0087c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c0087c4:	f100 0414 	add.w	r4, r0, #20
 c0087c8:	dd45      	ble.n	c008856 <rshift+0x9e>
 c0087ca:	f011 011f 	ands.w	r1, r1, #31
 c0087ce:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 c0087d2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 c0087d6:	d10c      	bne.n	c0087f2 <rshift+0x3a>
 c0087d8:	f100 0710 	add.w	r7, r0, #16
 c0087dc:	4629      	mov	r1, r5
 c0087de:	42b1      	cmp	r1, r6
 c0087e0:	d334      	bcc.n	c00884c <rshift+0x94>
 c0087e2:	1a9b      	subs	r3, r3, r2
 c0087e4:	1eea      	subs	r2, r5, #3
 c0087e6:	009b      	lsls	r3, r3, #2
 c0087e8:	4296      	cmp	r6, r2
 c0087ea:	bf38      	it	cc
 c0087ec:	2300      	movcc	r3, #0
 c0087ee:	4423      	add	r3, r4
 c0087f0:	e015      	b.n	c00881e <rshift+0x66>
 c0087f2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 c0087f6:	f1c1 0820 	rsb	r8, r1, #32
 c0087fa:	f105 0e04 	add.w	lr, r5, #4
 c0087fe:	46a1      	mov	r9, r4
 c008800:	40cf      	lsrs	r7, r1
 c008802:	4576      	cmp	r6, lr
 c008804:	46f4      	mov	ip, lr
 c008806:	d815      	bhi.n	c008834 <rshift+0x7c>
 c008808:	1a9a      	subs	r2, r3, r2
 c00880a:	3501      	adds	r5, #1
 c00880c:	0092      	lsls	r2, r2, #2
 c00880e:	3a04      	subs	r2, #4
 c008810:	42ae      	cmp	r6, r5
 c008812:	bf38      	it	cc
 c008814:	2200      	movcc	r2, #0
 c008816:	18a3      	adds	r3, r4, r2
 c008818:	50a7      	str	r7, [r4, r2]
 c00881a:	b107      	cbz	r7, c00881e <rshift+0x66>
 c00881c:	3304      	adds	r3, #4
 c00881e:	1b1a      	subs	r2, r3, r4
 c008820:	42a3      	cmp	r3, r4
 c008822:	ea4f 02a2 	mov.w	r2, r2, asr #2
 c008826:	bf08      	it	eq
 c008828:	2300      	moveq	r3, #0
 c00882a:	6102      	str	r2, [r0, #16]
 c00882c:	bf08      	it	eq
 c00882e:	6143      	streq	r3, [r0, #20]
 c008830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 c008834:	f8dc c000 	ldr.w	ip, [ip]
 c008838:	fa0c fc08 	lsl.w	ip, ip, r8
 c00883c:	ea4c 0707 	orr.w	r7, ip, r7
 c008840:	f849 7b04 	str.w	r7, [r9], #4
 c008844:	f85e 7b04 	ldr.w	r7, [lr], #4
 c008848:	40cf      	lsrs	r7, r1
 c00884a:	e7da      	b.n	c008802 <rshift+0x4a>
 c00884c:	f851 cb04 	ldr.w	ip, [r1], #4
 c008850:	f847 cf04 	str.w	ip, [r7, #4]!
 c008854:	e7c3      	b.n	c0087de <rshift+0x26>
 c008856:	4623      	mov	r3, r4
 c008858:	e7e1      	b.n	c00881e <rshift+0x66>

0c00885a <__hexdig_fun>:
 c00885a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 c00885e:	2b09      	cmp	r3, #9
 c008860:	d802      	bhi.n	c008868 <__hexdig_fun+0xe>
 c008862:	3820      	subs	r0, #32
 c008864:	b2c0      	uxtb	r0, r0
 c008866:	4770      	bx	lr
 c008868:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 c00886c:	2b05      	cmp	r3, #5
 c00886e:	d801      	bhi.n	c008874 <__hexdig_fun+0x1a>
 c008870:	3847      	subs	r0, #71	; 0x47
 c008872:	e7f7      	b.n	c008864 <__hexdig_fun+0xa>
 c008874:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 c008878:	2b05      	cmp	r3, #5
 c00887a:	d801      	bhi.n	c008880 <__hexdig_fun+0x26>
 c00887c:	3827      	subs	r0, #39	; 0x27
 c00887e:	e7f1      	b.n	c008864 <__hexdig_fun+0xa>
 c008880:	2000      	movs	r0, #0
 c008882:	4770      	bx	lr

0c008884 <__gethex>:
 c008884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c008888:	ed2d 8b02 	vpush	{d8}
 c00888c:	b089      	sub	sp, #36	; 0x24
 c00888e:	ee08 0a10 	vmov	s16, r0
 c008892:	468b      	mov	fp, r1
 c008894:	4690      	mov	r8, r2
 c008896:	9304      	str	r3, [sp, #16]
 c008898:	4bb2      	ldr	r3, [pc, #712]	; (c008b64 <__gethex+0x2e0>)
 c00889a:	681b      	ldr	r3, [r3, #0]
 c00889c:	4618      	mov	r0, r3
 c00889e:	9301      	str	r3, [sp, #4]
 c0088a0:	f7f7 fcca 	bl	c000238 <strlen>
 c0088a4:	9b01      	ldr	r3, [sp, #4]
 c0088a6:	f8db 2000 	ldr.w	r2, [fp]
 c0088aa:	4682      	mov	sl, r0
 c0088ac:	4403      	add	r3, r0
 c0088ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 c0088b2:	9305      	str	r3, [sp, #20]
 c0088b4:	1c93      	adds	r3, r2, #2
 c0088b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 c0088ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 c0088be:	32fe      	adds	r2, #254	; 0xfe
 c0088c0:	18d1      	adds	r1, r2, r3
 c0088c2:	461f      	mov	r7, r3
 c0088c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 c0088c8:	9100      	str	r1, [sp, #0]
 c0088ca:	2830      	cmp	r0, #48	; 0x30
 c0088cc:	d0f8      	beq.n	c0088c0 <__gethex+0x3c>
 c0088ce:	f7ff ffc4 	bl	c00885a <__hexdig_fun>
 c0088d2:	4604      	mov	r4, r0
 c0088d4:	2800      	cmp	r0, #0
 c0088d6:	d139      	bne.n	c00894c <__gethex+0xc8>
 c0088d8:	4652      	mov	r2, sl
 c0088da:	9901      	ldr	r1, [sp, #4]
 c0088dc:	4638      	mov	r0, r7
 c0088de:	f002 f836 	bl	c00a94e <strncmp>
 c0088e2:	4605      	mov	r5, r0
 c0088e4:	2800      	cmp	r0, #0
 c0088e6:	d167      	bne.n	c0089b8 <__gethex+0x134>
 c0088e8:	f817 000a 	ldrb.w	r0, [r7, sl]
 c0088ec:	eb07 060a 	add.w	r6, r7, sl
 c0088f0:	f7ff ffb3 	bl	c00885a <__hexdig_fun>
 c0088f4:	2800      	cmp	r0, #0
 c0088f6:	d061      	beq.n	c0089bc <__gethex+0x138>
 c0088f8:	4633      	mov	r3, r6
 c0088fa:	7818      	ldrb	r0, [r3, #0]
 c0088fc:	461f      	mov	r7, r3
 c0088fe:	3301      	adds	r3, #1
 c008900:	2830      	cmp	r0, #48	; 0x30
 c008902:	d0fa      	beq.n	c0088fa <__gethex+0x76>
 c008904:	f7ff ffa9 	bl	c00885a <__hexdig_fun>
 c008908:	fab0 f480 	clz	r4, r0
 c00890c:	2301      	movs	r3, #1
 c00890e:	4635      	mov	r5, r6
 c008910:	0964      	lsrs	r4, r4, #5
 c008912:	9300      	str	r3, [sp, #0]
 c008914:	463a      	mov	r2, r7
 c008916:	4616      	mov	r6, r2
 c008918:	3201      	adds	r2, #1
 c00891a:	7830      	ldrb	r0, [r6, #0]
 c00891c:	f7ff ff9d 	bl	c00885a <__hexdig_fun>
 c008920:	2800      	cmp	r0, #0
 c008922:	d1f8      	bne.n	c008916 <__gethex+0x92>
 c008924:	4652      	mov	r2, sl
 c008926:	9901      	ldr	r1, [sp, #4]
 c008928:	4630      	mov	r0, r6
 c00892a:	f002 f810 	bl	c00a94e <strncmp>
 c00892e:	b980      	cbnz	r0, c008952 <__gethex+0xce>
 c008930:	b94d      	cbnz	r5, c008946 <__gethex+0xc2>
 c008932:	eb06 050a 	add.w	r5, r6, sl
 c008936:	462a      	mov	r2, r5
 c008938:	4616      	mov	r6, r2
 c00893a:	3201      	adds	r2, #1
 c00893c:	7830      	ldrb	r0, [r6, #0]
 c00893e:	f7ff ff8c 	bl	c00885a <__hexdig_fun>
 c008942:	2800      	cmp	r0, #0
 c008944:	d1f8      	bne.n	c008938 <__gethex+0xb4>
 c008946:	1bad      	subs	r5, r5, r6
 c008948:	00ad      	lsls	r5, r5, #2
 c00894a:	e004      	b.n	c008956 <__gethex+0xd2>
 c00894c:	2400      	movs	r4, #0
 c00894e:	4625      	mov	r5, r4
 c008950:	e7e0      	b.n	c008914 <__gethex+0x90>
 c008952:	2d00      	cmp	r5, #0
 c008954:	d1f7      	bne.n	c008946 <__gethex+0xc2>
 c008956:	7833      	ldrb	r3, [r6, #0]
 c008958:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 c00895c:	2b50      	cmp	r3, #80	; 0x50
 c00895e:	d13b      	bne.n	c0089d8 <__gethex+0x154>
 c008960:	7873      	ldrb	r3, [r6, #1]
 c008962:	2b2b      	cmp	r3, #43	; 0x2b
 c008964:	d02c      	beq.n	c0089c0 <__gethex+0x13c>
 c008966:	2b2d      	cmp	r3, #45	; 0x2d
 c008968:	d02e      	beq.n	c0089c8 <__gethex+0x144>
 c00896a:	1c71      	adds	r1, r6, #1
 c00896c:	f04f 0900 	mov.w	r9, #0
 c008970:	7808      	ldrb	r0, [r1, #0]
 c008972:	f7ff ff72 	bl	c00885a <__hexdig_fun>
 c008976:	1e43      	subs	r3, r0, #1
 c008978:	b2db      	uxtb	r3, r3
 c00897a:	2b18      	cmp	r3, #24
 c00897c:	d82c      	bhi.n	c0089d8 <__gethex+0x154>
 c00897e:	f1a0 0210 	sub.w	r2, r0, #16
 c008982:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 c008986:	f7ff ff68 	bl	c00885a <__hexdig_fun>
 c00898a:	1e43      	subs	r3, r0, #1
 c00898c:	b2db      	uxtb	r3, r3
 c00898e:	2b18      	cmp	r3, #24
 c008990:	d91d      	bls.n	c0089ce <__gethex+0x14a>
 c008992:	f1b9 0f00 	cmp.w	r9, #0
 c008996:	d000      	beq.n	c00899a <__gethex+0x116>
 c008998:	4252      	negs	r2, r2
 c00899a:	4415      	add	r5, r2
 c00899c:	f8cb 1000 	str.w	r1, [fp]
 c0089a0:	b1e4      	cbz	r4, c0089dc <__gethex+0x158>
 c0089a2:	9b00      	ldr	r3, [sp, #0]
 c0089a4:	2b00      	cmp	r3, #0
 c0089a6:	bf14      	ite	ne
 c0089a8:	2700      	movne	r7, #0
 c0089aa:	2706      	moveq	r7, #6
 c0089ac:	4638      	mov	r0, r7
 c0089ae:	b009      	add	sp, #36	; 0x24
 c0089b0:	ecbd 8b02 	vpop	{d8}
 c0089b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0089b8:	463e      	mov	r6, r7
 c0089ba:	4625      	mov	r5, r4
 c0089bc:	2401      	movs	r4, #1
 c0089be:	e7ca      	b.n	c008956 <__gethex+0xd2>
 c0089c0:	f04f 0900 	mov.w	r9, #0
 c0089c4:	1cb1      	adds	r1, r6, #2
 c0089c6:	e7d3      	b.n	c008970 <__gethex+0xec>
 c0089c8:	f04f 0901 	mov.w	r9, #1
 c0089cc:	e7fa      	b.n	c0089c4 <__gethex+0x140>
 c0089ce:	230a      	movs	r3, #10
 c0089d0:	fb03 0202 	mla	r2, r3, r2, r0
 c0089d4:	3a10      	subs	r2, #16
 c0089d6:	e7d4      	b.n	c008982 <__gethex+0xfe>
 c0089d8:	4631      	mov	r1, r6
 c0089da:	e7df      	b.n	c00899c <__gethex+0x118>
 c0089dc:	1bf3      	subs	r3, r6, r7
 c0089de:	4621      	mov	r1, r4
 c0089e0:	3b01      	subs	r3, #1
 c0089e2:	2b07      	cmp	r3, #7
 c0089e4:	dc0b      	bgt.n	c0089fe <__gethex+0x17a>
 c0089e6:	ee18 0a10 	vmov	r0, s16
 c0089ea:	f000 faf5 	bl	c008fd8 <_Balloc>
 c0089ee:	4604      	mov	r4, r0
 c0089f0:	b940      	cbnz	r0, c008a04 <__gethex+0x180>
 c0089f2:	4b5d      	ldr	r3, [pc, #372]	; (c008b68 <__gethex+0x2e4>)
 c0089f4:	4602      	mov	r2, r0
 c0089f6:	21de      	movs	r1, #222	; 0xde
 c0089f8:	485c      	ldr	r0, [pc, #368]	; (c008b6c <__gethex+0x2e8>)
 c0089fa:	f002 f921 	bl	c00ac40 <__assert_func>
 c0089fe:	3101      	adds	r1, #1
 c008a00:	105b      	asrs	r3, r3, #1
 c008a02:	e7ee      	b.n	c0089e2 <__gethex+0x15e>
 c008a04:	f100 0914 	add.w	r9, r0, #20
 c008a08:	f04f 0b00 	mov.w	fp, #0
 c008a0c:	f1ca 0301 	rsb	r3, sl, #1
 c008a10:	f8cd 9008 	str.w	r9, [sp, #8]
 c008a14:	f8cd b000 	str.w	fp, [sp]
 c008a18:	9306      	str	r3, [sp, #24]
 c008a1a:	42b7      	cmp	r7, r6
 c008a1c:	d340      	bcc.n	c008aa0 <__gethex+0x21c>
 c008a1e:	9802      	ldr	r0, [sp, #8]
 c008a20:	9b00      	ldr	r3, [sp, #0]
 c008a22:	f840 3b04 	str.w	r3, [r0], #4
 c008a26:	eba0 0009 	sub.w	r0, r0, r9
 c008a2a:	1080      	asrs	r0, r0, #2
 c008a2c:	0146      	lsls	r6, r0, #5
 c008a2e:	6120      	str	r0, [r4, #16]
 c008a30:	4618      	mov	r0, r3
 c008a32:	f000 fbc5 	bl	c0091c0 <__hi0bits>
 c008a36:	1a30      	subs	r0, r6, r0
 c008a38:	f8d8 6000 	ldr.w	r6, [r8]
 c008a3c:	42b0      	cmp	r0, r6
 c008a3e:	dd63      	ble.n	c008b08 <__gethex+0x284>
 c008a40:	1b87      	subs	r7, r0, r6
 c008a42:	4620      	mov	r0, r4
 c008a44:	4639      	mov	r1, r7
 c008a46:	f000 ff6b 	bl	c009920 <__any_on>
 c008a4a:	4682      	mov	sl, r0
 c008a4c:	b1a8      	cbz	r0, c008a7a <__gethex+0x1f6>
 c008a4e:	1e7b      	subs	r3, r7, #1
 c008a50:	f04f 0a01 	mov.w	sl, #1
 c008a54:	1159      	asrs	r1, r3, #5
 c008a56:	f003 021f 	and.w	r2, r3, #31
 c008a5a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 c008a5e:	fa0a f202 	lsl.w	r2, sl, r2
 c008a62:	420a      	tst	r2, r1
 c008a64:	d009      	beq.n	c008a7a <__gethex+0x1f6>
 c008a66:	4553      	cmp	r3, sl
 c008a68:	dd05      	ble.n	c008a76 <__gethex+0x1f2>
 c008a6a:	1eb9      	subs	r1, r7, #2
 c008a6c:	4620      	mov	r0, r4
 c008a6e:	f000 ff57 	bl	c009920 <__any_on>
 c008a72:	2800      	cmp	r0, #0
 c008a74:	d145      	bne.n	c008b02 <__gethex+0x27e>
 c008a76:	f04f 0a02 	mov.w	sl, #2
 c008a7a:	443d      	add	r5, r7
 c008a7c:	4639      	mov	r1, r7
 c008a7e:	4620      	mov	r0, r4
 c008a80:	f7ff fe9a 	bl	c0087b8 <rshift>
 c008a84:	f8d8 3008 	ldr.w	r3, [r8, #8]
 c008a88:	42ab      	cmp	r3, r5
 c008a8a:	da4c      	bge.n	c008b26 <__gethex+0x2a2>
 c008a8c:	4621      	mov	r1, r4
 c008a8e:	ee18 0a10 	vmov	r0, s16
 c008a92:	f000 fae1 	bl	c009058 <_Bfree>
 c008a96:	2300      	movs	r3, #0
 c008a98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 c008a9a:	27a3      	movs	r7, #163	; 0xa3
 c008a9c:	6013      	str	r3, [r2, #0]
 c008a9e:	e785      	b.n	c0089ac <__gethex+0x128>
 c008aa0:	1e73      	subs	r3, r6, #1
 c008aa2:	9a05      	ldr	r2, [sp, #20]
 c008aa4:	9303      	str	r3, [sp, #12]
 c008aa6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 c008aaa:	4293      	cmp	r3, r2
 c008aac:	d019      	beq.n	c008ae2 <__gethex+0x25e>
 c008aae:	f1bb 0f20 	cmp.w	fp, #32
 c008ab2:	d107      	bne.n	c008ac4 <__gethex+0x240>
 c008ab4:	9b02      	ldr	r3, [sp, #8]
 c008ab6:	9a00      	ldr	r2, [sp, #0]
 c008ab8:	f843 2b04 	str.w	r2, [r3], #4
 c008abc:	9302      	str	r3, [sp, #8]
 c008abe:	2300      	movs	r3, #0
 c008ac0:	469b      	mov	fp, r3
 c008ac2:	9300      	str	r3, [sp, #0]
 c008ac4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 c008ac8:	f7ff fec7 	bl	c00885a <__hexdig_fun>
 c008acc:	f000 000f 	and.w	r0, r0, #15
 c008ad0:	9b00      	ldr	r3, [sp, #0]
 c008ad2:	fa00 f00b 	lsl.w	r0, r0, fp
 c008ad6:	f10b 0b04 	add.w	fp, fp, #4
 c008ada:	4303      	orrs	r3, r0
 c008adc:	9300      	str	r3, [sp, #0]
 c008ade:	9b03      	ldr	r3, [sp, #12]
 c008ae0:	e00d      	b.n	c008afe <__gethex+0x27a>
 c008ae2:	9b03      	ldr	r3, [sp, #12]
 c008ae4:	9a06      	ldr	r2, [sp, #24]
 c008ae6:	4413      	add	r3, r2
 c008ae8:	42bb      	cmp	r3, r7
 c008aea:	d3e0      	bcc.n	c008aae <__gethex+0x22a>
 c008aec:	4618      	mov	r0, r3
 c008aee:	4652      	mov	r2, sl
 c008af0:	9901      	ldr	r1, [sp, #4]
 c008af2:	9307      	str	r3, [sp, #28]
 c008af4:	f001 ff2b 	bl	c00a94e <strncmp>
 c008af8:	9b07      	ldr	r3, [sp, #28]
 c008afa:	2800      	cmp	r0, #0
 c008afc:	d1d7      	bne.n	c008aae <__gethex+0x22a>
 c008afe:	461e      	mov	r6, r3
 c008b00:	e78b      	b.n	c008a1a <__gethex+0x196>
 c008b02:	f04f 0a03 	mov.w	sl, #3
 c008b06:	e7b8      	b.n	c008a7a <__gethex+0x1f6>
 c008b08:	da0a      	bge.n	c008b20 <__gethex+0x29c>
 c008b0a:	1a37      	subs	r7, r6, r0
 c008b0c:	4621      	mov	r1, r4
 c008b0e:	ee18 0a10 	vmov	r0, s16
 c008b12:	463a      	mov	r2, r7
 c008b14:	1bed      	subs	r5, r5, r7
 c008b16:	f000 fcbb 	bl	c009490 <__lshift>
 c008b1a:	4604      	mov	r4, r0
 c008b1c:	f100 0914 	add.w	r9, r0, #20
 c008b20:	f04f 0a00 	mov.w	sl, #0
 c008b24:	e7ae      	b.n	c008a84 <__gethex+0x200>
 c008b26:	f8d8 0004 	ldr.w	r0, [r8, #4]
 c008b2a:	42a8      	cmp	r0, r5
 c008b2c:	dd72      	ble.n	c008c14 <__gethex+0x390>
 c008b2e:	1b45      	subs	r5, r0, r5
 c008b30:	42ae      	cmp	r6, r5
 c008b32:	dc35      	bgt.n	c008ba0 <__gethex+0x31c>
 c008b34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 c008b38:	2b02      	cmp	r3, #2
 c008b3a:	d029      	beq.n	c008b90 <__gethex+0x30c>
 c008b3c:	2b03      	cmp	r3, #3
 c008b3e:	d02b      	beq.n	c008b98 <__gethex+0x314>
 c008b40:	2b01      	cmp	r3, #1
 c008b42:	d11b      	bne.n	c008b7c <__gethex+0x2f8>
 c008b44:	42ae      	cmp	r6, r5
 c008b46:	d119      	bne.n	c008b7c <__gethex+0x2f8>
 c008b48:	2e01      	cmp	r6, #1
 c008b4a:	d111      	bne.n	c008b70 <__gethex+0x2ec>
 c008b4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 c008b50:	2762      	movs	r7, #98	; 0x62
 c008b52:	9a04      	ldr	r2, [sp, #16]
 c008b54:	6013      	str	r3, [r2, #0]
 c008b56:	2301      	movs	r3, #1
 c008b58:	6123      	str	r3, [r4, #16]
 c008b5a:	f8c9 3000 	str.w	r3, [r9]
 c008b5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 c008b60:	601c      	str	r4, [r3, #0]
 c008b62:	e723      	b.n	c0089ac <__gethex+0x128>
 c008b64:	0c00b25c 	.word	0x0c00b25c
 c008b68:	0c00b180 	.word	0x0c00b180
 c008b6c:	0c00b1f4 	.word	0x0c00b1f4
 c008b70:	1e71      	subs	r1, r6, #1
 c008b72:	4620      	mov	r0, r4
 c008b74:	f000 fed4 	bl	c009920 <__any_on>
 c008b78:	2800      	cmp	r0, #0
 c008b7a:	d1e7      	bne.n	c008b4c <__gethex+0x2c8>
 c008b7c:	4621      	mov	r1, r4
 c008b7e:	ee18 0a10 	vmov	r0, s16
 c008b82:	f000 fa69 	bl	c009058 <_Bfree>
 c008b86:	2300      	movs	r3, #0
 c008b88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 c008b8a:	2750      	movs	r7, #80	; 0x50
 c008b8c:	6013      	str	r3, [r2, #0]
 c008b8e:	e70d      	b.n	c0089ac <__gethex+0x128>
 c008b90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 c008b92:	2b00      	cmp	r3, #0
 c008b94:	d1f2      	bne.n	c008b7c <__gethex+0x2f8>
 c008b96:	e7d9      	b.n	c008b4c <__gethex+0x2c8>
 c008b98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 c008b9a:	2b00      	cmp	r3, #0
 c008b9c:	d1d6      	bne.n	c008b4c <__gethex+0x2c8>
 c008b9e:	e7ed      	b.n	c008b7c <__gethex+0x2f8>
 c008ba0:	1e6f      	subs	r7, r5, #1
 c008ba2:	f1ba 0f00 	cmp.w	sl, #0
 c008ba6:	d132      	bne.n	c008c0e <__gethex+0x38a>
 c008ba8:	b127      	cbz	r7, c008bb4 <__gethex+0x330>
 c008baa:	4639      	mov	r1, r7
 c008bac:	4620      	mov	r0, r4
 c008bae:	f000 feb7 	bl	c009920 <__any_on>
 c008bb2:	4682      	mov	sl, r0
 c008bb4:	117b      	asrs	r3, r7, #5
 c008bb6:	2101      	movs	r1, #1
 c008bb8:	f007 071f 	and.w	r7, r7, #31
 c008bbc:	4620      	mov	r0, r4
 c008bbe:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 c008bc2:	1b76      	subs	r6, r6, r5
 c008bc4:	fa01 f707 	lsl.w	r7, r1, r7
 c008bc8:	4629      	mov	r1, r5
 c008bca:	421f      	tst	r7, r3
 c008bcc:	f04f 0702 	mov.w	r7, #2
 c008bd0:	bf18      	it	ne
 c008bd2:	f04a 0a02 	orrne.w	sl, sl, #2
 c008bd6:	f7ff fdef 	bl	c0087b8 <rshift>
 c008bda:	f8d8 5004 	ldr.w	r5, [r8, #4]
 c008bde:	f1ba 0f00 	cmp.w	sl, #0
 c008be2:	d048      	beq.n	c008c76 <__gethex+0x3f2>
 c008be4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 c008be8:	2b02      	cmp	r3, #2
 c008bea:	d015      	beq.n	c008c18 <__gethex+0x394>
 c008bec:	2b03      	cmp	r3, #3
 c008bee:	d017      	beq.n	c008c20 <__gethex+0x39c>
 c008bf0:	2b01      	cmp	r3, #1
 c008bf2:	d109      	bne.n	c008c08 <__gethex+0x384>
 c008bf4:	f01a 0f02 	tst.w	sl, #2
 c008bf8:	d006      	beq.n	c008c08 <__gethex+0x384>
 c008bfa:	f8d9 0000 	ldr.w	r0, [r9]
 c008bfe:	ea4a 0a00 	orr.w	sl, sl, r0
 c008c02:	f01a 0f01 	tst.w	sl, #1
 c008c06:	d10e      	bne.n	c008c26 <__gethex+0x3a2>
 c008c08:	f047 0710 	orr.w	r7, r7, #16
 c008c0c:	e033      	b.n	c008c76 <__gethex+0x3f2>
 c008c0e:	f04f 0a01 	mov.w	sl, #1
 c008c12:	e7cf      	b.n	c008bb4 <__gethex+0x330>
 c008c14:	2701      	movs	r7, #1
 c008c16:	e7e2      	b.n	c008bde <__gethex+0x35a>
 c008c18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 c008c1a:	f1c3 0301 	rsb	r3, r3, #1
 c008c1e:	9315      	str	r3, [sp, #84]	; 0x54
 c008c20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 c008c22:	2b00      	cmp	r3, #0
 c008c24:	d0f0      	beq.n	c008c08 <__gethex+0x384>
 c008c26:	f8d4 b010 	ldr.w	fp, [r4, #16]
 c008c2a:	f104 0314 	add.w	r3, r4, #20
 c008c2e:	f04f 0c00 	mov.w	ip, #0
 c008c32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 c008c36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 c008c3a:	4618      	mov	r0, r3
 c008c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 c008c40:	f1b2 3fff 	cmp.w	r2, #4294967295
 c008c44:	d01c      	beq.n	c008c80 <__gethex+0x3fc>
 c008c46:	3201      	adds	r2, #1
 c008c48:	6002      	str	r2, [r0, #0]
 c008c4a:	2f02      	cmp	r7, #2
 c008c4c:	f104 0314 	add.w	r3, r4, #20
 c008c50:	d13f      	bne.n	c008cd2 <__gethex+0x44e>
 c008c52:	f8d8 2000 	ldr.w	r2, [r8]
 c008c56:	3a01      	subs	r2, #1
 c008c58:	42b2      	cmp	r2, r6
 c008c5a:	d10a      	bne.n	c008c72 <__gethex+0x3ee>
 c008c5c:	1171      	asrs	r1, r6, #5
 c008c5e:	2201      	movs	r2, #1
 c008c60:	f006 061f 	and.w	r6, r6, #31
 c008c64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 c008c68:	fa02 f606 	lsl.w	r6, r2, r6
 c008c6c:	421e      	tst	r6, r3
 c008c6e:	bf18      	it	ne
 c008c70:	4617      	movne	r7, r2
 c008c72:	f047 0720 	orr.w	r7, r7, #32
 c008c76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 c008c78:	601c      	str	r4, [r3, #0]
 c008c7a:	9b04      	ldr	r3, [sp, #16]
 c008c7c:	601d      	str	r5, [r3, #0]
 c008c7e:	e695      	b.n	c0089ac <__gethex+0x128>
 c008c80:	4299      	cmp	r1, r3
 c008c82:	f843 cc04 	str.w	ip, [r3, #-4]
 c008c86:	d8d8      	bhi.n	c008c3a <__gethex+0x3b6>
 c008c88:	68a3      	ldr	r3, [r4, #8]
 c008c8a:	459b      	cmp	fp, r3
 c008c8c:	db19      	blt.n	c008cc2 <__gethex+0x43e>
 c008c8e:	6861      	ldr	r1, [r4, #4]
 c008c90:	ee18 0a10 	vmov	r0, s16
 c008c94:	3101      	adds	r1, #1
 c008c96:	f000 f99f 	bl	c008fd8 <_Balloc>
 c008c9a:	4681      	mov	r9, r0
 c008c9c:	b918      	cbnz	r0, c008ca6 <__gethex+0x422>
 c008c9e:	4b1b      	ldr	r3, [pc, #108]	; (c008d0c <__gethex+0x488>)
 c008ca0:	4602      	mov	r2, r0
 c008ca2:	2184      	movs	r1, #132	; 0x84
 c008ca4:	e6a8      	b.n	c0089f8 <__gethex+0x174>
 c008ca6:	6922      	ldr	r2, [r4, #16]
 c008ca8:	f104 010c 	add.w	r1, r4, #12
 c008cac:	300c      	adds	r0, #12
 c008cae:	3202      	adds	r2, #2
 c008cb0:	0092      	lsls	r2, r2, #2
 c008cb2:	f000 f983 	bl	c008fbc <memcpy>
 c008cb6:	4621      	mov	r1, r4
 c008cb8:	464c      	mov	r4, r9
 c008cba:	ee18 0a10 	vmov	r0, s16
 c008cbe:	f000 f9cb 	bl	c009058 <_Bfree>
 c008cc2:	6923      	ldr	r3, [r4, #16]
 c008cc4:	1c5a      	adds	r2, r3, #1
 c008cc6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 c008cca:	6122      	str	r2, [r4, #16]
 c008ccc:	2201      	movs	r2, #1
 c008cce:	615a      	str	r2, [r3, #20]
 c008cd0:	e7bb      	b.n	c008c4a <__gethex+0x3c6>
 c008cd2:	6922      	ldr	r2, [r4, #16]
 c008cd4:	455a      	cmp	r2, fp
 c008cd6:	dd0b      	ble.n	c008cf0 <__gethex+0x46c>
 c008cd8:	2101      	movs	r1, #1
 c008cda:	4620      	mov	r0, r4
 c008cdc:	f7ff fd6c 	bl	c0087b8 <rshift>
 c008ce0:	3501      	adds	r5, #1
 c008ce2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 c008ce6:	42ab      	cmp	r3, r5
 c008ce8:	f6ff aed0 	blt.w	c008a8c <__gethex+0x208>
 c008cec:	2701      	movs	r7, #1
 c008cee:	e7c0      	b.n	c008c72 <__gethex+0x3ee>
 c008cf0:	f016 061f 	ands.w	r6, r6, #31
 c008cf4:	d0fa      	beq.n	c008cec <__gethex+0x468>
 c008cf6:	4453      	add	r3, sl
 c008cf8:	f1c6 0620 	rsb	r6, r6, #32
 c008cfc:	f853 0c04 	ldr.w	r0, [r3, #-4]
 c008d00:	f000 fa5e 	bl	c0091c0 <__hi0bits>
 c008d04:	42b0      	cmp	r0, r6
 c008d06:	dbe7      	blt.n	c008cd8 <__gethex+0x454>
 c008d08:	e7f0      	b.n	c008cec <__gethex+0x468>
 c008d0a:	bf00      	nop
 c008d0c:	0c00b180 	.word	0x0c00b180

0c008d10 <L_shift>:
 c008d10:	f1c2 0208 	rsb	r2, r2, #8
 c008d14:	0092      	lsls	r2, r2, #2
 c008d16:	b570      	push	{r4, r5, r6, lr}
 c008d18:	f1c2 0620 	rsb	r6, r2, #32
 c008d1c:	6843      	ldr	r3, [r0, #4]
 c008d1e:	6804      	ldr	r4, [r0, #0]
 c008d20:	fa03 f506 	lsl.w	r5, r3, r6
 c008d24:	40d3      	lsrs	r3, r2
 c008d26:	432c      	orrs	r4, r5
 c008d28:	6004      	str	r4, [r0, #0]
 c008d2a:	f840 3f04 	str.w	r3, [r0, #4]!
 c008d2e:	4288      	cmp	r0, r1
 c008d30:	d3f4      	bcc.n	c008d1c <L_shift+0xc>
 c008d32:	bd70      	pop	{r4, r5, r6, pc}

0c008d34 <__match>:
 c008d34:	6803      	ldr	r3, [r0, #0]
 c008d36:	3301      	adds	r3, #1
 c008d38:	b530      	push	{r4, r5, lr}
 c008d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 c008d3e:	b914      	cbnz	r4, c008d46 <__match+0x12>
 c008d40:	6003      	str	r3, [r0, #0]
 c008d42:	2001      	movs	r0, #1
 c008d44:	bd30      	pop	{r4, r5, pc}
 c008d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 c008d4a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 c008d4e:	2d19      	cmp	r5, #25
 c008d50:	bf98      	it	ls
 c008d52:	3220      	addls	r2, #32
 c008d54:	42a2      	cmp	r2, r4
 c008d56:	d0f0      	beq.n	c008d3a <__match+0x6>
 c008d58:	2000      	movs	r0, #0
 c008d5a:	e7f3      	b.n	c008d44 <__match+0x10>

0c008d5c <__hexnan>:
 c008d5c:	680b      	ldr	r3, [r1, #0]
 c008d5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c008d62:	115e      	asrs	r6, r3, #5
 c008d64:	f013 031f 	ands.w	r3, r3, #31
 c008d68:	f04f 0500 	mov.w	r5, #0
 c008d6c:	b087      	sub	sp, #28
 c008d6e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 c008d72:	4690      	mov	r8, r2
 c008d74:	4682      	mov	sl, r0
 c008d76:	6802      	ldr	r2, [r0, #0]
 c008d78:	bf18      	it	ne
 c008d7a:	3604      	addne	r6, #4
 c008d7c:	46ab      	mov	fp, r5
 c008d7e:	9301      	str	r3, [sp, #4]
 c008d80:	1f37      	subs	r7, r6, #4
 c008d82:	f846 5c04 	str.w	r5, [r6, #-4]
 c008d86:	9502      	str	r5, [sp, #8]
 c008d88:	46b9      	mov	r9, r7
 c008d8a:	463c      	mov	r4, r7
 c008d8c:	1c53      	adds	r3, r2, #1
 c008d8e:	7851      	ldrb	r1, [r2, #1]
 c008d90:	9303      	str	r3, [sp, #12]
 c008d92:	b341      	cbz	r1, c008de6 <__hexnan+0x8a>
 c008d94:	4608      	mov	r0, r1
 c008d96:	9205      	str	r2, [sp, #20]
 c008d98:	9104      	str	r1, [sp, #16]
 c008d9a:	f7ff fd5e 	bl	c00885a <__hexdig_fun>
 c008d9e:	2800      	cmp	r0, #0
 c008da0:	d14f      	bne.n	c008e42 <__hexnan+0xe6>
 c008da2:	9904      	ldr	r1, [sp, #16]
 c008da4:	9a05      	ldr	r2, [sp, #20]
 c008da6:	2920      	cmp	r1, #32
 c008da8:	d818      	bhi.n	c008ddc <__hexnan+0x80>
 c008daa:	9b02      	ldr	r3, [sp, #8]
 c008dac:	459b      	cmp	fp, r3
 c008dae:	dd13      	ble.n	c008dd8 <__hexnan+0x7c>
 c008db0:	454c      	cmp	r4, r9
 c008db2:	d206      	bcs.n	c008dc2 <__hexnan+0x66>
 c008db4:	2d07      	cmp	r5, #7
 c008db6:	dc04      	bgt.n	c008dc2 <__hexnan+0x66>
 c008db8:	462a      	mov	r2, r5
 c008dba:	4649      	mov	r1, r9
 c008dbc:	4620      	mov	r0, r4
 c008dbe:	f7ff ffa7 	bl	c008d10 <L_shift>
 c008dc2:	4544      	cmp	r4, r8
 c008dc4:	d94f      	bls.n	c008e66 <__hexnan+0x10a>
 c008dc6:	2300      	movs	r3, #0
 c008dc8:	f1a4 0904 	sub.w	r9, r4, #4
 c008dcc:	f8cd b008 	str.w	fp, [sp, #8]
 c008dd0:	f844 3c04 	str.w	r3, [r4, #-4]
 c008dd4:	461d      	mov	r5, r3
 c008dd6:	464c      	mov	r4, r9
 c008dd8:	9a03      	ldr	r2, [sp, #12]
 c008dda:	e7d7      	b.n	c008d8c <__hexnan+0x30>
 c008ddc:	2929      	cmp	r1, #41	; 0x29
 c008dde:	d155      	bne.n	c008e8c <__hexnan+0x130>
 c008de0:	3202      	adds	r2, #2
 c008de2:	f8ca 2000 	str.w	r2, [sl]
 c008de6:	f1bb 0f00 	cmp.w	fp, #0
 c008dea:	d04f      	beq.n	c008e8c <__hexnan+0x130>
 c008dec:	454c      	cmp	r4, r9
 c008dee:	d206      	bcs.n	c008dfe <__hexnan+0xa2>
 c008df0:	2d07      	cmp	r5, #7
 c008df2:	dc04      	bgt.n	c008dfe <__hexnan+0xa2>
 c008df4:	462a      	mov	r2, r5
 c008df6:	4649      	mov	r1, r9
 c008df8:	4620      	mov	r0, r4
 c008dfa:	f7ff ff89 	bl	c008d10 <L_shift>
 c008dfe:	4544      	cmp	r4, r8
 c008e00:	d933      	bls.n	c008e6a <__hexnan+0x10e>
 c008e02:	f1a8 0204 	sub.w	r2, r8, #4
 c008e06:	4623      	mov	r3, r4
 c008e08:	f853 1b04 	ldr.w	r1, [r3], #4
 c008e0c:	429f      	cmp	r7, r3
 c008e0e:	f842 1f04 	str.w	r1, [r2, #4]!
 c008e12:	d2f9      	bcs.n	c008e08 <__hexnan+0xac>
 c008e14:	1b3b      	subs	r3, r7, r4
 c008e16:	3e03      	subs	r6, #3
 c008e18:	3401      	adds	r4, #1
 c008e1a:	2200      	movs	r2, #0
 c008e1c:	f023 0303 	bic.w	r3, r3, #3
 c008e20:	3304      	adds	r3, #4
 c008e22:	42b4      	cmp	r4, r6
 c008e24:	bf88      	it	hi
 c008e26:	2304      	movhi	r3, #4
 c008e28:	4443      	add	r3, r8
 c008e2a:	f843 2b04 	str.w	r2, [r3], #4
 c008e2e:	429f      	cmp	r7, r3
 c008e30:	d2fb      	bcs.n	c008e2a <__hexnan+0xce>
 c008e32:	683b      	ldr	r3, [r7, #0]
 c008e34:	b91b      	cbnz	r3, c008e3e <__hexnan+0xe2>
 c008e36:	4547      	cmp	r7, r8
 c008e38:	d126      	bne.n	c008e88 <__hexnan+0x12c>
 c008e3a:	2301      	movs	r3, #1
 c008e3c:	603b      	str	r3, [r7, #0]
 c008e3e:	2005      	movs	r0, #5
 c008e40:	e025      	b.n	c008e8e <__hexnan+0x132>
 c008e42:	3501      	adds	r5, #1
 c008e44:	f10b 0b01 	add.w	fp, fp, #1
 c008e48:	2d08      	cmp	r5, #8
 c008e4a:	dd05      	ble.n	c008e58 <__hexnan+0xfc>
 c008e4c:	4544      	cmp	r4, r8
 c008e4e:	d9c3      	bls.n	c008dd8 <__hexnan+0x7c>
 c008e50:	2300      	movs	r3, #0
 c008e52:	3c04      	subs	r4, #4
 c008e54:	2501      	movs	r5, #1
 c008e56:	6023      	str	r3, [r4, #0]
 c008e58:	6822      	ldr	r2, [r4, #0]
 c008e5a:	f000 000f 	and.w	r0, r0, #15
 c008e5e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 c008e62:	6022      	str	r2, [r4, #0]
 c008e64:	e7b8      	b.n	c008dd8 <__hexnan+0x7c>
 c008e66:	2508      	movs	r5, #8
 c008e68:	e7b6      	b.n	c008dd8 <__hexnan+0x7c>
 c008e6a:	9b01      	ldr	r3, [sp, #4]
 c008e6c:	2b00      	cmp	r3, #0
 c008e6e:	d0e0      	beq.n	c008e32 <__hexnan+0xd6>
 c008e70:	f04f 32ff 	mov.w	r2, #4294967295
 c008e74:	f1c3 0320 	rsb	r3, r3, #32
 c008e78:	fa22 f303 	lsr.w	r3, r2, r3
 c008e7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 c008e80:	401a      	ands	r2, r3
 c008e82:	f846 2c04 	str.w	r2, [r6, #-4]
 c008e86:	e7d4      	b.n	c008e32 <__hexnan+0xd6>
 c008e88:	3f04      	subs	r7, #4
 c008e8a:	e7d2      	b.n	c008e32 <__hexnan+0xd6>
 c008e8c:	2004      	movs	r0, #4
 c008e8e:	b007      	add	sp, #28
 c008e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0c008e94 <_localeconv_r>:
 c008e94:	4800      	ldr	r0, [pc, #0]	; (c008e98 <_localeconv_r+0x4>)
 c008e96:	4770      	bx	lr
 c008e98:	30000168 	.word	0x30000168

0c008e9c <__retarget_lock_init_recursive>:
 c008e9c:	4770      	bx	lr

0c008e9e <__retarget_lock_acquire_recursive>:
 c008e9e:	4770      	bx	lr

0c008ea0 <__retarget_lock_release_recursive>:
 c008ea0:	4770      	bx	lr

0c008ea2 <__swhatbuf_r>:
 c008ea2:	b570      	push	{r4, r5, r6, lr}
 c008ea4:	460e      	mov	r6, r1
 c008ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c008eaa:	b096      	sub	sp, #88	; 0x58
 c008eac:	4614      	mov	r4, r2
 c008eae:	2900      	cmp	r1, #0
 c008eb0:	461d      	mov	r5, r3
 c008eb2:	da08      	bge.n	c008ec6 <__swhatbuf_r+0x24>
 c008eb4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 c008eb8:	2200      	movs	r2, #0
 c008eba:	602a      	str	r2, [r5, #0]
 c008ebc:	061a      	lsls	r2, r3, #24
 c008ebe:	d410      	bmi.n	c008ee2 <__swhatbuf_r+0x40>
 c008ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c008ec4:	e00e      	b.n	c008ee4 <__swhatbuf_r+0x42>
 c008ec6:	466a      	mov	r2, sp
 c008ec8:	f001 fefa 	bl	c00acc0 <_fstat_r>
 c008ecc:	2800      	cmp	r0, #0
 c008ece:	dbf1      	blt.n	c008eb4 <__swhatbuf_r+0x12>
 c008ed0:	9a01      	ldr	r2, [sp, #4]
 c008ed2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 c008ed6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 c008eda:	425a      	negs	r2, r3
 c008edc:	415a      	adcs	r2, r3
 c008ede:	602a      	str	r2, [r5, #0]
 c008ee0:	e7ee      	b.n	c008ec0 <__swhatbuf_r+0x1e>
 c008ee2:	2340      	movs	r3, #64	; 0x40
 c008ee4:	2000      	movs	r0, #0
 c008ee6:	6023      	str	r3, [r4, #0]
 c008ee8:	b016      	add	sp, #88	; 0x58
 c008eea:	bd70      	pop	{r4, r5, r6, pc}

0c008eec <__smakebuf_r>:
 c008eec:	898b      	ldrh	r3, [r1, #12]
 c008eee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c008ef0:	079d      	lsls	r5, r3, #30
 c008ef2:	4606      	mov	r6, r0
 c008ef4:	460c      	mov	r4, r1
 c008ef6:	d507      	bpl.n	c008f08 <__smakebuf_r+0x1c>
 c008ef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 c008efc:	6023      	str	r3, [r4, #0]
 c008efe:	6123      	str	r3, [r4, #16]
 c008f00:	2301      	movs	r3, #1
 c008f02:	6163      	str	r3, [r4, #20]
 c008f04:	b002      	add	sp, #8
 c008f06:	bd70      	pop	{r4, r5, r6, pc}
 c008f08:	ab01      	add	r3, sp, #4
 c008f0a:	466a      	mov	r2, sp
 c008f0c:	f7ff ffc9 	bl	c008ea2 <__swhatbuf_r>
 c008f10:	9900      	ldr	r1, [sp, #0]
 c008f12:	4605      	mov	r5, r0
 c008f14:	4630      	mov	r0, r6
 c008f16:	f000 fda7 	bl	c009a68 <_malloc_r>
 c008f1a:	b948      	cbnz	r0, c008f30 <__smakebuf_r+0x44>
 c008f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c008f20:	059a      	lsls	r2, r3, #22
 c008f22:	d4ef      	bmi.n	c008f04 <__smakebuf_r+0x18>
 c008f24:	f023 0303 	bic.w	r3, r3, #3
 c008f28:	f043 0302 	orr.w	r3, r3, #2
 c008f2c:	81a3      	strh	r3, [r4, #12]
 c008f2e:	e7e3      	b.n	c008ef8 <__smakebuf_r+0xc>
 c008f30:	4b0d      	ldr	r3, [pc, #52]	; (c008f68 <__smakebuf_r+0x7c>)
 c008f32:	62b3      	str	r3, [r6, #40]	; 0x28
 c008f34:	89a3      	ldrh	r3, [r4, #12]
 c008f36:	6020      	str	r0, [r4, #0]
 c008f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c008f3c:	6120      	str	r0, [r4, #16]
 c008f3e:	81a3      	strh	r3, [r4, #12]
 c008f40:	9b00      	ldr	r3, [sp, #0]
 c008f42:	6163      	str	r3, [r4, #20]
 c008f44:	9b01      	ldr	r3, [sp, #4]
 c008f46:	b15b      	cbz	r3, c008f60 <__smakebuf_r+0x74>
 c008f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c008f4c:	4630      	mov	r0, r6
 c008f4e:	f001 fec9 	bl	c00ace4 <_isatty_r>
 c008f52:	b128      	cbz	r0, c008f60 <__smakebuf_r+0x74>
 c008f54:	89a3      	ldrh	r3, [r4, #12]
 c008f56:	f023 0303 	bic.w	r3, r3, #3
 c008f5a:	f043 0301 	orr.w	r3, r3, #1
 c008f5e:	81a3      	strh	r3, [r4, #12]
 c008f60:	89a0      	ldrh	r0, [r4, #12]
 c008f62:	4305      	orrs	r5, r0
 c008f64:	81a5      	strh	r5, [r4, #12]
 c008f66:	e7cd      	b.n	c008f04 <__smakebuf_r+0x18>
 c008f68:	0c0085dd 	.word	0x0c0085dd

0c008f6c <malloc>:
 c008f6c:	4b02      	ldr	r3, [pc, #8]	; (c008f78 <malloc+0xc>)
 c008f6e:	4601      	mov	r1, r0
 c008f70:	6818      	ldr	r0, [r3, #0]
 c008f72:	f000 bd79 	b.w	c009a68 <_malloc_r>
 c008f76:	bf00      	nop
 c008f78:	30000010 	.word	0x30000010

0c008f7c <__ascii_mbtowc>:
 c008f7c:	b082      	sub	sp, #8
 c008f7e:	b901      	cbnz	r1, c008f82 <__ascii_mbtowc+0x6>
 c008f80:	a901      	add	r1, sp, #4
 c008f82:	b142      	cbz	r2, c008f96 <__ascii_mbtowc+0x1a>
 c008f84:	b14b      	cbz	r3, c008f9a <__ascii_mbtowc+0x1e>
 c008f86:	7813      	ldrb	r3, [r2, #0]
 c008f88:	600b      	str	r3, [r1, #0]
 c008f8a:	7812      	ldrb	r2, [r2, #0]
 c008f8c:	1e10      	subs	r0, r2, #0
 c008f8e:	bf18      	it	ne
 c008f90:	2001      	movne	r0, #1
 c008f92:	b002      	add	sp, #8
 c008f94:	4770      	bx	lr
 c008f96:	4610      	mov	r0, r2
 c008f98:	e7fb      	b.n	c008f92 <__ascii_mbtowc+0x16>
 c008f9a:	f06f 0001 	mvn.w	r0, #1
 c008f9e:	e7f8      	b.n	c008f92 <__ascii_mbtowc+0x16>

0c008fa0 <memchr>:
 c008fa0:	b2c9      	uxtb	r1, r1
 c008fa2:	4402      	add	r2, r0
 c008fa4:	b510      	push	{r4, lr}
 c008fa6:	4290      	cmp	r0, r2
 c008fa8:	4603      	mov	r3, r0
 c008faa:	d101      	bne.n	c008fb0 <memchr+0x10>
 c008fac:	2300      	movs	r3, #0
 c008fae:	e003      	b.n	c008fb8 <memchr+0x18>
 c008fb0:	781c      	ldrb	r4, [r3, #0]
 c008fb2:	3001      	adds	r0, #1
 c008fb4:	428c      	cmp	r4, r1
 c008fb6:	d1f6      	bne.n	c008fa6 <memchr+0x6>
 c008fb8:	4618      	mov	r0, r3
 c008fba:	bd10      	pop	{r4, pc}

0c008fbc <memcpy>:
 c008fbc:	440a      	add	r2, r1
 c008fbe:	1e43      	subs	r3, r0, #1
 c008fc0:	4291      	cmp	r1, r2
 c008fc2:	d100      	bne.n	c008fc6 <memcpy+0xa>
 c008fc4:	4770      	bx	lr
 c008fc6:	b510      	push	{r4, lr}
 c008fc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 c008fcc:	4291      	cmp	r1, r2
 c008fce:	f803 4f01 	strb.w	r4, [r3, #1]!
 c008fd2:	d1f9      	bne.n	c008fc8 <memcpy+0xc>
 c008fd4:	bd10      	pop	{r4, pc}
	...

0c008fd8 <_Balloc>:
 c008fd8:	b570      	push	{r4, r5, r6, lr}
 c008fda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 c008fdc:	4604      	mov	r4, r0
 c008fde:	460d      	mov	r5, r1
 c008fe0:	b976      	cbnz	r6, c009000 <_Balloc+0x28>
 c008fe2:	2010      	movs	r0, #16
 c008fe4:	f7ff ffc2 	bl	c008f6c <malloc>
 c008fe8:	4602      	mov	r2, r0
 c008fea:	6260      	str	r0, [r4, #36]	; 0x24
 c008fec:	b920      	cbnz	r0, c008ff8 <_Balloc+0x20>
 c008fee:	4b18      	ldr	r3, [pc, #96]	; (c009050 <_Balloc+0x78>)
 c008ff0:	2166      	movs	r1, #102	; 0x66
 c008ff2:	4818      	ldr	r0, [pc, #96]	; (c009054 <_Balloc+0x7c>)
 c008ff4:	f001 fe24 	bl	c00ac40 <__assert_func>
 c008ff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 c008ffc:	6006      	str	r6, [r0, #0]
 c008ffe:	60c6      	str	r6, [r0, #12]
 c009000:	6a66      	ldr	r6, [r4, #36]	; 0x24
 c009002:	68f3      	ldr	r3, [r6, #12]
 c009004:	b183      	cbz	r3, c009028 <_Balloc+0x50>
 c009006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c009008:	68db      	ldr	r3, [r3, #12]
 c00900a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 c00900e:	b9b8      	cbnz	r0, c009040 <_Balloc+0x68>
 c009010:	2101      	movs	r1, #1
 c009012:	4620      	mov	r0, r4
 c009014:	fa01 f605 	lsl.w	r6, r1, r5
 c009018:	1d72      	adds	r2, r6, #5
 c00901a:	0092      	lsls	r2, r2, #2
 c00901c:	f000 fca1 	bl	c009962 <_calloc_r>
 c009020:	b160      	cbz	r0, c00903c <_Balloc+0x64>
 c009022:	e9c0 5601 	strd	r5, r6, [r0, #4]
 c009026:	e00e      	b.n	c009046 <_Balloc+0x6e>
 c009028:	2221      	movs	r2, #33	; 0x21
 c00902a:	2104      	movs	r1, #4
 c00902c:	4620      	mov	r0, r4
 c00902e:	f000 fc98 	bl	c009962 <_calloc_r>
 c009032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c009034:	60f0      	str	r0, [r6, #12]
 c009036:	68db      	ldr	r3, [r3, #12]
 c009038:	2b00      	cmp	r3, #0
 c00903a:	d1e4      	bne.n	c009006 <_Balloc+0x2e>
 c00903c:	2000      	movs	r0, #0
 c00903e:	bd70      	pop	{r4, r5, r6, pc}
 c009040:	6802      	ldr	r2, [r0, #0]
 c009042:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 c009046:	2300      	movs	r3, #0
 c009048:	e9c0 3303 	strd	r3, r3, [r0, #12]
 c00904c:	e7f7      	b.n	c00903e <_Balloc+0x66>
 c00904e:	bf00      	nop
 c009050:	0c00b10e 	.word	0x0c00b10e
 c009054:	0c00b270 	.word	0x0c00b270

0c009058 <_Bfree>:
 c009058:	b570      	push	{r4, r5, r6, lr}
 c00905a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 c00905c:	4605      	mov	r5, r0
 c00905e:	460c      	mov	r4, r1
 c009060:	b976      	cbnz	r6, c009080 <_Bfree+0x28>
 c009062:	2010      	movs	r0, #16
 c009064:	f7ff ff82 	bl	c008f6c <malloc>
 c009068:	4602      	mov	r2, r0
 c00906a:	6268      	str	r0, [r5, #36]	; 0x24
 c00906c:	b920      	cbnz	r0, c009078 <_Bfree+0x20>
 c00906e:	4b09      	ldr	r3, [pc, #36]	; (c009094 <_Bfree+0x3c>)
 c009070:	218a      	movs	r1, #138	; 0x8a
 c009072:	4809      	ldr	r0, [pc, #36]	; (c009098 <_Bfree+0x40>)
 c009074:	f001 fde4 	bl	c00ac40 <__assert_func>
 c009078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 c00907c:	6006      	str	r6, [r0, #0]
 c00907e:	60c6      	str	r6, [r0, #12]
 c009080:	b13c      	cbz	r4, c009092 <_Bfree+0x3a>
 c009082:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 c009084:	6862      	ldr	r2, [r4, #4]
 c009086:	68db      	ldr	r3, [r3, #12]
 c009088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c00908c:	6021      	str	r1, [r4, #0]
 c00908e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 c009092:	bd70      	pop	{r4, r5, r6, pc}
 c009094:	0c00b10e 	.word	0x0c00b10e
 c009098:	0c00b270 	.word	0x0c00b270

0c00909c <__multadd>:
 c00909c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0090a0:	f101 0c14 	add.w	ip, r1, #20
 c0090a4:	4607      	mov	r7, r0
 c0090a6:	460c      	mov	r4, r1
 c0090a8:	461e      	mov	r6, r3
 c0090aa:	690d      	ldr	r5, [r1, #16]
 c0090ac:	2000      	movs	r0, #0
 c0090ae:	f8dc 3000 	ldr.w	r3, [ip]
 c0090b2:	3001      	adds	r0, #1
 c0090b4:	b299      	uxth	r1, r3
 c0090b6:	4285      	cmp	r5, r0
 c0090b8:	fb02 6101 	mla	r1, r2, r1, r6
 c0090bc:	ea4f 4613 	mov.w	r6, r3, lsr #16
 c0090c0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 c0090c4:	b289      	uxth	r1, r1
 c0090c6:	fb02 3306 	mla	r3, r2, r6, r3
 c0090ca:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 c0090ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 c0090d2:	f84c 1b04 	str.w	r1, [ip], #4
 c0090d6:	dcea      	bgt.n	c0090ae <__multadd+0x12>
 c0090d8:	b30e      	cbz	r6, c00911e <__multadd+0x82>
 c0090da:	68a3      	ldr	r3, [r4, #8]
 c0090dc:	42ab      	cmp	r3, r5
 c0090de:	dc19      	bgt.n	c009114 <__multadd+0x78>
 c0090e0:	6861      	ldr	r1, [r4, #4]
 c0090e2:	4638      	mov	r0, r7
 c0090e4:	3101      	adds	r1, #1
 c0090e6:	f7ff ff77 	bl	c008fd8 <_Balloc>
 c0090ea:	4680      	mov	r8, r0
 c0090ec:	b928      	cbnz	r0, c0090fa <__multadd+0x5e>
 c0090ee:	4602      	mov	r2, r0
 c0090f0:	4b0c      	ldr	r3, [pc, #48]	; (c009124 <__multadd+0x88>)
 c0090f2:	21b5      	movs	r1, #181	; 0xb5
 c0090f4:	480c      	ldr	r0, [pc, #48]	; (c009128 <__multadd+0x8c>)
 c0090f6:	f001 fda3 	bl	c00ac40 <__assert_func>
 c0090fa:	6922      	ldr	r2, [r4, #16]
 c0090fc:	f104 010c 	add.w	r1, r4, #12
 c009100:	300c      	adds	r0, #12
 c009102:	3202      	adds	r2, #2
 c009104:	0092      	lsls	r2, r2, #2
 c009106:	f7ff ff59 	bl	c008fbc <memcpy>
 c00910a:	4621      	mov	r1, r4
 c00910c:	4644      	mov	r4, r8
 c00910e:	4638      	mov	r0, r7
 c009110:	f7ff ffa2 	bl	c009058 <_Bfree>
 c009114:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 c009118:	3501      	adds	r5, #1
 c00911a:	615e      	str	r6, [r3, #20]
 c00911c:	6125      	str	r5, [r4, #16]
 c00911e:	4620      	mov	r0, r4
 c009120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c009124:	0c00b180 	.word	0x0c00b180
 c009128:	0c00b270 	.word	0x0c00b270

0c00912c <__s2b>:
 c00912c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c009130:	4615      	mov	r5, r2
 c009132:	461f      	mov	r7, r3
 c009134:	2209      	movs	r2, #9
 c009136:	3308      	adds	r3, #8
 c009138:	460c      	mov	r4, r1
 c00913a:	4606      	mov	r6, r0
 c00913c:	2100      	movs	r1, #0
 c00913e:	fb93 f3f2 	sdiv	r3, r3, r2
 c009142:	2201      	movs	r2, #1
 c009144:	429a      	cmp	r2, r3
 c009146:	db09      	blt.n	c00915c <__s2b+0x30>
 c009148:	4630      	mov	r0, r6
 c00914a:	f7ff ff45 	bl	c008fd8 <_Balloc>
 c00914e:	b940      	cbnz	r0, c009162 <__s2b+0x36>
 c009150:	4602      	mov	r2, r0
 c009152:	4b19      	ldr	r3, [pc, #100]	; (c0091b8 <__s2b+0x8c>)
 c009154:	21ce      	movs	r1, #206	; 0xce
 c009156:	4819      	ldr	r0, [pc, #100]	; (c0091bc <__s2b+0x90>)
 c009158:	f001 fd72 	bl	c00ac40 <__assert_func>
 c00915c:	0052      	lsls	r2, r2, #1
 c00915e:	3101      	adds	r1, #1
 c009160:	e7f0      	b.n	c009144 <__s2b+0x18>
 c009162:	9b08      	ldr	r3, [sp, #32]
 c009164:	2d09      	cmp	r5, #9
 c009166:	6143      	str	r3, [r0, #20]
 c009168:	f04f 0301 	mov.w	r3, #1
 c00916c:	6103      	str	r3, [r0, #16]
 c00916e:	dd16      	ble.n	c00919e <__s2b+0x72>
 c009170:	f104 0909 	add.w	r9, r4, #9
 c009174:	442c      	add	r4, r5
 c009176:	46c8      	mov	r8, r9
 c009178:	f818 3b01 	ldrb.w	r3, [r8], #1
 c00917c:	4601      	mov	r1, r0
 c00917e:	220a      	movs	r2, #10
 c009180:	4630      	mov	r0, r6
 c009182:	3b30      	subs	r3, #48	; 0x30
 c009184:	f7ff ff8a 	bl	c00909c <__multadd>
 c009188:	45a0      	cmp	r8, r4
 c00918a:	d1f5      	bne.n	c009178 <__s2b+0x4c>
 c00918c:	f1a5 0408 	sub.w	r4, r5, #8
 c009190:	444c      	add	r4, r9
 c009192:	1b2d      	subs	r5, r5, r4
 c009194:	1963      	adds	r3, r4, r5
 c009196:	42bb      	cmp	r3, r7
 c009198:	db04      	blt.n	c0091a4 <__s2b+0x78>
 c00919a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c00919e:	340a      	adds	r4, #10
 c0091a0:	2509      	movs	r5, #9
 c0091a2:	e7f6      	b.n	c009192 <__s2b+0x66>
 c0091a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 c0091a8:	4601      	mov	r1, r0
 c0091aa:	220a      	movs	r2, #10
 c0091ac:	4630      	mov	r0, r6
 c0091ae:	3b30      	subs	r3, #48	; 0x30
 c0091b0:	f7ff ff74 	bl	c00909c <__multadd>
 c0091b4:	e7ee      	b.n	c009194 <__s2b+0x68>
 c0091b6:	bf00      	nop
 c0091b8:	0c00b180 	.word	0x0c00b180
 c0091bc:	0c00b270 	.word	0x0c00b270

0c0091c0 <__hi0bits>:
 c0091c0:	0c03      	lsrs	r3, r0, #16
 c0091c2:	041b      	lsls	r3, r3, #16
 c0091c4:	b9d3      	cbnz	r3, c0091fc <__hi0bits+0x3c>
 c0091c6:	0400      	lsls	r0, r0, #16
 c0091c8:	2310      	movs	r3, #16
 c0091ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 c0091ce:	bf04      	itt	eq
 c0091d0:	0200      	lsleq	r0, r0, #8
 c0091d2:	3308      	addeq	r3, #8
 c0091d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 c0091d8:	bf04      	itt	eq
 c0091da:	0100      	lsleq	r0, r0, #4
 c0091dc:	3304      	addeq	r3, #4
 c0091de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 c0091e2:	bf04      	itt	eq
 c0091e4:	0080      	lsleq	r0, r0, #2
 c0091e6:	3302      	addeq	r3, #2
 c0091e8:	2800      	cmp	r0, #0
 c0091ea:	db05      	blt.n	c0091f8 <__hi0bits+0x38>
 c0091ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 c0091f0:	f103 0301 	add.w	r3, r3, #1
 c0091f4:	bf08      	it	eq
 c0091f6:	2320      	moveq	r3, #32
 c0091f8:	4618      	mov	r0, r3
 c0091fa:	4770      	bx	lr
 c0091fc:	2300      	movs	r3, #0
 c0091fe:	e7e4      	b.n	c0091ca <__hi0bits+0xa>

0c009200 <__lo0bits>:
 c009200:	6803      	ldr	r3, [r0, #0]
 c009202:	4601      	mov	r1, r0
 c009204:	f013 0207 	ands.w	r2, r3, #7
 c009208:	d00b      	beq.n	c009222 <__lo0bits+0x22>
 c00920a:	07da      	lsls	r2, r3, #31
 c00920c:	d423      	bmi.n	c009256 <__lo0bits+0x56>
 c00920e:	0798      	lsls	r0, r3, #30
 c009210:	bf47      	ittee	mi
 c009212:	085b      	lsrmi	r3, r3, #1
 c009214:	2001      	movmi	r0, #1
 c009216:	089b      	lsrpl	r3, r3, #2
 c009218:	2002      	movpl	r0, #2
 c00921a:	bf4c      	ite	mi
 c00921c:	600b      	strmi	r3, [r1, #0]
 c00921e:	600b      	strpl	r3, [r1, #0]
 c009220:	4770      	bx	lr
 c009222:	b298      	uxth	r0, r3
 c009224:	b9a8      	cbnz	r0, c009252 <__lo0bits+0x52>
 c009226:	0c1b      	lsrs	r3, r3, #16
 c009228:	2010      	movs	r0, #16
 c00922a:	b2da      	uxtb	r2, r3
 c00922c:	b90a      	cbnz	r2, c009232 <__lo0bits+0x32>
 c00922e:	3008      	adds	r0, #8
 c009230:	0a1b      	lsrs	r3, r3, #8
 c009232:	071a      	lsls	r2, r3, #28
 c009234:	bf04      	itt	eq
 c009236:	091b      	lsreq	r3, r3, #4
 c009238:	3004      	addeq	r0, #4
 c00923a:	079a      	lsls	r2, r3, #30
 c00923c:	bf04      	itt	eq
 c00923e:	089b      	lsreq	r3, r3, #2
 c009240:	3002      	addeq	r0, #2
 c009242:	07da      	lsls	r2, r3, #31
 c009244:	d403      	bmi.n	c00924e <__lo0bits+0x4e>
 c009246:	085b      	lsrs	r3, r3, #1
 c009248:	f100 0001 	add.w	r0, r0, #1
 c00924c:	d005      	beq.n	c00925a <__lo0bits+0x5a>
 c00924e:	600b      	str	r3, [r1, #0]
 c009250:	4770      	bx	lr
 c009252:	4610      	mov	r0, r2
 c009254:	e7e9      	b.n	c00922a <__lo0bits+0x2a>
 c009256:	2000      	movs	r0, #0
 c009258:	4770      	bx	lr
 c00925a:	2020      	movs	r0, #32
 c00925c:	4770      	bx	lr
	...

0c009260 <__i2b>:
 c009260:	b510      	push	{r4, lr}
 c009262:	460c      	mov	r4, r1
 c009264:	2101      	movs	r1, #1
 c009266:	f7ff feb7 	bl	c008fd8 <_Balloc>
 c00926a:	4602      	mov	r2, r0
 c00926c:	b928      	cbnz	r0, c00927a <__i2b+0x1a>
 c00926e:	4b05      	ldr	r3, [pc, #20]	; (c009284 <__i2b+0x24>)
 c009270:	f44f 71a0 	mov.w	r1, #320	; 0x140
 c009274:	4804      	ldr	r0, [pc, #16]	; (c009288 <__i2b+0x28>)
 c009276:	f001 fce3 	bl	c00ac40 <__assert_func>
 c00927a:	2301      	movs	r3, #1
 c00927c:	6144      	str	r4, [r0, #20]
 c00927e:	6103      	str	r3, [r0, #16]
 c009280:	bd10      	pop	{r4, pc}
 c009282:	bf00      	nop
 c009284:	0c00b180 	.word	0x0c00b180
 c009288:	0c00b270 	.word	0x0c00b270

0c00928c <__multiply>:
 c00928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c009290:	4691      	mov	r9, r2
 c009292:	690a      	ldr	r2, [r1, #16]
 c009294:	460c      	mov	r4, r1
 c009296:	b085      	sub	sp, #20
 c009298:	f8d9 3010 	ldr.w	r3, [r9, #16]
 c00929c:	429a      	cmp	r2, r3
 c00929e:	bfbe      	ittt	lt
 c0092a0:	460b      	movlt	r3, r1
 c0092a2:	464c      	movlt	r4, r9
 c0092a4:	4699      	movlt	r9, r3
 c0092a6:	6927      	ldr	r7, [r4, #16]
 c0092a8:	68a3      	ldr	r3, [r4, #8]
 c0092aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 c0092ae:	6861      	ldr	r1, [r4, #4]
 c0092b0:	eb07 060a 	add.w	r6, r7, sl
 c0092b4:	42b3      	cmp	r3, r6
 c0092b6:	bfb8      	it	lt
 c0092b8:	3101      	addlt	r1, #1
 c0092ba:	f7ff fe8d 	bl	c008fd8 <_Balloc>
 c0092be:	b930      	cbnz	r0, c0092ce <__multiply+0x42>
 c0092c0:	4602      	mov	r2, r0
 c0092c2:	4b44      	ldr	r3, [pc, #272]	; (c0093d4 <__multiply+0x148>)
 c0092c4:	f240 115d 	movw	r1, #349	; 0x15d
 c0092c8:	4843      	ldr	r0, [pc, #268]	; (c0093d8 <__multiply+0x14c>)
 c0092ca:	f001 fcb9 	bl	c00ac40 <__assert_func>
 c0092ce:	f100 0514 	add.w	r5, r0, #20
 c0092d2:	2200      	movs	r2, #0
 c0092d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 c0092d8:	462b      	mov	r3, r5
 c0092da:	4543      	cmp	r3, r8
 c0092dc:	d321      	bcc.n	c009322 <__multiply+0x96>
 c0092de:	f104 0314 	add.w	r3, r4, #20
 c0092e2:	f104 0115 	add.w	r1, r4, #21
 c0092e6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 c0092ea:	f109 0314 	add.w	r3, r9, #20
 c0092ee:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 c0092f2:	9202      	str	r2, [sp, #8]
 c0092f4:	1b3a      	subs	r2, r7, r4
 c0092f6:	3a15      	subs	r2, #21
 c0092f8:	f022 0203 	bic.w	r2, r2, #3
 c0092fc:	3204      	adds	r2, #4
 c0092fe:	428f      	cmp	r7, r1
 c009300:	bf38      	it	cc
 c009302:	2204      	movcc	r2, #4
 c009304:	9201      	str	r2, [sp, #4]
 c009306:	9a02      	ldr	r2, [sp, #8]
 c009308:	9303      	str	r3, [sp, #12]
 c00930a:	429a      	cmp	r2, r3
 c00930c:	d80c      	bhi.n	c009328 <__multiply+0x9c>
 c00930e:	2e00      	cmp	r6, #0
 c009310:	dd03      	ble.n	c00931a <__multiply+0x8e>
 c009312:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 c009316:	2b00      	cmp	r3, #0
 c009318:	d05a      	beq.n	c0093d0 <__multiply+0x144>
 c00931a:	6106      	str	r6, [r0, #16]
 c00931c:	b005      	add	sp, #20
 c00931e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c009322:	f843 2b04 	str.w	r2, [r3], #4
 c009326:	e7d8      	b.n	c0092da <__multiply+0x4e>
 c009328:	f8b3 a000 	ldrh.w	sl, [r3]
 c00932c:	f1ba 0f00 	cmp.w	sl, #0
 c009330:	d024      	beq.n	c00937c <__multiply+0xf0>
 c009332:	f104 0e14 	add.w	lr, r4, #20
 c009336:	46a9      	mov	r9, r5
 c009338:	f04f 0c00 	mov.w	ip, #0
 c00933c:	f85e 2b04 	ldr.w	r2, [lr], #4
 c009340:	f8d9 1000 	ldr.w	r1, [r9]
 c009344:	fa1f fb82 	uxth.w	fp, r2
 c009348:	4577      	cmp	r7, lr
 c00934a:	b289      	uxth	r1, r1
 c00934c:	fb0a 110b 	mla	r1, sl, fp, r1
 c009350:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 c009354:	f8d9 2000 	ldr.w	r2, [r9]
 c009358:	4461      	add	r1, ip
 c00935a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 c00935e:	fb0a c20b 	mla	r2, sl, fp, ip
 c009362:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 c009366:	b289      	uxth	r1, r1
 c009368:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 c00936c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 c009370:	f849 1b04 	str.w	r1, [r9], #4
 c009374:	d8e2      	bhi.n	c00933c <__multiply+0xb0>
 c009376:	9a01      	ldr	r2, [sp, #4]
 c009378:	f845 c002 	str.w	ip, [r5, r2]
 c00937c:	9a03      	ldr	r2, [sp, #12]
 c00937e:	3304      	adds	r3, #4
 c009380:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 c009384:	f1b9 0f00 	cmp.w	r9, #0
 c009388:	d020      	beq.n	c0093cc <__multiply+0x140>
 c00938a:	6829      	ldr	r1, [r5, #0]
 c00938c:	f104 0c14 	add.w	ip, r4, #20
 c009390:	46ae      	mov	lr, r5
 c009392:	f04f 0a00 	mov.w	sl, #0
 c009396:	f8bc b000 	ldrh.w	fp, [ip]
 c00939a:	b289      	uxth	r1, r1
 c00939c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 c0093a0:	fb09 220b 	mla	r2, r9, fp, r2
 c0093a4:	4492      	add	sl, r2
 c0093a6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 c0093aa:	f84e 1b04 	str.w	r1, [lr], #4
 c0093ae:	f85c 2b04 	ldr.w	r2, [ip], #4
 c0093b2:	f8be 1000 	ldrh.w	r1, [lr]
 c0093b6:	0c12      	lsrs	r2, r2, #16
 c0093b8:	4567      	cmp	r7, ip
 c0093ba:	fb09 1102 	mla	r1, r9, r2, r1
 c0093be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 c0093c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 c0093c6:	d8e6      	bhi.n	c009396 <__multiply+0x10a>
 c0093c8:	9a01      	ldr	r2, [sp, #4]
 c0093ca:	50a9      	str	r1, [r5, r2]
 c0093cc:	3504      	adds	r5, #4
 c0093ce:	e79a      	b.n	c009306 <__multiply+0x7a>
 c0093d0:	3e01      	subs	r6, #1
 c0093d2:	e79c      	b.n	c00930e <__multiply+0x82>
 c0093d4:	0c00b180 	.word	0x0c00b180
 c0093d8:	0c00b270 	.word	0x0c00b270

0c0093dc <__pow5mult>:
 c0093dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c0093e0:	4615      	mov	r5, r2
 c0093e2:	f012 0203 	ands.w	r2, r2, #3
 c0093e6:	4606      	mov	r6, r0
 c0093e8:	460f      	mov	r7, r1
 c0093ea:	d007      	beq.n	c0093fc <__pow5mult+0x20>
 c0093ec:	3a01      	subs	r2, #1
 c0093ee:	4c25      	ldr	r4, [pc, #148]	; (c009484 <__pow5mult+0xa8>)
 c0093f0:	2300      	movs	r3, #0
 c0093f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 c0093f6:	f7ff fe51 	bl	c00909c <__multadd>
 c0093fa:	4607      	mov	r7, r0
 c0093fc:	10ad      	asrs	r5, r5, #2
 c0093fe:	d03d      	beq.n	c00947c <__pow5mult+0xa0>
 c009400:	6a74      	ldr	r4, [r6, #36]	; 0x24
 c009402:	b97c      	cbnz	r4, c009424 <__pow5mult+0x48>
 c009404:	2010      	movs	r0, #16
 c009406:	f7ff fdb1 	bl	c008f6c <malloc>
 c00940a:	4602      	mov	r2, r0
 c00940c:	6270      	str	r0, [r6, #36]	; 0x24
 c00940e:	b928      	cbnz	r0, c00941c <__pow5mult+0x40>
 c009410:	4b1d      	ldr	r3, [pc, #116]	; (c009488 <__pow5mult+0xac>)
 c009412:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 c009416:	481d      	ldr	r0, [pc, #116]	; (c00948c <__pow5mult+0xb0>)
 c009418:	f001 fc12 	bl	c00ac40 <__assert_func>
 c00941c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 c009420:	6004      	str	r4, [r0, #0]
 c009422:	60c4      	str	r4, [r0, #12]
 c009424:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 c009428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 c00942c:	b94c      	cbnz	r4, c009442 <__pow5mult+0x66>
 c00942e:	f240 2171 	movw	r1, #625	; 0x271
 c009432:	4630      	mov	r0, r6
 c009434:	f7ff ff14 	bl	c009260 <__i2b>
 c009438:	2300      	movs	r3, #0
 c00943a:	4604      	mov	r4, r0
 c00943c:	f8c8 0008 	str.w	r0, [r8, #8]
 c009440:	6003      	str	r3, [r0, #0]
 c009442:	f04f 0900 	mov.w	r9, #0
 c009446:	07eb      	lsls	r3, r5, #31
 c009448:	d50a      	bpl.n	c009460 <__pow5mult+0x84>
 c00944a:	4639      	mov	r1, r7
 c00944c:	4622      	mov	r2, r4
 c00944e:	4630      	mov	r0, r6
 c009450:	f7ff ff1c 	bl	c00928c <__multiply>
 c009454:	4680      	mov	r8, r0
 c009456:	4639      	mov	r1, r7
 c009458:	4630      	mov	r0, r6
 c00945a:	4647      	mov	r7, r8
 c00945c:	f7ff fdfc 	bl	c009058 <_Bfree>
 c009460:	106d      	asrs	r5, r5, #1
 c009462:	d00b      	beq.n	c00947c <__pow5mult+0xa0>
 c009464:	6820      	ldr	r0, [r4, #0]
 c009466:	b938      	cbnz	r0, c009478 <__pow5mult+0x9c>
 c009468:	4622      	mov	r2, r4
 c00946a:	4621      	mov	r1, r4
 c00946c:	4630      	mov	r0, r6
 c00946e:	f7ff ff0d 	bl	c00928c <__multiply>
 c009472:	6020      	str	r0, [r4, #0]
 c009474:	f8c0 9000 	str.w	r9, [r0]
 c009478:	4604      	mov	r4, r0
 c00947a:	e7e4      	b.n	c009446 <__pow5mult+0x6a>
 c00947c:	4638      	mov	r0, r7
 c00947e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c009482:	bf00      	nop
 c009484:	0c00b3c0 	.word	0x0c00b3c0
 c009488:	0c00b10e 	.word	0x0c00b10e
 c00948c:	0c00b270 	.word	0x0c00b270

0c009490 <__lshift>:
 c009490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c009494:	460c      	mov	r4, r1
 c009496:	4607      	mov	r7, r0
 c009498:	4691      	mov	r9, r2
 c00949a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 c00949e:	6923      	ldr	r3, [r4, #16]
 c0094a0:	6849      	ldr	r1, [r1, #4]
 c0094a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 c0094a6:	68a3      	ldr	r3, [r4, #8]
 c0094a8:	f108 0601 	add.w	r6, r8, #1
 c0094ac:	42b3      	cmp	r3, r6
 c0094ae:	db0b      	blt.n	c0094c8 <__lshift+0x38>
 c0094b0:	4638      	mov	r0, r7
 c0094b2:	f7ff fd91 	bl	c008fd8 <_Balloc>
 c0094b6:	4605      	mov	r5, r0
 c0094b8:	b948      	cbnz	r0, c0094ce <__lshift+0x3e>
 c0094ba:	4602      	mov	r2, r0
 c0094bc:	4b2a      	ldr	r3, [pc, #168]	; (c009568 <__lshift+0xd8>)
 c0094be:	f240 11d9 	movw	r1, #473	; 0x1d9
 c0094c2:	482a      	ldr	r0, [pc, #168]	; (c00956c <__lshift+0xdc>)
 c0094c4:	f001 fbbc 	bl	c00ac40 <__assert_func>
 c0094c8:	3101      	adds	r1, #1
 c0094ca:	005b      	lsls	r3, r3, #1
 c0094cc:	e7ee      	b.n	c0094ac <__lshift+0x1c>
 c0094ce:	2300      	movs	r3, #0
 c0094d0:	f100 0114 	add.w	r1, r0, #20
 c0094d4:	f100 0210 	add.w	r2, r0, #16
 c0094d8:	4618      	mov	r0, r3
 c0094da:	4553      	cmp	r3, sl
 c0094dc:	db37      	blt.n	c00954e <__lshift+0xbe>
 c0094de:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 c0094e2:	f104 0314 	add.w	r3, r4, #20
 c0094e6:	6920      	ldr	r0, [r4, #16]
 c0094e8:	f019 091f 	ands.w	r9, r9, #31
 c0094ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 c0094f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 c0094f4:	d02f      	beq.n	c009556 <__lshift+0xc6>
 c0094f6:	f1c9 0e20 	rsb	lr, r9, #32
 c0094fa:	468a      	mov	sl, r1
 c0094fc:	f04f 0c00 	mov.w	ip, #0
 c009500:	681a      	ldr	r2, [r3, #0]
 c009502:	fa02 f209 	lsl.w	r2, r2, r9
 c009506:	ea42 020c 	orr.w	r2, r2, ip
 c00950a:	f84a 2b04 	str.w	r2, [sl], #4
 c00950e:	f853 2b04 	ldr.w	r2, [r3], #4
 c009512:	4298      	cmp	r0, r3
 c009514:	fa22 fc0e 	lsr.w	ip, r2, lr
 c009518:	d8f2      	bhi.n	c009500 <__lshift+0x70>
 c00951a:	1b03      	subs	r3, r0, r4
 c00951c:	f104 0215 	add.w	r2, r4, #21
 c009520:	3b15      	subs	r3, #21
 c009522:	f023 0303 	bic.w	r3, r3, #3
 c009526:	3304      	adds	r3, #4
 c009528:	4290      	cmp	r0, r2
 c00952a:	bf38      	it	cc
 c00952c:	2304      	movcc	r3, #4
 c00952e:	f841 c003 	str.w	ip, [r1, r3]
 c009532:	f1bc 0f00 	cmp.w	ip, #0
 c009536:	d001      	beq.n	c00953c <__lshift+0xac>
 c009538:	f108 0602 	add.w	r6, r8, #2
 c00953c:	3e01      	subs	r6, #1
 c00953e:	4638      	mov	r0, r7
 c009540:	4621      	mov	r1, r4
 c009542:	612e      	str	r6, [r5, #16]
 c009544:	f7ff fd88 	bl	c009058 <_Bfree>
 c009548:	4628      	mov	r0, r5
 c00954a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c00954e:	3301      	adds	r3, #1
 c009550:	f842 0f04 	str.w	r0, [r2, #4]!
 c009554:	e7c1      	b.n	c0094da <__lshift+0x4a>
 c009556:	3904      	subs	r1, #4
 c009558:	f853 2b04 	ldr.w	r2, [r3], #4
 c00955c:	4298      	cmp	r0, r3
 c00955e:	f841 2f04 	str.w	r2, [r1, #4]!
 c009562:	d8f9      	bhi.n	c009558 <__lshift+0xc8>
 c009564:	e7ea      	b.n	c00953c <__lshift+0xac>
 c009566:	bf00      	nop
 c009568:	0c00b180 	.word	0x0c00b180
 c00956c:	0c00b270 	.word	0x0c00b270

0c009570 <__mcmp>:
 c009570:	6902      	ldr	r2, [r0, #16]
 c009572:	b530      	push	{r4, r5, lr}
 c009574:	690c      	ldr	r4, [r1, #16]
 c009576:	1b12      	subs	r2, r2, r4
 c009578:	d10e      	bne.n	c009598 <__mcmp+0x28>
 c00957a:	f100 0314 	add.w	r3, r0, #20
 c00957e:	3114      	adds	r1, #20
 c009580:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 c009584:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 c009588:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 c00958c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 c009590:	42a5      	cmp	r5, r4
 c009592:	d003      	beq.n	c00959c <__mcmp+0x2c>
 c009594:	d305      	bcc.n	c0095a2 <__mcmp+0x32>
 c009596:	2201      	movs	r2, #1
 c009598:	4610      	mov	r0, r2
 c00959a:	bd30      	pop	{r4, r5, pc}
 c00959c:	4283      	cmp	r3, r0
 c00959e:	d3f3      	bcc.n	c009588 <__mcmp+0x18>
 c0095a0:	e7fa      	b.n	c009598 <__mcmp+0x28>
 c0095a2:	f04f 32ff 	mov.w	r2, #4294967295
 c0095a6:	e7f7      	b.n	c009598 <__mcmp+0x28>

0c0095a8 <__mdiff>:
 c0095a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0095ac:	460c      	mov	r4, r1
 c0095ae:	4606      	mov	r6, r0
 c0095b0:	4611      	mov	r1, r2
 c0095b2:	4692      	mov	sl, r2
 c0095b4:	4620      	mov	r0, r4
 c0095b6:	f7ff ffdb 	bl	c009570 <__mcmp>
 c0095ba:	1e05      	subs	r5, r0, #0
 c0095bc:	d110      	bne.n	c0095e0 <__mdiff+0x38>
 c0095be:	4629      	mov	r1, r5
 c0095c0:	4630      	mov	r0, r6
 c0095c2:	f7ff fd09 	bl	c008fd8 <_Balloc>
 c0095c6:	b930      	cbnz	r0, c0095d6 <__mdiff+0x2e>
 c0095c8:	4b3d      	ldr	r3, [pc, #244]	; (c0096c0 <__mdiff+0x118>)
 c0095ca:	4602      	mov	r2, r0
 c0095cc:	f240 2132 	movw	r1, #562	; 0x232
 c0095d0:	483c      	ldr	r0, [pc, #240]	; (c0096c4 <__mdiff+0x11c>)
 c0095d2:	f001 fb35 	bl	c00ac40 <__assert_func>
 c0095d6:	2301      	movs	r3, #1
 c0095d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 c0095dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0095e0:	bfa4      	itt	ge
 c0095e2:	4653      	movge	r3, sl
 c0095e4:	46a2      	movge	sl, r4
 c0095e6:	4630      	mov	r0, r6
 c0095e8:	bfa8      	it	ge
 c0095ea:	2500      	movge	r5, #0
 c0095ec:	f8da 1004 	ldr.w	r1, [sl, #4]
 c0095f0:	bfac      	ite	ge
 c0095f2:	461c      	movge	r4, r3
 c0095f4:	2501      	movlt	r5, #1
 c0095f6:	f7ff fcef 	bl	c008fd8 <_Balloc>
 c0095fa:	b920      	cbnz	r0, c009606 <__mdiff+0x5e>
 c0095fc:	4b30      	ldr	r3, [pc, #192]	; (c0096c0 <__mdiff+0x118>)
 c0095fe:	4602      	mov	r2, r0
 c009600:	f44f 7110 	mov.w	r1, #576	; 0x240
 c009604:	e7e4      	b.n	c0095d0 <__mdiff+0x28>
 c009606:	f8da 7010 	ldr.w	r7, [sl, #16]
 c00960a:	f104 0914 	add.w	r9, r4, #20
 c00960e:	6926      	ldr	r6, [r4, #16]
 c009610:	f100 0814 	add.w	r8, r0, #20
 c009614:	60c5      	str	r5, [r0, #12]
 c009616:	f10a 0514 	add.w	r5, sl, #20
 c00961a:	f10a 0210 	add.w	r2, sl, #16
 c00961e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 c009622:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 c009626:	46c2      	mov	sl, r8
 c009628:	f04f 0c00 	mov.w	ip, #0
 c00962c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 c009630:	f859 3b04 	ldr.w	r3, [r9], #4
 c009634:	fa1f f18b 	uxth.w	r1, fp
 c009638:	454e      	cmp	r6, r9
 c00963a:	448c      	add	ip, r1
 c00963c:	b299      	uxth	r1, r3
 c00963e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 c009642:	ebac 0101 	sub.w	r1, ip, r1
 c009646:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 c00964a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 c00964e:	b289      	uxth	r1, r1
 c009650:	ea4f 4c23 	mov.w	ip, r3, asr #16
 c009654:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 c009658:	f84a 3b04 	str.w	r3, [sl], #4
 c00965c:	d8e6      	bhi.n	c00962c <__mdiff+0x84>
 c00965e:	1b33      	subs	r3, r6, r4
 c009660:	3415      	adds	r4, #21
 c009662:	3b15      	subs	r3, #21
 c009664:	f023 0303 	bic.w	r3, r3, #3
 c009668:	3304      	adds	r3, #4
 c00966a:	42a6      	cmp	r6, r4
 c00966c:	bf38      	it	cc
 c00966e:	2304      	movcc	r3, #4
 c009670:	441d      	add	r5, r3
 c009672:	4443      	add	r3, r8
 c009674:	462c      	mov	r4, r5
 c009676:	461e      	mov	r6, r3
 c009678:	4574      	cmp	r4, lr
 c00967a:	d30e      	bcc.n	c00969a <__mdiff+0xf2>
 c00967c:	f10e 0203 	add.w	r2, lr, #3
 c009680:	1b52      	subs	r2, r2, r5
 c009682:	3d03      	subs	r5, #3
 c009684:	f022 0203 	bic.w	r2, r2, #3
 c009688:	45ae      	cmp	lr, r5
 c00968a:	bf38      	it	cc
 c00968c:	2200      	movcc	r2, #0
 c00968e:	441a      	add	r2, r3
 c009690:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 c009694:	b18b      	cbz	r3, c0096ba <__mdiff+0x112>
 c009696:	6107      	str	r7, [r0, #16]
 c009698:	e7a0      	b.n	c0095dc <__mdiff+0x34>
 c00969a:	f854 8b04 	ldr.w	r8, [r4], #4
 c00969e:	fa1f f288 	uxth.w	r2, r8
 c0096a2:	4462      	add	r2, ip
 c0096a4:	1411      	asrs	r1, r2, #16
 c0096a6:	b292      	uxth	r2, r2
 c0096a8:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 c0096ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 c0096b0:	ea4f 4c21 	mov.w	ip, r1, asr #16
 c0096b4:	f846 2b04 	str.w	r2, [r6], #4
 c0096b8:	e7de      	b.n	c009678 <__mdiff+0xd0>
 c0096ba:	3f01      	subs	r7, #1
 c0096bc:	e7e8      	b.n	c009690 <__mdiff+0xe8>
 c0096be:	bf00      	nop
 c0096c0:	0c00b180 	.word	0x0c00b180
 c0096c4:	0c00b270 	.word	0x0c00b270

0c0096c8 <__ulp>:
 c0096c8:	b082      	sub	sp, #8
 c0096ca:	4913      	ldr	r1, [pc, #76]	; (c009718 <__ulp+0x50>)
 c0096cc:	ed8d 0b00 	vstr	d0, [sp]
 c0096d0:	9b01      	ldr	r3, [sp, #4]
 c0096d2:	4019      	ands	r1, r3
 c0096d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 c0096d8:	2900      	cmp	r1, #0
 c0096da:	dd05      	ble.n	c0096e8 <__ulp+0x20>
 c0096dc:	2200      	movs	r2, #0
 c0096de:	460b      	mov	r3, r1
 c0096e0:	ec43 2b10 	vmov	d0, r2, r3
 c0096e4:	b002      	add	sp, #8
 c0096e6:	4770      	bx	lr
 c0096e8:	4249      	negs	r1, r1
 c0096ea:	2200      	movs	r2, #0
 c0096ec:	2300      	movs	r3, #0
 c0096ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 c0096f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 c0096f6:	da04      	bge.n	c009702 <__ulp+0x3a>
 c0096f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 c0096fc:	fa41 f300 	asr.w	r3, r1, r0
 c009700:	e7ee      	b.n	c0096e0 <__ulp+0x18>
 c009702:	f1a0 0114 	sub.w	r1, r0, #20
 c009706:	291e      	cmp	r1, #30
 c009708:	bfd6      	itet	le
 c00970a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 c00970e:	2101      	movgt	r1, #1
 c009710:	fa20 f101 	lsrle.w	r1, r0, r1
 c009714:	460a      	mov	r2, r1
 c009716:	e7e3      	b.n	c0096e0 <__ulp+0x18>
 c009718:	7ff00000 	.word	0x7ff00000

0c00971c <__b2d>:
 c00971c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00971e:	6905      	ldr	r5, [r0, #16]
 c009720:	f100 0714 	add.w	r7, r0, #20
 c009724:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 c009728:	f855 4c04 	ldr.w	r4, [r5, #-4]
 c00972c:	1f2e      	subs	r6, r5, #4
 c00972e:	4620      	mov	r0, r4
 c009730:	f7ff fd46 	bl	c0091c0 <__hi0bits>
 c009734:	f1c0 0320 	rsb	r3, r0, #32
 c009738:	280a      	cmp	r0, #10
 c00973a:	f8df c07c 	ldr.w	ip, [pc, #124]	; c0097b8 <__b2d+0x9c>
 c00973e:	600b      	str	r3, [r1, #0]
 c009740:	dc15      	bgt.n	c00976e <__b2d+0x52>
 c009742:	f1c0 0e0b 	rsb	lr, r0, #11
 c009746:	42b7      	cmp	r7, r6
 c009748:	f100 0015 	add.w	r0, r0, #21
 c00974c:	fa24 f10e 	lsr.w	r1, r4, lr
 c009750:	fa04 f000 	lsl.w	r0, r4, r0
 c009754:	ea41 030c 	orr.w	r3, r1, ip
 c009758:	bf34      	ite	cc
 c00975a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 c00975e:	2100      	movcs	r1, #0
 c009760:	fa21 f10e 	lsr.w	r1, r1, lr
 c009764:	ea40 0201 	orr.w	r2, r0, r1
 c009768:	ec43 2b10 	vmov	d0, r2, r3
 c00976c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c00976e:	42b7      	cmp	r7, r6
 c009770:	bf3a      	itte	cc
 c009772:	f1a5 0608 	subcc.w	r6, r5, #8
 c009776:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 c00977a:	2100      	movcs	r1, #0
 c00977c:	380b      	subs	r0, #11
 c00977e:	d017      	beq.n	c0097b0 <__b2d+0x94>
 c009780:	f1c0 0c20 	rsb	ip, r0, #32
 c009784:	fa04 f500 	lsl.w	r5, r4, r0
 c009788:	42be      	cmp	r6, r7
 c00978a:	fa01 f000 	lsl.w	r0, r1, r0
 c00978e:	fa21 f40c 	lsr.w	r4, r1, ip
 c009792:	ea45 0504 	orr.w	r5, r5, r4
 c009796:	bf8c      	ite	hi
 c009798:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 c00979c:	2400      	movls	r4, #0
 c00979e:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 c0097a2:	fa24 f40c 	lsr.w	r4, r4, ip
 c0097a6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 c0097aa:	ea40 0204 	orr.w	r2, r0, r4
 c0097ae:	e7db      	b.n	c009768 <__b2d+0x4c>
 c0097b0:	ea44 030c 	orr.w	r3, r4, ip
 c0097b4:	460a      	mov	r2, r1
 c0097b6:	e7d7      	b.n	c009768 <__b2d+0x4c>
 c0097b8:	3ff00000 	.word	0x3ff00000

0c0097bc <__d2b>:
 c0097bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c0097c0:	4689      	mov	r9, r1
 c0097c2:	2101      	movs	r1, #1
 c0097c4:	4690      	mov	r8, r2
 c0097c6:	ec57 6b10 	vmov	r6, r7, d0
 c0097ca:	f7ff fc05 	bl	c008fd8 <_Balloc>
 c0097ce:	4604      	mov	r4, r0
 c0097d0:	b930      	cbnz	r0, c0097e0 <__d2b+0x24>
 c0097d2:	4602      	mov	r2, r0
 c0097d4:	4b25      	ldr	r3, [pc, #148]	; (c00986c <__d2b+0xb0>)
 c0097d6:	f240 310a 	movw	r1, #778	; 0x30a
 c0097da:	4825      	ldr	r0, [pc, #148]	; (c009870 <__d2b+0xb4>)
 c0097dc:	f001 fa30 	bl	c00ac40 <__assert_func>
 c0097e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 c0097e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 c0097e8:	bb35      	cbnz	r5, c009838 <__d2b+0x7c>
 c0097ea:	2e00      	cmp	r6, #0
 c0097ec:	9301      	str	r3, [sp, #4]
 c0097ee:	d028      	beq.n	c009842 <__d2b+0x86>
 c0097f0:	4668      	mov	r0, sp
 c0097f2:	9600      	str	r6, [sp, #0]
 c0097f4:	f7ff fd04 	bl	c009200 <__lo0bits>
 c0097f8:	9900      	ldr	r1, [sp, #0]
 c0097fa:	b300      	cbz	r0, c00983e <__d2b+0x82>
 c0097fc:	9a01      	ldr	r2, [sp, #4]
 c0097fe:	f1c0 0320 	rsb	r3, r0, #32
 c009802:	fa02 f303 	lsl.w	r3, r2, r3
 c009806:	40c2      	lsrs	r2, r0
 c009808:	430b      	orrs	r3, r1
 c00980a:	9201      	str	r2, [sp, #4]
 c00980c:	6163      	str	r3, [r4, #20]
 c00980e:	9b01      	ldr	r3, [sp, #4]
 c009810:	2b00      	cmp	r3, #0
 c009812:	61a3      	str	r3, [r4, #24]
 c009814:	bf14      	ite	ne
 c009816:	2202      	movne	r2, #2
 c009818:	2201      	moveq	r2, #1
 c00981a:	6122      	str	r2, [r4, #16]
 c00981c:	b1d5      	cbz	r5, c009854 <__d2b+0x98>
 c00981e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 c009822:	4405      	add	r5, r0
 c009824:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 c009828:	f8c9 5000 	str.w	r5, [r9]
 c00982c:	f8c8 0000 	str.w	r0, [r8]
 c009830:	4620      	mov	r0, r4
 c009832:	b003      	add	sp, #12
 c009834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 c009838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c00983c:	e7d5      	b.n	c0097ea <__d2b+0x2e>
 c00983e:	6161      	str	r1, [r4, #20]
 c009840:	e7e5      	b.n	c00980e <__d2b+0x52>
 c009842:	a801      	add	r0, sp, #4
 c009844:	f7ff fcdc 	bl	c009200 <__lo0bits>
 c009848:	9b01      	ldr	r3, [sp, #4]
 c00984a:	2201      	movs	r2, #1
 c00984c:	3020      	adds	r0, #32
 c00984e:	6163      	str	r3, [r4, #20]
 c009850:	6122      	str	r2, [r4, #16]
 c009852:	e7e3      	b.n	c00981c <__d2b+0x60>
 c009854:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 c009858:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 c00985c:	f8c9 0000 	str.w	r0, [r9]
 c009860:	6918      	ldr	r0, [r3, #16]
 c009862:	f7ff fcad 	bl	c0091c0 <__hi0bits>
 c009866:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 c00986a:	e7df      	b.n	c00982c <__d2b+0x70>
 c00986c:	0c00b180 	.word	0x0c00b180
 c009870:	0c00b270 	.word	0x0c00b270

0c009874 <__ratio>:
 c009874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c009878:	4688      	mov	r8, r1
 c00987a:	4681      	mov	r9, r0
 c00987c:	4669      	mov	r1, sp
 c00987e:	f7ff ff4d 	bl	c00971c <__b2d>
 c009882:	a901      	add	r1, sp, #4
 c009884:	4640      	mov	r0, r8
 c009886:	ec55 4b10 	vmov	r4, r5, d0
 c00988a:	f7ff ff47 	bl	c00971c <__b2d>
 c00988e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 c009892:	f8d8 2010 	ldr.w	r2, [r8, #16]
 c009896:	462f      	mov	r7, r5
 c009898:	eba3 0c02 	sub.w	ip, r3, r2
 c00989c:	e9dd 3200 	ldrd	r3, r2, [sp]
 c0098a0:	ec51 0b10 	vmov	r0, r1, d0
 c0098a4:	1a9b      	subs	r3, r3, r2
 c0098a6:	468b      	mov	fp, r1
 c0098a8:	4620      	mov	r0, r4
 c0098aa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 c0098ae:	2b00      	cmp	r3, #0
 c0098b0:	bfd5      	itete	le
 c0098b2:	460a      	movle	r2, r1
 c0098b4:	462a      	movgt	r2, r5
 c0098b6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 c0098ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 c0098be:	bfd8      	it	le
 c0098c0:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 c0098c4:	ee10 2a10 	vmov	r2, s0
 c0098c8:	4639      	mov	r1, r7
 c0098ca:	465b      	mov	r3, fp
 c0098cc:	f7f7 f844 	bl	c000958 <__aeabi_ddiv>
 c0098d0:	ec41 0b10 	vmov	d0, r0, r1
 c0098d4:	b003      	add	sp, #12
 c0098d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0c0098da <__copybits>:
 c0098da:	3901      	subs	r1, #1
 c0098dc:	f102 0314 	add.w	r3, r2, #20
 c0098e0:	1149      	asrs	r1, r1, #5
 c0098e2:	b570      	push	{r4, r5, r6, lr}
 c0098e4:	3101      	adds	r1, #1
 c0098e6:	6914      	ldr	r4, [r2, #16]
 c0098e8:	1f05      	subs	r5, r0, #4
 c0098ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 c0098ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 c0098f2:	42a3      	cmp	r3, r4
 c0098f4:	d30c      	bcc.n	c009910 <__copybits+0x36>
 c0098f6:	1aa3      	subs	r3, r4, r2
 c0098f8:	3211      	adds	r2, #17
 c0098fa:	3b11      	subs	r3, #17
 c0098fc:	f023 0303 	bic.w	r3, r3, #3
 c009900:	42a2      	cmp	r2, r4
 c009902:	bf88      	it	hi
 c009904:	2300      	movhi	r3, #0
 c009906:	4418      	add	r0, r3
 c009908:	2300      	movs	r3, #0
 c00990a:	4288      	cmp	r0, r1
 c00990c:	d305      	bcc.n	c00991a <__copybits+0x40>
 c00990e:	bd70      	pop	{r4, r5, r6, pc}
 c009910:	f853 6b04 	ldr.w	r6, [r3], #4
 c009914:	f845 6f04 	str.w	r6, [r5, #4]!
 c009918:	e7eb      	b.n	c0098f2 <__copybits+0x18>
 c00991a:	f840 3b04 	str.w	r3, [r0], #4
 c00991e:	e7f4      	b.n	c00990a <__copybits+0x30>

0c009920 <__any_on>:
 c009920:	f100 0214 	add.w	r2, r0, #20
 c009924:	114b      	asrs	r3, r1, #5
 c009926:	6900      	ldr	r0, [r0, #16]
 c009928:	4298      	cmp	r0, r3
 c00992a:	b510      	push	{r4, lr}
 c00992c:	db11      	blt.n	c009952 <__any_on+0x32>
 c00992e:	dd0a      	ble.n	c009946 <__any_on+0x26>
 c009930:	f011 011f 	ands.w	r1, r1, #31
 c009934:	d007      	beq.n	c009946 <__any_on+0x26>
 c009936:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 c00993a:	fa24 f001 	lsr.w	r0, r4, r1
 c00993e:	fa00 f101 	lsl.w	r1, r0, r1
 c009942:	428c      	cmp	r4, r1
 c009944:	d10b      	bne.n	c00995e <__any_on+0x3e>
 c009946:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 c00994a:	4293      	cmp	r3, r2
 c00994c:	d803      	bhi.n	c009956 <__any_on+0x36>
 c00994e:	2000      	movs	r0, #0
 c009950:	bd10      	pop	{r4, pc}
 c009952:	4603      	mov	r3, r0
 c009954:	e7f7      	b.n	c009946 <__any_on+0x26>
 c009956:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 c00995a:	2900      	cmp	r1, #0
 c00995c:	d0f5      	beq.n	c00994a <__any_on+0x2a>
 c00995e:	2001      	movs	r0, #1
 c009960:	e7f6      	b.n	c009950 <__any_on+0x30>

0c009962 <_calloc_r>:
 c009962:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c009964:	fba1 2402 	umull	r2, r4, r1, r2
 c009968:	b94c      	cbnz	r4, c00997e <_calloc_r+0x1c>
 c00996a:	4611      	mov	r1, r2
 c00996c:	9201      	str	r2, [sp, #4]
 c00996e:	f000 f87b 	bl	c009a68 <_malloc_r>
 c009972:	9a01      	ldr	r2, [sp, #4]
 c009974:	4605      	mov	r5, r0
 c009976:	b930      	cbnz	r0, c009986 <_calloc_r+0x24>
 c009978:	4628      	mov	r0, r5
 c00997a:	b003      	add	sp, #12
 c00997c:	bd30      	pop	{r4, r5, pc}
 c00997e:	220c      	movs	r2, #12
 c009980:	2500      	movs	r5, #0
 c009982:	6002      	str	r2, [r0, #0]
 c009984:	e7f8      	b.n	c009978 <_calloc_r+0x16>
 c009986:	4621      	mov	r1, r4
 c009988:	f7fb fef0 	bl	c00576c <memset>
 c00998c:	e7f4      	b.n	c009978 <_calloc_r+0x16>
	...

0c009990 <_free_r>:
 c009990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c009992:	2900      	cmp	r1, #0
 c009994:	d043      	beq.n	c009a1e <_free_r+0x8e>
 c009996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c00999a:	1f0c      	subs	r4, r1, #4
 c00999c:	9001      	str	r0, [sp, #4]
 c00999e:	2b00      	cmp	r3, #0
 c0099a0:	bfb8      	it	lt
 c0099a2:	18e4      	addlt	r4, r4, r3
 c0099a4:	f001 f9da 	bl	c00ad5c <__malloc_lock>
 c0099a8:	4a1e      	ldr	r2, [pc, #120]	; (c009a24 <_free_r+0x94>)
 c0099aa:	9801      	ldr	r0, [sp, #4]
 c0099ac:	6813      	ldr	r3, [r2, #0]
 c0099ae:	b933      	cbnz	r3, c0099be <_free_r+0x2e>
 c0099b0:	6063      	str	r3, [r4, #4]
 c0099b2:	6014      	str	r4, [r2, #0]
 c0099b4:	b003      	add	sp, #12
 c0099b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c0099ba:	f001 b9d5 	b.w	c00ad68 <__malloc_unlock>
 c0099be:	42a3      	cmp	r3, r4
 c0099c0:	d908      	bls.n	c0099d4 <_free_r+0x44>
 c0099c2:	6825      	ldr	r5, [r4, #0]
 c0099c4:	1961      	adds	r1, r4, r5
 c0099c6:	428b      	cmp	r3, r1
 c0099c8:	bf01      	itttt	eq
 c0099ca:	6819      	ldreq	r1, [r3, #0]
 c0099cc:	685b      	ldreq	r3, [r3, #4]
 c0099ce:	1949      	addeq	r1, r1, r5
 c0099d0:	6021      	streq	r1, [r4, #0]
 c0099d2:	e7ed      	b.n	c0099b0 <_free_r+0x20>
 c0099d4:	461a      	mov	r2, r3
 c0099d6:	685b      	ldr	r3, [r3, #4]
 c0099d8:	b10b      	cbz	r3, c0099de <_free_r+0x4e>
 c0099da:	42a3      	cmp	r3, r4
 c0099dc:	d9fa      	bls.n	c0099d4 <_free_r+0x44>
 c0099de:	6811      	ldr	r1, [r2, #0]
 c0099e0:	1855      	adds	r5, r2, r1
 c0099e2:	42a5      	cmp	r5, r4
 c0099e4:	d10b      	bne.n	c0099fe <_free_r+0x6e>
 c0099e6:	6824      	ldr	r4, [r4, #0]
 c0099e8:	4421      	add	r1, r4
 c0099ea:	1854      	adds	r4, r2, r1
 c0099ec:	6011      	str	r1, [r2, #0]
 c0099ee:	42a3      	cmp	r3, r4
 c0099f0:	d1e0      	bne.n	c0099b4 <_free_r+0x24>
 c0099f2:	681c      	ldr	r4, [r3, #0]
 c0099f4:	685b      	ldr	r3, [r3, #4]
 c0099f6:	4421      	add	r1, r4
 c0099f8:	6053      	str	r3, [r2, #4]
 c0099fa:	6011      	str	r1, [r2, #0]
 c0099fc:	e7da      	b.n	c0099b4 <_free_r+0x24>
 c0099fe:	d902      	bls.n	c009a06 <_free_r+0x76>
 c009a00:	230c      	movs	r3, #12
 c009a02:	6003      	str	r3, [r0, #0]
 c009a04:	e7d6      	b.n	c0099b4 <_free_r+0x24>
 c009a06:	6825      	ldr	r5, [r4, #0]
 c009a08:	1961      	adds	r1, r4, r5
 c009a0a:	428b      	cmp	r3, r1
 c009a0c:	bf02      	ittt	eq
 c009a0e:	6819      	ldreq	r1, [r3, #0]
 c009a10:	685b      	ldreq	r3, [r3, #4]
 c009a12:	1949      	addeq	r1, r1, r5
 c009a14:	6063      	str	r3, [r4, #4]
 c009a16:	bf08      	it	eq
 c009a18:	6021      	streq	r1, [r4, #0]
 c009a1a:	6054      	str	r4, [r2, #4]
 c009a1c:	e7ca      	b.n	c0099b4 <_free_r+0x24>
 c009a1e:	b003      	add	sp, #12
 c009a20:	bd30      	pop	{r4, r5, pc}
 c009a22:	bf00      	nop
 c009a24:	300002a8 	.word	0x300002a8

0c009a28 <sbrk_aligned>:
 c009a28:	b570      	push	{r4, r5, r6, lr}
 c009a2a:	4e0e      	ldr	r6, [pc, #56]	; (c009a64 <sbrk_aligned+0x3c>)
 c009a2c:	460c      	mov	r4, r1
 c009a2e:	4605      	mov	r5, r0
 c009a30:	6831      	ldr	r1, [r6, #0]
 c009a32:	b911      	cbnz	r1, c009a3a <sbrk_aligned+0x12>
 c009a34:	f000 ff00 	bl	c00a838 <_sbrk_r>
 c009a38:	6030      	str	r0, [r6, #0]
 c009a3a:	4621      	mov	r1, r4
 c009a3c:	4628      	mov	r0, r5
 c009a3e:	f000 fefb 	bl	c00a838 <_sbrk_r>
 c009a42:	1c43      	adds	r3, r0, #1
 c009a44:	d00a      	beq.n	c009a5c <sbrk_aligned+0x34>
 c009a46:	1cc4      	adds	r4, r0, #3
 c009a48:	f024 0403 	bic.w	r4, r4, #3
 c009a4c:	42a0      	cmp	r0, r4
 c009a4e:	d007      	beq.n	c009a60 <sbrk_aligned+0x38>
 c009a50:	1a21      	subs	r1, r4, r0
 c009a52:	4628      	mov	r0, r5
 c009a54:	f000 fef0 	bl	c00a838 <_sbrk_r>
 c009a58:	3001      	adds	r0, #1
 c009a5a:	d101      	bne.n	c009a60 <sbrk_aligned+0x38>
 c009a5c:	f04f 34ff 	mov.w	r4, #4294967295
 c009a60:	4620      	mov	r0, r4
 c009a62:	bd70      	pop	{r4, r5, r6, pc}
 c009a64:	300002ac 	.word	0x300002ac

0c009a68 <_malloc_r>:
 c009a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c009a6c:	1ccd      	adds	r5, r1, #3
 c009a6e:	4607      	mov	r7, r0
 c009a70:	f025 0503 	bic.w	r5, r5, #3
 c009a74:	3508      	adds	r5, #8
 c009a76:	2d0c      	cmp	r5, #12
 c009a78:	bf38      	it	cc
 c009a7a:	250c      	movcc	r5, #12
 c009a7c:	2d00      	cmp	r5, #0
 c009a7e:	db01      	blt.n	c009a84 <_malloc_r+0x1c>
 c009a80:	42a9      	cmp	r1, r5
 c009a82:	d905      	bls.n	c009a90 <_malloc_r+0x28>
 c009a84:	230c      	movs	r3, #12
 c009a86:	2600      	movs	r6, #0
 c009a88:	603b      	str	r3, [r7, #0]
 c009a8a:	4630      	mov	r0, r6
 c009a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c009a90:	4e2e      	ldr	r6, [pc, #184]	; (c009b4c <_malloc_r+0xe4>)
 c009a92:	f001 f963 	bl	c00ad5c <__malloc_lock>
 c009a96:	6833      	ldr	r3, [r6, #0]
 c009a98:	461c      	mov	r4, r3
 c009a9a:	bb34      	cbnz	r4, c009aea <_malloc_r+0x82>
 c009a9c:	4629      	mov	r1, r5
 c009a9e:	4638      	mov	r0, r7
 c009aa0:	f7ff ffc2 	bl	c009a28 <sbrk_aligned>
 c009aa4:	1c43      	adds	r3, r0, #1
 c009aa6:	4604      	mov	r4, r0
 c009aa8:	d14d      	bne.n	c009b46 <_malloc_r+0xde>
 c009aaa:	6834      	ldr	r4, [r6, #0]
 c009aac:	4626      	mov	r6, r4
 c009aae:	2e00      	cmp	r6, #0
 c009ab0:	d140      	bne.n	c009b34 <_malloc_r+0xcc>
 c009ab2:	6823      	ldr	r3, [r4, #0]
 c009ab4:	4631      	mov	r1, r6
 c009ab6:	4638      	mov	r0, r7
 c009ab8:	eb04 0803 	add.w	r8, r4, r3
 c009abc:	f000 febc 	bl	c00a838 <_sbrk_r>
 c009ac0:	4580      	cmp	r8, r0
 c009ac2:	d13a      	bne.n	c009b3a <_malloc_r+0xd2>
 c009ac4:	6821      	ldr	r1, [r4, #0]
 c009ac6:	3503      	adds	r5, #3
 c009ac8:	4638      	mov	r0, r7
 c009aca:	1a6d      	subs	r5, r5, r1
 c009acc:	f025 0503 	bic.w	r5, r5, #3
 c009ad0:	3508      	adds	r5, #8
 c009ad2:	2d0c      	cmp	r5, #12
 c009ad4:	bf38      	it	cc
 c009ad6:	250c      	movcc	r5, #12
 c009ad8:	4629      	mov	r1, r5
 c009ada:	f7ff ffa5 	bl	c009a28 <sbrk_aligned>
 c009ade:	3001      	adds	r0, #1
 c009ae0:	d02b      	beq.n	c009b3a <_malloc_r+0xd2>
 c009ae2:	6823      	ldr	r3, [r4, #0]
 c009ae4:	442b      	add	r3, r5
 c009ae6:	6023      	str	r3, [r4, #0]
 c009ae8:	e00e      	b.n	c009b08 <_malloc_r+0xa0>
 c009aea:	6822      	ldr	r2, [r4, #0]
 c009aec:	1b52      	subs	r2, r2, r5
 c009aee:	d41e      	bmi.n	c009b2e <_malloc_r+0xc6>
 c009af0:	2a0b      	cmp	r2, #11
 c009af2:	d916      	bls.n	c009b22 <_malloc_r+0xba>
 c009af4:	1961      	adds	r1, r4, r5
 c009af6:	42a3      	cmp	r3, r4
 c009af8:	6025      	str	r5, [r4, #0]
 c009afa:	bf18      	it	ne
 c009afc:	6059      	strne	r1, [r3, #4]
 c009afe:	6863      	ldr	r3, [r4, #4]
 c009b00:	bf08      	it	eq
 c009b02:	6031      	streq	r1, [r6, #0]
 c009b04:	5162      	str	r2, [r4, r5]
 c009b06:	604b      	str	r3, [r1, #4]
 c009b08:	f104 060b 	add.w	r6, r4, #11
 c009b0c:	4638      	mov	r0, r7
 c009b0e:	f001 f92b 	bl	c00ad68 <__malloc_unlock>
 c009b12:	1d23      	adds	r3, r4, #4
 c009b14:	f026 0607 	bic.w	r6, r6, #7
 c009b18:	1af2      	subs	r2, r6, r3
 c009b1a:	d0b6      	beq.n	c009a8a <_malloc_r+0x22>
 c009b1c:	1b9b      	subs	r3, r3, r6
 c009b1e:	50a3      	str	r3, [r4, r2]
 c009b20:	e7b3      	b.n	c009a8a <_malloc_r+0x22>
 c009b22:	6862      	ldr	r2, [r4, #4]
 c009b24:	42a3      	cmp	r3, r4
 c009b26:	bf0c      	ite	eq
 c009b28:	6032      	streq	r2, [r6, #0]
 c009b2a:	605a      	strne	r2, [r3, #4]
 c009b2c:	e7ec      	b.n	c009b08 <_malloc_r+0xa0>
 c009b2e:	4623      	mov	r3, r4
 c009b30:	6864      	ldr	r4, [r4, #4]
 c009b32:	e7b2      	b.n	c009a9a <_malloc_r+0x32>
 c009b34:	4634      	mov	r4, r6
 c009b36:	6876      	ldr	r6, [r6, #4]
 c009b38:	e7b9      	b.n	c009aae <_malloc_r+0x46>
 c009b3a:	230c      	movs	r3, #12
 c009b3c:	4638      	mov	r0, r7
 c009b3e:	603b      	str	r3, [r7, #0]
 c009b40:	f001 f912 	bl	c00ad68 <__malloc_unlock>
 c009b44:	e7a1      	b.n	c009a8a <_malloc_r+0x22>
 c009b46:	6025      	str	r5, [r4, #0]
 c009b48:	e7de      	b.n	c009b08 <_malloc_r+0xa0>
 c009b4a:	bf00      	nop
 c009b4c:	300002a8 	.word	0x300002a8

0c009b50 <__ssputs_r>:
 c009b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c009b54:	688e      	ldr	r6, [r1, #8]
 c009b56:	4682      	mov	sl, r0
 c009b58:	460c      	mov	r4, r1
 c009b5a:	4690      	mov	r8, r2
 c009b5c:	429e      	cmp	r6, r3
 c009b5e:	461f      	mov	r7, r3
 c009b60:	d838      	bhi.n	c009bd4 <__ssputs_r+0x84>
 c009b62:	898a      	ldrh	r2, [r1, #12]
 c009b64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 c009b68:	d032      	beq.n	c009bd0 <__ssputs_r+0x80>
 c009b6a:	6825      	ldr	r5, [r4, #0]
 c009b6c:	3301      	adds	r3, #1
 c009b6e:	6909      	ldr	r1, [r1, #16]
 c009b70:	eba5 0901 	sub.w	r9, r5, r1
 c009b74:	6965      	ldr	r5, [r4, #20]
 c009b76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 c009b7a:	444b      	add	r3, r9
 c009b7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 c009b80:	106d      	asrs	r5, r5, #1
 c009b82:	429d      	cmp	r5, r3
 c009b84:	bf38      	it	cc
 c009b86:	461d      	movcc	r5, r3
 c009b88:	0553      	lsls	r3, r2, #21
 c009b8a:	d531      	bpl.n	c009bf0 <__ssputs_r+0xa0>
 c009b8c:	4629      	mov	r1, r5
 c009b8e:	f7ff ff6b 	bl	c009a68 <_malloc_r>
 c009b92:	4606      	mov	r6, r0
 c009b94:	b950      	cbnz	r0, c009bac <__ssputs_r+0x5c>
 c009b96:	230c      	movs	r3, #12
 c009b98:	f04f 30ff 	mov.w	r0, #4294967295
 c009b9c:	f8ca 3000 	str.w	r3, [sl]
 c009ba0:	89a3      	ldrh	r3, [r4, #12]
 c009ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c009ba6:	81a3      	strh	r3, [r4, #12]
 c009ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c009bac:	464a      	mov	r2, r9
 c009bae:	6921      	ldr	r1, [r4, #16]
 c009bb0:	f7ff fa04 	bl	c008fbc <memcpy>
 c009bb4:	89a3      	ldrh	r3, [r4, #12]
 c009bb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 c009bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c009bbe:	81a3      	strh	r3, [r4, #12]
 c009bc0:	6126      	str	r6, [r4, #16]
 c009bc2:	444e      	add	r6, r9
 c009bc4:	6165      	str	r5, [r4, #20]
 c009bc6:	eba5 0509 	sub.w	r5, r5, r9
 c009bca:	6026      	str	r6, [r4, #0]
 c009bcc:	463e      	mov	r6, r7
 c009bce:	60a5      	str	r5, [r4, #8]
 c009bd0:	42be      	cmp	r6, r7
 c009bd2:	d900      	bls.n	c009bd6 <__ssputs_r+0x86>
 c009bd4:	463e      	mov	r6, r7
 c009bd6:	4632      	mov	r2, r6
 c009bd8:	4641      	mov	r1, r8
 c009bda:	6820      	ldr	r0, [r4, #0]
 c009bdc:	f001 f8a4 	bl	c00ad28 <memmove>
 c009be0:	68a3      	ldr	r3, [r4, #8]
 c009be2:	2000      	movs	r0, #0
 c009be4:	1b9b      	subs	r3, r3, r6
 c009be6:	60a3      	str	r3, [r4, #8]
 c009be8:	6823      	ldr	r3, [r4, #0]
 c009bea:	4433      	add	r3, r6
 c009bec:	6023      	str	r3, [r4, #0]
 c009bee:	e7db      	b.n	c009ba8 <__ssputs_r+0x58>
 c009bf0:	462a      	mov	r2, r5
 c009bf2:	f001 f8bf 	bl	c00ad74 <_realloc_r>
 c009bf6:	4606      	mov	r6, r0
 c009bf8:	2800      	cmp	r0, #0
 c009bfa:	d1e1      	bne.n	c009bc0 <__ssputs_r+0x70>
 c009bfc:	6921      	ldr	r1, [r4, #16]
 c009bfe:	4650      	mov	r0, sl
 c009c00:	f7ff fec6 	bl	c009990 <_free_r>
 c009c04:	e7c7      	b.n	c009b96 <__ssputs_r+0x46>
	...

0c009c08 <_svfiprintf_r>:
 c009c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c009c0c:	4698      	mov	r8, r3
 c009c0e:	898b      	ldrh	r3, [r1, #12]
 c009c10:	b09d      	sub	sp, #116	; 0x74
 c009c12:	4607      	mov	r7, r0
 c009c14:	061b      	lsls	r3, r3, #24
 c009c16:	460d      	mov	r5, r1
 c009c18:	4614      	mov	r4, r2
 c009c1a:	d50e      	bpl.n	c009c3a <_svfiprintf_r+0x32>
 c009c1c:	690b      	ldr	r3, [r1, #16]
 c009c1e:	b963      	cbnz	r3, c009c3a <_svfiprintf_r+0x32>
 c009c20:	2140      	movs	r1, #64	; 0x40
 c009c22:	f7ff ff21 	bl	c009a68 <_malloc_r>
 c009c26:	6028      	str	r0, [r5, #0]
 c009c28:	6128      	str	r0, [r5, #16]
 c009c2a:	b920      	cbnz	r0, c009c36 <_svfiprintf_r+0x2e>
 c009c2c:	230c      	movs	r3, #12
 c009c2e:	603b      	str	r3, [r7, #0]
 c009c30:	f04f 30ff 	mov.w	r0, #4294967295
 c009c34:	e0d1      	b.n	c009dda <_svfiprintf_r+0x1d2>
 c009c36:	2340      	movs	r3, #64	; 0x40
 c009c38:	616b      	str	r3, [r5, #20]
 c009c3a:	2300      	movs	r3, #0
 c009c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 c009c40:	f04f 0901 	mov.w	r9, #1
 c009c44:	f8df 81ac 	ldr.w	r8, [pc, #428]	; c009df4 <_svfiprintf_r+0x1ec>
 c009c48:	9309      	str	r3, [sp, #36]	; 0x24
 c009c4a:	2320      	movs	r3, #32
 c009c4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c009c50:	2330      	movs	r3, #48	; 0x30
 c009c52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c009c56:	4623      	mov	r3, r4
 c009c58:	469a      	mov	sl, r3
 c009c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 c009c5e:	b10a      	cbz	r2, c009c64 <_svfiprintf_r+0x5c>
 c009c60:	2a25      	cmp	r2, #37	; 0x25
 c009c62:	d1f9      	bne.n	c009c58 <_svfiprintf_r+0x50>
 c009c64:	ebba 0b04 	subs.w	fp, sl, r4
 c009c68:	d00b      	beq.n	c009c82 <_svfiprintf_r+0x7a>
 c009c6a:	465b      	mov	r3, fp
 c009c6c:	4622      	mov	r2, r4
 c009c6e:	4629      	mov	r1, r5
 c009c70:	4638      	mov	r0, r7
 c009c72:	f7ff ff6d 	bl	c009b50 <__ssputs_r>
 c009c76:	3001      	adds	r0, #1
 c009c78:	f000 80aa 	beq.w	c009dd0 <_svfiprintf_r+0x1c8>
 c009c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c009c7e:	445a      	add	r2, fp
 c009c80:	9209      	str	r2, [sp, #36]	; 0x24
 c009c82:	f89a 3000 	ldrb.w	r3, [sl]
 c009c86:	2b00      	cmp	r3, #0
 c009c88:	f000 80a2 	beq.w	c009dd0 <_svfiprintf_r+0x1c8>
 c009c8c:	2300      	movs	r3, #0
 c009c8e:	f04f 32ff 	mov.w	r2, #4294967295
 c009c92:	f10a 0a01 	add.w	sl, sl, #1
 c009c96:	9304      	str	r3, [sp, #16]
 c009c98:	9307      	str	r3, [sp, #28]
 c009c9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c009c9e:	931a      	str	r3, [sp, #104]	; 0x68
 c009ca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c009ca4:	4654      	mov	r4, sl
 c009ca6:	2205      	movs	r2, #5
 c009ca8:	4852      	ldr	r0, [pc, #328]	; (c009df4 <_svfiprintf_r+0x1ec>)
 c009caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 c009cae:	f7ff f977 	bl	c008fa0 <memchr>
 c009cb2:	9a04      	ldr	r2, [sp, #16]
 c009cb4:	b9d8      	cbnz	r0, c009cee <_svfiprintf_r+0xe6>
 c009cb6:	06d0      	lsls	r0, r2, #27
 c009cb8:	bf44      	itt	mi
 c009cba:	2320      	movmi	r3, #32
 c009cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c009cc0:	0711      	lsls	r1, r2, #28
 c009cc2:	bf44      	itt	mi
 c009cc4:	232b      	movmi	r3, #43	; 0x2b
 c009cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c009cca:	f89a 3000 	ldrb.w	r3, [sl]
 c009cce:	2b2a      	cmp	r3, #42	; 0x2a
 c009cd0:	d015      	beq.n	c009cfe <_svfiprintf_r+0xf6>
 c009cd2:	9a07      	ldr	r2, [sp, #28]
 c009cd4:	4654      	mov	r4, sl
 c009cd6:	2000      	movs	r0, #0
 c009cd8:	f04f 0c0a 	mov.w	ip, #10
 c009cdc:	4621      	mov	r1, r4
 c009cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 c009ce2:	3b30      	subs	r3, #48	; 0x30
 c009ce4:	2b09      	cmp	r3, #9
 c009ce6:	d94e      	bls.n	c009d86 <_svfiprintf_r+0x17e>
 c009ce8:	b1b0      	cbz	r0, c009d18 <_svfiprintf_r+0x110>
 c009cea:	9207      	str	r2, [sp, #28]
 c009cec:	e014      	b.n	c009d18 <_svfiprintf_r+0x110>
 c009cee:	eba0 0308 	sub.w	r3, r0, r8
 c009cf2:	46a2      	mov	sl, r4
 c009cf4:	fa09 f303 	lsl.w	r3, r9, r3
 c009cf8:	4313      	orrs	r3, r2
 c009cfa:	9304      	str	r3, [sp, #16]
 c009cfc:	e7d2      	b.n	c009ca4 <_svfiprintf_r+0x9c>
 c009cfe:	9b03      	ldr	r3, [sp, #12]
 c009d00:	1d19      	adds	r1, r3, #4
 c009d02:	681b      	ldr	r3, [r3, #0]
 c009d04:	2b00      	cmp	r3, #0
 c009d06:	9103      	str	r1, [sp, #12]
 c009d08:	bfbb      	ittet	lt
 c009d0a:	425b      	neglt	r3, r3
 c009d0c:	f042 0202 	orrlt.w	r2, r2, #2
 c009d10:	9307      	strge	r3, [sp, #28]
 c009d12:	9307      	strlt	r3, [sp, #28]
 c009d14:	bfb8      	it	lt
 c009d16:	9204      	strlt	r2, [sp, #16]
 c009d18:	7823      	ldrb	r3, [r4, #0]
 c009d1a:	2b2e      	cmp	r3, #46	; 0x2e
 c009d1c:	d10c      	bne.n	c009d38 <_svfiprintf_r+0x130>
 c009d1e:	7863      	ldrb	r3, [r4, #1]
 c009d20:	2b2a      	cmp	r3, #42	; 0x2a
 c009d22:	d135      	bne.n	c009d90 <_svfiprintf_r+0x188>
 c009d24:	9b03      	ldr	r3, [sp, #12]
 c009d26:	3402      	adds	r4, #2
 c009d28:	1d1a      	adds	r2, r3, #4
 c009d2a:	681b      	ldr	r3, [r3, #0]
 c009d2c:	2b00      	cmp	r3, #0
 c009d2e:	9203      	str	r2, [sp, #12]
 c009d30:	bfb8      	it	lt
 c009d32:	f04f 33ff 	movlt.w	r3, #4294967295
 c009d36:	9305      	str	r3, [sp, #20]
 c009d38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; c009e04 <_svfiprintf_r+0x1fc>
 c009d3c:	2203      	movs	r2, #3
 c009d3e:	7821      	ldrb	r1, [r4, #0]
 c009d40:	4650      	mov	r0, sl
 c009d42:	f7ff f92d 	bl	c008fa0 <memchr>
 c009d46:	b140      	cbz	r0, c009d5a <_svfiprintf_r+0x152>
 c009d48:	2340      	movs	r3, #64	; 0x40
 c009d4a:	eba0 000a 	sub.w	r0, r0, sl
 c009d4e:	3401      	adds	r4, #1
 c009d50:	fa03 f000 	lsl.w	r0, r3, r0
 c009d54:	9b04      	ldr	r3, [sp, #16]
 c009d56:	4303      	orrs	r3, r0
 c009d58:	9304      	str	r3, [sp, #16]
 c009d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 c009d5e:	2206      	movs	r2, #6
 c009d60:	4825      	ldr	r0, [pc, #148]	; (c009df8 <_svfiprintf_r+0x1f0>)
 c009d62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c009d66:	f7ff f91b 	bl	c008fa0 <memchr>
 c009d6a:	2800      	cmp	r0, #0
 c009d6c:	d038      	beq.n	c009de0 <_svfiprintf_r+0x1d8>
 c009d6e:	4b23      	ldr	r3, [pc, #140]	; (c009dfc <_svfiprintf_r+0x1f4>)
 c009d70:	bb1b      	cbnz	r3, c009dba <_svfiprintf_r+0x1b2>
 c009d72:	9b03      	ldr	r3, [sp, #12]
 c009d74:	3307      	adds	r3, #7
 c009d76:	f023 0307 	bic.w	r3, r3, #7
 c009d7a:	3308      	adds	r3, #8
 c009d7c:	9303      	str	r3, [sp, #12]
 c009d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c009d80:	4433      	add	r3, r6
 c009d82:	9309      	str	r3, [sp, #36]	; 0x24
 c009d84:	e767      	b.n	c009c56 <_svfiprintf_r+0x4e>
 c009d86:	fb0c 3202 	mla	r2, ip, r2, r3
 c009d8a:	460c      	mov	r4, r1
 c009d8c:	2001      	movs	r0, #1
 c009d8e:	e7a5      	b.n	c009cdc <_svfiprintf_r+0xd4>
 c009d90:	2300      	movs	r3, #0
 c009d92:	3401      	adds	r4, #1
 c009d94:	f04f 0c0a 	mov.w	ip, #10
 c009d98:	4619      	mov	r1, r3
 c009d9a:	9305      	str	r3, [sp, #20]
 c009d9c:	4620      	mov	r0, r4
 c009d9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 c009da2:	3a30      	subs	r2, #48	; 0x30
 c009da4:	2a09      	cmp	r2, #9
 c009da6:	d903      	bls.n	c009db0 <_svfiprintf_r+0x1a8>
 c009da8:	2b00      	cmp	r3, #0
 c009daa:	d0c5      	beq.n	c009d38 <_svfiprintf_r+0x130>
 c009dac:	9105      	str	r1, [sp, #20]
 c009dae:	e7c3      	b.n	c009d38 <_svfiprintf_r+0x130>
 c009db0:	fb0c 2101 	mla	r1, ip, r1, r2
 c009db4:	4604      	mov	r4, r0
 c009db6:	2301      	movs	r3, #1
 c009db8:	e7f0      	b.n	c009d9c <_svfiprintf_r+0x194>
 c009dba:	ab03      	add	r3, sp, #12
 c009dbc:	462a      	mov	r2, r5
 c009dbe:	a904      	add	r1, sp, #16
 c009dc0:	4638      	mov	r0, r7
 c009dc2:	9300      	str	r3, [sp, #0]
 c009dc4:	4b0e      	ldr	r3, [pc, #56]	; (c009e00 <_svfiprintf_r+0x1f8>)
 c009dc6:	f7fb fd79 	bl	c0058bc <_printf_float>
 c009dca:	1c42      	adds	r2, r0, #1
 c009dcc:	4606      	mov	r6, r0
 c009dce:	d1d6      	bne.n	c009d7e <_svfiprintf_r+0x176>
 c009dd0:	89ab      	ldrh	r3, [r5, #12]
 c009dd2:	065b      	lsls	r3, r3, #25
 c009dd4:	f53f af2c 	bmi.w	c009c30 <_svfiprintf_r+0x28>
 c009dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 c009dda:	b01d      	add	sp, #116	; 0x74
 c009ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c009de0:	ab03      	add	r3, sp, #12
 c009de2:	462a      	mov	r2, r5
 c009de4:	a904      	add	r1, sp, #16
 c009de6:	4638      	mov	r0, r7
 c009de8:	9300      	str	r3, [sp, #0]
 c009dea:	4b05      	ldr	r3, [pc, #20]	; (c009e00 <_svfiprintf_r+0x1f8>)
 c009dec:	f7fc f80c 	bl	c005e08 <_printf_i>
 c009df0:	e7eb      	b.n	c009dca <_svfiprintf_r+0x1c2>
 c009df2:	bf00      	nop
 c009df4:	0c00b3cc 	.word	0x0c00b3cc
 c009df8:	0c00b3d6 	.word	0x0c00b3d6
 c009dfc:	0c0058bd 	.word	0x0c0058bd
 c009e00:	0c009b51 	.word	0x0c009b51
 c009e04:	0c00b3d2 	.word	0x0c00b3d2

0c009e08 <__sfputc_r>:
 c009e08:	6893      	ldr	r3, [r2, #8]
 c009e0a:	3b01      	subs	r3, #1
 c009e0c:	2b00      	cmp	r3, #0
 c009e0e:	6093      	str	r3, [r2, #8]
 c009e10:	b410      	push	{r4}
 c009e12:	da08      	bge.n	c009e26 <__sfputc_r+0x1e>
 c009e14:	6994      	ldr	r4, [r2, #24]
 c009e16:	42a3      	cmp	r3, r4
 c009e18:	db01      	blt.n	c009e1e <__sfputc_r+0x16>
 c009e1a:	290a      	cmp	r1, #10
 c009e1c:	d103      	bne.n	c009e26 <__sfputc_r+0x1e>
 c009e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 c009e22:	f7fd bba5 	b.w	c007570 <__swbuf_r>
 c009e26:	6813      	ldr	r3, [r2, #0]
 c009e28:	1c58      	adds	r0, r3, #1
 c009e2a:	6010      	str	r0, [r2, #0]
 c009e2c:	4608      	mov	r0, r1
 c009e2e:	7019      	strb	r1, [r3, #0]
 c009e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 c009e34:	4770      	bx	lr

0c009e36 <__sfputs_r>:
 c009e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c009e38:	4606      	mov	r6, r0
 c009e3a:	460f      	mov	r7, r1
 c009e3c:	4614      	mov	r4, r2
 c009e3e:	18d5      	adds	r5, r2, r3
 c009e40:	42ac      	cmp	r4, r5
 c009e42:	d101      	bne.n	c009e48 <__sfputs_r+0x12>
 c009e44:	2000      	movs	r0, #0
 c009e46:	e007      	b.n	c009e58 <__sfputs_r+0x22>
 c009e48:	463a      	mov	r2, r7
 c009e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 c009e4e:	4630      	mov	r0, r6
 c009e50:	f7ff ffda 	bl	c009e08 <__sfputc_r>
 c009e54:	1c43      	adds	r3, r0, #1
 c009e56:	d1f3      	bne.n	c009e40 <__sfputs_r+0xa>
 c009e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0c009e5c <_vfiprintf_r>:
 c009e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c009e60:	460d      	mov	r5, r1
 c009e62:	b09d      	sub	sp, #116	; 0x74
 c009e64:	4614      	mov	r4, r2
 c009e66:	4698      	mov	r8, r3
 c009e68:	4606      	mov	r6, r0
 c009e6a:	b118      	cbz	r0, c009e74 <_vfiprintf_r+0x18>
 c009e6c:	6983      	ldr	r3, [r0, #24]
 c009e6e:	b90b      	cbnz	r3, c009e74 <_vfiprintf_r+0x18>
 c009e70:	f7fe fbe8 	bl	c008644 <__sinit>
 c009e74:	4b89      	ldr	r3, [pc, #548]	; (c00a09c <_vfiprintf_r+0x240>)
 c009e76:	429d      	cmp	r5, r3
 c009e78:	d11b      	bne.n	c009eb2 <_vfiprintf_r+0x56>
 c009e7a:	6875      	ldr	r5, [r6, #4]
 c009e7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c009e7e:	07d9      	lsls	r1, r3, #31
 c009e80:	d405      	bmi.n	c009e8e <_vfiprintf_r+0x32>
 c009e82:	89ab      	ldrh	r3, [r5, #12]
 c009e84:	059a      	lsls	r2, r3, #22
 c009e86:	d402      	bmi.n	c009e8e <_vfiprintf_r+0x32>
 c009e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c009e8a:	f7ff f808 	bl	c008e9e <__retarget_lock_acquire_recursive>
 c009e8e:	89ab      	ldrh	r3, [r5, #12]
 c009e90:	071b      	lsls	r3, r3, #28
 c009e92:	d501      	bpl.n	c009e98 <_vfiprintf_r+0x3c>
 c009e94:	692b      	ldr	r3, [r5, #16]
 c009e96:	b9eb      	cbnz	r3, c009ed4 <_vfiprintf_r+0x78>
 c009e98:	4629      	mov	r1, r5
 c009e9a:	4630      	mov	r0, r6
 c009e9c:	f7fd fbba 	bl	c007614 <__swsetup_r>
 c009ea0:	b1c0      	cbz	r0, c009ed4 <_vfiprintf_r+0x78>
 c009ea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c009ea4:	07dc      	lsls	r4, r3, #31
 c009ea6:	d50e      	bpl.n	c009ec6 <_vfiprintf_r+0x6a>
 c009ea8:	f04f 30ff 	mov.w	r0, #4294967295
 c009eac:	b01d      	add	sp, #116	; 0x74
 c009eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c009eb2:	4b7b      	ldr	r3, [pc, #492]	; (c00a0a0 <_vfiprintf_r+0x244>)
 c009eb4:	429d      	cmp	r5, r3
 c009eb6:	d101      	bne.n	c009ebc <_vfiprintf_r+0x60>
 c009eb8:	68b5      	ldr	r5, [r6, #8]
 c009eba:	e7df      	b.n	c009e7c <_vfiprintf_r+0x20>
 c009ebc:	4b79      	ldr	r3, [pc, #484]	; (c00a0a4 <_vfiprintf_r+0x248>)
 c009ebe:	429d      	cmp	r5, r3
 c009ec0:	bf08      	it	eq
 c009ec2:	68f5      	ldreq	r5, [r6, #12]
 c009ec4:	e7da      	b.n	c009e7c <_vfiprintf_r+0x20>
 c009ec6:	89ab      	ldrh	r3, [r5, #12]
 c009ec8:	0598      	lsls	r0, r3, #22
 c009eca:	d4ed      	bmi.n	c009ea8 <_vfiprintf_r+0x4c>
 c009ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c009ece:	f7fe ffe7 	bl	c008ea0 <__retarget_lock_release_recursive>
 c009ed2:	e7e9      	b.n	c009ea8 <_vfiprintf_r+0x4c>
 c009ed4:	2300      	movs	r3, #0
 c009ed6:	f8cd 800c 	str.w	r8, [sp, #12]
 c009eda:	f04f 0901 	mov.w	r9, #1
 c009ede:	f8df 81c8 	ldr.w	r8, [pc, #456]	; c00a0a8 <_vfiprintf_r+0x24c>
 c009ee2:	9309      	str	r3, [sp, #36]	; 0x24
 c009ee4:	2320      	movs	r3, #32
 c009ee6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c009eea:	2330      	movs	r3, #48	; 0x30
 c009eec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c009ef0:	4623      	mov	r3, r4
 c009ef2:	469a      	mov	sl, r3
 c009ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 c009ef8:	b10a      	cbz	r2, c009efe <_vfiprintf_r+0xa2>
 c009efa:	2a25      	cmp	r2, #37	; 0x25
 c009efc:	d1f9      	bne.n	c009ef2 <_vfiprintf_r+0x96>
 c009efe:	ebba 0b04 	subs.w	fp, sl, r4
 c009f02:	d00b      	beq.n	c009f1c <_vfiprintf_r+0xc0>
 c009f04:	465b      	mov	r3, fp
 c009f06:	4622      	mov	r2, r4
 c009f08:	4629      	mov	r1, r5
 c009f0a:	4630      	mov	r0, r6
 c009f0c:	f7ff ff93 	bl	c009e36 <__sfputs_r>
 c009f10:	3001      	adds	r0, #1
 c009f12:	f000 80aa 	beq.w	c00a06a <_vfiprintf_r+0x20e>
 c009f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c009f18:	445a      	add	r2, fp
 c009f1a:	9209      	str	r2, [sp, #36]	; 0x24
 c009f1c:	f89a 3000 	ldrb.w	r3, [sl]
 c009f20:	2b00      	cmp	r3, #0
 c009f22:	f000 80a2 	beq.w	c00a06a <_vfiprintf_r+0x20e>
 c009f26:	2300      	movs	r3, #0
 c009f28:	f04f 32ff 	mov.w	r2, #4294967295
 c009f2c:	f10a 0a01 	add.w	sl, sl, #1
 c009f30:	9304      	str	r3, [sp, #16]
 c009f32:	9307      	str	r3, [sp, #28]
 c009f34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c009f38:	931a      	str	r3, [sp, #104]	; 0x68
 c009f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c009f3e:	4654      	mov	r4, sl
 c009f40:	2205      	movs	r2, #5
 c009f42:	4859      	ldr	r0, [pc, #356]	; (c00a0a8 <_vfiprintf_r+0x24c>)
 c009f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 c009f48:	f7ff f82a 	bl	c008fa0 <memchr>
 c009f4c:	9a04      	ldr	r2, [sp, #16]
 c009f4e:	b9d8      	cbnz	r0, c009f88 <_vfiprintf_r+0x12c>
 c009f50:	06d1      	lsls	r1, r2, #27
 c009f52:	bf44      	itt	mi
 c009f54:	2320      	movmi	r3, #32
 c009f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c009f5a:	0713      	lsls	r3, r2, #28
 c009f5c:	bf44      	itt	mi
 c009f5e:	232b      	movmi	r3, #43	; 0x2b
 c009f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c009f64:	f89a 3000 	ldrb.w	r3, [sl]
 c009f68:	2b2a      	cmp	r3, #42	; 0x2a
 c009f6a:	d015      	beq.n	c009f98 <_vfiprintf_r+0x13c>
 c009f6c:	9a07      	ldr	r2, [sp, #28]
 c009f6e:	4654      	mov	r4, sl
 c009f70:	2000      	movs	r0, #0
 c009f72:	f04f 0c0a 	mov.w	ip, #10
 c009f76:	4621      	mov	r1, r4
 c009f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 c009f7c:	3b30      	subs	r3, #48	; 0x30
 c009f7e:	2b09      	cmp	r3, #9
 c009f80:	d94e      	bls.n	c00a020 <_vfiprintf_r+0x1c4>
 c009f82:	b1b0      	cbz	r0, c009fb2 <_vfiprintf_r+0x156>
 c009f84:	9207      	str	r2, [sp, #28]
 c009f86:	e014      	b.n	c009fb2 <_vfiprintf_r+0x156>
 c009f88:	eba0 0308 	sub.w	r3, r0, r8
 c009f8c:	46a2      	mov	sl, r4
 c009f8e:	fa09 f303 	lsl.w	r3, r9, r3
 c009f92:	4313      	orrs	r3, r2
 c009f94:	9304      	str	r3, [sp, #16]
 c009f96:	e7d2      	b.n	c009f3e <_vfiprintf_r+0xe2>
 c009f98:	9b03      	ldr	r3, [sp, #12]
 c009f9a:	1d19      	adds	r1, r3, #4
 c009f9c:	681b      	ldr	r3, [r3, #0]
 c009f9e:	2b00      	cmp	r3, #0
 c009fa0:	9103      	str	r1, [sp, #12]
 c009fa2:	bfbb      	ittet	lt
 c009fa4:	425b      	neglt	r3, r3
 c009fa6:	f042 0202 	orrlt.w	r2, r2, #2
 c009faa:	9307      	strge	r3, [sp, #28]
 c009fac:	9307      	strlt	r3, [sp, #28]
 c009fae:	bfb8      	it	lt
 c009fb0:	9204      	strlt	r2, [sp, #16]
 c009fb2:	7823      	ldrb	r3, [r4, #0]
 c009fb4:	2b2e      	cmp	r3, #46	; 0x2e
 c009fb6:	d10c      	bne.n	c009fd2 <_vfiprintf_r+0x176>
 c009fb8:	7863      	ldrb	r3, [r4, #1]
 c009fba:	2b2a      	cmp	r3, #42	; 0x2a
 c009fbc:	d135      	bne.n	c00a02a <_vfiprintf_r+0x1ce>
 c009fbe:	9b03      	ldr	r3, [sp, #12]
 c009fc0:	3402      	adds	r4, #2
 c009fc2:	1d1a      	adds	r2, r3, #4
 c009fc4:	681b      	ldr	r3, [r3, #0]
 c009fc6:	2b00      	cmp	r3, #0
 c009fc8:	9203      	str	r2, [sp, #12]
 c009fca:	bfb8      	it	lt
 c009fcc:	f04f 33ff 	movlt.w	r3, #4294967295
 c009fd0:	9305      	str	r3, [sp, #20]
 c009fd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c00a0b8 <_vfiprintf_r+0x25c>
 c009fd6:	2203      	movs	r2, #3
 c009fd8:	7821      	ldrb	r1, [r4, #0]
 c009fda:	4650      	mov	r0, sl
 c009fdc:	f7fe ffe0 	bl	c008fa0 <memchr>
 c009fe0:	b140      	cbz	r0, c009ff4 <_vfiprintf_r+0x198>
 c009fe2:	2340      	movs	r3, #64	; 0x40
 c009fe4:	eba0 000a 	sub.w	r0, r0, sl
 c009fe8:	3401      	adds	r4, #1
 c009fea:	fa03 f000 	lsl.w	r0, r3, r0
 c009fee:	9b04      	ldr	r3, [sp, #16]
 c009ff0:	4303      	orrs	r3, r0
 c009ff2:	9304      	str	r3, [sp, #16]
 c009ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 c009ff8:	2206      	movs	r2, #6
 c009ffa:	482c      	ldr	r0, [pc, #176]	; (c00a0ac <_vfiprintf_r+0x250>)
 c009ffc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c00a000:	f7fe ffce 	bl	c008fa0 <memchr>
 c00a004:	2800      	cmp	r0, #0
 c00a006:	d03f      	beq.n	c00a088 <_vfiprintf_r+0x22c>
 c00a008:	4b29      	ldr	r3, [pc, #164]	; (c00a0b0 <_vfiprintf_r+0x254>)
 c00a00a:	bb1b      	cbnz	r3, c00a054 <_vfiprintf_r+0x1f8>
 c00a00c:	9b03      	ldr	r3, [sp, #12]
 c00a00e:	3307      	adds	r3, #7
 c00a010:	f023 0307 	bic.w	r3, r3, #7
 c00a014:	3308      	adds	r3, #8
 c00a016:	9303      	str	r3, [sp, #12]
 c00a018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c00a01a:	443b      	add	r3, r7
 c00a01c:	9309      	str	r3, [sp, #36]	; 0x24
 c00a01e:	e767      	b.n	c009ef0 <_vfiprintf_r+0x94>
 c00a020:	fb0c 3202 	mla	r2, ip, r2, r3
 c00a024:	460c      	mov	r4, r1
 c00a026:	2001      	movs	r0, #1
 c00a028:	e7a5      	b.n	c009f76 <_vfiprintf_r+0x11a>
 c00a02a:	2300      	movs	r3, #0
 c00a02c:	3401      	adds	r4, #1
 c00a02e:	f04f 0c0a 	mov.w	ip, #10
 c00a032:	4619      	mov	r1, r3
 c00a034:	9305      	str	r3, [sp, #20]
 c00a036:	4620      	mov	r0, r4
 c00a038:	f810 2b01 	ldrb.w	r2, [r0], #1
 c00a03c:	3a30      	subs	r2, #48	; 0x30
 c00a03e:	2a09      	cmp	r2, #9
 c00a040:	d903      	bls.n	c00a04a <_vfiprintf_r+0x1ee>
 c00a042:	2b00      	cmp	r3, #0
 c00a044:	d0c5      	beq.n	c009fd2 <_vfiprintf_r+0x176>
 c00a046:	9105      	str	r1, [sp, #20]
 c00a048:	e7c3      	b.n	c009fd2 <_vfiprintf_r+0x176>
 c00a04a:	fb0c 2101 	mla	r1, ip, r1, r2
 c00a04e:	4604      	mov	r4, r0
 c00a050:	2301      	movs	r3, #1
 c00a052:	e7f0      	b.n	c00a036 <_vfiprintf_r+0x1da>
 c00a054:	ab03      	add	r3, sp, #12
 c00a056:	462a      	mov	r2, r5
 c00a058:	a904      	add	r1, sp, #16
 c00a05a:	4630      	mov	r0, r6
 c00a05c:	9300      	str	r3, [sp, #0]
 c00a05e:	4b15      	ldr	r3, [pc, #84]	; (c00a0b4 <_vfiprintf_r+0x258>)
 c00a060:	f7fb fc2c 	bl	c0058bc <_printf_float>
 c00a064:	4607      	mov	r7, r0
 c00a066:	1c78      	adds	r0, r7, #1
 c00a068:	d1d6      	bne.n	c00a018 <_vfiprintf_r+0x1bc>
 c00a06a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c00a06c:	07d9      	lsls	r1, r3, #31
 c00a06e:	d405      	bmi.n	c00a07c <_vfiprintf_r+0x220>
 c00a070:	89ab      	ldrh	r3, [r5, #12]
 c00a072:	059a      	lsls	r2, r3, #22
 c00a074:	d402      	bmi.n	c00a07c <_vfiprintf_r+0x220>
 c00a076:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c00a078:	f7fe ff12 	bl	c008ea0 <__retarget_lock_release_recursive>
 c00a07c:	89ab      	ldrh	r3, [r5, #12]
 c00a07e:	065b      	lsls	r3, r3, #25
 c00a080:	f53f af12 	bmi.w	c009ea8 <_vfiprintf_r+0x4c>
 c00a084:	9809      	ldr	r0, [sp, #36]	; 0x24
 c00a086:	e711      	b.n	c009eac <_vfiprintf_r+0x50>
 c00a088:	ab03      	add	r3, sp, #12
 c00a08a:	462a      	mov	r2, r5
 c00a08c:	a904      	add	r1, sp, #16
 c00a08e:	4630      	mov	r0, r6
 c00a090:	9300      	str	r3, [sp, #0]
 c00a092:	4b08      	ldr	r3, [pc, #32]	; (c00a0b4 <_vfiprintf_r+0x258>)
 c00a094:	f7fb feb8 	bl	c005e08 <_printf_i>
 c00a098:	e7e4      	b.n	c00a064 <_vfiprintf_r+0x208>
 c00a09a:	bf00      	nop
 c00a09c:	0c00b1b4 	.word	0x0c00b1b4
 c00a0a0:	0c00b1d4 	.word	0x0c00b1d4
 c00a0a4:	0c00b194 	.word	0x0c00b194
 c00a0a8:	0c00b3cc 	.word	0x0c00b3cc
 c00a0ac:	0c00b3d6 	.word	0x0c00b3d6
 c00a0b0:	0c0058bd 	.word	0x0c0058bd
 c00a0b4:	0c009e37 	.word	0x0c009e37
 c00a0b8:	0c00b3d2 	.word	0x0c00b3d2

0c00a0bc <__svfiscanf_r>:
 c00a0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c00a0c0:	461d      	mov	r5, r3
 c00a0c2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 c00a0c4:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 c00a0c8:	4606      	mov	r6, r0
 c00a0ca:	07df      	lsls	r7, r3, #31
 c00a0cc:	460c      	mov	r4, r1
 c00a0ce:	4692      	mov	sl, r2
 c00a0d0:	d405      	bmi.n	c00a0de <__svfiscanf_r+0x22>
 c00a0d2:	898b      	ldrh	r3, [r1, #12]
 c00a0d4:	0598      	lsls	r0, r3, #22
 c00a0d6:	d402      	bmi.n	c00a0de <__svfiscanf_r+0x22>
 c00a0d8:	6d88      	ldr	r0, [r1, #88]	; 0x58
 c00a0da:	f7fe fee0 	bl	c008e9e <__retarget_lock_acquire_recursive>
 c00a0de:	2300      	movs	r3, #0
 c00a0e0:	f10d 0804 	add.w	r8, sp, #4
 c00a0e4:	4fa6      	ldr	r7, [pc, #664]	; (c00a380 <__svfiscanf_r+0x2c4>)
 c00a0e6:	f8df 92a4 	ldr.w	r9, [pc, #676]	; c00a38c <__svfiscanf_r+0x2d0>
 c00a0ea:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 c00a0ee:	9500      	str	r5, [sp, #0]
 c00a0f0:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 c00a0f4:	4ba3      	ldr	r3, [pc, #652]	; (c00a384 <__svfiscanf_r+0x2c8>)
 c00a0f6:	93a0      	str	r3, [sp, #640]	; 0x280
 c00a0f8:	4ba3      	ldr	r3, [pc, #652]	; (c00a388 <__svfiscanf_r+0x2cc>)
 c00a0fa:	93a1      	str	r3, [sp, #644]	; 0x284
 c00a0fc:	f89a 3000 	ldrb.w	r3, [sl]
 c00a100:	2b00      	cmp	r3, #0
 c00a102:	f000 8173 	beq.w	c00a3ec <__svfiscanf_r+0x330>
 c00a106:	5dd9      	ldrb	r1, [r3, r7]
 c00a108:	f10a 0501 	add.w	r5, sl, #1
 c00a10c:	f011 0108 	ands.w	r1, r1, #8
 c00a110:	d019      	beq.n	c00a146 <__svfiscanf_r+0x8a>
 c00a112:	6863      	ldr	r3, [r4, #4]
 c00a114:	2b00      	cmp	r3, #0
 c00a116:	dd0f      	ble.n	c00a138 <__svfiscanf_r+0x7c>
 c00a118:	6823      	ldr	r3, [r4, #0]
 c00a11a:	781a      	ldrb	r2, [r3, #0]
 c00a11c:	5cba      	ldrb	r2, [r7, r2]
 c00a11e:	0711      	lsls	r1, r2, #28
 c00a120:	d401      	bmi.n	c00a126 <__svfiscanf_r+0x6a>
 c00a122:	46aa      	mov	sl, r5
 c00a124:	e7ea      	b.n	c00a0fc <__svfiscanf_r+0x40>
 c00a126:	9a45      	ldr	r2, [sp, #276]	; 0x114
 c00a128:	3301      	adds	r3, #1
 c00a12a:	3201      	adds	r2, #1
 c00a12c:	6023      	str	r3, [r4, #0]
 c00a12e:	9245      	str	r2, [sp, #276]	; 0x114
 c00a130:	6862      	ldr	r2, [r4, #4]
 c00a132:	3a01      	subs	r2, #1
 c00a134:	6062      	str	r2, [r4, #4]
 c00a136:	e7ec      	b.n	c00a112 <__svfiscanf_r+0x56>
 c00a138:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 c00a13a:	4621      	mov	r1, r4
 c00a13c:	4630      	mov	r0, r6
 c00a13e:	4798      	blx	r3
 c00a140:	2800      	cmp	r0, #0
 c00a142:	d0e9      	beq.n	c00a118 <__svfiscanf_r+0x5c>
 c00a144:	e7ed      	b.n	c00a122 <__svfiscanf_r+0x66>
 c00a146:	2b25      	cmp	r3, #37	; 0x25
 c00a148:	d012      	beq.n	c00a170 <__svfiscanf_r+0xb4>
 c00a14a:	469a      	mov	sl, r3
 c00a14c:	6863      	ldr	r3, [r4, #4]
 c00a14e:	2b00      	cmp	r3, #0
 c00a150:	f340 8095 	ble.w	c00a27e <__svfiscanf_r+0x1c2>
 c00a154:	6822      	ldr	r2, [r4, #0]
 c00a156:	7813      	ldrb	r3, [r2, #0]
 c00a158:	4553      	cmp	r3, sl
 c00a15a:	f040 8147 	bne.w	c00a3ec <__svfiscanf_r+0x330>
 c00a15e:	6863      	ldr	r3, [r4, #4]
 c00a160:	3201      	adds	r2, #1
 c00a162:	3b01      	subs	r3, #1
 c00a164:	6022      	str	r2, [r4, #0]
 c00a166:	6063      	str	r3, [r4, #4]
 c00a168:	9b45      	ldr	r3, [sp, #276]	; 0x114
 c00a16a:	3301      	adds	r3, #1
 c00a16c:	9345      	str	r3, [sp, #276]	; 0x114
 c00a16e:	e7d8      	b.n	c00a122 <__svfiscanf_r+0x66>
 c00a170:	9141      	str	r1, [sp, #260]	; 0x104
 c00a172:	220a      	movs	r2, #10
 c00a174:	9143      	str	r1, [sp, #268]	; 0x10c
 c00a176:	f89a 3001 	ldrb.w	r3, [sl, #1]
 c00a17a:	2b2a      	cmp	r3, #42	; 0x2a
 c00a17c:	bf02      	ittt	eq
 c00a17e:	2310      	moveq	r3, #16
 c00a180:	f10a 0502 	addeq.w	r5, sl, #2
 c00a184:	9341      	streq	r3, [sp, #260]	; 0x104
 c00a186:	46aa      	mov	sl, r5
 c00a188:	f81a 1b01 	ldrb.w	r1, [sl], #1
 c00a18c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 c00a190:	2b09      	cmp	r3, #9
 c00a192:	d91e      	bls.n	c00a1d2 <__svfiscanf_r+0x116>
 c00a194:	2203      	movs	r2, #3
 c00a196:	487d      	ldr	r0, [pc, #500]	; (c00a38c <__svfiscanf_r+0x2d0>)
 c00a198:	f7fe ff02 	bl	c008fa0 <memchr>
 c00a19c:	b140      	cbz	r0, c00a1b0 <__svfiscanf_r+0xf4>
 c00a19e:	2301      	movs	r3, #1
 c00a1a0:	eba0 0009 	sub.w	r0, r0, r9
 c00a1a4:	4655      	mov	r5, sl
 c00a1a6:	fa03 f000 	lsl.w	r0, r3, r0
 c00a1aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 c00a1ac:	4318      	orrs	r0, r3
 c00a1ae:	9041      	str	r0, [sp, #260]	; 0x104
 c00a1b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 c00a1b4:	2b78      	cmp	r3, #120	; 0x78
 c00a1b6:	d807      	bhi.n	c00a1c8 <__svfiscanf_r+0x10c>
 c00a1b8:	2b57      	cmp	r3, #87	; 0x57
 c00a1ba:	d811      	bhi.n	c00a1e0 <__svfiscanf_r+0x124>
 c00a1bc:	2b25      	cmp	r3, #37	; 0x25
 c00a1be:	d0c4      	beq.n	c00a14a <__svfiscanf_r+0x8e>
 c00a1c0:	d858      	bhi.n	c00a274 <__svfiscanf_r+0x1b8>
 c00a1c2:	2b00      	cmp	r3, #0
 c00a1c4:	f000 80c9 	beq.w	c00a35a <__svfiscanf_r+0x29e>
 c00a1c8:	2303      	movs	r3, #3
 c00a1ca:	9347      	str	r3, [sp, #284]	; 0x11c
 c00a1cc:	230a      	movs	r3, #10
 c00a1ce:	9342      	str	r3, [sp, #264]	; 0x108
 c00a1d0:	e07c      	b.n	c00a2cc <__svfiscanf_r+0x210>
 c00a1d2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 c00a1d4:	4655      	mov	r5, sl
 c00a1d6:	fb02 1103 	mla	r1, r2, r3, r1
 c00a1da:	3930      	subs	r1, #48	; 0x30
 c00a1dc:	9143      	str	r1, [sp, #268]	; 0x10c
 c00a1de:	e7d2      	b.n	c00a186 <__svfiscanf_r+0xca>
 c00a1e0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 c00a1e4:	2a20      	cmp	r2, #32
 c00a1e6:	d8ef      	bhi.n	c00a1c8 <__svfiscanf_r+0x10c>
 c00a1e8:	a101      	add	r1, pc, #4	; (adr r1, c00a1f0 <__svfiscanf_r+0x134>)
 c00a1ea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 c00a1ee:	bf00      	nop
 c00a1f0:	0c00a2b7 	.word	0x0c00a2b7
 c00a1f4:	0c00a1c9 	.word	0x0c00a1c9
 c00a1f8:	0c00a1c9 	.word	0x0c00a1c9
 c00a1fc:	0c00a315 	.word	0x0c00a315
 c00a200:	0c00a1c9 	.word	0x0c00a1c9
 c00a204:	0c00a1c9 	.word	0x0c00a1c9
 c00a208:	0c00a1c9 	.word	0x0c00a1c9
 c00a20c:	0c00a1c9 	.word	0x0c00a1c9
 c00a210:	0c00a1c9 	.word	0x0c00a1c9
 c00a214:	0c00a1c9 	.word	0x0c00a1c9
 c00a218:	0c00a1c9 	.word	0x0c00a1c9
 c00a21c:	0c00a32b 	.word	0x0c00a32b
 c00a220:	0c00a301 	.word	0x0c00a301
 c00a224:	0c00a27b 	.word	0x0c00a27b
 c00a228:	0c00a27b 	.word	0x0c00a27b
 c00a22c:	0c00a27b 	.word	0x0c00a27b
 c00a230:	0c00a1c9 	.word	0x0c00a1c9
 c00a234:	0c00a305 	.word	0x0c00a305
 c00a238:	0c00a1c9 	.word	0x0c00a1c9
 c00a23c:	0c00a1c9 	.word	0x0c00a1c9
 c00a240:	0c00a1c9 	.word	0x0c00a1c9
 c00a244:	0c00a1c9 	.word	0x0c00a1c9
 c00a248:	0c00a33b 	.word	0x0c00a33b
 c00a24c:	0c00a30d 	.word	0x0c00a30d
 c00a250:	0c00a2af 	.word	0x0c00a2af
 c00a254:	0c00a1c9 	.word	0x0c00a1c9
 c00a258:	0c00a1c9 	.word	0x0c00a1c9
 c00a25c:	0c00a337 	.word	0x0c00a337
 c00a260:	0c00a1c9 	.word	0x0c00a1c9
 c00a264:	0c00a301 	.word	0x0c00a301
 c00a268:	0c00a1c9 	.word	0x0c00a1c9
 c00a26c:	0c00a1c9 	.word	0x0c00a1c9
 c00a270:	0c00a2b7 	.word	0x0c00a2b7
 c00a274:	3b45      	subs	r3, #69	; 0x45
 c00a276:	2b02      	cmp	r3, #2
 c00a278:	d8a6      	bhi.n	c00a1c8 <__svfiscanf_r+0x10c>
 c00a27a:	2305      	movs	r3, #5
 c00a27c:	e025      	b.n	c00a2ca <__svfiscanf_r+0x20e>
 c00a27e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 c00a280:	4621      	mov	r1, r4
 c00a282:	4630      	mov	r0, r6
 c00a284:	4798      	blx	r3
 c00a286:	2800      	cmp	r0, #0
 c00a288:	f43f af64 	beq.w	c00a154 <__svfiscanf_r+0x98>
 c00a28c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c00a28e:	07da      	lsls	r2, r3, #31
 c00a290:	f140 80a4 	bpl.w	c00a3dc <__svfiscanf_r+0x320>
 c00a294:	9844      	ldr	r0, [sp, #272]	; 0x110
 c00a296:	2800      	cmp	r0, #0
 c00a298:	d068      	beq.n	c00a36c <__svfiscanf_r+0x2b0>
 c00a29a:	89a3      	ldrh	r3, [r4, #12]
 c00a29c:	f013 0f40 	tst.w	r3, #64	; 0x40
 c00a2a0:	bf18      	it	ne
 c00a2a2:	f04f 30ff 	movne.w	r0, #4294967295
 c00a2a6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 c00a2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c00a2ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 c00a2b0:	f042 0220 	orr.w	r2, r2, #32
 c00a2b4:	9241      	str	r2, [sp, #260]	; 0x104
 c00a2b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 c00a2b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 c00a2bc:	9241      	str	r2, [sp, #260]	; 0x104
 c00a2be:	2210      	movs	r2, #16
 c00a2c0:	2b6f      	cmp	r3, #111	; 0x6f
 c00a2c2:	9242      	str	r2, [sp, #264]	; 0x108
 c00a2c4:	bf34      	ite	cc
 c00a2c6:	2303      	movcc	r3, #3
 c00a2c8:	2304      	movcs	r3, #4
 c00a2ca:	9347      	str	r3, [sp, #284]	; 0x11c
 c00a2cc:	6863      	ldr	r3, [r4, #4]
 c00a2ce:	2b00      	cmp	r3, #0
 c00a2d0:	dd4f      	ble.n	c00a372 <__svfiscanf_r+0x2b6>
 c00a2d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 c00a2d4:	065b      	lsls	r3, r3, #25
 c00a2d6:	d404      	bmi.n	c00a2e2 <__svfiscanf_r+0x226>
 c00a2d8:	6823      	ldr	r3, [r4, #0]
 c00a2da:	781a      	ldrb	r2, [r3, #0]
 c00a2dc:	5cba      	ldrb	r2, [r7, r2]
 c00a2de:	0710      	lsls	r0, r2, #28
 c00a2e0:	d456      	bmi.n	c00a390 <__svfiscanf_r+0x2d4>
 c00a2e2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 c00a2e4:	2b02      	cmp	r3, #2
 c00a2e6:	dc65      	bgt.n	c00a3b4 <__svfiscanf_r+0x2f8>
 c00a2e8:	466b      	mov	r3, sp
 c00a2ea:	4622      	mov	r2, r4
 c00a2ec:	a941      	add	r1, sp, #260	; 0x104
 c00a2ee:	4630      	mov	r0, r6
 c00a2f0:	f000 f8b2 	bl	c00a458 <_scanf_chars>
 c00a2f4:	2801      	cmp	r0, #1
 c00a2f6:	d079      	beq.n	c00a3ec <__svfiscanf_r+0x330>
 c00a2f8:	2802      	cmp	r0, #2
 c00a2fa:	f47f af12 	bne.w	c00a122 <__svfiscanf_r+0x66>
 c00a2fe:	e7c5      	b.n	c00a28c <__svfiscanf_r+0x1d0>
 c00a300:	220a      	movs	r2, #10
 c00a302:	e7dd      	b.n	c00a2c0 <__svfiscanf_r+0x204>
 c00a304:	2300      	movs	r3, #0
 c00a306:	9342      	str	r3, [sp, #264]	; 0x108
 c00a308:	2303      	movs	r3, #3
 c00a30a:	e7de      	b.n	c00a2ca <__svfiscanf_r+0x20e>
 c00a30c:	2308      	movs	r3, #8
 c00a30e:	9342      	str	r3, [sp, #264]	; 0x108
 c00a310:	2304      	movs	r3, #4
 c00a312:	e7da      	b.n	c00a2ca <__svfiscanf_r+0x20e>
 c00a314:	4629      	mov	r1, r5
 c00a316:	4640      	mov	r0, r8
 c00a318:	f000 fa9e 	bl	c00a858 <__sccl>
 c00a31c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 c00a31e:	4605      	mov	r5, r0
 c00a320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c00a324:	9341      	str	r3, [sp, #260]	; 0x104
 c00a326:	2301      	movs	r3, #1
 c00a328:	e7cf      	b.n	c00a2ca <__svfiscanf_r+0x20e>
 c00a32a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 c00a32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c00a330:	9341      	str	r3, [sp, #260]	; 0x104
 c00a332:	2300      	movs	r3, #0
 c00a334:	e7c9      	b.n	c00a2ca <__svfiscanf_r+0x20e>
 c00a336:	2302      	movs	r3, #2
 c00a338:	e7c7      	b.n	c00a2ca <__svfiscanf_r+0x20e>
 c00a33a:	9841      	ldr	r0, [sp, #260]	; 0x104
 c00a33c:	06c3      	lsls	r3, r0, #27
 c00a33e:	f53f aef0 	bmi.w	c00a122 <__svfiscanf_r+0x66>
 c00a342:	9b00      	ldr	r3, [sp, #0]
 c00a344:	f010 0f01 	tst.w	r0, #1
 c00a348:	9a45      	ldr	r2, [sp, #276]	; 0x114
 c00a34a:	f103 0104 	add.w	r1, r3, #4
 c00a34e:	9100      	str	r1, [sp, #0]
 c00a350:	681b      	ldr	r3, [r3, #0]
 c00a352:	bf14      	ite	ne
 c00a354:	801a      	strhne	r2, [r3, #0]
 c00a356:	601a      	streq	r2, [r3, #0]
 c00a358:	e6e3      	b.n	c00a122 <__svfiscanf_r+0x66>
 c00a35a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c00a35c:	07d8      	lsls	r0, r3, #31
 c00a35e:	d405      	bmi.n	c00a36c <__svfiscanf_r+0x2b0>
 c00a360:	89a3      	ldrh	r3, [r4, #12]
 c00a362:	0599      	lsls	r1, r3, #22
 c00a364:	d402      	bmi.n	c00a36c <__svfiscanf_r+0x2b0>
 c00a366:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00a368:	f7fe fd9a 	bl	c008ea0 <__retarget_lock_release_recursive>
 c00a36c:	f04f 30ff 	mov.w	r0, #4294967295
 c00a370:	e799      	b.n	c00a2a6 <__svfiscanf_r+0x1ea>
 c00a372:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 c00a374:	4621      	mov	r1, r4
 c00a376:	4630      	mov	r0, r6
 c00a378:	4798      	blx	r3
 c00a37a:	2800      	cmp	r0, #0
 c00a37c:	d0a9      	beq.n	c00a2d2 <__svfiscanf_r+0x216>
 c00a37e:	e785      	b.n	c00a28c <__svfiscanf_r+0x1d0>
 c00a380:	0c00b001 	.word	0x0c00b001
 c00a384:	0c00aad1 	.word	0x0c00aad1
 c00a388:	0c00a711 	.word	0x0c00a711
 c00a38c:	0c00b3d2 	.word	0x0c00b3d2
 c00a390:	9a45      	ldr	r2, [sp, #276]	; 0x114
 c00a392:	3201      	adds	r2, #1
 c00a394:	9245      	str	r2, [sp, #276]	; 0x114
 c00a396:	6862      	ldr	r2, [r4, #4]
 c00a398:	3a01      	subs	r2, #1
 c00a39a:	2a00      	cmp	r2, #0
 c00a39c:	6062      	str	r2, [r4, #4]
 c00a39e:	dd02      	ble.n	c00a3a6 <__svfiscanf_r+0x2ea>
 c00a3a0:	3301      	adds	r3, #1
 c00a3a2:	6023      	str	r3, [r4, #0]
 c00a3a4:	e798      	b.n	c00a2d8 <__svfiscanf_r+0x21c>
 c00a3a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 c00a3a8:	4621      	mov	r1, r4
 c00a3aa:	4630      	mov	r0, r6
 c00a3ac:	4798      	blx	r3
 c00a3ae:	2800      	cmp	r0, #0
 c00a3b0:	d092      	beq.n	c00a2d8 <__svfiscanf_r+0x21c>
 c00a3b2:	e76b      	b.n	c00a28c <__svfiscanf_r+0x1d0>
 c00a3b4:	2b04      	cmp	r3, #4
 c00a3b6:	dc06      	bgt.n	c00a3c6 <__svfiscanf_r+0x30a>
 c00a3b8:	466b      	mov	r3, sp
 c00a3ba:	4622      	mov	r2, r4
 c00a3bc:	a941      	add	r1, sp, #260	; 0x104
 c00a3be:	4630      	mov	r0, r6
 c00a3c0:	f000 f8a4 	bl	c00a50c <_scanf_i>
 c00a3c4:	e796      	b.n	c00a2f4 <__svfiscanf_r+0x238>
 c00a3c6:	4b0f      	ldr	r3, [pc, #60]	; (c00a404 <__svfiscanf_r+0x348>)
 c00a3c8:	2b00      	cmp	r3, #0
 c00a3ca:	f43f aeaa 	beq.w	c00a122 <__svfiscanf_r+0x66>
 c00a3ce:	466b      	mov	r3, sp
 c00a3d0:	4622      	mov	r2, r4
 c00a3d2:	a941      	add	r1, sp, #260	; 0x104
 c00a3d4:	4630      	mov	r0, r6
 c00a3d6:	f7fb fe3d 	bl	c006054 <_scanf_float>
 c00a3da:	e78b      	b.n	c00a2f4 <__svfiscanf_r+0x238>
 c00a3dc:	89a3      	ldrh	r3, [r4, #12]
 c00a3de:	0599      	lsls	r1, r3, #22
 c00a3e0:	f53f af58 	bmi.w	c00a294 <__svfiscanf_r+0x1d8>
 c00a3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00a3e6:	f7fe fd5b 	bl	c008ea0 <__retarget_lock_release_recursive>
 c00a3ea:	e753      	b.n	c00a294 <__svfiscanf_r+0x1d8>
 c00a3ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c00a3ee:	07da      	lsls	r2, r3, #31
 c00a3f0:	d405      	bmi.n	c00a3fe <__svfiscanf_r+0x342>
 c00a3f2:	89a3      	ldrh	r3, [r4, #12]
 c00a3f4:	059b      	lsls	r3, r3, #22
 c00a3f6:	d402      	bmi.n	c00a3fe <__svfiscanf_r+0x342>
 c00a3f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00a3fa:	f7fe fd51 	bl	c008ea0 <__retarget_lock_release_recursive>
 c00a3fe:	9844      	ldr	r0, [sp, #272]	; 0x110
 c00a400:	e751      	b.n	c00a2a6 <__svfiscanf_r+0x1ea>
 c00a402:	bf00      	nop
 c00a404:	0c006055 	.word	0x0c006055

0c00a408 <_vfiscanf_r>:
 c00a408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c00a40a:	460c      	mov	r4, r1
 c00a40c:	4605      	mov	r5, r0
 c00a40e:	b138      	cbz	r0, c00a420 <_vfiscanf_r+0x18>
 c00a410:	6981      	ldr	r1, [r0, #24]
 c00a412:	b929      	cbnz	r1, c00a420 <_vfiscanf_r+0x18>
 c00a414:	e9cd 2300 	strd	r2, r3, [sp]
 c00a418:	f7fe f914 	bl	c008644 <__sinit>
 c00a41c:	e9dd 2300 	ldrd	r2, r3, [sp]
 c00a420:	490a      	ldr	r1, [pc, #40]	; (c00a44c <_vfiscanf_r+0x44>)
 c00a422:	428c      	cmp	r4, r1
 c00a424:	d107      	bne.n	c00a436 <_vfiscanf_r+0x2e>
 c00a426:	686c      	ldr	r4, [r5, #4]
 c00a428:	4621      	mov	r1, r4
 c00a42a:	4628      	mov	r0, r5
 c00a42c:	b003      	add	sp, #12
 c00a42e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c00a432:	f7ff be43 	b.w	c00a0bc <__svfiscanf_r>
 c00a436:	4906      	ldr	r1, [pc, #24]	; (c00a450 <_vfiscanf_r+0x48>)
 c00a438:	428c      	cmp	r4, r1
 c00a43a:	d101      	bne.n	c00a440 <_vfiscanf_r+0x38>
 c00a43c:	68ac      	ldr	r4, [r5, #8]
 c00a43e:	e7f3      	b.n	c00a428 <_vfiscanf_r+0x20>
 c00a440:	4904      	ldr	r1, [pc, #16]	; (c00a454 <_vfiscanf_r+0x4c>)
 c00a442:	428c      	cmp	r4, r1
 c00a444:	bf08      	it	eq
 c00a446:	68ec      	ldreq	r4, [r5, #12]
 c00a448:	e7ee      	b.n	c00a428 <_vfiscanf_r+0x20>
 c00a44a:	bf00      	nop
 c00a44c:	0c00b1b4 	.word	0x0c00b1b4
 c00a450:	0c00b1d4 	.word	0x0c00b1d4
 c00a454:	0c00b194 	.word	0x0c00b194

0c00a458 <_scanf_chars>:
 c00a458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c00a45c:	4615      	mov	r5, r2
 c00a45e:	688a      	ldr	r2, [r1, #8]
 c00a460:	4680      	mov	r8, r0
 c00a462:	460c      	mov	r4, r1
 c00a464:	b932      	cbnz	r2, c00a474 <_scanf_chars+0x1c>
 c00a466:	698a      	ldr	r2, [r1, #24]
 c00a468:	2a00      	cmp	r2, #0
 c00a46a:	bf0c      	ite	eq
 c00a46c:	2201      	moveq	r2, #1
 c00a46e:	f04f 32ff 	movne.w	r2, #4294967295
 c00a472:	608a      	str	r2, [r1, #8]
 c00a474:	6822      	ldr	r2, [r4, #0]
 c00a476:	2700      	movs	r7, #0
 c00a478:	f8df 908c 	ldr.w	r9, [pc, #140]	; c00a508 <_scanf_chars+0xb0>
 c00a47c:	06d1      	lsls	r1, r2, #27
 c00a47e:	bf5f      	itttt	pl
 c00a480:	681a      	ldrpl	r2, [r3, #0]
 c00a482:	1d11      	addpl	r1, r2, #4
 c00a484:	6019      	strpl	r1, [r3, #0]
 c00a486:	6816      	ldrpl	r6, [r2, #0]
 c00a488:	69a0      	ldr	r0, [r4, #24]
 c00a48a:	b188      	cbz	r0, c00a4b0 <_scanf_chars+0x58>
 c00a48c:	2801      	cmp	r0, #1
 c00a48e:	d107      	bne.n	c00a4a0 <_scanf_chars+0x48>
 c00a490:	682a      	ldr	r2, [r5, #0]
 c00a492:	7811      	ldrb	r1, [r2, #0]
 c00a494:	6962      	ldr	r2, [r4, #20]
 c00a496:	5c52      	ldrb	r2, [r2, r1]
 c00a498:	b952      	cbnz	r2, c00a4b0 <_scanf_chars+0x58>
 c00a49a:	2f00      	cmp	r7, #0
 c00a49c:	d031      	beq.n	c00a502 <_scanf_chars+0xaa>
 c00a49e:	e022      	b.n	c00a4e6 <_scanf_chars+0x8e>
 c00a4a0:	2802      	cmp	r0, #2
 c00a4a2:	d120      	bne.n	c00a4e6 <_scanf_chars+0x8e>
 c00a4a4:	682b      	ldr	r3, [r5, #0]
 c00a4a6:	781b      	ldrb	r3, [r3, #0]
 c00a4a8:	f813 3009 	ldrb.w	r3, [r3, r9]
 c00a4ac:	071b      	lsls	r3, r3, #28
 c00a4ae:	d41a      	bmi.n	c00a4e6 <_scanf_chars+0x8e>
 c00a4b0:	6823      	ldr	r3, [r4, #0]
 c00a4b2:	3701      	adds	r7, #1
 c00a4b4:	06da      	lsls	r2, r3, #27
 c00a4b6:	bf5e      	ittt	pl
 c00a4b8:	682b      	ldrpl	r3, [r5, #0]
 c00a4ba:	781b      	ldrbpl	r3, [r3, #0]
 c00a4bc:	f806 3b01 	strbpl.w	r3, [r6], #1
 c00a4c0:	682a      	ldr	r2, [r5, #0]
 c00a4c2:	686b      	ldr	r3, [r5, #4]
 c00a4c4:	3201      	adds	r2, #1
 c00a4c6:	3b01      	subs	r3, #1
 c00a4c8:	602a      	str	r2, [r5, #0]
 c00a4ca:	68a2      	ldr	r2, [r4, #8]
 c00a4cc:	606b      	str	r3, [r5, #4]
 c00a4ce:	3a01      	subs	r2, #1
 c00a4d0:	60a2      	str	r2, [r4, #8]
 c00a4d2:	b142      	cbz	r2, c00a4e6 <_scanf_chars+0x8e>
 c00a4d4:	2b00      	cmp	r3, #0
 c00a4d6:	dcd7      	bgt.n	c00a488 <_scanf_chars+0x30>
 c00a4d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 c00a4dc:	4629      	mov	r1, r5
 c00a4de:	4640      	mov	r0, r8
 c00a4e0:	4798      	blx	r3
 c00a4e2:	2800      	cmp	r0, #0
 c00a4e4:	d0d0      	beq.n	c00a488 <_scanf_chars+0x30>
 c00a4e6:	6823      	ldr	r3, [r4, #0]
 c00a4e8:	f013 0310 	ands.w	r3, r3, #16
 c00a4ec:	d105      	bne.n	c00a4fa <_scanf_chars+0xa2>
 c00a4ee:	68e2      	ldr	r2, [r4, #12]
 c00a4f0:	3201      	adds	r2, #1
 c00a4f2:	60e2      	str	r2, [r4, #12]
 c00a4f4:	69a2      	ldr	r2, [r4, #24]
 c00a4f6:	b102      	cbz	r2, c00a4fa <_scanf_chars+0xa2>
 c00a4f8:	7033      	strb	r3, [r6, #0]
 c00a4fa:	6923      	ldr	r3, [r4, #16]
 c00a4fc:	2000      	movs	r0, #0
 c00a4fe:	443b      	add	r3, r7
 c00a500:	6123      	str	r3, [r4, #16]
 c00a502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c00a506:	bf00      	nop
 c00a508:	0c00b001 	.word	0x0c00b001

0c00a50c <_scanf_i>:
 c00a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c00a510:	4698      	mov	r8, r3
 c00a512:	b087      	sub	sp, #28
 c00a514:	4b75      	ldr	r3, [pc, #468]	; (c00a6ec <_scanf_i+0x1e0>)
 c00a516:	460c      	mov	r4, r1
 c00a518:	4682      	mov	sl, r0
 c00a51a:	4616      	mov	r6, r2
 c00a51c:	4627      	mov	r7, r4
 c00a51e:	f04f 0b00 	mov.w	fp, #0
 c00a522:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 c00a526:	ab03      	add	r3, sp, #12
 c00a528:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 c00a52c:	4b70      	ldr	r3, [pc, #448]	; (c00a6f0 <_scanf_i+0x1e4>)
 c00a52e:	69a1      	ldr	r1, [r4, #24]
 c00a530:	4a70      	ldr	r2, [pc, #448]	; (c00a6f4 <_scanf_i+0x1e8>)
 c00a532:	2903      	cmp	r1, #3
 c00a534:	bf18      	it	ne
 c00a536:	461a      	movne	r2, r3
 c00a538:	68a3      	ldr	r3, [r4, #8]
 c00a53a:	9201      	str	r2, [sp, #4]
 c00a53c:	1e5a      	subs	r2, r3, #1
 c00a53e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 c00a542:	bf89      	itett	hi
 c00a544:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 c00a548:	f04f 0900 	movls.w	r9, #0
 c00a54c:	eb03 0905 	addhi.w	r9, r3, r5
 c00a550:	f240 135d 	movwhi	r3, #349	; 0x15d
 c00a554:	bf88      	it	hi
 c00a556:	60a3      	strhi	r3, [r4, #8]
 c00a558:	f857 3b1c 	ldr.w	r3, [r7], #28
 c00a55c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 c00a560:	463d      	mov	r5, r7
 c00a562:	6023      	str	r3, [r4, #0]
 c00a564:	6831      	ldr	r1, [r6, #0]
 c00a566:	ab03      	add	r3, sp, #12
 c00a568:	2202      	movs	r2, #2
 c00a56a:	7809      	ldrb	r1, [r1, #0]
 c00a56c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 c00a570:	f7fe fd16 	bl	c008fa0 <memchr>
 c00a574:	b328      	cbz	r0, c00a5c2 <_scanf_i+0xb6>
 c00a576:	f1bb 0f01 	cmp.w	fp, #1
 c00a57a:	d159      	bne.n	c00a630 <_scanf_i+0x124>
 c00a57c:	6862      	ldr	r2, [r4, #4]
 c00a57e:	b92a      	cbnz	r2, c00a58c <_scanf_i+0x80>
 c00a580:	6822      	ldr	r2, [r4, #0]
 c00a582:	2308      	movs	r3, #8
 c00a584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 c00a588:	6063      	str	r3, [r4, #4]
 c00a58a:	6022      	str	r2, [r4, #0]
 c00a58c:	6822      	ldr	r2, [r4, #0]
 c00a58e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 c00a592:	6022      	str	r2, [r4, #0]
 c00a594:	68a2      	ldr	r2, [r4, #8]
 c00a596:	1e51      	subs	r1, r2, #1
 c00a598:	60a1      	str	r1, [r4, #8]
 c00a59a:	b192      	cbz	r2, c00a5c2 <_scanf_i+0xb6>
 c00a59c:	6832      	ldr	r2, [r6, #0]
 c00a59e:	1c51      	adds	r1, r2, #1
 c00a5a0:	6031      	str	r1, [r6, #0]
 c00a5a2:	7812      	ldrb	r2, [r2, #0]
 c00a5a4:	f805 2b01 	strb.w	r2, [r5], #1
 c00a5a8:	6872      	ldr	r2, [r6, #4]
 c00a5aa:	3a01      	subs	r2, #1
 c00a5ac:	2a00      	cmp	r2, #0
 c00a5ae:	6072      	str	r2, [r6, #4]
 c00a5b0:	dc07      	bgt.n	c00a5c2 <_scanf_i+0xb6>
 c00a5b2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 c00a5b6:	4631      	mov	r1, r6
 c00a5b8:	4650      	mov	r0, sl
 c00a5ba:	4790      	blx	r2
 c00a5bc:	2800      	cmp	r0, #0
 c00a5be:	f040 8085 	bne.w	c00a6cc <_scanf_i+0x1c0>
 c00a5c2:	f10b 0b01 	add.w	fp, fp, #1
 c00a5c6:	f1bb 0f03 	cmp.w	fp, #3
 c00a5ca:	d1cb      	bne.n	c00a564 <_scanf_i+0x58>
 c00a5cc:	6863      	ldr	r3, [r4, #4]
 c00a5ce:	b90b      	cbnz	r3, c00a5d4 <_scanf_i+0xc8>
 c00a5d0:	230a      	movs	r3, #10
 c00a5d2:	6063      	str	r3, [r4, #4]
 c00a5d4:	6863      	ldr	r3, [r4, #4]
 c00a5d6:	f04f 0b00 	mov.w	fp, #0
 c00a5da:	4947      	ldr	r1, [pc, #284]	; (c00a6f8 <_scanf_i+0x1ec>)
 c00a5dc:	6960      	ldr	r0, [r4, #20]
 c00a5de:	1ac9      	subs	r1, r1, r3
 c00a5e0:	f000 f93a 	bl	c00a858 <__sccl>
 c00a5e4:	68a3      	ldr	r3, [r4, #8]
 c00a5e6:	6822      	ldr	r2, [r4, #0]
 c00a5e8:	2b00      	cmp	r3, #0
 c00a5ea:	d03d      	beq.n	c00a668 <_scanf_i+0x15c>
 c00a5ec:	6831      	ldr	r1, [r6, #0]
 c00a5ee:	6960      	ldr	r0, [r4, #20]
 c00a5f0:	f891 c000 	ldrb.w	ip, [r1]
 c00a5f4:	f810 000c 	ldrb.w	r0, [r0, ip]
 c00a5f8:	2800      	cmp	r0, #0
 c00a5fa:	d035      	beq.n	c00a668 <_scanf_i+0x15c>
 c00a5fc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 c00a600:	d124      	bne.n	c00a64c <_scanf_i+0x140>
 c00a602:	0510      	lsls	r0, r2, #20
 c00a604:	d522      	bpl.n	c00a64c <_scanf_i+0x140>
 c00a606:	f10b 0b01 	add.w	fp, fp, #1
 c00a60a:	f1b9 0f00 	cmp.w	r9, #0
 c00a60e:	d003      	beq.n	c00a618 <_scanf_i+0x10c>
 c00a610:	3301      	adds	r3, #1
 c00a612:	f109 39ff 	add.w	r9, r9, #4294967295
 c00a616:	60a3      	str	r3, [r4, #8]
 c00a618:	6873      	ldr	r3, [r6, #4]
 c00a61a:	3b01      	subs	r3, #1
 c00a61c:	2b00      	cmp	r3, #0
 c00a61e:	6073      	str	r3, [r6, #4]
 c00a620:	dd1b      	ble.n	c00a65a <_scanf_i+0x14e>
 c00a622:	6833      	ldr	r3, [r6, #0]
 c00a624:	3301      	adds	r3, #1
 c00a626:	6033      	str	r3, [r6, #0]
 c00a628:	68a3      	ldr	r3, [r4, #8]
 c00a62a:	3b01      	subs	r3, #1
 c00a62c:	60a3      	str	r3, [r4, #8]
 c00a62e:	e7d9      	b.n	c00a5e4 <_scanf_i+0xd8>
 c00a630:	f1bb 0f02 	cmp.w	fp, #2
 c00a634:	d1ae      	bne.n	c00a594 <_scanf_i+0x88>
 c00a636:	6822      	ldr	r2, [r4, #0]
 c00a638:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 c00a63c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 c00a640:	d1bf      	bne.n	c00a5c2 <_scanf_i+0xb6>
 c00a642:	2310      	movs	r3, #16
 c00a644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c00a648:	6063      	str	r3, [r4, #4]
 c00a64a:	e7a2      	b.n	c00a592 <_scanf_i+0x86>
 c00a64c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 c00a650:	6022      	str	r2, [r4, #0]
 c00a652:	780b      	ldrb	r3, [r1, #0]
 c00a654:	f805 3b01 	strb.w	r3, [r5], #1
 c00a658:	e7de      	b.n	c00a618 <_scanf_i+0x10c>
 c00a65a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 c00a65e:	4631      	mov	r1, r6
 c00a660:	4650      	mov	r0, sl
 c00a662:	4798      	blx	r3
 c00a664:	2800      	cmp	r0, #0
 c00a666:	d0df      	beq.n	c00a628 <_scanf_i+0x11c>
 c00a668:	6823      	ldr	r3, [r4, #0]
 c00a66a:	05db      	lsls	r3, r3, #23
 c00a66c:	d50d      	bpl.n	c00a68a <_scanf_i+0x17e>
 c00a66e:	42bd      	cmp	r5, r7
 c00a670:	d909      	bls.n	c00a686 <_scanf_i+0x17a>
 c00a672:	f105 39ff 	add.w	r9, r5, #4294967295
 c00a676:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 c00a67a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 c00a67e:	4632      	mov	r2, r6
 c00a680:	464d      	mov	r5, r9
 c00a682:	4650      	mov	r0, sl
 c00a684:	4798      	blx	r3
 c00a686:	42bd      	cmp	r5, r7
 c00a688:	d02d      	beq.n	c00a6e6 <_scanf_i+0x1da>
 c00a68a:	6822      	ldr	r2, [r4, #0]
 c00a68c:	f012 0210 	ands.w	r2, r2, #16
 c00a690:	d113      	bne.n	c00a6ba <_scanf_i+0x1ae>
 c00a692:	4639      	mov	r1, r7
 c00a694:	702a      	strb	r2, [r5, #0]
 c00a696:	4650      	mov	r0, sl
 c00a698:	6863      	ldr	r3, [r4, #4]
 c00a69a:	9e01      	ldr	r6, [sp, #4]
 c00a69c:	47b0      	blx	r6
 c00a69e:	6821      	ldr	r1, [r4, #0]
 c00a6a0:	f8d8 3000 	ldr.w	r3, [r8]
 c00a6a4:	f011 0f20 	tst.w	r1, #32
 c00a6a8:	d013      	beq.n	c00a6d2 <_scanf_i+0x1c6>
 c00a6aa:	1d1a      	adds	r2, r3, #4
 c00a6ac:	f8c8 2000 	str.w	r2, [r8]
 c00a6b0:	681b      	ldr	r3, [r3, #0]
 c00a6b2:	6018      	str	r0, [r3, #0]
 c00a6b4:	68e3      	ldr	r3, [r4, #12]
 c00a6b6:	3301      	adds	r3, #1
 c00a6b8:	60e3      	str	r3, [r4, #12]
 c00a6ba:	1bed      	subs	r5, r5, r7
 c00a6bc:	2000      	movs	r0, #0
 c00a6be:	44ab      	add	fp, r5
 c00a6c0:	6925      	ldr	r5, [r4, #16]
 c00a6c2:	445d      	add	r5, fp
 c00a6c4:	6125      	str	r5, [r4, #16]
 c00a6c6:	b007      	add	sp, #28
 c00a6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c00a6cc:	f04f 0b00 	mov.w	fp, #0
 c00a6d0:	e7ca      	b.n	c00a668 <_scanf_i+0x15c>
 c00a6d2:	1d1a      	adds	r2, r3, #4
 c00a6d4:	f011 0f01 	tst.w	r1, #1
 c00a6d8:	f8c8 2000 	str.w	r2, [r8]
 c00a6dc:	681b      	ldr	r3, [r3, #0]
 c00a6de:	bf14      	ite	ne
 c00a6e0:	8018      	strhne	r0, [r3, #0]
 c00a6e2:	6018      	streq	r0, [r3, #0]
 c00a6e4:	e7e6      	b.n	c00a6b4 <_scanf_i+0x1a8>
 c00a6e6:	2001      	movs	r0, #1
 c00a6e8:	e7ed      	b.n	c00a6c6 <_scanf_i+0x1ba>
 c00a6ea:	bf00      	nop
 c00a6ec:	0c00aee8 	.word	0x0c00aee8
 c00a6f0:	0c00aa5d 	.word	0x0c00aa5d
 c00a6f4:	0c00756d 	.word	0x0c00756d
 c00a6f8:	0c00b3f6 	.word	0x0c00b3f6

0c00a6fc <lflush>:
 c00a6fc:	8983      	ldrh	r3, [r0, #12]
 c00a6fe:	f003 0309 	and.w	r3, r3, #9
 c00a702:	2b09      	cmp	r3, #9
 c00a704:	d101      	bne.n	c00a70a <lflush+0xe>
 c00a706:	f7fd bf33 	b.w	c008570 <fflush>
 c00a70a:	2000      	movs	r0, #0
 c00a70c:	4770      	bx	lr
	...

0c00a710 <__srefill_r>:
 c00a710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00a712:	460c      	mov	r4, r1
 c00a714:	4605      	mov	r5, r0
 c00a716:	b118      	cbz	r0, c00a720 <__srefill_r+0x10>
 c00a718:	6983      	ldr	r3, [r0, #24]
 c00a71a:	b90b      	cbnz	r3, c00a720 <__srefill_r+0x10>
 c00a71c:	f7fd ff92 	bl	c008644 <__sinit>
 c00a720:	4b3b      	ldr	r3, [pc, #236]	; (c00a810 <__srefill_r+0x100>)
 c00a722:	429c      	cmp	r4, r3
 c00a724:	d10a      	bne.n	c00a73c <__srefill_r+0x2c>
 c00a726:	686c      	ldr	r4, [r5, #4]
 c00a728:	2300      	movs	r3, #0
 c00a72a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c00a72e:	6063      	str	r3, [r4, #4]
 c00a730:	89a3      	ldrh	r3, [r4, #12]
 c00a732:	069e      	lsls	r6, r3, #26
 c00a734:	d50c      	bpl.n	c00a750 <__srefill_r+0x40>
 c00a736:	f04f 30ff 	mov.w	r0, #4294967295
 c00a73a:	e066      	b.n	c00a80a <__srefill_r+0xfa>
 c00a73c:	4b35      	ldr	r3, [pc, #212]	; (c00a814 <__srefill_r+0x104>)
 c00a73e:	429c      	cmp	r4, r3
 c00a740:	d101      	bne.n	c00a746 <__srefill_r+0x36>
 c00a742:	68ac      	ldr	r4, [r5, #8]
 c00a744:	e7f0      	b.n	c00a728 <__srefill_r+0x18>
 c00a746:	4b34      	ldr	r3, [pc, #208]	; (c00a818 <__srefill_r+0x108>)
 c00a748:	429c      	cmp	r4, r3
 c00a74a:	bf08      	it	eq
 c00a74c:	68ec      	ldreq	r4, [r5, #12]
 c00a74e:	e7eb      	b.n	c00a728 <__srefill_r+0x18>
 c00a750:	0758      	lsls	r0, r3, #29
 c00a752:	d448      	bmi.n	c00a7e6 <__srefill_r+0xd6>
 c00a754:	06d9      	lsls	r1, r3, #27
 c00a756:	d405      	bmi.n	c00a764 <__srefill_r+0x54>
 c00a758:	2309      	movs	r3, #9
 c00a75a:	602b      	str	r3, [r5, #0]
 c00a75c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 c00a760:	81a3      	strh	r3, [r4, #12]
 c00a762:	e7e8      	b.n	c00a736 <__srefill_r+0x26>
 c00a764:	071a      	lsls	r2, r3, #28
 c00a766:	d50b      	bpl.n	c00a780 <__srefill_r+0x70>
 c00a768:	4621      	mov	r1, r4
 c00a76a:	4628      	mov	r0, r5
 c00a76c:	f7fd fec4 	bl	c0084f8 <_fflush_r>
 c00a770:	2800      	cmp	r0, #0
 c00a772:	d1e0      	bne.n	c00a736 <__srefill_r+0x26>
 c00a774:	89a3      	ldrh	r3, [r4, #12]
 c00a776:	60a0      	str	r0, [r4, #8]
 c00a778:	f023 0308 	bic.w	r3, r3, #8
 c00a77c:	61a0      	str	r0, [r4, #24]
 c00a77e:	81a3      	strh	r3, [r4, #12]
 c00a780:	89a3      	ldrh	r3, [r4, #12]
 c00a782:	f043 0304 	orr.w	r3, r3, #4
 c00a786:	81a3      	strh	r3, [r4, #12]
 c00a788:	6923      	ldr	r3, [r4, #16]
 c00a78a:	b91b      	cbnz	r3, c00a794 <__srefill_r+0x84>
 c00a78c:	4621      	mov	r1, r4
 c00a78e:	4628      	mov	r0, r5
 c00a790:	f7fe fbac 	bl	c008eec <__smakebuf_r>
 c00a794:	89a6      	ldrh	r6, [r4, #12]
 c00a796:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 c00a79a:	07b3      	lsls	r3, r6, #30
 c00a79c:	d00f      	beq.n	c00a7be <__srefill_r+0xae>
 c00a79e:	2301      	movs	r3, #1
 c00a7a0:	f006 0609 	and.w	r6, r6, #9
 c00a7a4:	491d      	ldr	r1, [pc, #116]	; (c00a81c <__srefill_r+0x10c>)
 c00a7a6:	81a3      	strh	r3, [r4, #12]
 c00a7a8:	4b1d      	ldr	r3, [pc, #116]	; (c00a820 <__srefill_r+0x110>)
 c00a7aa:	6818      	ldr	r0, [r3, #0]
 c00a7ac:	f7fd ffc8 	bl	c008740 <_fwalk>
 c00a7b0:	2e09      	cmp	r6, #9
 c00a7b2:	81a7      	strh	r7, [r4, #12]
 c00a7b4:	d103      	bne.n	c00a7be <__srefill_r+0xae>
 c00a7b6:	4621      	mov	r1, r4
 c00a7b8:	4628      	mov	r0, r5
 c00a7ba:	f7fd fe19 	bl	c0083f0 <__sflush_r>
 c00a7be:	6922      	ldr	r2, [r4, #16]
 c00a7c0:	4628      	mov	r0, r5
 c00a7c2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 c00a7c4:	6963      	ldr	r3, [r4, #20]
 c00a7c6:	6a21      	ldr	r1, [r4, #32]
 c00a7c8:	6022      	str	r2, [r4, #0]
 c00a7ca:	47b0      	blx	r6
 c00a7cc:	2800      	cmp	r0, #0
 c00a7ce:	6060      	str	r0, [r4, #4]
 c00a7d0:	dc1c      	bgt.n	c00a80c <__srefill_r+0xfc>
 c00a7d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c00a7d6:	bf17      	itett	ne
 c00a7d8:	2200      	movne	r2, #0
 c00a7da:	f043 0320 	orreq.w	r3, r3, #32
 c00a7de:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 c00a7e2:	6062      	strne	r2, [r4, #4]
 c00a7e4:	e7bc      	b.n	c00a760 <__srefill_r+0x50>
 c00a7e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c00a7e8:	2900      	cmp	r1, #0
 c00a7ea:	d0cd      	beq.n	c00a788 <__srefill_r+0x78>
 c00a7ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c00a7f0:	4299      	cmp	r1, r3
 c00a7f2:	d002      	beq.n	c00a7fa <__srefill_r+0xea>
 c00a7f4:	4628      	mov	r0, r5
 c00a7f6:	f7ff f8cb 	bl	c009990 <_free_r>
 c00a7fa:	2000      	movs	r0, #0
 c00a7fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c00a7fe:	6360      	str	r0, [r4, #52]	; 0x34
 c00a800:	6063      	str	r3, [r4, #4]
 c00a802:	2b00      	cmp	r3, #0
 c00a804:	d0c0      	beq.n	c00a788 <__srefill_r+0x78>
 c00a806:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 c00a808:	6023      	str	r3, [r4, #0]
 c00a80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c00a80c:	2000      	movs	r0, #0
 c00a80e:	e7fc      	b.n	c00a80a <__srefill_r+0xfa>
 c00a810:	0c00b1b4 	.word	0x0c00b1b4
 c00a814:	0c00b1d4 	.word	0x0c00b1d4
 c00a818:	0c00b194 	.word	0x0c00b194
 c00a81c:	0c00a6fd 	.word	0x0c00a6fd
 c00a820:	0c00af74 	.word	0x0c00af74
 c00a824:	00000000 	.word	0x00000000

0c00a828 <nan>:
 c00a828:	ed9f 0b01 	vldr	d0, [pc, #4]	; c00a830 <nan+0x8>
 c00a82c:	4770      	bx	lr
 c00a82e:	bf00      	nop
 c00a830:	00000000 	.word	0x00000000
 c00a834:	7ff80000 	.word	0x7ff80000

0c00a838 <_sbrk_r>:
 c00a838:	b538      	push	{r3, r4, r5, lr}
 c00a83a:	2300      	movs	r3, #0
 c00a83c:	4d05      	ldr	r5, [pc, #20]	; (c00a854 <_sbrk_r+0x1c>)
 c00a83e:	4604      	mov	r4, r0
 c00a840:	4608      	mov	r0, r1
 c00a842:	602b      	str	r3, [r5, #0]
 c00a844:	f7f7 fa5e 	bl	c001d04 <_sbrk>
 c00a848:	1c43      	adds	r3, r0, #1
 c00a84a:	d102      	bne.n	c00a852 <_sbrk_r+0x1a>
 c00a84c:	682b      	ldr	r3, [r5, #0]
 c00a84e:	b103      	cbz	r3, c00a852 <_sbrk_r+0x1a>
 c00a850:	6023      	str	r3, [r4, #0]
 c00a852:	bd38      	pop	{r3, r4, r5, pc}
 c00a854:	300002b0 	.word	0x300002b0

0c00a858 <__sccl>:
 c00a858:	b570      	push	{r4, r5, r6, lr}
 c00a85a:	780b      	ldrb	r3, [r1, #0]
 c00a85c:	4604      	mov	r4, r0
 c00a85e:	2b5e      	cmp	r3, #94	; 0x5e
 c00a860:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 c00a864:	bf13      	iteet	ne
 c00a866:	1c48      	addne	r0, r1, #1
 c00a868:	1c88      	addeq	r0, r1, #2
 c00a86a:	784b      	ldrbeq	r3, [r1, #1]
 c00a86c:	2200      	movne	r2, #0
 c00a86e:	bf08      	it	eq
 c00a870:	2201      	moveq	r2, #1
 c00a872:	1e61      	subs	r1, r4, #1
 c00a874:	f801 2f01 	strb.w	r2, [r1, #1]!
 c00a878:	42a9      	cmp	r1, r5
 c00a87a:	d1fb      	bne.n	c00a874 <__sccl+0x1c>
 c00a87c:	b90b      	cbnz	r3, c00a882 <__sccl+0x2a>
 c00a87e:	3801      	subs	r0, #1
 c00a880:	bd70      	pop	{r4, r5, r6, pc}
 c00a882:	f082 0201 	eor.w	r2, r2, #1
 c00a886:	4605      	mov	r5, r0
 c00a888:	54e2      	strb	r2, [r4, r3]
 c00a88a:	4628      	mov	r0, r5
 c00a88c:	f810 1b01 	ldrb.w	r1, [r0], #1
 c00a890:	292d      	cmp	r1, #45	; 0x2d
 c00a892:	d006      	beq.n	c00a8a2 <__sccl+0x4a>
 c00a894:	295d      	cmp	r1, #93	; 0x5d
 c00a896:	d0f3      	beq.n	c00a880 <__sccl+0x28>
 c00a898:	b909      	cbnz	r1, c00a89e <__sccl+0x46>
 c00a89a:	4628      	mov	r0, r5
 c00a89c:	e7f0      	b.n	c00a880 <__sccl+0x28>
 c00a89e:	460b      	mov	r3, r1
 c00a8a0:	e7f1      	b.n	c00a886 <__sccl+0x2e>
 c00a8a2:	786e      	ldrb	r6, [r5, #1]
 c00a8a4:	2e5d      	cmp	r6, #93	; 0x5d
 c00a8a6:	d0fa      	beq.n	c00a89e <__sccl+0x46>
 c00a8a8:	42b3      	cmp	r3, r6
 c00a8aa:	dcf8      	bgt.n	c00a89e <__sccl+0x46>
 c00a8ac:	3502      	adds	r5, #2
 c00a8ae:	4619      	mov	r1, r3
 c00a8b0:	3101      	adds	r1, #1
 c00a8b2:	428e      	cmp	r6, r1
 c00a8b4:	5462      	strb	r2, [r4, r1]
 c00a8b6:	dcfb      	bgt.n	c00a8b0 <__sccl+0x58>
 c00a8b8:	1af1      	subs	r1, r6, r3
 c00a8ba:	1c58      	adds	r0, r3, #1
 c00a8bc:	3901      	subs	r1, #1
 c00a8be:	42b3      	cmp	r3, r6
 c00a8c0:	bfa8      	it	ge
 c00a8c2:	2100      	movge	r1, #0
 c00a8c4:	1843      	adds	r3, r0, r1
 c00a8c6:	e7e0      	b.n	c00a88a <__sccl+0x32>

0c00a8c8 <__sread>:
 c00a8c8:	b510      	push	{r4, lr}
 c00a8ca:	460c      	mov	r4, r1
 c00a8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c00a8d0:	f000 fa80 	bl	c00add4 <_read_r>
 c00a8d4:	2800      	cmp	r0, #0
 c00a8d6:	bfab      	itete	ge
 c00a8d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 c00a8da:	89a3      	ldrhlt	r3, [r4, #12]
 c00a8dc:	181b      	addge	r3, r3, r0
 c00a8de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 c00a8e2:	bfac      	ite	ge
 c00a8e4:	6563      	strge	r3, [r4, #84]	; 0x54
 c00a8e6:	81a3      	strhlt	r3, [r4, #12]
 c00a8e8:	bd10      	pop	{r4, pc}

0c00a8ea <__swrite>:
 c00a8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c00a8ee:	461f      	mov	r7, r3
 c00a8f0:	898b      	ldrh	r3, [r1, #12]
 c00a8f2:	4605      	mov	r5, r0
 c00a8f4:	460c      	mov	r4, r1
 c00a8f6:	05db      	lsls	r3, r3, #23
 c00a8f8:	4616      	mov	r6, r2
 c00a8fa:	d505      	bpl.n	c00a908 <__swrite+0x1e>
 c00a8fc:	2302      	movs	r3, #2
 c00a8fe:	2200      	movs	r2, #0
 c00a900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c00a904:	f000 f9fe 	bl	c00ad04 <_lseek_r>
 c00a908:	89a3      	ldrh	r3, [r4, #12]
 c00a90a:	4632      	mov	r2, r6
 c00a90c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c00a910:	4628      	mov	r0, r5
 c00a912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c00a916:	81a3      	strh	r3, [r4, #12]
 c00a918:	463b      	mov	r3, r7
 c00a91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c00a91e:	f000 b97d 	b.w	c00ac1c <_write_r>

0c00a922 <__sseek>:
 c00a922:	b510      	push	{r4, lr}
 c00a924:	460c      	mov	r4, r1
 c00a926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c00a92a:	f000 f9eb 	bl	c00ad04 <_lseek_r>
 c00a92e:	1c43      	adds	r3, r0, #1
 c00a930:	89a3      	ldrh	r3, [r4, #12]
 c00a932:	bf15      	itete	ne
 c00a934:	6560      	strne	r0, [r4, #84]	; 0x54
 c00a936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 c00a93a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 c00a93e:	81a3      	strheq	r3, [r4, #12]
 c00a940:	bf18      	it	ne
 c00a942:	81a3      	strhne	r3, [r4, #12]
 c00a944:	bd10      	pop	{r4, pc}

0c00a946 <__sclose>:
 c00a946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c00a94a:	f000 b997 	b.w	c00ac7c <_close_r>

0c00a94e <strncmp>:
 c00a94e:	b510      	push	{r4, lr}
 c00a950:	b17a      	cbz	r2, c00a972 <strncmp+0x24>
 c00a952:	4603      	mov	r3, r0
 c00a954:	3901      	subs	r1, #1
 c00a956:	1884      	adds	r4, r0, r2
 c00a958:	f813 0b01 	ldrb.w	r0, [r3], #1
 c00a95c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 c00a960:	4290      	cmp	r0, r2
 c00a962:	d101      	bne.n	c00a968 <strncmp+0x1a>
 c00a964:	42a3      	cmp	r3, r4
 c00a966:	d101      	bne.n	c00a96c <strncmp+0x1e>
 c00a968:	1a80      	subs	r0, r0, r2
 c00a96a:	bd10      	pop	{r4, pc}
 c00a96c:	2800      	cmp	r0, #0
 c00a96e:	d1f3      	bne.n	c00a958 <strncmp+0xa>
 c00a970:	e7fa      	b.n	c00a968 <strncmp+0x1a>
 c00a972:	4610      	mov	r0, r2
 c00a974:	e7f9      	b.n	c00a96a <strncmp+0x1c>
	...

0c00a978 <_strtoul_l.constprop.0>:
 c00a978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c00a97c:	4686      	mov	lr, r0
 c00a97e:	460d      	mov	r5, r1
 c00a980:	4f35      	ldr	r7, [pc, #212]	; (c00aa58 <_strtoul_l.constprop.0+0xe0>)
 c00a982:	4628      	mov	r0, r5
 c00a984:	f815 4b01 	ldrb.w	r4, [r5], #1
 c00a988:	5de6      	ldrb	r6, [r4, r7]
 c00a98a:	f016 0608 	ands.w	r6, r6, #8
 c00a98e:	d1f8      	bne.n	c00a982 <_strtoul_l.constprop.0+0xa>
 c00a990:	2c2d      	cmp	r4, #45	; 0x2d
 c00a992:	d12f      	bne.n	c00a9f4 <_strtoul_l.constprop.0+0x7c>
 c00a994:	782c      	ldrb	r4, [r5, #0]
 c00a996:	2601      	movs	r6, #1
 c00a998:	1c85      	adds	r5, r0, #2
 c00a99a:	2b00      	cmp	r3, #0
 c00a99c:	d057      	beq.n	c00aa4e <_strtoul_l.constprop.0+0xd6>
 c00a99e:	2b10      	cmp	r3, #16
 c00a9a0:	d109      	bne.n	c00a9b6 <_strtoul_l.constprop.0+0x3e>
 c00a9a2:	2c30      	cmp	r4, #48	; 0x30
 c00a9a4:	d107      	bne.n	c00a9b6 <_strtoul_l.constprop.0+0x3e>
 c00a9a6:	7828      	ldrb	r0, [r5, #0]
 c00a9a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 c00a9ac:	2858      	cmp	r0, #88	; 0x58
 c00a9ae:	d149      	bne.n	c00aa44 <_strtoul_l.constprop.0+0xcc>
 c00a9b0:	786c      	ldrb	r4, [r5, #1]
 c00a9b2:	2310      	movs	r3, #16
 c00a9b4:	3502      	adds	r5, #2
 c00a9b6:	f04f 38ff 	mov.w	r8, #4294967295
 c00a9ba:	2700      	movs	r7, #0
 c00a9bc:	fbb8 f8f3 	udiv	r8, r8, r3
 c00a9c0:	fb03 f908 	mul.w	r9, r3, r8
 c00a9c4:	4638      	mov	r0, r7
 c00a9c6:	ea6f 0909 	mvn.w	r9, r9
 c00a9ca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 c00a9ce:	f1bc 0f09 	cmp.w	ip, #9
 c00a9d2:	d814      	bhi.n	c00a9fe <_strtoul_l.constprop.0+0x86>
 c00a9d4:	4664      	mov	r4, ip
 c00a9d6:	42a3      	cmp	r3, r4
 c00a9d8:	dd22      	ble.n	c00aa20 <_strtoul_l.constprop.0+0xa8>
 c00a9da:	2f00      	cmp	r7, #0
 c00a9dc:	db1d      	blt.n	c00aa1a <_strtoul_l.constprop.0+0xa2>
 c00a9de:	4580      	cmp	r8, r0
 c00a9e0:	d31b      	bcc.n	c00aa1a <_strtoul_l.constprop.0+0xa2>
 c00a9e2:	d101      	bne.n	c00a9e8 <_strtoul_l.constprop.0+0x70>
 c00a9e4:	45a1      	cmp	r9, r4
 c00a9e6:	db18      	blt.n	c00aa1a <_strtoul_l.constprop.0+0xa2>
 c00a9e8:	fb00 4003 	mla	r0, r0, r3, r4
 c00a9ec:	2701      	movs	r7, #1
 c00a9ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 c00a9f2:	e7ea      	b.n	c00a9ca <_strtoul_l.constprop.0+0x52>
 c00a9f4:	2c2b      	cmp	r4, #43	; 0x2b
 c00a9f6:	bf04      	itt	eq
 c00a9f8:	782c      	ldrbeq	r4, [r5, #0]
 c00a9fa:	1c85      	addeq	r5, r0, #2
 c00a9fc:	e7cd      	b.n	c00a99a <_strtoul_l.constprop.0+0x22>
 c00a9fe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 c00aa02:	f1bc 0f19 	cmp.w	ip, #25
 c00aa06:	d801      	bhi.n	c00aa0c <_strtoul_l.constprop.0+0x94>
 c00aa08:	3c37      	subs	r4, #55	; 0x37
 c00aa0a:	e7e4      	b.n	c00a9d6 <_strtoul_l.constprop.0+0x5e>
 c00aa0c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 c00aa10:	f1bc 0f19 	cmp.w	ip, #25
 c00aa14:	d804      	bhi.n	c00aa20 <_strtoul_l.constprop.0+0xa8>
 c00aa16:	3c57      	subs	r4, #87	; 0x57
 c00aa18:	e7dd      	b.n	c00a9d6 <_strtoul_l.constprop.0+0x5e>
 c00aa1a:	f04f 37ff 	mov.w	r7, #4294967295
 c00aa1e:	e7e6      	b.n	c00a9ee <_strtoul_l.constprop.0+0x76>
 c00aa20:	2f00      	cmp	r7, #0
 c00aa22:	da07      	bge.n	c00aa34 <_strtoul_l.constprop.0+0xbc>
 c00aa24:	2322      	movs	r3, #34	; 0x22
 c00aa26:	f04f 30ff 	mov.w	r0, #4294967295
 c00aa2a:	f8ce 3000 	str.w	r3, [lr]
 c00aa2e:	b932      	cbnz	r2, c00aa3e <_strtoul_l.constprop.0+0xc6>
 c00aa30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 c00aa34:	b106      	cbz	r6, c00aa38 <_strtoul_l.constprop.0+0xc0>
 c00aa36:	4240      	negs	r0, r0
 c00aa38:	2a00      	cmp	r2, #0
 c00aa3a:	d0f9      	beq.n	c00aa30 <_strtoul_l.constprop.0+0xb8>
 c00aa3c:	b107      	cbz	r7, c00aa40 <_strtoul_l.constprop.0+0xc8>
 c00aa3e:	1e69      	subs	r1, r5, #1
 c00aa40:	6011      	str	r1, [r2, #0]
 c00aa42:	e7f5      	b.n	c00aa30 <_strtoul_l.constprop.0+0xb8>
 c00aa44:	2430      	movs	r4, #48	; 0x30
 c00aa46:	2b00      	cmp	r3, #0
 c00aa48:	d1b5      	bne.n	c00a9b6 <_strtoul_l.constprop.0+0x3e>
 c00aa4a:	2308      	movs	r3, #8
 c00aa4c:	e7b3      	b.n	c00a9b6 <_strtoul_l.constprop.0+0x3e>
 c00aa4e:	2c30      	cmp	r4, #48	; 0x30
 c00aa50:	d0a9      	beq.n	c00a9a6 <_strtoul_l.constprop.0+0x2e>
 c00aa52:	230a      	movs	r3, #10
 c00aa54:	e7af      	b.n	c00a9b6 <_strtoul_l.constprop.0+0x3e>
 c00aa56:	bf00      	nop
 c00aa58:	0c00b001 	.word	0x0c00b001

0c00aa5c <_strtoul_r>:
 c00aa5c:	f7ff bf8c 	b.w	c00a978 <_strtoul_l.constprop.0>

0c00aa60 <__submore>:
 c00aa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c00aa64:	460c      	mov	r4, r1
 c00aa66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 c00aa68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c00aa6c:	4299      	cmp	r1, r3
 c00aa6e:	d11a      	bne.n	c00aaa6 <__submore+0x46>
 c00aa70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 c00aa74:	f7fe fff8 	bl	c009a68 <_malloc_r>
 c00aa78:	b918      	cbnz	r0, c00aa82 <__submore+0x22>
 c00aa7a:	f04f 30ff 	mov.w	r0, #4294967295
 c00aa7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c00aa82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c00aa86:	6360      	str	r0, [r4, #52]	; 0x34
 c00aa88:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 c00aa8c:	63a3      	str	r3, [r4, #56]	; 0x38
 c00aa8e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 c00aa92:	7083      	strb	r3, [r0, #2]
 c00aa94:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 c00aa98:	7043      	strb	r3, [r0, #1]
 c00aa9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 c00aa9e:	7003      	strb	r3, [r0, #0]
 c00aaa0:	6020      	str	r0, [r4, #0]
 c00aaa2:	2000      	movs	r0, #0
 c00aaa4:	e7eb      	b.n	c00aa7e <__submore+0x1e>
 c00aaa6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 c00aaa8:	0077      	lsls	r7, r6, #1
 c00aaaa:	463a      	mov	r2, r7
 c00aaac:	f000 f962 	bl	c00ad74 <_realloc_r>
 c00aab0:	4605      	mov	r5, r0
 c00aab2:	2800      	cmp	r0, #0
 c00aab4:	d0e1      	beq.n	c00aa7a <__submore+0x1a>
 c00aab6:	eb00 0806 	add.w	r8, r0, r6
 c00aaba:	4601      	mov	r1, r0
 c00aabc:	4632      	mov	r2, r6
 c00aabe:	4640      	mov	r0, r8
 c00aac0:	f7fe fa7c 	bl	c008fbc <memcpy>
 c00aac4:	f8c4 8000 	str.w	r8, [r4]
 c00aac8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 c00aacc:	e7e9      	b.n	c00aaa2 <__submore+0x42>
	...

0c00aad0 <_ungetc_r>:
 c00aad0:	b570      	push	{r4, r5, r6, lr}
 c00aad2:	4614      	mov	r4, r2
 c00aad4:	1c4a      	adds	r2, r1, #1
 c00aad6:	4606      	mov	r6, r0
 c00aad8:	460d      	mov	r5, r1
 c00aada:	d103      	bne.n	c00aae4 <_ungetc_r+0x14>
 c00aadc:	f04f 35ff 	mov.w	r5, #4294967295
 c00aae0:	4628      	mov	r0, r5
 c00aae2:	bd70      	pop	{r4, r5, r6, pc}
 c00aae4:	b118      	cbz	r0, c00aaee <_ungetc_r+0x1e>
 c00aae6:	6983      	ldr	r3, [r0, #24]
 c00aae8:	b90b      	cbnz	r3, c00aaee <_ungetc_r+0x1e>
 c00aaea:	f7fd fdab 	bl	c008644 <__sinit>
 c00aaee:	4b41      	ldr	r3, [pc, #260]	; (c00abf4 <_ungetc_r+0x124>)
 c00aaf0:	429c      	cmp	r4, r3
 c00aaf2:	d11d      	bne.n	c00ab30 <_ungetc_r+0x60>
 c00aaf4:	6874      	ldr	r4, [r6, #4]
 c00aaf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c00aaf8:	07db      	lsls	r3, r3, #31
 c00aafa:	d405      	bmi.n	c00ab08 <_ungetc_r+0x38>
 c00aafc:	89a3      	ldrh	r3, [r4, #12]
 c00aafe:	0598      	lsls	r0, r3, #22
 c00ab00:	d402      	bmi.n	c00ab08 <_ungetc_r+0x38>
 c00ab02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00ab04:	f7fe f9cb 	bl	c008e9e <__retarget_lock_acquire_recursive>
 c00ab08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c00ab0c:	f023 0320 	bic.w	r3, r3, #32
 c00ab10:	0759      	lsls	r1, r3, #29
 c00ab12:	b29a      	uxth	r2, r3
 c00ab14:	81a3      	strh	r3, [r4, #12]
 c00ab16:	d42d      	bmi.n	c00ab74 <_ungetc_r+0xa4>
 c00ab18:	06d3      	lsls	r3, r2, #27
 c00ab1a:	d413      	bmi.n	c00ab44 <_ungetc_r+0x74>
 c00ab1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c00ab1e:	07dd      	lsls	r5, r3, #31
 c00ab20:	d4dc      	bmi.n	c00aadc <_ungetc_r+0xc>
 c00ab22:	f412 7f00 	tst.w	r2, #512	; 0x200
 c00ab26:	d1d9      	bne.n	c00aadc <_ungetc_r+0xc>
 c00ab28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00ab2a:	f7fe f9b9 	bl	c008ea0 <__retarget_lock_release_recursive>
 c00ab2e:	e7d5      	b.n	c00aadc <_ungetc_r+0xc>
 c00ab30:	4b31      	ldr	r3, [pc, #196]	; (c00abf8 <_ungetc_r+0x128>)
 c00ab32:	429c      	cmp	r4, r3
 c00ab34:	d101      	bne.n	c00ab3a <_ungetc_r+0x6a>
 c00ab36:	68b4      	ldr	r4, [r6, #8]
 c00ab38:	e7dd      	b.n	c00aaf6 <_ungetc_r+0x26>
 c00ab3a:	4b30      	ldr	r3, [pc, #192]	; (c00abfc <_ungetc_r+0x12c>)
 c00ab3c:	429c      	cmp	r4, r3
 c00ab3e:	bf08      	it	eq
 c00ab40:	68f4      	ldreq	r4, [r6, #12]
 c00ab42:	e7d8      	b.n	c00aaf6 <_ungetc_r+0x26>
 c00ab44:	0710      	lsls	r0, r2, #28
 c00ab46:	d511      	bpl.n	c00ab6c <_ungetc_r+0x9c>
 c00ab48:	4621      	mov	r1, r4
 c00ab4a:	4630      	mov	r0, r6
 c00ab4c:	f7fd fcd4 	bl	c0084f8 <_fflush_r>
 c00ab50:	b130      	cbz	r0, c00ab60 <_ungetc_r+0x90>
 c00ab52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c00ab54:	07d9      	lsls	r1, r3, #31
 c00ab56:	d4c1      	bmi.n	c00aadc <_ungetc_r+0xc>
 c00ab58:	89a3      	ldrh	r3, [r4, #12]
 c00ab5a:	f413 7f00 	tst.w	r3, #512	; 0x200
 c00ab5e:	e7e2      	b.n	c00ab26 <_ungetc_r+0x56>
 c00ab60:	89a3      	ldrh	r3, [r4, #12]
 c00ab62:	60a0      	str	r0, [r4, #8]
 c00ab64:	f023 0308 	bic.w	r3, r3, #8
 c00ab68:	61a0      	str	r0, [r4, #24]
 c00ab6a:	81a3      	strh	r3, [r4, #12]
 c00ab6c:	89a3      	ldrh	r3, [r4, #12]
 c00ab6e:	f043 0304 	orr.w	r3, r3, #4
 c00ab72:	81a3      	strh	r3, [r4, #12]
 c00ab74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c00ab76:	b2ed      	uxtb	r5, r5
 c00ab78:	6862      	ldr	r2, [r4, #4]
 c00ab7a:	b1d3      	cbz	r3, c00abb2 <_ungetc_r+0xe2>
 c00ab7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 c00ab7e:	4293      	cmp	r3, r2
 c00ab80:	dc05      	bgt.n	c00ab8e <_ungetc_r+0xbe>
 c00ab82:	4621      	mov	r1, r4
 c00ab84:	4630      	mov	r0, r6
 c00ab86:	f7ff ff6b 	bl	c00aa60 <__submore>
 c00ab8a:	2800      	cmp	r0, #0
 c00ab8c:	d1e1      	bne.n	c00ab52 <_ungetc_r+0x82>
 c00ab8e:	6823      	ldr	r3, [r4, #0]
 c00ab90:	1e5a      	subs	r2, r3, #1
 c00ab92:	6022      	str	r2, [r4, #0]
 c00ab94:	f803 5c01 	strb.w	r5, [r3, #-1]
 c00ab98:	6863      	ldr	r3, [r4, #4]
 c00ab9a:	3301      	adds	r3, #1
 c00ab9c:	6063      	str	r3, [r4, #4]
 c00ab9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c00aba0:	07da      	lsls	r2, r3, #31
 c00aba2:	d49d      	bmi.n	c00aae0 <_ungetc_r+0x10>
 c00aba4:	89a3      	ldrh	r3, [r4, #12]
 c00aba6:	059b      	lsls	r3, r3, #22
 c00aba8:	d49a      	bmi.n	c00aae0 <_ungetc_r+0x10>
 c00abaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00abac:	f7fe f978 	bl	c008ea0 <__retarget_lock_release_recursive>
 c00abb0:	e796      	b.n	c00aae0 <_ungetc_r+0x10>
 c00abb2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 c00abb4:	6920      	ldr	r0, [r4, #16]
 c00abb6:	6823      	ldr	r3, [r4, #0]
 c00abb8:	f001 0101 	and.w	r1, r1, #1
 c00abbc:	b160      	cbz	r0, c00abd8 <_ungetc_r+0x108>
 c00abbe:	4298      	cmp	r0, r3
 c00abc0:	d20a      	bcs.n	c00abd8 <_ungetc_r+0x108>
 c00abc2:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 c00abc6:	42a8      	cmp	r0, r5
 c00abc8:	d106      	bne.n	c00abd8 <_ungetc_r+0x108>
 c00abca:	3b01      	subs	r3, #1
 c00abcc:	3201      	adds	r2, #1
 c00abce:	6023      	str	r3, [r4, #0]
 c00abd0:	6062      	str	r2, [r4, #4]
 c00abd2:	2900      	cmp	r1, #0
 c00abd4:	d184      	bne.n	c00aae0 <_ungetc_r+0x10>
 c00abd6:	e7e5      	b.n	c00aba4 <_ungetc_r+0xd4>
 c00abd8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 c00abdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c00abe0:	6363      	str	r3, [r4, #52]	; 0x34
 c00abe2:	2303      	movs	r3, #3
 c00abe4:	63a3      	str	r3, [r4, #56]	; 0x38
 c00abe6:	4623      	mov	r3, r4
 c00abe8:	f803 5f46 	strb.w	r5, [r3, #70]!
 c00abec:	6023      	str	r3, [r4, #0]
 c00abee:	2301      	movs	r3, #1
 c00abf0:	6063      	str	r3, [r4, #4]
 c00abf2:	e7ee      	b.n	c00abd2 <_ungetc_r+0x102>
 c00abf4:	0c00b1b4 	.word	0x0c00b1b4
 c00abf8:	0c00b1d4 	.word	0x0c00b1d4
 c00abfc:	0c00b194 	.word	0x0c00b194

0c00ac00 <__ascii_wctomb>:
 c00ac00:	b149      	cbz	r1, c00ac16 <__ascii_wctomb+0x16>
 c00ac02:	2aff      	cmp	r2, #255	; 0xff
 c00ac04:	bf8d      	iteet	hi
 c00ac06:	238a      	movhi	r3, #138	; 0x8a
 c00ac08:	2001      	movls	r0, #1
 c00ac0a:	700a      	strbls	r2, [r1, #0]
 c00ac0c:	6003      	strhi	r3, [r0, #0]
 c00ac0e:	bf88      	it	hi
 c00ac10:	f04f 30ff 	movhi.w	r0, #4294967295
 c00ac14:	4770      	bx	lr
 c00ac16:	4608      	mov	r0, r1
 c00ac18:	4770      	bx	lr
	...

0c00ac1c <_write_r>:
 c00ac1c:	b538      	push	{r3, r4, r5, lr}
 c00ac1e:	4604      	mov	r4, r0
 c00ac20:	4d06      	ldr	r5, [pc, #24]	; (c00ac3c <_write_r+0x20>)
 c00ac22:	4608      	mov	r0, r1
 c00ac24:	4611      	mov	r1, r2
 c00ac26:	2200      	movs	r2, #0
 c00ac28:	602a      	str	r2, [r5, #0]
 c00ac2a:	461a      	mov	r2, r3
 c00ac2c:	f7f7 f819 	bl	c001c62 <_write>
 c00ac30:	1c43      	adds	r3, r0, #1
 c00ac32:	d102      	bne.n	c00ac3a <_write_r+0x1e>
 c00ac34:	682b      	ldr	r3, [r5, #0]
 c00ac36:	b103      	cbz	r3, c00ac3a <_write_r+0x1e>
 c00ac38:	6023      	str	r3, [r4, #0]
 c00ac3a:	bd38      	pop	{r3, r4, r5, pc}
 c00ac3c:	300002b0 	.word	0x300002b0

0c00ac40 <__assert_func>:
 c00ac40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 c00ac42:	4614      	mov	r4, r2
 c00ac44:	461a      	mov	r2, r3
 c00ac46:	4b09      	ldr	r3, [pc, #36]	; (c00ac6c <__assert_func+0x2c>)
 c00ac48:	4605      	mov	r5, r0
 c00ac4a:	681b      	ldr	r3, [r3, #0]
 c00ac4c:	68d8      	ldr	r0, [r3, #12]
 c00ac4e:	b14c      	cbz	r4, c00ac64 <__assert_func+0x24>
 c00ac50:	4b07      	ldr	r3, [pc, #28]	; (c00ac70 <__assert_func+0x30>)
 c00ac52:	9100      	str	r1, [sp, #0]
 c00ac54:	4907      	ldr	r1, [pc, #28]	; (c00ac74 <__assert_func+0x34>)
 c00ac56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 c00ac5a:	462b      	mov	r3, r5
 c00ac5c:	f000 f81e 	bl	c00ac9c <fiprintf>
 c00ac60:	f7fa fd52 	bl	c005708 <abort>
 c00ac64:	4b04      	ldr	r3, [pc, #16]	; (c00ac78 <__assert_func+0x38>)
 c00ac66:	461c      	mov	r4, r3
 c00ac68:	e7f3      	b.n	c00ac52 <__assert_func+0x12>
 c00ac6a:	bf00      	nop
 c00ac6c:	30000010 	.word	0x30000010
 c00ac70:	0c00b3f8 	.word	0x0c00b3f8
 c00ac74:	0c00b405 	.word	0x0c00b405
 c00ac78:	0c00b433 	.word	0x0c00b433

0c00ac7c <_close_r>:
 c00ac7c:	b538      	push	{r3, r4, r5, lr}
 c00ac7e:	2300      	movs	r3, #0
 c00ac80:	4d05      	ldr	r5, [pc, #20]	; (c00ac98 <_close_r+0x1c>)
 c00ac82:	4604      	mov	r4, r0
 c00ac84:	4608      	mov	r0, r1
 c00ac86:	602b      	str	r3, [r5, #0]
 c00ac88:	f7f7 f807 	bl	c001c9a <_close>
 c00ac8c:	1c43      	adds	r3, r0, #1
 c00ac8e:	d102      	bne.n	c00ac96 <_close_r+0x1a>
 c00ac90:	682b      	ldr	r3, [r5, #0]
 c00ac92:	b103      	cbz	r3, c00ac96 <_close_r+0x1a>
 c00ac94:	6023      	str	r3, [r4, #0]
 c00ac96:	bd38      	pop	{r3, r4, r5, pc}
 c00ac98:	300002b0 	.word	0x300002b0

0c00ac9c <fiprintf>:
 c00ac9c:	b40e      	push	{r1, r2, r3}
 c00ac9e:	b503      	push	{r0, r1, lr}
 c00aca0:	ab03      	add	r3, sp, #12
 c00aca2:	4601      	mov	r1, r0
 c00aca4:	4805      	ldr	r0, [pc, #20]	; (c00acbc <fiprintf+0x20>)
 c00aca6:	f853 2b04 	ldr.w	r2, [r3], #4
 c00acaa:	6800      	ldr	r0, [r0, #0]
 c00acac:	9301      	str	r3, [sp, #4]
 c00acae:	f7ff f8d5 	bl	c009e5c <_vfiprintf_r>
 c00acb2:	b002      	add	sp, #8
 c00acb4:	f85d eb04 	ldr.w	lr, [sp], #4
 c00acb8:	b003      	add	sp, #12
 c00acba:	4770      	bx	lr
 c00acbc:	30000010 	.word	0x30000010

0c00acc0 <_fstat_r>:
 c00acc0:	b538      	push	{r3, r4, r5, lr}
 c00acc2:	2300      	movs	r3, #0
 c00acc4:	4d06      	ldr	r5, [pc, #24]	; (c00ace0 <_fstat_r+0x20>)
 c00acc6:	4604      	mov	r4, r0
 c00acc8:	4608      	mov	r0, r1
 c00acca:	4611      	mov	r1, r2
 c00accc:	602b      	str	r3, [r5, #0]
 c00acce:	f7f6 fff0 	bl	c001cb2 <_fstat>
 c00acd2:	1c43      	adds	r3, r0, #1
 c00acd4:	d102      	bne.n	c00acdc <_fstat_r+0x1c>
 c00acd6:	682b      	ldr	r3, [r5, #0]
 c00acd8:	b103      	cbz	r3, c00acdc <_fstat_r+0x1c>
 c00acda:	6023      	str	r3, [r4, #0]
 c00acdc:	bd38      	pop	{r3, r4, r5, pc}
 c00acde:	bf00      	nop
 c00ace0:	300002b0 	.word	0x300002b0

0c00ace4 <_isatty_r>:
 c00ace4:	b538      	push	{r3, r4, r5, lr}
 c00ace6:	2300      	movs	r3, #0
 c00ace8:	4d05      	ldr	r5, [pc, #20]	; (c00ad00 <_isatty_r+0x1c>)
 c00acea:	4604      	mov	r4, r0
 c00acec:	4608      	mov	r0, r1
 c00acee:	602b      	str	r3, [r5, #0]
 c00acf0:	f7f6 ffef 	bl	c001cd2 <_isatty>
 c00acf4:	1c43      	adds	r3, r0, #1
 c00acf6:	d102      	bne.n	c00acfe <_isatty_r+0x1a>
 c00acf8:	682b      	ldr	r3, [r5, #0]
 c00acfa:	b103      	cbz	r3, c00acfe <_isatty_r+0x1a>
 c00acfc:	6023      	str	r3, [r4, #0]
 c00acfe:	bd38      	pop	{r3, r4, r5, pc}
 c00ad00:	300002b0 	.word	0x300002b0

0c00ad04 <_lseek_r>:
 c00ad04:	b538      	push	{r3, r4, r5, lr}
 c00ad06:	4604      	mov	r4, r0
 c00ad08:	4d06      	ldr	r5, [pc, #24]	; (c00ad24 <_lseek_r+0x20>)
 c00ad0a:	4608      	mov	r0, r1
 c00ad0c:	4611      	mov	r1, r2
 c00ad0e:	2200      	movs	r2, #0
 c00ad10:	602a      	str	r2, [r5, #0]
 c00ad12:	461a      	mov	r2, r3
 c00ad14:	f7f6 ffe8 	bl	c001ce8 <_lseek>
 c00ad18:	1c43      	adds	r3, r0, #1
 c00ad1a:	d102      	bne.n	c00ad22 <_lseek_r+0x1e>
 c00ad1c:	682b      	ldr	r3, [r5, #0]
 c00ad1e:	b103      	cbz	r3, c00ad22 <_lseek_r+0x1e>
 c00ad20:	6023      	str	r3, [r4, #0]
 c00ad22:	bd38      	pop	{r3, r4, r5, pc}
 c00ad24:	300002b0 	.word	0x300002b0

0c00ad28 <memmove>:
 c00ad28:	4288      	cmp	r0, r1
 c00ad2a:	b510      	push	{r4, lr}
 c00ad2c:	eb01 0402 	add.w	r4, r1, r2
 c00ad30:	d902      	bls.n	c00ad38 <memmove+0x10>
 c00ad32:	4284      	cmp	r4, r0
 c00ad34:	4623      	mov	r3, r4
 c00ad36:	d807      	bhi.n	c00ad48 <memmove+0x20>
 c00ad38:	1e43      	subs	r3, r0, #1
 c00ad3a:	42a1      	cmp	r1, r4
 c00ad3c:	d008      	beq.n	c00ad50 <memmove+0x28>
 c00ad3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 c00ad42:	f803 2f01 	strb.w	r2, [r3, #1]!
 c00ad46:	e7f8      	b.n	c00ad3a <memmove+0x12>
 c00ad48:	4402      	add	r2, r0
 c00ad4a:	4601      	mov	r1, r0
 c00ad4c:	428a      	cmp	r2, r1
 c00ad4e:	d100      	bne.n	c00ad52 <memmove+0x2a>
 c00ad50:	bd10      	pop	{r4, pc}
 c00ad52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 c00ad56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 c00ad5a:	e7f7      	b.n	c00ad4c <memmove+0x24>

0c00ad5c <__malloc_lock>:
 c00ad5c:	4801      	ldr	r0, [pc, #4]	; (c00ad64 <__malloc_lock+0x8>)
 c00ad5e:	f7fe b89e 	b.w	c008e9e <__retarget_lock_acquire_recursive>
 c00ad62:	bf00      	nop
 c00ad64:	300002a4 	.word	0x300002a4

0c00ad68 <__malloc_unlock>:
 c00ad68:	4801      	ldr	r0, [pc, #4]	; (c00ad70 <__malloc_unlock+0x8>)
 c00ad6a:	f7fe b899 	b.w	c008ea0 <__retarget_lock_release_recursive>
 c00ad6e:	bf00      	nop
 c00ad70:	300002a4 	.word	0x300002a4

0c00ad74 <_realloc_r>:
 c00ad74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c00ad78:	4680      	mov	r8, r0
 c00ad7a:	4614      	mov	r4, r2
 c00ad7c:	460e      	mov	r6, r1
 c00ad7e:	b921      	cbnz	r1, c00ad8a <_realloc_r+0x16>
 c00ad80:	4611      	mov	r1, r2
 c00ad82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c00ad86:	f7fe be6f 	b.w	c009a68 <_malloc_r>
 c00ad8a:	b92a      	cbnz	r2, c00ad98 <_realloc_r+0x24>
 c00ad8c:	4625      	mov	r5, r4
 c00ad8e:	f7fe fdff 	bl	c009990 <_free_r>
 c00ad92:	4628      	mov	r0, r5
 c00ad94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c00ad98:	f000 f82e 	bl	c00adf8 <_malloc_usable_size_r>
 c00ad9c:	4284      	cmp	r4, r0
 c00ad9e:	4607      	mov	r7, r0
 c00ada0:	d802      	bhi.n	c00ada8 <_realloc_r+0x34>
 c00ada2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 c00ada6:	d812      	bhi.n	c00adce <_realloc_r+0x5a>
 c00ada8:	4621      	mov	r1, r4
 c00adaa:	4640      	mov	r0, r8
 c00adac:	f7fe fe5c 	bl	c009a68 <_malloc_r>
 c00adb0:	4605      	mov	r5, r0
 c00adb2:	2800      	cmp	r0, #0
 c00adb4:	d0ed      	beq.n	c00ad92 <_realloc_r+0x1e>
 c00adb6:	42bc      	cmp	r4, r7
 c00adb8:	4622      	mov	r2, r4
 c00adba:	4631      	mov	r1, r6
 c00adbc:	bf28      	it	cs
 c00adbe:	463a      	movcs	r2, r7
 c00adc0:	f7fe f8fc 	bl	c008fbc <memcpy>
 c00adc4:	4631      	mov	r1, r6
 c00adc6:	4640      	mov	r0, r8
 c00adc8:	f7fe fde2 	bl	c009990 <_free_r>
 c00adcc:	e7e1      	b.n	c00ad92 <_realloc_r+0x1e>
 c00adce:	4635      	mov	r5, r6
 c00add0:	e7df      	b.n	c00ad92 <_realloc_r+0x1e>
	...

0c00add4 <_read_r>:
 c00add4:	b538      	push	{r3, r4, r5, lr}
 c00add6:	4604      	mov	r4, r0
 c00add8:	4d06      	ldr	r5, [pc, #24]	; (c00adf4 <_read_r+0x20>)
 c00adda:	4608      	mov	r0, r1
 c00addc:	4611      	mov	r1, r2
 c00adde:	2200      	movs	r2, #0
 c00ade0:	602a      	str	r2, [r5, #0]
 c00ade2:	461a      	mov	r2, r3
 c00ade4:	f7f6 ff20 	bl	c001c28 <_read>
 c00ade8:	1c43      	adds	r3, r0, #1
 c00adea:	d102      	bne.n	c00adf2 <_read_r+0x1e>
 c00adec:	682b      	ldr	r3, [r5, #0]
 c00adee:	b103      	cbz	r3, c00adf2 <_read_r+0x1e>
 c00adf0:	6023      	str	r3, [r4, #0]
 c00adf2:	bd38      	pop	{r3, r4, r5, pc}
 c00adf4:	300002b0 	.word	0x300002b0

0c00adf8 <_malloc_usable_size_r>:
 c00adf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c00adfc:	1f18      	subs	r0, r3, #4
 c00adfe:	2b00      	cmp	r3, #0
 c00ae00:	bfbc      	itt	lt
 c00ae02:	580b      	ldrlt	r3, [r1, r0]
 c00ae04:	18c0      	addlt	r0, r0, r3
 c00ae06:	4770      	bx	lr

0c00ae08 <_init>:
 c00ae08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00ae0a:	bf00      	nop
 c00ae0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00ae0e:	bc08      	pop	{r3}
 c00ae10:	469e      	mov	lr, r3
 c00ae12:	4770      	bx	lr

0c00ae14 <_fini>:
 c00ae14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00ae16:	bf00      	nop
 c00ae18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00ae1a:	bc08      	pop	{r3}
 c00ae1c:	469e      	mov	lr, r3
 c00ae1e:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <DbgConsole_Printf_NSE>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c3 bb32 	b.w	c00166c <__acle_se_DbgConsole_Printf_NSE>

0c03e008 <SECURE_SystemCoreClockUpdate>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c4 b898 	b.w	c002140 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e010 <GetTestCaseNumber_NSE>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c3 bbd4 	b.w	c0017c0 <__acle_se_GetTestCaseNumber_NSE>

0c03e018 <PinCompare_NSE>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c3 bc0c 	b.w	c001838 <__acle_se_PinCompare_NSE>

0c03e020 <SECURE_RegisterCallback>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c3 baae 	b.w	c001584 <__acle_se_SECURE_RegisterCallback>

0c03e028 <Access_ok_toggle>:
 c03e028:	e97f e97f 	sg
 c03e02c:	f7c3 bc4a 	b.w	c0018c4 <__acle_se_Access_ok_toggle>

0c03e030 <DbgConsole_Scanf_NSE>:
 c03e030:	e97f e97f 	sg
 c03e034:	f7c3 bb80 	b.w	c001738 <__acle_se_DbgConsole_Scanf_NSE>

0c03e038 <Access_Nok_toggle>:
 c03e038:	e97f e97f 	sg
 c03e03c:	f7c3 bc82 	b.w	c001944 <__acle_se_Access_Nok_toggle>
