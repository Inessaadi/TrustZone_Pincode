
GTZC_TZSC_MPCBB_TrustZone_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004788  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08044980  08044980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08044c10  08044c10  00018070  2**0
                  CONTENTS
  4 .ARM          00000008  08044c10  08044c10  00014c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08044c18  08044c18  00018070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08044c18  08044c18  00014c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08044c20  08044c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20018000  08044c28  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20018070  08044c98  00018070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20018138  08044c98  00018138  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00018070  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000d200  00000000  00000000  000180a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000b29d  00000000  00000000  000252a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000205e  00000000  00000000  00030543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  000325a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ff5ee  00000000  00000000  00032fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000958  00000000  00000000  001325d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028dd4  00000000  00000000  00132f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015bd04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003404  00000000  00000000  0015bd54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	20018070 	.word	0x20018070
 8040214:	00000000 	.word	0x00000000
 8040218:	08044908 	.word	0x08044908

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	20018074 	.word	0x20018074
 8040234:	08044908 	.word	0x08044908

08040238 <__aeabi_uldivmod>:
 8040238:	b953      	cbnz	r3, 8040250 <__aeabi_uldivmod+0x18>
 804023a:	b94a      	cbnz	r2, 8040250 <__aeabi_uldivmod+0x18>
 804023c:	2900      	cmp	r1, #0
 804023e:	bf08      	it	eq
 8040240:	2800      	cmpeq	r0, #0
 8040242:	bf1c      	itt	ne
 8040244:	f04f 31ff 	movne.w	r1, #4294967295
 8040248:	f04f 30ff 	movne.w	r0, #4294967295
 804024c:	f000 b982 	b.w	8040554 <__aeabi_idiv0>
 8040250:	f1ad 0c08 	sub.w	ip, sp, #8
 8040254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040258:	f000 f806 	bl	8040268 <__udivmoddi4>
 804025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040264:	b004      	add	sp, #16
 8040266:	4770      	bx	lr

08040268 <__udivmoddi4>:
 8040268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804026c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 804026e:	4604      	mov	r4, r0
 8040270:	460f      	mov	r7, r1
 8040272:	2b00      	cmp	r3, #0
 8040274:	d148      	bne.n	8040308 <__udivmoddi4+0xa0>
 8040276:	428a      	cmp	r2, r1
 8040278:	4694      	mov	ip, r2
 804027a:	d961      	bls.n	8040340 <__udivmoddi4+0xd8>
 804027c:	fab2 f382 	clz	r3, r2
 8040280:	b143      	cbz	r3, 8040294 <__udivmoddi4+0x2c>
 8040282:	f1c3 0120 	rsb	r1, r3, #32
 8040286:	409f      	lsls	r7, r3
 8040288:	fa02 fc03 	lsl.w	ip, r2, r3
 804028c:	409c      	lsls	r4, r3
 804028e:	fa20 f101 	lsr.w	r1, r0, r1
 8040292:	430f      	orrs	r7, r1
 8040294:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8040298:	fa1f fe8c 	uxth.w	lr, ip
 804029c:	0c22      	lsrs	r2, r4, #16
 804029e:	fbb7 f6f1 	udiv	r6, r7, r1
 80402a2:	fb01 7716 	mls	r7, r1, r6, r7
 80402a6:	fb06 f00e 	mul.w	r0, r6, lr
 80402aa:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80402ae:	4290      	cmp	r0, r2
 80402b0:	d908      	bls.n	80402c4 <__udivmoddi4+0x5c>
 80402b2:	eb1c 0202 	adds.w	r2, ip, r2
 80402b6:	f106 37ff 	add.w	r7, r6, #4294967295
 80402ba:	d202      	bcs.n	80402c2 <__udivmoddi4+0x5a>
 80402bc:	4290      	cmp	r0, r2
 80402be:	f200 8137 	bhi.w	8040530 <__udivmoddi4+0x2c8>
 80402c2:	463e      	mov	r6, r7
 80402c4:	1a12      	subs	r2, r2, r0
 80402c6:	b2a4      	uxth	r4, r4
 80402c8:	fbb2 f0f1 	udiv	r0, r2, r1
 80402cc:	fb01 2210 	mls	r2, r1, r0, r2
 80402d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80402d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80402d8:	45a6      	cmp	lr, r4
 80402da:	d908      	bls.n	80402ee <__udivmoddi4+0x86>
 80402dc:	eb1c 0404 	adds.w	r4, ip, r4
 80402e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80402e4:	d202      	bcs.n	80402ec <__udivmoddi4+0x84>
 80402e6:	45a6      	cmp	lr, r4
 80402e8:	f200 811c 	bhi.w	8040524 <__udivmoddi4+0x2bc>
 80402ec:	4610      	mov	r0, r2
 80402ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80402f2:	eba4 040e 	sub.w	r4, r4, lr
 80402f6:	2600      	movs	r6, #0
 80402f8:	b11d      	cbz	r5, 8040302 <__udivmoddi4+0x9a>
 80402fa:	40dc      	lsrs	r4, r3
 80402fc:	2300      	movs	r3, #0
 80402fe:	e9c5 4300 	strd	r4, r3, [r5]
 8040302:	4631      	mov	r1, r6
 8040304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040308:	428b      	cmp	r3, r1
 804030a:	d909      	bls.n	8040320 <__udivmoddi4+0xb8>
 804030c:	2d00      	cmp	r5, #0
 804030e:	f000 80fd 	beq.w	804050c <__udivmoddi4+0x2a4>
 8040312:	2600      	movs	r6, #0
 8040314:	e9c5 0100 	strd	r0, r1, [r5]
 8040318:	4630      	mov	r0, r6
 804031a:	4631      	mov	r1, r6
 804031c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040320:	fab3 f683 	clz	r6, r3
 8040324:	2e00      	cmp	r6, #0
 8040326:	d14b      	bne.n	80403c0 <__udivmoddi4+0x158>
 8040328:	428b      	cmp	r3, r1
 804032a:	f0c0 80f2 	bcc.w	8040512 <__udivmoddi4+0x2aa>
 804032e:	4282      	cmp	r2, r0
 8040330:	f240 80ef 	bls.w	8040512 <__udivmoddi4+0x2aa>
 8040334:	4630      	mov	r0, r6
 8040336:	2d00      	cmp	r5, #0
 8040338:	d0e3      	beq.n	8040302 <__udivmoddi4+0x9a>
 804033a:	e9c5 4700 	strd	r4, r7, [r5]
 804033e:	e7e0      	b.n	8040302 <__udivmoddi4+0x9a>
 8040340:	b902      	cbnz	r2, 8040344 <__udivmoddi4+0xdc>
 8040342:	deff      	udf	#255	; 0xff
 8040344:	fab2 f382 	clz	r3, r2
 8040348:	2b00      	cmp	r3, #0
 804034a:	f040 809d 	bne.w	8040488 <__udivmoddi4+0x220>
 804034e:	1a89      	subs	r1, r1, r2
 8040350:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8040354:	b297      	uxth	r7, r2
 8040356:	2601      	movs	r6, #1
 8040358:	0c20      	lsrs	r0, r4, #16
 804035a:	fbb1 f2fe 	udiv	r2, r1, lr
 804035e:	fb0e 1112 	mls	r1, lr, r2, r1
 8040362:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040366:	fb07 f002 	mul.w	r0, r7, r2
 804036a:	4288      	cmp	r0, r1
 804036c:	d90f      	bls.n	804038e <__udivmoddi4+0x126>
 804036e:	eb1c 0101 	adds.w	r1, ip, r1
 8040372:	f102 38ff 	add.w	r8, r2, #4294967295
 8040376:	bf2c      	ite	cs
 8040378:	f04f 0901 	movcs.w	r9, #1
 804037c:	f04f 0900 	movcc.w	r9, #0
 8040380:	4288      	cmp	r0, r1
 8040382:	d903      	bls.n	804038c <__udivmoddi4+0x124>
 8040384:	f1b9 0f00 	cmp.w	r9, #0
 8040388:	f000 80cf 	beq.w	804052a <__udivmoddi4+0x2c2>
 804038c:	4642      	mov	r2, r8
 804038e:	1a09      	subs	r1, r1, r0
 8040390:	b2a4      	uxth	r4, r4
 8040392:	fbb1 f0fe 	udiv	r0, r1, lr
 8040396:	fb0e 1110 	mls	r1, lr, r0, r1
 804039a:	fb00 f707 	mul.w	r7, r0, r7
 804039e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80403a2:	42a7      	cmp	r7, r4
 80403a4:	d908      	bls.n	80403b8 <__udivmoddi4+0x150>
 80403a6:	eb1c 0404 	adds.w	r4, ip, r4
 80403aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80403ae:	d202      	bcs.n	80403b6 <__udivmoddi4+0x14e>
 80403b0:	42a7      	cmp	r7, r4
 80403b2:	f200 80b4 	bhi.w	804051e <__udivmoddi4+0x2b6>
 80403b6:	4608      	mov	r0, r1
 80403b8:	1be4      	subs	r4, r4, r7
 80403ba:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80403be:	e79b      	b.n	80402f8 <__udivmoddi4+0x90>
 80403c0:	f1c6 0720 	rsb	r7, r6, #32
 80403c4:	40b3      	lsls	r3, r6
 80403c6:	fa01 f406 	lsl.w	r4, r1, r6
 80403ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80403ce:	40f9      	lsrs	r1, r7
 80403d0:	40b2      	lsls	r2, r6
 80403d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80403d6:	fa20 f307 	lsr.w	r3, r0, r7
 80403da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80403de:	431c      	orrs	r4, r3
 80403e0:	fa1f fe8c 	uxth.w	lr, ip
 80403e4:	fa00 f306 	lsl.w	r3, r0, r6
 80403e8:	0c20      	lsrs	r0, r4, #16
 80403ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80403ee:	fb09 1118 	mls	r1, r9, r8, r1
 80403f2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80403f6:	fb08 f00e 	mul.w	r0, r8, lr
 80403fa:	4288      	cmp	r0, r1
 80403fc:	d90f      	bls.n	804041e <__udivmoddi4+0x1b6>
 80403fe:	eb1c 0101 	adds.w	r1, ip, r1
 8040402:	f108 3aff 	add.w	sl, r8, #4294967295
 8040406:	bf2c      	ite	cs
 8040408:	f04f 0b01 	movcs.w	fp, #1
 804040c:	f04f 0b00 	movcc.w	fp, #0
 8040410:	4288      	cmp	r0, r1
 8040412:	d903      	bls.n	804041c <__udivmoddi4+0x1b4>
 8040414:	f1bb 0f00 	cmp.w	fp, #0
 8040418:	f000 808d 	beq.w	8040536 <__udivmoddi4+0x2ce>
 804041c:	46d0      	mov	r8, sl
 804041e:	1a09      	subs	r1, r1, r0
 8040420:	b2a4      	uxth	r4, r4
 8040422:	fbb1 f0f9 	udiv	r0, r1, r9
 8040426:	fb09 1110 	mls	r1, r9, r0, r1
 804042a:	fb00 fe0e 	mul.w	lr, r0, lr
 804042e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040432:	458e      	cmp	lr, r1
 8040434:	d907      	bls.n	8040446 <__udivmoddi4+0x1de>
 8040436:	eb1c 0101 	adds.w	r1, ip, r1
 804043a:	f100 34ff 	add.w	r4, r0, #4294967295
 804043e:	d201      	bcs.n	8040444 <__udivmoddi4+0x1dc>
 8040440:	458e      	cmp	lr, r1
 8040442:	d87f      	bhi.n	8040544 <__udivmoddi4+0x2dc>
 8040444:	4620      	mov	r0, r4
 8040446:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 804044a:	eba1 010e 	sub.w	r1, r1, lr
 804044e:	fba0 9802 	umull	r9, r8, r0, r2
 8040452:	4541      	cmp	r1, r8
 8040454:	464c      	mov	r4, r9
 8040456:	46c6      	mov	lr, r8
 8040458:	d302      	bcc.n	8040460 <__udivmoddi4+0x1f8>
 804045a:	d106      	bne.n	804046a <__udivmoddi4+0x202>
 804045c:	454b      	cmp	r3, r9
 804045e:	d204      	bcs.n	804046a <__udivmoddi4+0x202>
 8040460:	3801      	subs	r0, #1
 8040462:	ebb9 0402 	subs.w	r4, r9, r2
 8040466:	eb68 0e0c 	sbc.w	lr, r8, ip
 804046a:	2d00      	cmp	r5, #0
 804046c:	d070      	beq.n	8040550 <__udivmoddi4+0x2e8>
 804046e:	1b1a      	subs	r2, r3, r4
 8040470:	eb61 010e 	sbc.w	r1, r1, lr
 8040474:	fa22 f306 	lsr.w	r3, r2, r6
 8040478:	fa01 f707 	lsl.w	r7, r1, r7
 804047c:	40f1      	lsrs	r1, r6
 804047e:	2600      	movs	r6, #0
 8040480:	431f      	orrs	r7, r3
 8040482:	e9c5 7100 	strd	r7, r1, [r5]
 8040486:	e73c      	b.n	8040302 <__udivmoddi4+0x9a>
 8040488:	fa02 fc03 	lsl.w	ip, r2, r3
 804048c:	f1c3 0020 	rsb	r0, r3, #32
 8040490:	fa01 f203 	lsl.w	r2, r1, r3
 8040494:	fa21 f600 	lsr.w	r6, r1, r0
 8040498:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 804049c:	fa24 f100 	lsr.w	r1, r4, r0
 80404a0:	fa1f f78c 	uxth.w	r7, ip
 80404a4:	409c      	lsls	r4, r3
 80404a6:	4311      	orrs	r1, r2
 80404a8:	fbb6 f0fe 	udiv	r0, r6, lr
 80404ac:	0c0a      	lsrs	r2, r1, #16
 80404ae:	fb0e 6610 	mls	r6, lr, r0, r6
 80404b2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80404b6:	fb00 f607 	mul.w	r6, r0, r7
 80404ba:	4296      	cmp	r6, r2
 80404bc:	d90e      	bls.n	80404dc <__udivmoddi4+0x274>
 80404be:	eb1c 0202 	adds.w	r2, ip, r2
 80404c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80404c6:	bf2c      	ite	cs
 80404c8:	f04f 0901 	movcs.w	r9, #1
 80404cc:	f04f 0900 	movcc.w	r9, #0
 80404d0:	4296      	cmp	r6, r2
 80404d2:	d902      	bls.n	80404da <__udivmoddi4+0x272>
 80404d4:	f1b9 0f00 	cmp.w	r9, #0
 80404d8:	d031      	beq.n	804053e <__udivmoddi4+0x2d6>
 80404da:	4640      	mov	r0, r8
 80404dc:	1b92      	subs	r2, r2, r6
 80404de:	b289      	uxth	r1, r1
 80404e0:	fbb2 f6fe 	udiv	r6, r2, lr
 80404e4:	fb0e 2216 	mls	r2, lr, r6, r2
 80404e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80404ec:	fb06 f207 	mul.w	r2, r6, r7
 80404f0:	428a      	cmp	r2, r1
 80404f2:	d907      	bls.n	8040504 <__udivmoddi4+0x29c>
 80404f4:	eb1c 0101 	adds.w	r1, ip, r1
 80404f8:	f106 38ff 	add.w	r8, r6, #4294967295
 80404fc:	d201      	bcs.n	8040502 <__udivmoddi4+0x29a>
 80404fe:	428a      	cmp	r2, r1
 8040500:	d823      	bhi.n	804054a <__udivmoddi4+0x2e2>
 8040502:	4646      	mov	r6, r8
 8040504:	1a89      	subs	r1, r1, r2
 8040506:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 804050a:	e725      	b.n	8040358 <__udivmoddi4+0xf0>
 804050c:	462e      	mov	r6, r5
 804050e:	4628      	mov	r0, r5
 8040510:	e6f7      	b.n	8040302 <__udivmoddi4+0x9a>
 8040512:	1a84      	subs	r4, r0, r2
 8040514:	eb61 0303 	sbc.w	r3, r1, r3
 8040518:	2001      	movs	r0, #1
 804051a:	461f      	mov	r7, r3
 804051c:	e70b      	b.n	8040336 <__udivmoddi4+0xce>
 804051e:	4464      	add	r4, ip
 8040520:	3802      	subs	r0, #2
 8040522:	e749      	b.n	80403b8 <__udivmoddi4+0x150>
 8040524:	4464      	add	r4, ip
 8040526:	3802      	subs	r0, #2
 8040528:	e6e1      	b.n	80402ee <__udivmoddi4+0x86>
 804052a:	3a02      	subs	r2, #2
 804052c:	4461      	add	r1, ip
 804052e:	e72e      	b.n	804038e <__udivmoddi4+0x126>
 8040530:	3e02      	subs	r6, #2
 8040532:	4462      	add	r2, ip
 8040534:	e6c6      	b.n	80402c4 <__udivmoddi4+0x5c>
 8040536:	f1a8 0802 	sub.w	r8, r8, #2
 804053a:	4461      	add	r1, ip
 804053c:	e76f      	b.n	804041e <__udivmoddi4+0x1b6>
 804053e:	3802      	subs	r0, #2
 8040540:	4462      	add	r2, ip
 8040542:	e7cb      	b.n	80404dc <__udivmoddi4+0x274>
 8040544:	3802      	subs	r0, #2
 8040546:	4461      	add	r1, ip
 8040548:	e77d      	b.n	8040446 <__udivmoddi4+0x1de>
 804054a:	3e02      	subs	r6, #2
 804054c:	4461      	add	r1, ip
 804054e:	e7d9      	b.n	8040504 <__udivmoddi4+0x29c>
 8040550:	462e      	mov	r6, r5
 8040552:	e6d6      	b.n	8040302 <__udivmoddi4+0x9a>

08040554 <__aeabi_idiv0>:
 8040554:	4770      	bx	lr
 8040556:	bf00      	nop

08040558 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8040558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040590 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 804055c:	f000 fad6 	bl	8040b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8040560:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8040562:	e003      	b.n	804056c <LoopCopyDataInit>

08040564 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8040564:	4b0b      	ldr	r3, [pc, #44]	; (8040594 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8040566:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8040568:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 804056a:	3104      	adds	r1, #4

0804056c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 804056c:	480a      	ldr	r0, [pc, #40]	; (8040598 <LoopForever+0xa>)
	ldr	r3, =_edata
 804056e:	4b0b      	ldr	r3, [pc, #44]	; (804059c <LoopForever+0xe>)
	adds	r2, r0, r1
 8040570:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8040572:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8040574:	d3f6      	bcc.n	8040564 <CopyDataInit>
	ldr	r2, =_sbss
 8040576:	4a0a      	ldr	r2, [pc, #40]	; (80405a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8040578:	e002      	b.n	8040580 <LoopFillZerobss>

0804057a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 804057a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 804057c:	f842 3b04 	str.w	r3, [r2], #4

08040580 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8040580:	4b08      	ldr	r3, [pc, #32]	; (80405a4 <LoopForever+0x16>)
	cmp	r2, r3
 8040582:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8040584:	d3f9      	bcc.n	804057a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8040586:	f002 fb7f 	bl	8042c88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 804058a:	f000 f865 	bl	8040658 <main>

0804058e <LoopForever>:

LoopForever:
    b LoopForever
 804058e:	e7fe      	b.n	804058e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8040590:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8040594:	08044c28 	.word	0x08044c28
	ldr	r0, =_sdata
 8040598:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 804059c:	20018070 	.word	0x20018070
	ldr	r2, =_sbss
 80405a0:	20018070 	.word	0x20018070
	ldr	r3, = _ebss
 80405a4:	20018138 	.word	0x20018138

080405a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80405a8:	e7fe      	b.n	80405a8 <ADC1_2_IRQHandler>
	...

080405ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80405ac:	b580      	push	{r7, lr}
 80405ae:	b088      	sub	sp, #32
 80405b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80405b2:	f107 030c 	add.w	r3, r7, #12
 80405b6:	2200      	movs	r2, #0
 80405b8:	601a      	str	r2, [r3, #0]
 80405ba:	605a      	str	r2, [r3, #4]
 80405bc:	609a      	str	r2, [r3, #8]
 80405be:	60da      	str	r2, [r3, #12]
 80405c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80405c2:	4b18      	ldr	r3, [pc, #96]	; (8040624 <MX_GPIO_Init+0x78>)
 80405c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80405c6:	4a17      	ldr	r2, [pc, #92]	; (8040624 <MX_GPIO_Init+0x78>)
 80405c8:	f043 0304 	orr.w	r3, r3, #4
 80405cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80405ce:	4b15      	ldr	r3, [pc, #84]	; (8040624 <MX_GPIO_Init+0x78>)
 80405d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80405d2:	f003 0304 	and.w	r3, r3, #4
 80405d6:	60bb      	str	r3, [r7, #8]
 80405d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80405da:	4b12      	ldr	r3, [pc, #72]	; (8040624 <MX_GPIO_Init+0x78>)
 80405dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80405de:	4a11      	ldr	r2, [pc, #68]	; (8040624 <MX_GPIO_Init+0x78>)
 80405e0:	f043 0308 	orr.w	r3, r3, #8
 80405e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80405e6:	4b0f      	ldr	r3, [pc, #60]	; (8040624 <MX_GPIO_Init+0x78>)
 80405e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80405ea:	f003 0308 	and.w	r3, r3, #8
 80405ee:	607b      	str	r3, [r7, #4]
 80405f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin;
 80405f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80405f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80405f8:	4b0b      	ldr	r3, [pc, #44]	; (8040628 <MX_GPIO_Init+0x7c>)
 80405fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80405fc:	2300      	movs	r3, #0
 80405fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_USER_GPIO_Port, &GPIO_InitStruct);
 8040600:	f107 030c 	add.w	r3, r7, #12
 8040604:	4619      	mov	r1, r3
 8040606:	4809      	ldr	r0, [pc, #36]	; (804062c <MX_GPIO_Init+0x80>)
 8040608:	f000 fc3e 	bl	8040e88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 7, 0);
 804060c:	2200      	movs	r2, #0
 804060e:	2107      	movs	r1, #7
 8040610:	2018      	movs	r0, #24
 8040612:	f000 fc04 	bl	8040e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8040616:	2018      	movs	r0, #24
 8040618:	f000 fc1b 	bl	8040e52 <HAL_NVIC_EnableIRQ>

}
 804061c:	bf00      	nop
 804061e:	3720      	adds	r7, #32
 8040620:	46bd      	mov	sp, r7
 8040622:	bd80      	pop	{r7, pc}
 8040624:	40021000 	.word	0x40021000
 8040628:	10110000 	.word	0x10110000
 804062c:	42020800 	.word	0x42020800

08040630 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8040630:	b580      	push	{r7, lr}
 8040632:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8040634:	2000      	movs	r0, #0
 8040636:	f000 fdd9 	bl	80411ec <HAL_ICACHE_ConfigAssociativityMode>
 804063a:	4603      	mov	r3, r0
 804063c:	2b00      	cmp	r3, #0
 804063e:	d001      	beq.n	8040644 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8040640:	f000 f8d6 	bl	80407f0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8040644:	f000 fdf2 	bl	804122c <HAL_ICACHE_Enable>
 8040648:	4603      	mov	r3, r0
 804064a:	2b00      	cmp	r3, #0
 804064c:	d001      	beq.n	8040652 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 804064e:	f000 f8cf 	bl	80407f0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8040652:	bf00      	nop
 8040654:	bd80      	pop	{r7, pc}
	...

08040658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040658:	b580      	push	{r7, lr}
 804065a:	b082      	sub	sp, #8
 804065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  int num;
	  int result;

  /* Register SecureFault callback defined in non-secure and to be called by secure handler */
  SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
 804065e:	491c      	ldr	r1, [pc, #112]	; (80406d0 <main+0x78>)
 8040660:	2000      	movs	r0, #0
 8040662:	f004 f965 	bl	8044930 <__SECURE_RegisterCallback_veneer>

  /* Register SecureError callback defined in non-secure and to be called by secure handler */
  SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
 8040666:	491b      	ldr	r1, [pc, #108]	; (80406d4 <main+0x7c>)
 8040668:	2001      	movs	r0, #1
 804066a:	f004 f961 	bl	8044930 <__SECURE_RegisterCallback_veneer>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 804066e:	f000 fa61 	bl	8040b34 <HAL_Init>

  /* USER CODE BEGIN Init */
  //setvbuf(stdin, NULL, _IONBF, 0);
  setbuf(stdin, NULL);
 8040672:	4b19      	ldr	r3, [pc, #100]	; (80406d8 <main+0x80>)
 8040674:	681b      	ldr	r3, [r3, #0]
 8040676:	685b      	ldr	r3, [r3, #4]
 8040678:	2100      	movs	r1, #0
 804067a:	4618      	mov	r0, r3
 804067c:	f002 fb48 	bl	8042d10 <setbuf>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040680:	f7ff ff94 	bl	80405ac <MX_GPIO_Init>
  MX_ICACHE_Init();
 8040684:	f7ff ffd4 	bl	8040630 <MX_ICACHE_Init>
  MX_USART3_UART_Init();
 8040688:	f000 f996 	bl	80409b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //PRINTF_NSE("Welcome in non-secure world!\r\n");
  //printf("Program has started!\r\n");
  PRINTF_NSE("Please Enter the Access Code: \r\n");
 804068c:	4813      	ldr	r0, [pc, #76]	; (80406dc <main+0x84>)
 804068e:	f004 f967 	bl	8044960 <__DbgConsole_Printf_NSE_veneer>
  //testCaseNumber2=SCANF_NSE();

	scanf("%d", &num);
 8040692:	463b      	mov	r3, r7
 8040694:	4619      	mov	r1, r3
 8040696:	4812      	ldr	r0, [pc, #72]	; (80406e0 <main+0x88>)
 8040698:	f002 fb22 	bl	8042ce0 <iscanf>



  //code is 3061998
  //uint32_t testCaseNumber=3061998
  result = PinCompare_NSE(num);
 804069c:	683b      	ldr	r3, [r7, #0]
 804069e:	4618      	mov	r0, r3
 80406a0:	f004 f93e 	bl	8044920 <__PinCompare_NSE_veneer>
 80406a4:	6078      	str	r0, [r7, #4]
  if (result == 1)
 80406a6:	687b      	ldr	r3, [r7, #4]
 80406a8:	2b01      	cmp	r3, #1
 80406aa:	d10b      	bne.n	80406c4 <main+0x6c>
  {
      PRINTF_NSE("Correct Code!\r\n");
 80406ac:	480d      	ldr	r0, [pc, #52]	; (80406e4 <main+0x8c>)
 80406ae:	f004 f957 	bl	8044960 <__DbgConsole_Printf_NSE_veneer>
      Access_ok_toggle();
 80406b2:	f004 f95d 	bl	8044970 <__Access_ok_toggle_veneer>
      HAL_Delay(5000);
 80406b6:	f241 3088 	movw	r0, #5000	; 0x1388
 80406ba:	f000 fab1 	bl	8040c20 <HAL_Delay>
      Access_ok_toggle();
 80406be:	f004 f957 	bl	8044970 <__Access_ok_toggle_veneer>
 80406c2:	e004      	b.n	80406ce <main+0x76>
  }
  else
  {
      PRINTF_NSE("Wrong Code!\r\n");
 80406c4:	4808      	ldr	r0, [pc, #32]	; (80406e8 <main+0x90>)
 80406c6:	f004 f94b 	bl	8044960 <__DbgConsole_Printf_NSE_veneer>
      Access_Nok_toggle();
 80406ca:	f004 f941 	bl	8044950 <__Access_Nok_toggle_veneer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80406ce:	e7fe      	b.n	80406ce <main+0x76>
 80406d0:	080407cd 	.word	0x080407cd
 80406d4:	080407e5 	.word	0x080407e5
 80406d8:	2001800c 	.word	0x2001800c
 80406dc:	08044980 	.word	0x08044980
 80406e0:	080449a4 	.word	0x080449a4
 80406e4:	080449a8 	.word	0x080449a8
 80406e8:	080449b8 	.word	0x080449b8

080406ec <__io_putchar>:
}

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 80406ec:	b580      	push	{r7, lr}
 80406ee:	b082      	sub	sp, #8
 80406f0:	af00      	add	r7, sp, #0
 80406f2:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 10) != HAL_OK)
 80406f4:	1d39      	adds	r1, r7, #4
 80406f6:	230a      	movs	r3, #10
 80406f8:	2201      	movs	r2, #1
 80406fa:	4807      	ldr	r0, [pc, #28]	; (8040718 <__io_putchar+0x2c>)
 80406fc:	f001 fbe4 	bl	8041ec8 <HAL_UART_Transmit>
 8040700:	4603      	mov	r3, r0
 8040702:	2b00      	cmp	r3, #0
 8040704:	d002      	beq.n	804070c <__io_putchar+0x20>
		return -1;
 8040706:	f04f 33ff 	mov.w	r3, #4294967295
 804070a:	e000      	b.n	804070e <__io_putchar+0x22>
	return ch;
 804070c:	687b      	ldr	r3, [r7, #4]
}
 804070e:	4618      	mov	r0, r3
 8040710:	3708      	adds	r7, #8
 8040712:	46bd      	mov	sp, r7
 8040714:	bd80      	pop	{r7, pc}
 8040716:	bf00      	nop
 8040718:	20018094 	.word	0x20018094

0804071c <__io_getchar>:

int __io_getchar(void)
{
 804071c:	b580      	push	{r7, lr}
 804071e:	b084      	sub	sp, #16
 8040720:	af00      	add	r7, sp, #0
	char data[4];
	uint8_t ch, len = 1;
 8040722:	2301      	movs	r3, #1
 8040724:	73fb      	strb	r3, [r7, #15]

	while(HAL_UART_Receive(&huart3, &ch, 1, 10) != HAL_OK)
 8040726:	bf00      	nop
 8040728:	1df9      	adds	r1, r7, #7
 804072a:	230a      	movs	r3, #10
 804072c:	2201      	movs	r2, #1
 804072e:	481e      	ldr	r0, [pc, #120]	; (80407a8 <__io_getchar+0x8c>)
 8040730:	f001 fc60 	bl	8041ff4 <HAL_UART_Receive>
 8040734:	4603      	mov	r3, r0
 8040736:	2b00      	cmp	r3, #0
 8040738:	d1f6      	bne.n	8040728 <__io_getchar+0xc>
	{
	}

	memset(data, 0x00, 4);
 804073a:	f107 0308 	add.w	r3, r7, #8
 804073e:	2204      	movs	r2, #4
 8040740:	2100      	movs	r1, #0
 8040742:	4618      	mov	r0, r3
 8040744:	f002 fac4 	bl	8042cd0 <memset>
	switch(ch)
 8040748:	79fb      	ldrb	r3, [r7, #7]
 804074a:	2b7f      	cmp	r3, #127	; 0x7f
 804074c:	d012      	beq.n	8040774 <__io_getchar+0x58>
 804074e:	2b7f      	cmp	r3, #127	; 0x7f
 8040750:	dc19      	bgt.n	8040786 <__io_getchar+0x6a>
 8040752:	2b0d      	cmp	r3, #13
 8040754:	d005      	beq.n	8040762 <__io_getchar+0x46>
 8040756:	2b0d      	cmp	r3, #13
 8040758:	dc15      	bgt.n	8040786 <__io_getchar+0x6a>
 804075a:	2b08      	cmp	r3, #8
 804075c:	d00a      	beq.n	8040774 <__io_getchar+0x58>
 804075e:	2b0a      	cmp	r3, #10
 8040760:	d111      	bne.n	8040786 <__io_getchar+0x6a>
	{
		case '\r':
		case '\n':
			len = 2;
 8040762:	2302      	movs	r3, #2
 8040764:	73fb      	strb	r3, [r7, #15]
			sprintf(data, "\r\n");
 8040766:	f107 0308 	add.w	r3, r7, #8
 804076a:	4910      	ldr	r1, [pc, #64]	; (80407ac <__io_getchar+0x90>)
 804076c:	4618      	mov	r0, r3
 804076e:	f002 fb9b 	bl	8042ea8 <siprintf>
			break;
 8040772:	e00b      	b.n	804078c <__io_getchar+0x70>

		case '\b':
		case 0x7F:
			len = 3;
 8040774:	2303      	movs	r3, #3
 8040776:	73fb      	strb	r3, [r7, #15]
			sprintf(data, "\b \b");
 8040778:	f107 0308 	add.w	r3, r7, #8
 804077c:	490c      	ldr	r1, [pc, #48]	; (80407b0 <__io_getchar+0x94>)
 804077e:	4618      	mov	r0, r3
 8040780:	f002 fb92 	bl	8042ea8 <siprintf>
			break;
 8040784:	e002      	b.n	804078c <__io_getchar+0x70>

		default:
			data[0] = ch;
 8040786:	79fb      	ldrb	r3, [r7, #7]
 8040788:	723b      	strb	r3, [r7, #8]
			break;
 804078a:	bf00      	nop
	}
	HAL_UART_Transmit(&huart3, (uint8_t *)data, len, 10);
 804078c:	7bfb      	ldrb	r3, [r7, #15]
 804078e:	b29a      	uxth	r2, r3
 8040790:	f107 0108 	add.w	r1, r7, #8
 8040794:	230a      	movs	r3, #10
 8040796:	4804      	ldr	r0, [pc, #16]	; (80407a8 <__io_getchar+0x8c>)
 8040798:	f001 fb96 	bl	8041ec8 <HAL_UART_Transmit>
	return ch;
 804079c:	79fb      	ldrb	r3, [r7, #7]
}
 804079e:	4618      	mov	r0, r3
 80407a0:	3710      	adds	r7, #16
 80407a2:	46bd      	mov	sp, r7
 80407a4:	bd80      	pop	{r7, pc}
 80407a6:	bf00      	nop
 80407a8:	20018094 	.word	0x20018094
 80407ac:	080449c8 	.word	0x080449c8
 80407b0:	080449cc 	.word	0x080449cc

080407b4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80407b4:	b480      	push	{r7}
 80407b6:	b083      	sub	sp, #12
 80407b8:	af00      	add	r7, sp, #0
 80407ba:	4603      	mov	r3, r0
 80407bc:	80fb      	strh	r3, [r7, #6]
//  if (GPIO_Pin == GPIO_PIN_13)
//  {
//	PRINTF_NSE("pleaser enter your ID");
//  }
}
 80407be:	bf00      	nop
 80407c0:	370c      	adds	r7, #12
 80407c2:	46bd      	mov	sp, r7
 80407c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407c8:	4770      	bx	lr
	...

080407cc <SecureFault_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
  * @retval None
  */
void SecureFault_Callback(void)
{
 80407cc:	b580      	push	{r7, lr}
 80407ce:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure fault generated by IDAU/SAU check */
  /* because of illegal access */
  IllegalMemoryAccessDetected = 1U;
 80407d0:	4b03      	ldr	r3, [pc, #12]	; (80407e0 <SecureFault_Callback+0x14>)
 80407d2:	2201      	movs	r2, #1
 80407d4:	601a      	str	r2, [r3, #0]

  Error_Handler();
 80407d6:	f000 f80b 	bl	80407f0 <Error_Handler>
}
 80407da:	bf00      	nop
 80407dc:	bd80      	pop	{r7, pc}
 80407de:	bf00      	nop
 80407e0:	2001808c 	.word	0x2001808c

080407e4 <SecureError_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
  * @retval None
  */
void SecureError_Callback(void)
{
 80407e4:	b580      	push	{r7, lr}
 80407e6:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure error generated by GTZC check */
  /* because of illegal access */

  Error_Handler();
 80407e8:	f000 f802 	bl	80407f0 <Error_Handler>
}
 80407ec:	bf00      	nop
 80407ee:	bd80      	pop	{r7, pc}

080407f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80407f0:	b480      	push	{r7}
 80407f2:	af00      	add	r7, sp, #0
  /* LED3 on */
  //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
  /*Message error*/

  /* Infinite loop */
  while (1)
 80407f4:	e7fe      	b.n	80407f4 <Error_Handler+0x4>
	...

080407f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80407f8:	b480      	push	{r7}
 80407fa:	b083      	sub	sp, #12
 80407fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80407fe:	4b0f      	ldr	r3, [pc, #60]	; (804083c <HAL_MspInit+0x44>)
 8040800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040802:	4a0e      	ldr	r2, [pc, #56]	; (804083c <HAL_MspInit+0x44>)
 8040804:	f043 0301 	orr.w	r3, r3, #1
 8040808:	6613      	str	r3, [r2, #96]	; 0x60
 804080a:	4b0c      	ldr	r3, [pc, #48]	; (804083c <HAL_MspInit+0x44>)
 804080c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804080e:	f003 0301 	and.w	r3, r3, #1
 8040812:	607b      	str	r3, [r7, #4]
 8040814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040816:	4b09      	ldr	r3, [pc, #36]	; (804083c <HAL_MspInit+0x44>)
 8040818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804081a:	4a08      	ldr	r2, [pc, #32]	; (804083c <HAL_MspInit+0x44>)
 804081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040820:	6593      	str	r3, [r2, #88]	; 0x58
 8040822:	4b06      	ldr	r3, [pc, #24]	; (804083c <HAL_MspInit+0x44>)
 8040824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804082a:	603b      	str	r3, [r7, #0]
 804082c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 804082e:	bf00      	nop
 8040830:	370c      	adds	r7, #12
 8040832:	46bd      	mov	sp, r7
 8040834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040838:	4770      	bx	lr
 804083a:	bf00      	nop
 804083c:	40021000 	.word	0x40021000

08040840 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040840:	b480      	push	{r7}
 8040842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040844:	e7fe      	b.n	8040844 <MemManage_Handler+0x4>

08040846 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040846:	b480      	push	{r7}
 8040848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 804084a:	e7fe      	b.n	804084a <UsageFault_Handler+0x4>

0804084c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 804084c:	b480      	push	{r7}
 804084e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040850:	bf00      	nop
 8040852:	46bd      	mov	sp, r7
 8040854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040858:	4770      	bx	lr

0804085a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 804085a:	b480      	push	{r7}
 804085c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 804085e:	bf00      	nop
 8040860:	46bd      	mov	sp, r7
 8040862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040866:	4770      	bx	lr

08040868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040868:	b580      	push	{r7, lr}
 804086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 804086c:	f000 f9b8 	bl	8040be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040870:	bf00      	nop
 8040872:	bd80      	pop	{r7, pc}

08040874 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8040874:	b580      	push	{r7, lr}
 8040876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_Pin);
 8040878:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 804087c:	f000 fc84 	bl	8041188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8040880:	bf00      	nop
 8040882:	bd80      	pop	{r7, pc}

08040884 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8040884:	b580      	push	{r7, lr}
 8040886:	b086      	sub	sp, #24
 8040888:	af00      	add	r7, sp, #0
 804088a:	60f8      	str	r0, [r7, #12]
 804088c:	60b9      	str	r1, [r7, #8]
 804088e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040890:	2300      	movs	r3, #0
 8040892:	617b      	str	r3, [r7, #20]
 8040894:	e00a      	b.n	80408ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8040896:	f7ff ff41 	bl	804071c <__io_getchar>
 804089a:	4601      	mov	r1, r0
 804089c:	68bb      	ldr	r3, [r7, #8]
 804089e:	1c5a      	adds	r2, r3, #1
 80408a0:	60ba      	str	r2, [r7, #8]
 80408a2:	b2ca      	uxtb	r2, r1
 80408a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80408a6:	697b      	ldr	r3, [r7, #20]
 80408a8:	3301      	adds	r3, #1
 80408aa:	617b      	str	r3, [r7, #20]
 80408ac:	697a      	ldr	r2, [r7, #20]
 80408ae:	687b      	ldr	r3, [r7, #4]
 80408b0:	429a      	cmp	r2, r3
 80408b2:	dbf0      	blt.n	8040896 <_read+0x12>
	}

return len;
 80408b4:	687b      	ldr	r3, [r7, #4]
}
 80408b6:	4618      	mov	r0, r3
 80408b8:	3718      	adds	r7, #24
 80408ba:	46bd      	mov	sp, r7
 80408bc:	bd80      	pop	{r7, pc}

080408be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80408be:	b580      	push	{r7, lr}
 80408c0:	b086      	sub	sp, #24
 80408c2:	af00      	add	r7, sp, #0
 80408c4:	60f8      	str	r0, [r7, #12]
 80408c6:	60b9      	str	r1, [r7, #8]
 80408c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80408ca:	2300      	movs	r3, #0
 80408cc:	617b      	str	r3, [r7, #20]
 80408ce:	e009      	b.n	80408e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80408d0:	68bb      	ldr	r3, [r7, #8]
 80408d2:	1c5a      	adds	r2, r3, #1
 80408d4:	60ba      	str	r2, [r7, #8]
 80408d6:	781b      	ldrb	r3, [r3, #0]
 80408d8:	4618      	mov	r0, r3
 80408da:	f7ff ff07 	bl	80406ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80408de:	697b      	ldr	r3, [r7, #20]
 80408e0:	3301      	adds	r3, #1
 80408e2:	617b      	str	r3, [r7, #20]
 80408e4:	697a      	ldr	r2, [r7, #20]
 80408e6:	687b      	ldr	r3, [r7, #4]
 80408e8:	429a      	cmp	r2, r3
 80408ea:	dbf1      	blt.n	80408d0 <_write+0x12>
	}
	return len;
 80408ec:	687b      	ldr	r3, [r7, #4]
}
 80408ee:	4618      	mov	r0, r3
 80408f0:	3718      	adds	r7, #24
 80408f2:	46bd      	mov	sp, r7
 80408f4:	bd80      	pop	{r7, pc}

080408f6 <_close>:

int _close(int file)
{
 80408f6:	b480      	push	{r7}
 80408f8:	b083      	sub	sp, #12
 80408fa:	af00      	add	r7, sp, #0
 80408fc:	6078      	str	r0, [r7, #4]
	return -1;
 80408fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8040902:	4618      	mov	r0, r3
 8040904:	370c      	adds	r7, #12
 8040906:	46bd      	mov	sp, r7
 8040908:	f85d 7b04 	ldr.w	r7, [sp], #4
 804090c:	4770      	bx	lr

0804090e <_fstat>:


int _fstat(int file, struct stat *st)
{
 804090e:	b480      	push	{r7}
 8040910:	b083      	sub	sp, #12
 8040912:	af00      	add	r7, sp, #0
 8040914:	6078      	str	r0, [r7, #4]
 8040916:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8040918:	683b      	ldr	r3, [r7, #0]
 804091a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 804091e:	605a      	str	r2, [r3, #4]
	return 0;
 8040920:	2300      	movs	r3, #0
}
 8040922:	4618      	mov	r0, r3
 8040924:	370c      	adds	r7, #12
 8040926:	46bd      	mov	sp, r7
 8040928:	f85d 7b04 	ldr.w	r7, [sp], #4
 804092c:	4770      	bx	lr

0804092e <_isatty>:

int _isatty(int file)
{
 804092e:	b480      	push	{r7}
 8040930:	b083      	sub	sp, #12
 8040932:	af00      	add	r7, sp, #0
 8040934:	6078      	str	r0, [r7, #4]
	return 1;
 8040936:	2301      	movs	r3, #1
}
 8040938:	4618      	mov	r0, r3
 804093a:	370c      	adds	r7, #12
 804093c:	46bd      	mov	sp, r7
 804093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040942:	4770      	bx	lr

08040944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8040944:	b480      	push	{r7}
 8040946:	b085      	sub	sp, #20
 8040948:	af00      	add	r7, sp, #0
 804094a:	60f8      	str	r0, [r7, #12]
 804094c:	60b9      	str	r1, [r7, #8]
 804094e:	607a      	str	r2, [r7, #4]
	return 0;
 8040950:	2300      	movs	r3, #0
}
 8040952:	4618      	mov	r0, r3
 8040954:	3714      	adds	r7, #20
 8040956:	46bd      	mov	sp, r7
 8040958:	f85d 7b04 	ldr.w	r7, [sp], #4
 804095c:	4770      	bx	lr
	...

08040960 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8040960:	b580      	push	{r7, lr}
 8040962:	b084      	sub	sp, #16
 8040964:	af00      	add	r7, sp, #0
 8040966:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8040968:	4b11      	ldr	r3, [pc, #68]	; (80409b0 <_sbrk+0x50>)
 804096a:	681b      	ldr	r3, [r3, #0]
 804096c:	2b00      	cmp	r3, #0
 804096e:	d102      	bne.n	8040976 <_sbrk+0x16>
		heap_end = &end;
 8040970:	4b0f      	ldr	r3, [pc, #60]	; (80409b0 <_sbrk+0x50>)
 8040972:	4a10      	ldr	r2, [pc, #64]	; (80409b4 <_sbrk+0x54>)
 8040974:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8040976:	4b0e      	ldr	r3, [pc, #56]	; (80409b0 <_sbrk+0x50>)
 8040978:	681b      	ldr	r3, [r3, #0]
 804097a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 804097c:	4b0c      	ldr	r3, [pc, #48]	; (80409b0 <_sbrk+0x50>)
 804097e:	681a      	ldr	r2, [r3, #0]
 8040980:	687b      	ldr	r3, [r7, #4]
 8040982:	4413      	add	r3, r2
 8040984:	466a      	mov	r2, sp
 8040986:	4293      	cmp	r3, r2
 8040988:	d907      	bls.n	804099a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 804098a:	f002 f977 	bl	8042c7c <__errno>
 804098e:	4603      	mov	r3, r0
 8040990:	220c      	movs	r2, #12
 8040992:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8040994:	f04f 33ff 	mov.w	r3, #4294967295
 8040998:	e006      	b.n	80409a8 <_sbrk+0x48>
	}

	heap_end += incr;
 804099a:	4b05      	ldr	r3, [pc, #20]	; (80409b0 <_sbrk+0x50>)
 804099c:	681a      	ldr	r2, [r3, #0]
 804099e:	687b      	ldr	r3, [r7, #4]
 80409a0:	4413      	add	r3, r2
 80409a2:	4a03      	ldr	r2, [pc, #12]	; (80409b0 <_sbrk+0x50>)
 80409a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80409a6:	68fb      	ldr	r3, [r7, #12]
}
 80409a8:	4618      	mov	r0, r3
 80409aa:	3710      	adds	r7, #16
 80409ac:	46bd      	mov	sp, r7
 80409ae:	bd80      	pop	{r7, pc}
 80409b0:	20018090 	.word	0x20018090
 80409b4:	20018138 	.word	0x20018138

080409b8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80409b8:	b580      	push	{r7, lr}
 80409ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80409bc:	4b22      	ldr	r3, [pc, #136]	; (8040a48 <MX_USART3_UART_Init+0x90>)
 80409be:	4a23      	ldr	r2, [pc, #140]	; (8040a4c <MX_USART3_UART_Init+0x94>)
 80409c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80409c2:	4b21      	ldr	r3, [pc, #132]	; (8040a48 <MX_USART3_UART_Init+0x90>)
 80409c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80409c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80409ca:	4b1f      	ldr	r3, [pc, #124]	; (8040a48 <MX_USART3_UART_Init+0x90>)
 80409cc:	2200      	movs	r2, #0
 80409ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80409d0:	4b1d      	ldr	r3, [pc, #116]	; (8040a48 <MX_USART3_UART_Init+0x90>)
 80409d2:	2200      	movs	r2, #0
 80409d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80409d6:	4b1c      	ldr	r3, [pc, #112]	; (8040a48 <MX_USART3_UART_Init+0x90>)
 80409d8:	2200      	movs	r2, #0
 80409da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80409dc:	4b1a      	ldr	r3, [pc, #104]	; (8040a48 <MX_USART3_UART_Init+0x90>)
 80409de:	220c      	movs	r2, #12
 80409e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80409e2:	4b19      	ldr	r3, [pc, #100]	; (8040a48 <MX_USART3_UART_Init+0x90>)
 80409e4:	2200      	movs	r2, #0
 80409e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80409e8:	4b17      	ldr	r3, [pc, #92]	; (8040a48 <MX_USART3_UART_Init+0x90>)
 80409ea:	2200      	movs	r2, #0
 80409ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80409ee:	4b16      	ldr	r3, [pc, #88]	; (8040a48 <MX_USART3_UART_Init+0x90>)
 80409f0:	2200      	movs	r2, #0
 80409f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80409f4:	4b14      	ldr	r3, [pc, #80]	; (8040a48 <MX_USART3_UART_Init+0x90>)
 80409f6:	2200      	movs	r2, #0
 80409f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80409fa:	4b13      	ldr	r3, [pc, #76]	; (8040a48 <MX_USART3_UART_Init+0x90>)
 80409fc:	2200      	movs	r2, #0
 80409fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8040a00:	4811      	ldr	r0, [pc, #68]	; (8040a48 <MX_USART3_UART_Init+0x90>)
 8040a02:	f001 fa11 	bl	8041e28 <HAL_UART_Init>
 8040a06:	4603      	mov	r3, r0
 8040a08:	2b00      	cmp	r3, #0
 8040a0a:	d001      	beq.n	8040a10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8040a0c:	f7ff fef0 	bl	80407f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040a10:	2100      	movs	r1, #0
 8040a12:	480d      	ldr	r0, [pc, #52]	; (8040a48 <MX_USART3_UART_Init+0x90>)
 8040a14:	f002 f868 	bl	8042ae8 <HAL_UARTEx_SetTxFifoThreshold>
 8040a18:	4603      	mov	r3, r0
 8040a1a:	2b00      	cmp	r3, #0
 8040a1c:	d001      	beq.n	8040a22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8040a1e:	f7ff fee7 	bl	80407f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040a22:	2100      	movs	r1, #0
 8040a24:	4808      	ldr	r0, [pc, #32]	; (8040a48 <MX_USART3_UART_Init+0x90>)
 8040a26:	f002 f89d 	bl	8042b64 <HAL_UARTEx_SetRxFifoThreshold>
 8040a2a:	4603      	mov	r3, r0
 8040a2c:	2b00      	cmp	r3, #0
 8040a2e:	d001      	beq.n	8040a34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8040a30:	f7ff fede 	bl	80407f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8040a34:	4804      	ldr	r0, [pc, #16]	; (8040a48 <MX_USART3_UART_Init+0x90>)
 8040a36:	f002 f81e 	bl	8042a76 <HAL_UARTEx_DisableFifoMode>
 8040a3a:	4603      	mov	r3, r0
 8040a3c:	2b00      	cmp	r3, #0
 8040a3e:	d001      	beq.n	8040a44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8040a40:	f7ff fed6 	bl	80407f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8040a44:	bf00      	nop
 8040a46:	bd80      	pop	{r7, pc}
 8040a48:	20018094 	.word	0x20018094
 8040a4c:	40004800 	.word	0x40004800

08040a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8040a50:	b580      	push	{r7, lr}
 8040a52:	b0ae      	sub	sp, #184	; 0xb8
 8040a54:	af00      	add	r7, sp, #0
 8040a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040a58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040a5c:	2200      	movs	r2, #0
 8040a5e:	601a      	str	r2, [r3, #0]
 8040a60:	605a      	str	r2, [r3, #4]
 8040a62:	609a      	str	r2, [r3, #8]
 8040a64:	60da      	str	r2, [r3, #12]
 8040a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8040a68:	f107 0310 	add.w	r3, r7, #16
 8040a6c:	2294      	movs	r2, #148	; 0x94
 8040a6e:	2100      	movs	r1, #0
 8040a70:	4618      	mov	r0, r3
 8040a72:	f002 f92d 	bl	8042cd0 <memset>
  if(uartHandle->Instance==USART3)
 8040a76:	687b      	ldr	r3, [r7, #4]
 8040a78:	681b      	ldr	r3, [r3, #0]
 8040a7a:	4a21      	ldr	r2, [pc, #132]	; (8040b00 <HAL_UART_MspInit+0xb0>)
 8040a7c:	4293      	cmp	r3, r2
 8040a7e:	d13b      	bne.n	8040af8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8040a80:	2304      	movs	r3, #4
 8040a82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8040a84:	2300      	movs	r3, #0
 8040a86:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040a88:	f107 0310 	add.w	r3, r7, #16
 8040a8c:	4618      	mov	r0, r3
 8040a8e:	f000 fcb5 	bl	80413fc <HAL_RCCEx_PeriphCLKConfig>
 8040a92:	4603      	mov	r3, r0
 8040a94:	2b00      	cmp	r3, #0
 8040a96:	d001      	beq.n	8040a9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8040a98:	f7ff feaa 	bl	80407f0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8040a9c:	4b19      	ldr	r3, [pc, #100]	; (8040b04 <HAL_UART_MspInit+0xb4>)
 8040a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040aa0:	4a18      	ldr	r2, [pc, #96]	; (8040b04 <HAL_UART_MspInit+0xb4>)
 8040aa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8040aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8040aa8:	4b16      	ldr	r3, [pc, #88]	; (8040b04 <HAL_UART_MspInit+0xb4>)
 8040aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8040ab0:	60fb      	str	r3, [r7, #12]
 8040ab2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8040ab4:	4b13      	ldr	r3, [pc, #76]	; (8040b04 <HAL_UART_MspInit+0xb4>)
 8040ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040ab8:	4a12      	ldr	r2, [pc, #72]	; (8040b04 <HAL_UART_MspInit+0xb4>)
 8040aba:	f043 0308 	orr.w	r3, r3, #8
 8040abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040ac0:	4b10      	ldr	r3, [pc, #64]	; (8040b04 <HAL_UART_MspInit+0xb4>)
 8040ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040ac4:	f003 0308 	and.w	r3, r3, #8
 8040ac8:	60bb      	str	r3, [r7, #8]
 8040aca:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8040acc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8040ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040ad4:	2302      	movs	r3, #2
 8040ad6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040ada:	2300      	movs	r3, #0
 8040adc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040ae0:	2300      	movs	r3, #0
 8040ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8040ae6:	2307      	movs	r3, #7
 8040ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040aec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040af0:	4619      	mov	r1, r3
 8040af2:	4805      	ldr	r0, [pc, #20]	; (8040b08 <HAL_UART_MspInit+0xb8>)
 8040af4:	f000 f9c8 	bl	8040e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8040af8:	bf00      	nop
 8040afa:	37b8      	adds	r7, #184	; 0xb8
 8040afc:	46bd      	mov	sp, r7
 8040afe:	bd80      	pop	{r7, pc}
 8040b00:	40004800 	.word	0x40004800
 8040b04:	40021000 	.word	0x40021000
 8040b08:	42020c00 	.word	0x42020c00

08040b0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8040b0c:	b480      	push	{r7}
 8040b0e:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8040b10:	bf00      	nop
 8040b12:	46bd      	mov	sp, r7
 8040b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b18:	4770      	bx	lr
	...

08040b1c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8040b1c:	b580      	push	{r7, lr}
 8040b1e:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8040b20:	f003 ff0e 	bl	8044940 <__SECURE_SystemCoreClockUpdate_veneer>
 8040b24:	4603      	mov	r3, r0
 8040b26:	4a02      	ldr	r2, [pc, #8]	; (8040b30 <SystemCoreClockUpdate+0x14>)
 8040b28:	6013      	str	r3, [r2, #0]
}
 8040b2a:	bf00      	nop
 8040b2c:	bd80      	pop	{r7, pc}
 8040b2e:	bf00      	nop
 8040b30:	20018000 	.word	0x20018000

08040b34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040b34:	b580      	push	{r7, lr}
 8040b36:	b082      	sub	sp, #8
 8040b38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8040b3a:	2300      	movs	r3, #0
 8040b3c:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8040b3e:	2004      	movs	r0, #4
 8040b40:	f000 f962 	bl	8040e08 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8040b44:	f7ff ffea 	bl	8040b1c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040b48:	2000      	movs	r0, #0
 8040b4a:	f000 f80d 	bl	8040b68 <HAL_InitTick>
 8040b4e:	4603      	mov	r3, r0
 8040b50:	2b00      	cmp	r3, #0
 8040b52:	d002      	beq.n	8040b5a <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8040b54:	2301      	movs	r3, #1
 8040b56:	71fb      	strb	r3, [r7, #7]
 8040b58:	e001      	b.n	8040b5e <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8040b5a:	f7ff fe4d 	bl	80407f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8040b5e:	79fb      	ldrb	r3, [r7, #7]
}
 8040b60:	4618      	mov	r0, r3
 8040b62:	3708      	adds	r7, #8
 8040b64:	46bd      	mov	sp, r7
 8040b66:	bd80      	pop	{r7, pc}

08040b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040b68:	b580      	push	{r7, lr}
 8040b6a:	b084      	sub	sp, #16
 8040b6c:	af00      	add	r7, sp, #0
 8040b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8040b70:	2300      	movs	r3, #0
 8040b72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8040b74:	4b17      	ldr	r3, [pc, #92]	; (8040bd4 <HAL_InitTick+0x6c>)
 8040b76:	781b      	ldrb	r3, [r3, #0]
 8040b78:	2b00      	cmp	r3, #0
 8040b7a:	d023      	beq.n	8040bc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8040b7c:	4b16      	ldr	r3, [pc, #88]	; (8040bd8 <HAL_InitTick+0x70>)
 8040b7e:	681a      	ldr	r2, [r3, #0]
 8040b80:	4b14      	ldr	r3, [pc, #80]	; (8040bd4 <HAL_InitTick+0x6c>)
 8040b82:	781b      	ldrb	r3, [r3, #0]
 8040b84:	4619      	mov	r1, r3
 8040b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8040b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8040b92:	4618      	mov	r0, r3
 8040b94:	f000 f96b 	bl	8040e6e <HAL_SYSTICK_Config>
 8040b98:	4603      	mov	r3, r0
 8040b9a:	2b00      	cmp	r3, #0
 8040b9c:	d10f      	bne.n	8040bbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040b9e:	687b      	ldr	r3, [r7, #4]
 8040ba0:	2b07      	cmp	r3, #7
 8040ba2:	d809      	bhi.n	8040bb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040ba4:	2200      	movs	r2, #0
 8040ba6:	6879      	ldr	r1, [r7, #4]
 8040ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8040bac:	f000 f937 	bl	8040e1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8040bb0:	4a0a      	ldr	r2, [pc, #40]	; (8040bdc <HAL_InitTick+0x74>)
 8040bb2:	687b      	ldr	r3, [r7, #4]
 8040bb4:	6013      	str	r3, [r2, #0]
 8040bb6:	e007      	b.n	8040bc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8040bb8:	2301      	movs	r3, #1
 8040bba:	73fb      	strb	r3, [r7, #15]
 8040bbc:	e004      	b.n	8040bc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8040bbe:	2301      	movs	r3, #1
 8040bc0:	73fb      	strb	r3, [r7, #15]
 8040bc2:	e001      	b.n	8040bc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8040bc4:	2301      	movs	r3, #1
 8040bc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8040bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8040bca:	4618      	mov	r0, r3
 8040bcc:	3710      	adds	r7, #16
 8040bce:	46bd      	mov	sp, r7
 8040bd0:	bd80      	pop	{r7, pc}
 8040bd2:	bf00      	nop
 8040bd4:	20018008 	.word	0x20018008
 8040bd8:	20018000 	.word	0x20018000
 8040bdc:	20018004 	.word	0x20018004

08040be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040be0:	b480      	push	{r7}
 8040be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8040be4:	4b06      	ldr	r3, [pc, #24]	; (8040c00 <HAL_IncTick+0x20>)
 8040be6:	781b      	ldrb	r3, [r3, #0]
 8040be8:	461a      	mov	r2, r3
 8040bea:	4b06      	ldr	r3, [pc, #24]	; (8040c04 <HAL_IncTick+0x24>)
 8040bec:	681b      	ldr	r3, [r3, #0]
 8040bee:	4413      	add	r3, r2
 8040bf0:	4a04      	ldr	r2, [pc, #16]	; (8040c04 <HAL_IncTick+0x24>)
 8040bf2:	6013      	str	r3, [r2, #0]
}
 8040bf4:	bf00      	nop
 8040bf6:	46bd      	mov	sp, r7
 8040bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bfc:	4770      	bx	lr
 8040bfe:	bf00      	nop
 8040c00:	20018008 	.word	0x20018008
 8040c04:	20018124 	.word	0x20018124

08040c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040c08:	b480      	push	{r7}
 8040c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8040c0c:	4b03      	ldr	r3, [pc, #12]	; (8040c1c <HAL_GetTick+0x14>)
 8040c0e:	681b      	ldr	r3, [r3, #0]
}
 8040c10:	4618      	mov	r0, r3
 8040c12:	46bd      	mov	sp, r7
 8040c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c18:	4770      	bx	lr
 8040c1a:	bf00      	nop
 8040c1c:	20018124 	.word	0x20018124

08040c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040c20:	b580      	push	{r7, lr}
 8040c22:	b084      	sub	sp, #16
 8040c24:	af00      	add	r7, sp, #0
 8040c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040c28:	f7ff ffee 	bl	8040c08 <HAL_GetTick>
 8040c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040c2e:	687b      	ldr	r3, [r7, #4]
 8040c30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040c32:	68fb      	ldr	r3, [r7, #12]
 8040c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040c38:	d005      	beq.n	8040c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8040c3a:	4b0a      	ldr	r3, [pc, #40]	; (8040c64 <HAL_Delay+0x44>)
 8040c3c:	781b      	ldrb	r3, [r3, #0]
 8040c3e:	461a      	mov	r2, r3
 8040c40:	68fb      	ldr	r3, [r7, #12]
 8040c42:	4413      	add	r3, r2
 8040c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8040c46:	bf00      	nop
 8040c48:	f7ff ffde 	bl	8040c08 <HAL_GetTick>
 8040c4c:	4602      	mov	r2, r0
 8040c4e:	68bb      	ldr	r3, [r7, #8]
 8040c50:	1ad3      	subs	r3, r2, r3
 8040c52:	68fa      	ldr	r2, [r7, #12]
 8040c54:	429a      	cmp	r2, r3
 8040c56:	d8f7      	bhi.n	8040c48 <HAL_Delay+0x28>
  {
  }
}
 8040c58:	bf00      	nop
 8040c5a:	bf00      	nop
 8040c5c:	3710      	adds	r7, #16
 8040c5e:	46bd      	mov	sp, r7
 8040c60:	bd80      	pop	{r7, pc}
 8040c62:	bf00      	nop
 8040c64:	20018008 	.word	0x20018008

08040c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040c68:	b480      	push	{r7}
 8040c6a:	b085      	sub	sp, #20
 8040c6c:	af00      	add	r7, sp, #0
 8040c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040c70:	687b      	ldr	r3, [r7, #4]
 8040c72:	f003 0307 	and.w	r3, r3, #7
 8040c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040c78:	4b0c      	ldr	r3, [pc, #48]	; (8040cac <__NVIC_SetPriorityGrouping+0x44>)
 8040c7a:	68db      	ldr	r3, [r3, #12]
 8040c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040c7e:	68ba      	ldr	r2, [r7, #8]
 8040c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040c84:	4013      	ands	r3, r2
 8040c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040c88:	68fb      	ldr	r3, [r7, #12]
 8040c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040c8c:	68bb      	ldr	r3, [r7, #8]
 8040c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040c9a:	4a04      	ldr	r2, [pc, #16]	; (8040cac <__NVIC_SetPriorityGrouping+0x44>)
 8040c9c:	68bb      	ldr	r3, [r7, #8]
 8040c9e:	60d3      	str	r3, [r2, #12]
}
 8040ca0:	bf00      	nop
 8040ca2:	3714      	adds	r7, #20
 8040ca4:	46bd      	mov	sp, r7
 8040ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040caa:	4770      	bx	lr
 8040cac:	e000ed00 	.word	0xe000ed00

08040cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040cb0:	b480      	push	{r7}
 8040cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040cb4:	4b04      	ldr	r3, [pc, #16]	; (8040cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8040cb6:	68db      	ldr	r3, [r3, #12]
 8040cb8:	0a1b      	lsrs	r3, r3, #8
 8040cba:	f003 0307 	and.w	r3, r3, #7
}
 8040cbe:	4618      	mov	r0, r3
 8040cc0:	46bd      	mov	sp, r7
 8040cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cc6:	4770      	bx	lr
 8040cc8:	e000ed00 	.word	0xe000ed00

08040ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040ccc:	b480      	push	{r7}
 8040cce:	b083      	sub	sp, #12
 8040cd0:	af00      	add	r7, sp, #0
 8040cd2:	4603      	mov	r3, r0
 8040cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040cda:	2b00      	cmp	r3, #0
 8040cdc:	db0b      	blt.n	8040cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8040cde:	79fb      	ldrb	r3, [r7, #7]
 8040ce0:	f003 021f 	and.w	r2, r3, #31
 8040ce4:	4907      	ldr	r1, [pc, #28]	; (8040d04 <__NVIC_EnableIRQ+0x38>)
 8040ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040cea:	095b      	lsrs	r3, r3, #5
 8040cec:	2001      	movs	r0, #1
 8040cee:	fa00 f202 	lsl.w	r2, r0, r2
 8040cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8040cf6:	bf00      	nop
 8040cf8:	370c      	adds	r7, #12
 8040cfa:	46bd      	mov	sp, r7
 8040cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d00:	4770      	bx	lr
 8040d02:	bf00      	nop
 8040d04:	e000e100 	.word	0xe000e100

08040d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040d08:	b480      	push	{r7}
 8040d0a:	b083      	sub	sp, #12
 8040d0c:	af00      	add	r7, sp, #0
 8040d0e:	4603      	mov	r3, r0
 8040d10:	6039      	str	r1, [r7, #0]
 8040d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040d18:	2b00      	cmp	r3, #0
 8040d1a:	db0a      	blt.n	8040d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040d1c:	683b      	ldr	r3, [r7, #0]
 8040d1e:	b2da      	uxtb	r2, r3
 8040d20:	490c      	ldr	r1, [pc, #48]	; (8040d54 <__NVIC_SetPriority+0x4c>)
 8040d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040d26:	0152      	lsls	r2, r2, #5
 8040d28:	b2d2      	uxtb	r2, r2
 8040d2a:	440b      	add	r3, r1
 8040d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040d30:	e00a      	b.n	8040d48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040d32:	683b      	ldr	r3, [r7, #0]
 8040d34:	b2da      	uxtb	r2, r3
 8040d36:	4908      	ldr	r1, [pc, #32]	; (8040d58 <__NVIC_SetPriority+0x50>)
 8040d38:	79fb      	ldrb	r3, [r7, #7]
 8040d3a:	f003 030f 	and.w	r3, r3, #15
 8040d3e:	3b04      	subs	r3, #4
 8040d40:	0152      	lsls	r2, r2, #5
 8040d42:	b2d2      	uxtb	r2, r2
 8040d44:	440b      	add	r3, r1
 8040d46:	761a      	strb	r2, [r3, #24]
}
 8040d48:	bf00      	nop
 8040d4a:	370c      	adds	r7, #12
 8040d4c:	46bd      	mov	sp, r7
 8040d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d52:	4770      	bx	lr
 8040d54:	e000e100 	.word	0xe000e100
 8040d58:	e000ed00 	.word	0xe000ed00

08040d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040d5c:	b480      	push	{r7}
 8040d5e:	b089      	sub	sp, #36	; 0x24
 8040d60:	af00      	add	r7, sp, #0
 8040d62:	60f8      	str	r0, [r7, #12]
 8040d64:	60b9      	str	r1, [r7, #8]
 8040d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040d68:	68fb      	ldr	r3, [r7, #12]
 8040d6a:	f003 0307 	and.w	r3, r3, #7
 8040d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040d70:	69fb      	ldr	r3, [r7, #28]
 8040d72:	f1c3 0307 	rsb	r3, r3, #7
 8040d76:	2b03      	cmp	r3, #3
 8040d78:	bf28      	it	cs
 8040d7a:	2303      	movcs	r3, #3
 8040d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040d7e:	69fb      	ldr	r3, [r7, #28]
 8040d80:	3303      	adds	r3, #3
 8040d82:	2b06      	cmp	r3, #6
 8040d84:	d902      	bls.n	8040d8c <NVIC_EncodePriority+0x30>
 8040d86:	69fb      	ldr	r3, [r7, #28]
 8040d88:	3b04      	subs	r3, #4
 8040d8a:	e000      	b.n	8040d8e <NVIC_EncodePriority+0x32>
 8040d8c:	2300      	movs	r3, #0
 8040d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040d90:	f04f 32ff 	mov.w	r2, #4294967295
 8040d94:	69bb      	ldr	r3, [r7, #24]
 8040d96:	fa02 f303 	lsl.w	r3, r2, r3
 8040d9a:	43da      	mvns	r2, r3
 8040d9c:	68bb      	ldr	r3, [r7, #8]
 8040d9e:	401a      	ands	r2, r3
 8040da0:	697b      	ldr	r3, [r7, #20]
 8040da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040da4:	f04f 31ff 	mov.w	r1, #4294967295
 8040da8:	697b      	ldr	r3, [r7, #20]
 8040daa:	fa01 f303 	lsl.w	r3, r1, r3
 8040dae:	43d9      	mvns	r1, r3
 8040db0:	687b      	ldr	r3, [r7, #4]
 8040db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040db4:	4313      	orrs	r3, r2
         );
}
 8040db6:	4618      	mov	r0, r3
 8040db8:	3724      	adds	r7, #36	; 0x24
 8040dba:	46bd      	mov	sp, r7
 8040dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040dc0:	4770      	bx	lr
	...

08040dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040dc4:	b580      	push	{r7, lr}
 8040dc6:	b082      	sub	sp, #8
 8040dc8:	af00      	add	r7, sp, #0
 8040dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040dcc:	687b      	ldr	r3, [r7, #4]
 8040dce:	3b01      	subs	r3, #1
 8040dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040dd4:	d301      	bcc.n	8040dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040dd6:	2301      	movs	r3, #1
 8040dd8:	e00f      	b.n	8040dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040dda:	4a0a      	ldr	r2, [pc, #40]	; (8040e04 <SysTick_Config+0x40>)
 8040ddc:	687b      	ldr	r3, [r7, #4]
 8040dde:	3b01      	subs	r3, #1
 8040de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040de2:	2107      	movs	r1, #7
 8040de4:	f04f 30ff 	mov.w	r0, #4294967295
 8040de8:	f7ff ff8e 	bl	8040d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040dec:	4b05      	ldr	r3, [pc, #20]	; (8040e04 <SysTick_Config+0x40>)
 8040dee:	2200      	movs	r2, #0
 8040df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040df2:	4b04      	ldr	r3, [pc, #16]	; (8040e04 <SysTick_Config+0x40>)
 8040df4:	2207      	movs	r2, #7
 8040df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040df8:	2300      	movs	r3, #0
}
 8040dfa:	4618      	mov	r0, r3
 8040dfc:	3708      	adds	r7, #8
 8040dfe:	46bd      	mov	sp, r7
 8040e00:	bd80      	pop	{r7, pc}
 8040e02:	bf00      	nop
 8040e04:	e000e010 	.word	0xe000e010

08040e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040e08:	b580      	push	{r7, lr}
 8040e0a:	b082      	sub	sp, #8
 8040e0c:	af00      	add	r7, sp, #0
 8040e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040e10:	6878      	ldr	r0, [r7, #4]
 8040e12:	f7ff ff29 	bl	8040c68 <__NVIC_SetPriorityGrouping>
}
 8040e16:	bf00      	nop
 8040e18:	3708      	adds	r7, #8
 8040e1a:	46bd      	mov	sp, r7
 8040e1c:	bd80      	pop	{r7, pc}

08040e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040e1e:	b580      	push	{r7, lr}
 8040e20:	b086      	sub	sp, #24
 8040e22:	af00      	add	r7, sp, #0
 8040e24:	4603      	mov	r3, r0
 8040e26:	60b9      	str	r1, [r7, #8]
 8040e28:	607a      	str	r2, [r7, #4]
 8040e2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8040e2c:	f7ff ff40 	bl	8040cb0 <__NVIC_GetPriorityGrouping>
 8040e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040e32:	687a      	ldr	r2, [r7, #4]
 8040e34:	68b9      	ldr	r1, [r7, #8]
 8040e36:	6978      	ldr	r0, [r7, #20]
 8040e38:	f7ff ff90 	bl	8040d5c <NVIC_EncodePriority>
 8040e3c:	4602      	mov	r2, r0
 8040e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040e42:	4611      	mov	r1, r2
 8040e44:	4618      	mov	r0, r3
 8040e46:	f7ff ff5f 	bl	8040d08 <__NVIC_SetPriority>
}
 8040e4a:	bf00      	nop
 8040e4c:	3718      	adds	r7, #24
 8040e4e:	46bd      	mov	sp, r7
 8040e50:	bd80      	pop	{r7, pc}

08040e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040e52:	b580      	push	{r7, lr}
 8040e54:	b082      	sub	sp, #8
 8040e56:	af00      	add	r7, sp, #0
 8040e58:	4603      	mov	r3, r0
 8040e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8040e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040e60:	4618      	mov	r0, r3
 8040e62:	f7ff ff33 	bl	8040ccc <__NVIC_EnableIRQ>
}
 8040e66:	bf00      	nop
 8040e68:	3708      	adds	r7, #8
 8040e6a:	46bd      	mov	sp, r7
 8040e6c:	bd80      	pop	{r7, pc}

08040e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040e6e:	b580      	push	{r7, lr}
 8040e70:	b082      	sub	sp, #8
 8040e72:	af00      	add	r7, sp, #0
 8040e74:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8040e76:	6878      	ldr	r0, [r7, #4]
 8040e78:	f7ff ffa4 	bl	8040dc4 <SysTick_Config>
 8040e7c:	4603      	mov	r3, r0
}
 8040e7e:	4618      	mov	r0, r3
 8040e80:	3708      	adds	r7, #8
 8040e82:	46bd      	mov	sp, r7
 8040e84:	bd80      	pop	{r7, pc}
	...

08040e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040e88:	b480      	push	{r7}
 8040e8a:	b087      	sub	sp, #28
 8040e8c:	af00      	add	r7, sp, #0
 8040e8e:	6078      	str	r0, [r7, #4]
 8040e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8040e92:	2300      	movs	r3, #0
 8040e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8040e96:	e158      	b.n	804114a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8040e98:	683b      	ldr	r3, [r7, #0]
 8040e9a:	681a      	ldr	r2, [r3, #0]
 8040e9c:	2101      	movs	r1, #1
 8040e9e:	697b      	ldr	r3, [r7, #20]
 8040ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8040ea4:	4013      	ands	r3, r2
 8040ea6:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8040ea8:	68fb      	ldr	r3, [r7, #12]
 8040eaa:	2b00      	cmp	r3, #0
 8040eac:	f000 814a 	beq.w	8041144 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040eb0:	683b      	ldr	r3, [r7, #0]
 8040eb2:	685b      	ldr	r3, [r3, #4]
 8040eb4:	2b01      	cmp	r3, #1
 8040eb6:	d00b      	beq.n	8040ed0 <HAL_GPIO_Init+0x48>
 8040eb8:	683b      	ldr	r3, [r7, #0]
 8040eba:	685b      	ldr	r3, [r3, #4]
 8040ebc:	2b02      	cmp	r3, #2
 8040ebe:	d007      	beq.n	8040ed0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040ec0:	683b      	ldr	r3, [r7, #0]
 8040ec2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040ec4:	2b11      	cmp	r3, #17
 8040ec6:	d003      	beq.n	8040ed0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040ec8:	683b      	ldr	r3, [r7, #0]
 8040eca:	685b      	ldr	r3, [r3, #4]
 8040ecc:	2b12      	cmp	r3, #18
 8040ece:	d130      	bne.n	8040f32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8040ed0:	687b      	ldr	r3, [r7, #4]
 8040ed2:	689b      	ldr	r3, [r3, #8]
 8040ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8040ed6:	697b      	ldr	r3, [r7, #20]
 8040ed8:	005b      	lsls	r3, r3, #1
 8040eda:	2203      	movs	r2, #3
 8040edc:	fa02 f303 	lsl.w	r3, r2, r3
 8040ee0:	43db      	mvns	r3, r3
 8040ee2:	693a      	ldr	r2, [r7, #16]
 8040ee4:	4013      	ands	r3, r2
 8040ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8040ee8:	683b      	ldr	r3, [r7, #0]
 8040eea:	68da      	ldr	r2, [r3, #12]
 8040eec:	697b      	ldr	r3, [r7, #20]
 8040eee:	005b      	lsls	r3, r3, #1
 8040ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8040ef4:	693a      	ldr	r2, [r7, #16]
 8040ef6:	4313      	orrs	r3, r2
 8040ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8040efa:	687b      	ldr	r3, [r7, #4]
 8040efc:	693a      	ldr	r2, [r7, #16]
 8040efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040f00:	687b      	ldr	r3, [r7, #4]
 8040f02:	685b      	ldr	r3, [r3, #4]
 8040f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8040f06:	2201      	movs	r2, #1
 8040f08:	697b      	ldr	r3, [r7, #20]
 8040f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8040f0e:	43db      	mvns	r3, r3
 8040f10:	693a      	ldr	r2, [r7, #16]
 8040f12:	4013      	ands	r3, r2
 8040f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8040f16:	683b      	ldr	r3, [r7, #0]
 8040f18:	685b      	ldr	r3, [r3, #4]
 8040f1a:	091b      	lsrs	r3, r3, #4
 8040f1c:	f003 0201 	and.w	r2, r3, #1
 8040f20:	697b      	ldr	r3, [r7, #20]
 8040f22:	fa02 f303 	lsl.w	r3, r2, r3
 8040f26:	693a      	ldr	r2, [r7, #16]
 8040f28:	4313      	orrs	r3, r2
 8040f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8040f2c:	687b      	ldr	r3, [r7, #4]
 8040f2e:	693a      	ldr	r2, [r7, #16]
 8040f30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8040f32:	687b      	ldr	r3, [r7, #4]
 8040f34:	68db      	ldr	r3, [r3, #12]
 8040f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8040f38:	697b      	ldr	r3, [r7, #20]
 8040f3a:	005b      	lsls	r3, r3, #1
 8040f3c:	2203      	movs	r2, #3
 8040f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8040f42:	43db      	mvns	r3, r3
 8040f44:	693a      	ldr	r2, [r7, #16]
 8040f46:	4013      	ands	r3, r2
 8040f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8040f4a:	683b      	ldr	r3, [r7, #0]
 8040f4c:	689a      	ldr	r2, [r3, #8]
 8040f4e:	697b      	ldr	r3, [r7, #20]
 8040f50:	005b      	lsls	r3, r3, #1
 8040f52:	fa02 f303 	lsl.w	r3, r2, r3
 8040f56:	693a      	ldr	r2, [r7, #16]
 8040f58:	4313      	orrs	r3, r2
 8040f5a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8040f5c:	687b      	ldr	r3, [r7, #4]
 8040f5e:	693a      	ldr	r2, [r7, #16]
 8040f60:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040f62:	683b      	ldr	r3, [r7, #0]
 8040f64:	685b      	ldr	r3, [r3, #4]
 8040f66:	2b02      	cmp	r3, #2
 8040f68:	d003      	beq.n	8040f72 <HAL_GPIO_Init+0xea>
 8040f6a:	683b      	ldr	r3, [r7, #0]
 8040f6c:	685b      	ldr	r3, [r3, #4]
 8040f6e:	2b12      	cmp	r3, #18
 8040f70:	d123      	bne.n	8040fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8040f72:	697b      	ldr	r3, [r7, #20]
 8040f74:	08da      	lsrs	r2, r3, #3
 8040f76:	687b      	ldr	r3, [r7, #4]
 8040f78:	3208      	adds	r2, #8
 8040f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8040f80:	697b      	ldr	r3, [r7, #20]
 8040f82:	f003 0307 	and.w	r3, r3, #7
 8040f86:	009b      	lsls	r3, r3, #2
 8040f88:	220f      	movs	r2, #15
 8040f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8040f8e:	43db      	mvns	r3, r3
 8040f90:	693a      	ldr	r2, [r7, #16]
 8040f92:	4013      	ands	r3, r2
 8040f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8040f96:	683b      	ldr	r3, [r7, #0]
 8040f98:	691a      	ldr	r2, [r3, #16]
 8040f9a:	697b      	ldr	r3, [r7, #20]
 8040f9c:	f003 0307 	and.w	r3, r3, #7
 8040fa0:	009b      	lsls	r3, r3, #2
 8040fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8040fa6:	693a      	ldr	r2, [r7, #16]
 8040fa8:	4313      	orrs	r3, r2
 8040faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8040fac:	697b      	ldr	r3, [r7, #20]
 8040fae:	08da      	lsrs	r2, r3, #3
 8040fb0:	687b      	ldr	r3, [r7, #4]
 8040fb2:	3208      	adds	r2, #8
 8040fb4:	6939      	ldr	r1, [r7, #16]
 8040fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040fba:	687b      	ldr	r3, [r7, #4]
 8040fbc:	681b      	ldr	r3, [r3, #0]
 8040fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8040fc0:	697b      	ldr	r3, [r7, #20]
 8040fc2:	005b      	lsls	r3, r3, #1
 8040fc4:	2203      	movs	r2, #3
 8040fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8040fca:	43db      	mvns	r3, r3
 8040fcc:	693a      	ldr	r2, [r7, #16]
 8040fce:	4013      	ands	r3, r2
 8040fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8040fd2:	683b      	ldr	r3, [r7, #0]
 8040fd4:	685b      	ldr	r3, [r3, #4]
 8040fd6:	f003 0203 	and.w	r2, r3, #3
 8040fda:	697b      	ldr	r3, [r7, #20]
 8040fdc:	005b      	lsls	r3, r3, #1
 8040fde:	fa02 f303 	lsl.w	r3, r2, r3
 8040fe2:	693a      	ldr	r2, [r7, #16]
 8040fe4:	4313      	orrs	r3, r2
 8040fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8040fe8:	687b      	ldr	r3, [r7, #4]
 8040fea:	693a      	ldr	r2, [r7, #16]
 8040fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8040fee:	683b      	ldr	r3, [r7, #0]
 8040ff0:	685b      	ldr	r3, [r3, #4]
 8040ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040ff6:	2b00      	cmp	r3, #0
 8040ff8:	f000 80a4 	beq.w	8041144 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8040ffc:	4a5a      	ldr	r2, [pc, #360]	; (8041168 <HAL_GPIO_Init+0x2e0>)
 8040ffe:	697b      	ldr	r3, [r7, #20]
 8041000:	089b      	lsrs	r3, r3, #2
 8041002:	3318      	adds	r3, #24
 8041004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041008:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 804100a:	697b      	ldr	r3, [r7, #20]
 804100c:	f003 0303 	and.w	r3, r3, #3
 8041010:	00db      	lsls	r3, r3, #3
 8041012:	220f      	movs	r2, #15
 8041014:	fa02 f303 	lsl.w	r3, r2, r3
 8041018:	43db      	mvns	r3, r3
 804101a:	693a      	ldr	r2, [r7, #16]
 804101c:	4013      	ands	r3, r2
 804101e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8041020:	687b      	ldr	r3, [r7, #4]
 8041022:	4a52      	ldr	r2, [pc, #328]	; (804116c <HAL_GPIO_Init+0x2e4>)
 8041024:	4293      	cmp	r3, r2
 8041026:	d025      	beq.n	8041074 <HAL_GPIO_Init+0x1ec>
 8041028:	687b      	ldr	r3, [r7, #4]
 804102a:	4a51      	ldr	r2, [pc, #324]	; (8041170 <HAL_GPIO_Init+0x2e8>)
 804102c:	4293      	cmp	r3, r2
 804102e:	d01f      	beq.n	8041070 <HAL_GPIO_Init+0x1e8>
 8041030:	687b      	ldr	r3, [r7, #4]
 8041032:	4a50      	ldr	r2, [pc, #320]	; (8041174 <HAL_GPIO_Init+0x2ec>)
 8041034:	4293      	cmp	r3, r2
 8041036:	d019      	beq.n	804106c <HAL_GPIO_Init+0x1e4>
 8041038:	687b      	ldr	r3, [r7, #4]
 804103a:	4a4f      	ldr	r2, [pc, #316]	; (8041178 <HAL_GPIO_Init+0x2f0>)
 804103c:	4293      	cmp	r3, r2
 804103e:	d013      	beq.n	8041068 <HAL_GPIO_Init+0x1e0>
 8041040:	687b      	ldr	r3, [r7, #4]
 8041042:	4a4e      	ldr	r2, [pc, #312]	; (804117c <HAL_GPIO_Init+0x2f4>)
 8041044:	4293      	cmp	r3, r2
 8041046:	d00d      	beq.n	8041064 <HAL_GPIO_Init+0x1dc>
 8041048:	687b      	ldr	r3, [r7, #4]
 804104a:	4a4d      	ldr	r2, [pc, #308]	; (8041180 <HAL_GPIO_Init+0x2f8>)
 804104c:	4293      	cmp	r3, r2
 804104e:	d007      	beq.n	8041060 <HAL_GPIO_Init+0x1d8>
 8041050:	687b      	ldr	r3, [r7, #4]
 8041052:	4a4c      	ldr	r2, [pc, #304]	; (8041184 <HAL_GPIO_Init+0x2fc>)
 8041054:	4293      	cmp	r3, r2
 8041056:	d101      	bne.n	804105c <HAL_GPIO_Init+0x1d4>
 8041058:	2306      	movs	r3, #6
 804105a:	e00c      	b.n	8041076 <HAL_GPIO_Init+0x1ee>
 804105c:	2307      	movs	r3, #7
 804105e:	e00a      	b.n	8041076 <HAL_GPIO_Init+0x1ee>
 8041060:	2305      	movs	r3, #5
 8041062:	e008      	b.n	8041076 <HAL_GPIO_Init+0x1ee>
 8041064:	2304      	movs	r3, #4
 8041066:	e006      	b.n	8041076 <HAL_GPIO_Init+0x1ee>
 8041068:	2303      	movs	r3, #3
 804106a:	e004      	b.n	8041076 <HAL_GPIO_Init+0x1ee>
 804106c:	2302      	movs	r3, #2
 804106e:	e002      	b.n	8041076 <HAL_GPIO_Init+0x1ee>
 8041070:	2301      	movs	r3, #1
 8041072:	e000      	b.n	8041076 <HAL_GPIO_Init+0x1ee>
 8041074:	2300      	movs	r3, #0
 8041076:	697a      	ldr	r2, [r7, #20]
 8041078:	f002 0203 	and.w	r2, r2, #3
 804107c:	00d2      	lsls	r2, r2, #3
 804107e:	4093      	lsls	r3, r2
 8041080:	693a      	ldr	r2, [r7, #16]
 8041082:	4313      	orrs	r3, r2
 8041084:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8041086:	4938      	ldr	r1, [pc, #224]	; (8041168 <HAL_GPIO_Init+0x2e0>)
 8041088:	697b      	ldr	r3, [r7, #20]
 804108a:	089b      	lsrs	r3, r3, #2
 804108c:	3318      	adds	r3, #24
 804108e:	693a      	ldr	r2, [r7, #16]
 8041090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8041094:	4b34      	ldr	r3, [pc, #208]	; (8041168 <HAL_GPIO_Init+0x2e0>)
 8041096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804109a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 804109c:	68fb      	ldr	r3, [r7, #12]
 804109e:	43db      	mvns	r3, r3
 80410a0:	693a      	ldr	r2, [r7, #16]
 80410a2:	4013      	ands	r3, r2
 80410a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80410a6:	683b      	ldr	r3, [r7, #0]
 80410a8:	685b      	ldr	r3, [r3, #4]
 80410aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80410ae:	2b00      	cmp	r3, #0
 80410b0:	d003      	beq.n	80410ba <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80410b2:	693a      	ldr	r2, [r7, #16]
 80410b4:	68fb      	ldr	r3, [r7, #12]
 80410b6:	4313      	orrs	r3, r2
 80410b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80410ba:	4a2b      	ldr	r2, [pc, #172]	; (8041168 <HAL_GPIO_Init+0x2e0>)
 80410bc:	693b      	ldr	r3, [r7, #16]
 80410be:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80410c2:	4b29      	ldr	r3, [pc, #164]	; (8041168 <HAL_GPIO_Init+0x2e0>)
 80410c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80410c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80410ca:	68fb      	ldr	r3, [r7, #12]
 80410cc:	43db      	mvns	r3, r3
 80410ce:	693a      	ldr	r2, [r7, #16]
 80410d0:	4013      	ands	r3, r2
 80410d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80410d4:	683b      	ldr	r3, [r7, #0]
 80410d6:	685b      	ldr	r3, [r3, #4]
 80410d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80410dc:	2b00      	cmp	r3, #0
 80410de:	d003      	beq.n	80410e8 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80410e0:	693a      	ldr	r2, [r7, #16]
 80410e2:	68fb      	ldr	r3, [r7, #12]
 80410e4:	4313      	orrs	r3, r2
 80410e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80410e8:	4a1f      	ldr	r2, [pc, #124]	; (8041168 <HAL_GPIO_Init+0x2e0>)
 80410ea:	693b      	ldr	r3, [r7, #16]
 80410ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80410f0:	4b1d      	ldr	r3, [pc, #116]	; (8041168 <HAL_GPIO_Init+0x2e0>)
 80410f2:	681b      	ldr	r3, [r3, #0]
 80410f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80410f6:	68fb      	ldr	r3, [r7, #12]
 80410f8:	43db      	mvns	r3, r3
 80410fa:	693a      	ldr	r2, [r7, #16]
 80410fc:	4013      	ands	r3, r2
 80410fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8041100:	683b      	ldr	r3, [r7, #0]
 8041102:	685b      	ldr	r3, [r3, #4]
 8041104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041108:	2b00      	cmp	r3, #0
 804110a:	d003      	beq.n	8041114 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 804110c:	693a      	ldr	r2, [r7, #16]
 804110e:	68fb      	ldr	r3, [r7, #12]
 8041110:	4313      	orrs	r3, r2
 8041112:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8041114:	4a14      	ldr	r2, [pc, #80]	; (8041168 <HAL_GPIO_Init+0x2e0>)
 8041116:	693b      	ldr	r3, [r7, #16]
 8041118:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 804111a:	4b13      	ldr	r3, [pc, #76]	; (8041168 <HAL_GPIO_Init+0x2e0>)
 804111c:	685b      	ldr	r3, [r3, #4]
 804111e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041120:	68fb      	ldr	r3, [r7, #12]
 8041122:	43db      	mvns	r3, r3
 8041124:	693a      	ldr	r2, [r7, #16]
 8041126:	4013      	ands	r3, r2
 8041128:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 804112a:	683b      	ldr	r3, [r7, #0]
 804112c:	685b      	ldr	r3, [r3, #4]
 804112e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041132:	2b00      	cmp	r3, #0
 8041134:	d003      	beq.n	804113e <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8041136:	693a      	ldr	r2, [r7, #16]
 8041138:	68fb      	ldr	r3, [r7, #12]
 804113a:	4313      	orrs	r3, r2
 804113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 804113e:	4a0a      	ldr	r2, [pc, #40]	; (8041168 <HAL_GPIO_Init+0x2e0>)
 8041140:	693b      	ldr	r3, [r7, #16]
 8041142:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8041144:	697b      	ldr	r3, [r7, #20]
 8041146:	3301      	adds	r3, #1
 8041148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 804114a:	683b      	ldr	r3, [r7, #0]
 804114c:	681a      	ldr	r2, [r3, #0]
 804114e:	697b      	ldr	r3, [r7, #20]
 8041150:	fa22 f303 	lsr.w	r3, r2, r3
 8041154:	2b00      	cmp	r3, #0
 8041156:	f47f ae9f 	bne.w	8040e98 <HAL_GPIO_Init+0x10>
  }
}
 804115a:	bf00      	nop
 804115c:	bf00      	nop
 804115e:	371c      	adds	r7, #28
 8041160:	46bd      	mov	sp, r7
 8041162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041166:	4770      	bx	lr
 8041168:	4002f400 	.word	0x4002f400
 804116c:	42020000 	.word	0x42020000
 8041170:	42020400 	.word	0x42020400
 8041174:	42020800 	.word	0x42020800
 8041178:	42020c00 	.word	0x42020c00
 804117c:	42021000 	.word	0x42021000
 8041180:	42021400 	.word	0x42021400
 8041184:	42021800 	.word	0x42021800

08041188 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8041188:	b580      	push	{r7, lr}
 804118a:	b082      	sub	sp, #8
 804118c:	af00      	add	r7, sp, #0
 804118e:	4603      	mov	r3, r0
 8041190:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8041192:	4b0f      	ldr	r3, [pc, #60]	; (80411d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8041194:	68da      	ldr	r2, [r3, #12]
 8041196:	88fb      	ldrh	r3, [r7, #6]
 8041198:	4013      	ands	r3, r2
 804119a:	2b00      	cmp	r3, #0
 804119c:	d006      	beq.n	80411ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 804119e:	4a0c      	ldr	r2, [pc, #48]	; (80411d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80411a0:	88fb      	ldrh	r3, [r7, #6]
 80411a2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80411a4:	88fb      	ldrh	r3, [r7, #6]
 80411a6:	4618      	mov	r0, r3
 80411a8:	f7ff fb04 	bl	80407b4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if(__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80411ac:	4b08      	ldr	r3, [pc, #32]	; (80411d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80411ae:	691a      	ldr	r2, [r3, #16]
 80411b0:	88fb      	ldrh	r3, [r7, #6]
 80411b2:	4013      	ands	r3, r2
 80411b4:	2b00      	cmp	r3, #0
 80411b6:	d006      	beq.n	80411c6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80411b8:	4a05      	ldr	r2, [pc, #20]	; (80411d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80411ba:	88fb      	ldrh	r3, [r7, #6]
 80411bc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80411be:	88fb      	ldrh	r3, [r7, #6]
 80411c0:	4618      	mov	r0, r3
 80411c2:	f000 f807 	bl	80411d4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80411c6:	bf00      	nop
 80411c8:	3708      	adds	r7, #8
 80411ca:	46bd      	mov	sp, r7
 80411cc:	bd80      	pop	{r7, pc}
 80411ce:	bf00      	nop
 80411d0:	4002f400 	.word	0x4002f400

080411d4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80411d4:	b480      	push	{r7}
 80411d6:	b083      	sub	sp, #12
 80411d8:	af00      	add	r7, sp, #0
 80411da:	4603      	mov	r3, r0
 80411dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80411de:	bf00      	nop
 80411e0:	370c      	adds	r7, #12
 80411e2:	46bd      	mov	sp, r7
 80411e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80411e8:	4770      	bx	lr
	...

080411ec <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80411ec:	b480      	push	{r7}
 80411ee:	b085      	sub	sp, #20
 80411f0:	af00      	add	r7, sp, #0
 80411f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80411f4:	2300      	movs	r3, #0
 80411f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80411f8:	4b0b      	ldr	r3, [pc, #44]	; (8041228 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80411fa:	681b      	ldr	r3, [r3, #0]
 80411fc:	f003 0301 	and.w	r3, r3, #1
 8041200:	2b00      	cmp	r3, #0
 8041202:	d002      	beq.n	804120a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8041204:	2301      	movs	r3, #1
 8041206:	73fb      	strb	r3, [r7, #15]
 8041208:	e007      	b.n	804121a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 804120a:	4b07      	ldr	r3, [pc, #28]	; (8041228 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 804120c:	681b      	ldr	r3, [r3, #0]
 804120e:	f023 0204 	bic.w	r2, r3, #4
 8041212:	4905      	ldr	r1, [pc, #20]	; (8041228 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8041214:	687b      	ldr	r3, [r7, #4]
 8041216:	4313      	orrs	r3, r2
 8041218:	600b      	str	r3, [r1, #0]
  }

  return status;
 804121a:	7bfb      	ldrb	r3, [r7, #15]
}
 804121c:	4618      	mov	r0, r3
 804121e:	3714      	adds	r7, #20
 8041220:	46bd      	mov	sp, r7
 8041222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041226:	4770      	bx	lr
 8041228:	40030400 	.word	0x40030400

0804122c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 804122c:	b480      	push	{r7}
 804122e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8041230:	4b05      	ldr	r3, [pc, #20]	; (8041248 <HAL_ICACHE_Enable+0x1c>)
 8041232:	681b      	ldr	r3, [r3, #0]
 8041234:	4a04      	ldr	r2, [pc, #16]	; (8041248 <HAL_ICACHE_Enable+0x1c>)
 8041236:	f043 0301 	orr.w	r3, r3, #1
 804123a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 804123c:	2300      	movs	r3, #0
}
 804123e:	4618      	mov	r0, r3
 8041240:	46bd      	mov	sp, r7
 8041242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041246:	4770      	bx	lr
 8041248:	40030400 	.word	0x40030400

0804124c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 804124c:	b480      	push	{r7}
 804124e:	b089      	sub	sp, #36	; 0x24
 8041250:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8041252:	2300      	movs	r3, #0
 8041254:	61fb      	str	r3, [r7, #28]
 8041256:	2300      	movs	r3, #0
 8041258:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 804125a:	4b47      	ldr	r3, [pc, #284]	; (8041378 <HAL_RCC_GetSysClockFreq+0x12c>)
 804125c:	689b      	ldr	r3, [r3, #8]
 804125e:	f003 030c 	and.w	r3, r3, #12
 8041262:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8041264:	4b44      	ldr	r3, [pc, #272]	; (8041378 <HAL_RCC_GetSysClockFreq+0x12c>)
 8041266:	68db      	ldr	r3, [r3, #12]
 8041268:	f003 0303 	and.w	r3, r3, #3
 804126c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 804126e:	693b      	ldr	r3, [r7, #16]
 8041270:	2b00      	cmp	r3, #0
 8041272:	d005      	beq.n	8041280 <HAL_RCC_GetSysClockFreq+0x34>
 8041274:	693b      	ldr	r3, [r7, #16]
 8041276:	2b0c      	cmp	r3, #12
 8041278:	d121      	bne.n	80412be <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 804127a:	68fb      	ldr	r3, [r7, #12]
 804127c:	2b01      	cmp	r3, #1
 804127e:	d11e      	bne.n	80412be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8041280:	4b3d      	ldr	r3, [pc, #244]	; (8041378 <HAL_RCC_GetSysClockFreq+0x12c>)
 8041282:	681b      	ldr	r3, [r3, #0]
 8041284:	f003 0308 	and.w	r3, r3, #8
 8041288:	2b00      	cmp	r3, #0
 804128a:	d107      	bne.n	804129c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 804128c:	4b3a      	ldr	r3, [pc, #232]	; (8041378 <HAL_RCC_GetSysClockFreq+0x12c>)
 804128e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041292:	0a1b      	lsrs	r3, r3, #8
 8041294:	f003 030f 	and.w	r3, r3, #15
 8041298:	61fb      	str	r3, [r7, #28]
 804129a:	e005      	b.n	80412a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 804129c:	4b36      	ldr	r3, [pc, #216]	; (8041378 <HAL_RCC_GetSysClockFreq+0x12c>)
 804129e:	681b      	ldr	r3, [r3, #0]
 80412a0:	091b      	lsrs	r3, r3, #4
 80412a2:	f003 030f 	and.w	r3, r3, #15
 80412a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80412a8:	4a34      	ldr	r2, [pc, #208]	; (804137c <HAL_RCC_GetSysClockFreq+0x130>)
 80412aa:	69fb      	ldr	r3, [r7, #28]
 80412ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80412b0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80412b2:	693b      	ldr	r3, [r7, #16]
 80412b4:	2b00      	cmp	r3, #0
 80412b6:	d10d      	bne.n	80412d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80412b8:	69fb      	ldr	r3, [r7, #28]
 80412ba:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80412bc:	e00a      	b.n	80412d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80412be:	693b      	ldr	r3, [r7, #16]
 80412c0:	2b04      	cmp	r3, #4
 80412c2:	d102      	bne.n	80412ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80412c4:	4b2e      	ldr	r3, [pc, #184]	; (8041380 <HAL_RCC_GetSysClockFreq+0x134>)
 80412c6:	61bb      	str	r3, [r7, #24]
 80412c8:	e004      	b.n	80412d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80412ca:	693b      	ldr	r3, [r7, #16]
 80412cc:	2b08      	cmp	r3, #8
 80412ce:	d101      	bne.n	80412d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80412d0:	4b2b      	ldr	r3, [pc, #172]	; (8041380 <HAL_RCC_GetSysClockFreq+0x134>)
 80412d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80412d4:	693b      	ldr	r3, [r7, #16]
 80412d6:	2b0c      	cmp	r3, #12
 80412d8:	d146      	bne.n	8041368 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80412da:	4b27      	ldr	r3, [pc, #156]	; (8041378 <HAL_RCC_GetSysClockFreq+0x12c>)
 80412dc:	68db      	ldr	r3, [r3, #12]
 80412de:	f003 0303 	and.w	r3, r3, #3
 80412e2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80412e4:	4b24      	ldr	r3, [pc, #144]	; (8041378 <HAL_RCC_GetSysClockFreq+0x12c>)
 80412e6:	68db      	ldr	r3, [r3, #12]
 80412e8:	091b      	lsrs	r3, r3, #4
 80412ea:	f003 030f 	and.w	r3, r3, #15
 80412ee:	3301      	adds	r3, #1
 80412f0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80412f2:	68bb      	ldr	r3, [r7, #8]
 80412f4:	2b02      	cmp	r3, #2
 80412f6:	d003      	beq.n	8041300 <HAL_RCC_GetSysClockFreq+0xb4>
 80412f8:	68bb      	ldr	r3, [r7, #8]
 80412fa:	2b03      	cmp	r3, #3
 80412fc:	d00d      	beq.n	804131a <HAL_RCC_GetSysClockFreq+0xce>
 80412fe:	e019      	b.n	8041334 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041300:	4a1f      	ldr	r2, [pc, #124]	; (8041380 <HAL_RCC_GetSysClockFreq+0x134>)
 8041302:	687b      	ldr	r3, [r7, #4]
 8041304:	fbb2 f3f3 	udiv	r3, r2, r3
 8041308:	4a1b      	ldr	r2, [pc, #108]	; (8041378 <HAL_RCC_GetSysClockFreq+0x12c>)
 804130a:	68d2      	ldr	r2, [r2, #12]
 804130c:	0a12      	lsrs	r2, r2, #8
 804130e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041312:	fb02 f303 	mul.w	r3, r2, r3
 8041316:	617b      	str	r3, [r7, #20]
        break;
 8041318:	e019      	b.n	804134e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804131a:	4a19      	ldr	r2, [pc, #100]	; (8041380 <HAL_RCC_GetSysClockFreq+0x134>)
 804131c:	687b      	ldr	r3, [r7, #4]
 804131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8041322:	4a15      	ldr	r2, [pc, #84]	; (8041378 <HAL_RCC_GetSysClockFreq+0x12c>)
 8041324:	68d2      	ldr	r2, [r2, #12]
 8041326:	0a12      	lsrs	r2, r2, #8
 8041328:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804132c:	fb02 f303 	mul.w	r3, r2, r3
 8041330:	617b      	str	r3, [r7, #20]
        break;
 8041332:	e00c      	b.n	804134e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041334:	69fa      	ldr	r2, [r7, #28]
 8041336:	687b      	ldr	r3, [r7, #4]
 8041338:	fbb2 f3f3 	udiv	r3, r2, r3
 804133c:	4a0e      	ldr	r2, [pc, #56]	; (8041378 <HAL_RCC_GetSysClockFreq+0x12c>)
 804133e:	68d2      	ldr	r2, [r2, #12]
 8041340:	0a12      	lsrs	r2, r2, #8
 8041342:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041346:	fb02 f303 	mul.w	r3, r2, r3
 804134a:	617b      	str	r3, [r7, #20]
        break;
 804134c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 804134e:	4b0a      	ldr	r3, [pc, #40]	; (8041378 <HAL_RCC_GetSysClockFreq+0x12c>)
 8041350:	68db      	ldr	r3, [r3, #12]
 8041352:	0e5b      	lsrs	r3, r3, #25
 8041354:	f003 0303 	and.w	r3, r3, #3
 8041358:	3301      	adds	r3, #1
 804135a:	005b      	lsls	r3, r3, #1
 804135c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 804135e:	697a      	ldr	r2, [r7, #20]
 8041360:	683b      	ldr	r3, [r7, #0]
 8041362:	fbb2 f3f3 	udiv	r3, r2, r3
 8041366:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8041368:	69bb      	ldr	r3, [r7, #24]
}
 804136a:	4618      	mov	r0, r3
 804136c:	3724      	adds	r7, #36	; 0x24
 804136e:	46bd      	mov	sp, r7
 8041370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041374:	4770      	bx	lr
 8041376:	bf00      	nop
 8041378:	40021000 	.word	0x40021000
 804137c:	080449f4 	.word	0x080449f4
 8041380:	00f42400 	.word	0x00f42400

08041384 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8041384:	b580      	push	{r7, lr}
 8041386:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8041388:	f7ff ff60 	bl	804124c <HAL_RCC_GetSysClockFreq>
 804138c:	4602      	mov	r2, r0
 804138e:	4b05      	ldr	r3, [pc, #20]	; (80413a4 <HAL_RCC_GetHCLKFreq+0x20>)
 8041390:	689b      	ldr	r3, [r3, #8]
 8041392:	091b      	lsrs	r3, r3, #4
 8041394:	f003 030f 	and.w	r3, r3, #15
 8041398:	4903      	ldr	r1, [pc, #12]	; (80413a8 <HAL_RCC_GetHCLKFreq+0x24>)
 804139a:	5ccb      	ldrb	r3, [r1, r3]
 804139c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80413a0:	4618      	mov	r0, r3
 80413a2:	bd80      	pop	{r7, pc}
 80413a4:	40021000 	.word	0x40021000
 80413a8:	080449dc 	.word	0x080449dc

080413ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80413ac:	b580      	push	{r7, lr}
 80413ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80413b0:	f7ff ffe8 	bl	8041384 <HAL_RCC_GetHCLKFreq>
 80413b4:	4602      	mov	r2, r0
 80413b6:	4b05      	ldr	r3, [pc, #20]	; (80413cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80413b8:	689b      	ldr	r3, [r3, #8]
 80413ba:	0a1b      	lsrs	r3, r3, #8
 80413bc:	f003 0307 	and.w	r3, r3, #7
 80413c0:	4903      	ldr	r1, [pc, #12]	; (80413d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80413c2:	5ccb      	ldrb	r3, [r1, r3]
 80413c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80413c8:	4618      	mov	r0, r3
 80413ca:	bd80      	pop	{r7, pc}
 80413cc:	40021000 	.word	0x40021000
 80413d0:	080449ec 	.word	0x080449ec

080413d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80413d4:	b580      	push	{r7, lr}
 80413d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80413d8:	f7ff ffd4 	bl	8041384 <HAL_RCC_GetHCLKFreq>
 80413dc:	4602      	mov	r2, r0
 80413de:	4b05      	ldr	r3, [pc, #20]	; (80413f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80413e0:	689b      	ldr	r3, [r3, #8]
 80413e2:	0adb      	lsrs	r3, r3, #11
 80413e4:	f003 0307 	and.w	r3, r3, #7
 80413e8:	4903      	ldr	r1, [pc, #12]	; (80413f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80413ea:	5ccb      	ldrb	r3, [r1, r3]
 80413ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80413f0:	4618      	mov	r0, r3
 80413f2:	bd80      	pop	{r7, pc}
 80413f4:	40021000 	.word	0x40021000
 80413f8:	080449ec 	.word	0x080449ec

080413fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80413fc:	b580      	push	{r7, lr}
 80413fe:	b088      	sub	sp, #32
 8041400:	af00      	add	r7, sp, #0
 8041402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8041404:	2300      	movs	r3, #0
 8041406:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8041408:	2300      	movs	r3, #0
 804140a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 804140c:	687b      	ldr	r3, [r7, #4]
 804140e:	681b      	ldr	r3, [r3, #0]
 8041410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041414:	2b00      	cmp	r3, #0
 8041416:	d040      	beq.n	804149a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8041418:	687b      	ldr	r3, [r7, #4]
 804141a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804141c:	2b80      	cmp	r3, #128	; 0x80
 804141e:	d02a      	beq.n	8041476 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8041420:	2b80      	cmp	r3, #128	; 0x80
 8041422:	d825      	bhi.n	8041470 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8041424:	2b60      	cmp	r3, #96	; 0x60
 8041426:	d026      	beq.n	8041476 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8041428:	2b60      	cmp	r3, #96	; 0x60
 804142a:	d821      	bhi.n	8041470 <HAL_RCCEx_PeriphCLKConfig+0x74>
 804142c:	2b40      	cmp	r3, #64	; 0x40
 804142e:	d006      	beq.n	804143e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8041430:	2b40      	cmp	r3, #64	; 0x40
 8041432:	d81d      	bhi.n	8041470 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8041434:	2b00      	cmp	r3, #0
 8041436:	d009      	beq.n	804144c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8041438:	2b20      	cmp	r3, #32
 804143a:	d010      	beq.n	804145e <HAL_RCCEx_PeriphCLKConfig+0x62>
 804143c:	e018      	b.n	8041470 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 804143e:	4b8f      	ldr	r3, [pc, #572]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8041440:	68db      	ldr	r3, [r3, #12]
 8041442:	4a8e      	ldr	r2, [pc, #568]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8041444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041448:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 804144a:	e015      	b.n	8041478 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 804144c:	687b      	ldr	r3, [r7, #4]
 804144e:	3304      	adds	r3, #4
 8041450:	2100      	movs	r1, #0
 8041452:	4618      	mov	r0, r3
 8041454:	f000 fb56 	bl	8041b04 <RCCEx_PLLSAI1_Config>
 8041458:	4603      	mov	r3, r0
 804145a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 804145c:	e00c      	b.n	8041478 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 804145e:	687b      	ldr	r3, [r7, #4]
 8041460:	3320      	adds	r3, #32
 8041462:	2100      	movs	r1, #0
 8041464:	4618      	mov	r0, r3
 8041466:	f000 fc33 	bl	8041cd0 <RCCEx_PLLSAI2_Config>
 804146a:	4603      	mov	r3, r0
 804146c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 804146e:	e003      	b.n	8041478 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8041470:	2301      	movs	r3, #1
 8041472:	77fb      	strb	r3, [r7, #31]
        break;
 8041474:	e000      	b.n	8041478 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8041476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8041478:	7ffb      	ldrb	r3, [r7, #31]
 804147a:	2b00      	cmp	r3, #0
 804147c:	d10b      	bne.n	8041496 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 804147e:	4b7f      	ldr	r3, [pc, #508]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8041480:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041484:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8041488:	687b      	ldr	r3, [r7, #4]
 804148a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804148c:	497b      	ldr	r1, [pc, #492]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804148e:	4313      	orrs	r3, r2
 8041490:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8041494:	e001      	b.n	804149a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8041496:	7ffb      	ldrb	r3, [r7, #31]
 8041498:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 804149a:	687b      	ldr	r3, [r7, #4]
 804149c:	681b      	ldr	r3, [r3, #0]
 804149e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80414a2:	2b00      	cmp	r3, #0
 80414a4:	d047      	beq.n	8041536 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80414a6:	687b      	ldr	r3, [r7, #4]
 80414a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80414ae:	d030      	beq.n	8041512 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80414b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80414b4:	d82a      	bhi.n	804150c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80414b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80414ba:	d02a      	beq.n	8041512 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80414bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80414c0:	d824      	bhi.n	804150c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80414c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80414c6:	d008      	beq.n	80414da <HAL_RCCEx_PeriphCLKConfig+0xde>
 80414c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80414cc:	d81e      	bhi.n	804150c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80414ce:	2b00      	cmp	r3, #0
 80414d0:	d00a      	beq.n	80414e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80414d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80414d6:	d010      	beq.n	80414fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80414d8:	e018      	b.n	804150c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80414da:	4b68      	ldr	r3, [pc, #416]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80414dc:	68db      	ldr	r3, [r3, #12]
 80414de:	4a67      	ldr	r2, [pc, #412]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80414e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80414e4:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80414e6:	e015      	b.n	8041514 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80414e8:	687b      	ldr	r3, [r7, #4]
 80414ea:	3304      	adds	r3, #4
 80414ec:	2100      	movs	r1, #0
 80414ee:	4618      	mov	r0, r3
 80414f0:	f000 fb08 	bl	8041b04 <RCCEx_PLLSAI1_Config>
 80414f4:	4603      	mov	r3, r0
 80414f6:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80414f8:	e00c      	b.n	8041514 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80414fa:	687b      	ldr	r3, [r7, #4]
 80414fc:	3320      	adds	r3, #32
 80414fe:	2100      	movs	r1, #0
 8041500:	4618      	mov	r0, r3
 8041502:	f000 fbe5 	bl	8041cd0 <RCCEx_PLLSAI2_Config>
 8041506:	4603      	mov	r3, r0
 8041508:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 804150a:	e003      	b.n	8041514 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804150c:	2301      	movs	r3, #1
 804150e:	77fb      	strb	r3, [r7, #31]
        break;
 8041510:	e000      	b.n	8041514 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8041512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8041514:	7ffb      	ldrb	r3, [r7, #31]
 8041516:	2b00      	cmp	r3, #0
 8041518:	d10b      	bne.n	8041532 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 804151a:	4b58      	ldr	r3, [pc, #352]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804151c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8041524:	687b      	ldr	r3, [r7, #4]
 8041526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041528:	4954      	ldr	r1, [pc, #336]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804152a:	4313      	orrs	r3, r2
 804152c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8041530:	e001      	b.n	8041536 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8041532:	7ffb      	ldrb	r3, [r7, #31]
 8041534:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8041536:	687b      	ldr	r3, [r7, #4]
 8041538:	681b      	ldr	r3, [r3, #0]
 804153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804153e:	2b00      	cmp	r3, #0
 8041540:	f000 80ab 	beq.w	804169a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8041544:	2300      	movs	r3, #0
 8041546:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8041548:	4b4c      	ldr	r3, [pc, #304]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804154a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041550:	2b00      	cmp	r3, #0
 8041552:	d10d      	bne.n	8041570 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8041554:	4b49      	ldr	r3, [pc, #292]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8041556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041558:	4a48      	ldr	r2, [pc, #288]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804155a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804155e:	6593      	str	r3, [r2, #88]	; 0x58
 8041560:	4b46      	ldr	r3, [pc, #280]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8041562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041568:	60fb      	str	r3, [r7, #12]
 804156a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 804156c:	2301      	movs	r3, #1
 804156e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8041570:	4b43      	ldr	r3, [pc, #268]	; (8041680 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8041572:	681b      	ldr	r3, [r3, #0]
 8041574:	4a42      	ldr	r2, [pc, #264]	; (8041680 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8041576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804157a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 804157c:	f7ff fb44 	bl	8040c08 <HAL_GetTick>
 8041580:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8041582:	e00f      	b.n	80415a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041584:	f7ff fb40 	bl	8040c08 <HAL_GetTick>
 8041588:	4602      	mov	r2, r0
 804158a:	693b      	ldr	r3, [r7, #16]
 804158c:	1ad3      	subs	r3, r2, r3
 804158e:	2b02      	cmp	r3, #2
 8041590:	d908      	bls.n	80415a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8041592:	4b3b      	ldr	r3, [pc, #236]	; (8041680 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8041594:	681b      	ldr	r3, [r3, #0]
 8041596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804159a:	2b00      	cmp	r3, #0
 804159c:	d109      	bne.n	80415b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 804159e:	2303      	movs	r3, #3
 80415a0:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80415a2:	e006      	b.n	80415b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80415a4:	4b36      	ldr	r3, [pc, #216]	; (8041680 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80415a6:	681b      	ldr	r3, [r3, #0]
 80415a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80415ac:	2b00      	cmp	r3, #0
 80415ae:	d0e9      	beq.n	8041584 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80415b0:	e000      	b.n	80415b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80415b2:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80415b4:	7ffb      	ldrb	r3, [r7, #31]
 80415b6:	2b00      	cmp	r3, #0
 80415b8:	d164      	bne.n	8041684 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80415ba:	4b30      	ldr	r3, [pc, #192]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80415bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80415c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80415c4:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80415c6:	69bb      	ldr	r3, [r7, #24]
 80415c8:	2b00      	cmp	r3, #0
 80415ca:	d01f      	beq.n	804160c <HAL_RCCEx_PeriphCLKConfig+0x210>
 80415cc:	687b      	ldr	r3, [r7, #4]
 80415ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80415d2:	69ba      	ldr	r2, [r7, #24]
 80415d4:	429a      	cmp	r2, r3
 80415d6:	d019      	beq.n	804160c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80415d8:	4b28      	ldr	r3, [pc, #160]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80415da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80415de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80415e2:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80415e4:	4b25      	ldr	r3, [pc, #148]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80415e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80415ea:	4a24      	ldr	r2, [pc, #144]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80415ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80415f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80415f4:	4b21      	ldr	r3, [pc, #132]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80415f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80415fa:	4a20      	ldr	r2, [pc, #128]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80415fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8041604:	4a1d      	ldr	r2, [pc, #116]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8041606:	69bb      	ldr	r3, [r7, #24]
 8041608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 804160c:	69bb      	ldr	r3, [r7, #24]
 804160e:	f003 0301 	and.w	r3, r3, #1
 8041612:	2b00      	cmp	r3, #0
 8041614:	d01f      	beq.n	8041656 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041616:	f7ff faf7 	bl	8040c08 <HAL_GetTick>
 804161a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 804161c:	e012      	b.n	8041644 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804161e:	f7ff faf3 	bl	8040c08 <HAL_GetTick>
 8041622:	4602      	mov	r2, r0
 8041624:	693b      	ldr	r3, [r7, #16]
 8041626:	1ad3      	subs	r3, r2, r3
 8041628:	f241 3288 	movw	r2, #5000	; 0x1388
 804162c:	4293      	cmp	r3, r2
 804162e:	d909      	bls.n	8041644 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041630:	4b12      	ldr	r3, [pc, #72]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8041632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041636:	f003 0302 	and.w	r3, r3, #2
 804163a:	2b00      	cmp	r3, #0
 804163c:	d10a      	bne.n	8041654 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 804163e:	2303      	movs	r3, #3
 8041640:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8041642:	e007      	b.n	8041654 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041644:	4b0d      	ldr	r3, [pc, #52]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8041646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804164a:	f003 0302 	and.w	r3, r3, #2
 804164e:	2b00      	cmp	r3, #0
 8041650:	d0e5      	beq.n	804161e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8041652:	e000      	b.n	8041656 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8041654:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8041656:	7ffb      	ldrb	r3, [r7, #31]
 8041658:	2b00      	cmp	r3, #0
 804165a:	d10c      	bne.n	8041676 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 804165c:	4b07      	ldr	r3, [pc, #28]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804165e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041662:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8041666:	687b      	ldr	r3, [r7, #4]
 8041668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804166c:	4903      	ldr	r1, [pc, #12]	; (804167c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804166e:	4313      	orrs	r3, r2
 8041670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8041674:	e008      	b.n	8041688 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8041676:	7ffb      	ldrb	r3, [r7, #31]
 8041678:	77bb      	strb	r3, [r7, #30]
 804167a:	e005      	b.n	8041688 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 804167c:	40021000 	.word	0x40021000
 8041680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8041684:	7ffb      	ldrb	r3, [r7, #31]
 8041686:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8041688:	7dfb      	ldrb	r3, [r7, #23]
 804168a:	2b01      	cmp	r3, #1
 804168c:	d105      	bne.n	804169a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 804168e:	4b9c      	ldr	r3, [pc, #624]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041692:	4a9b      	ldr	r2, [pc, #620]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041698:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 804169a:	687b      	ldr	r3, [r7, #4]
 804169c:	681b      	ldr	r3, [r3, #0]
 804169e:	f003 0301 	and.w	r3, r3, #1
 80416a2:	2b00      	cmp	r3, #0
 80416a4:	d00a      	beq.n	80416bc <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80416a6:	4b96      	ldr	r3, [pc, #600]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80416a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80416ac:	f023 0203 	bic.w	r2, r3, #3
 80416b0:	687b      	ldr	r3, [r7, #4]
 80416b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80416b4:	4992      	ldr	r1, [pc, #584]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80416b6:	4313      	orrs	r3, r2
 80416b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80416bc:	687b      	ldr	r3, [r7, #4]
 80416be:	681b      	ldr	r3, [r3, #0]
 80416c0:	f003 0302 	and.w	r3, r3, #2
 80416c4:	2b00      	cmp	r3, #0
 80416c6:	d00a      	beq.n	80416de <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80416c8:	4b8d      	ldr	r3, [pc, #564]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80416ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80416ce:	f023 020c 	bic.w	r2, r3, #12
 80416d2:	687b      	ldr	r3, [r7, #4]
 80416d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80416d6:	498a      	ldr	r1, [pc, #552]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80416d8:	4313      	orrs	r3, r2
 80416da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80416de:	687b      	ldr	r3, [r7, #4]
 80416e0:	681b      	ldr	r3, [r3, #0]
 80416e2:	f003 0304 	and.w	r3, r3, #4
 80416e6:	2b00      	cmp	r3, #0
 80416e8:	d00a      	beq.n	8041700 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80416ea:	4b85      	ldr	r3, [pc, #532]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80416ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80416f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80416f4:	687b      	ldr	r3, [r7, #4]
 80416f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80416f8:	4981      	ldr	r1, [pc, #516]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80416fa:	4313      	orrs	r3, r2
 80416fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8041700:	687b      	ldr	r3, [r7, #4]
 8041702:	681b      	ldr	r3, [r3, #0]
 8041704:	f003 0308 	and.w	r3, r3, #8
 8041708:	2b00      	cmp	r3, #0
 804170a:	d00a      	beq.n	8041722 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 804170c:	4b7c      	ldr	r3, [pc, #496]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041712:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8041716:	687b      	ldr	r3, [r7, #4]
 8041718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804171a:	4979      	ldr	r1, [pc, #484]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804171c:	4313      	orrs	r3, r2
 804171e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8041722:	687b      	ldr	r3, [r7, #4]
 8041724:	681b      	ldr	r3, [r3, #0]
 8041726:	f003 0310 	and.w	r3, r3, #16
 804172a:	2b00      	cmp	r3, #0
 804172c:	d00a      	beq.n	8041744 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 804172e:	4b74      	ldr	r3, [pc, #464]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8041738:	687b      	ldr	r3, [r7, #4]
 804173a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804173c:	4970      	ldr	r1, [pc, #448]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804173e:	4313      	orrs	r3, r2
 8041740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8041744:	687b      	ldr	r3, [r7, #4]
 8041746:	681b      	ldr	r3, [r3, #0]
 8041748:	f003 0320 	and.w	r3, r3, #32
 804174c:	2b00      	cmp	r3, #0
 804174e:	d00a      	beq.n	8041766 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8041750:	4b6b      	ldr	r3, [pc, #428]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041756:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 804175a:	687b      	ldr	r3, [r7, #4]
 804175c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804175e:	4968      	ldr	r1, [pc, #416]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041760:	4313      	orrs	r3, r2
 8041762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8041766:	687b      	ldr	r3, [r7, #4]
 8041768:	681b      	ldr	r3, [r3, #0]
 804176a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804176e:	2b00      	cmp	r3, #0
 8041770:	d00a      	beq.n	8041788 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8041772:	4b63      	ldr	r3, [pc, #396]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041778:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 804177c:	687b      	ldr	r3, [r7, #4]
 804177e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041780:	495f      	ldr	r1, [pc, #380]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041782:	4313      	orrs	r3, r2
 8041784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8041788:	687b      	ldr	r3, [r7, #4]
 804178a:	681b      	ldr	r3, [r3, #0]
 804178c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041790:	2b00      	cmp	r3, #0
 8041792:	d00a      	beq.n	80417aa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8041794:	4b5a      	ldr	r3, [pc, #360]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804179a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 804179e:	687b      	ldr	r3, [r7, #4]
 80417a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80417a2:	4957      	ldr	r1, [pc, #348]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80417a4:	4313      	orrs	r3, r2
 80417a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80417aa:	687b      	ldr	r3, [r7, #4]
 80417ac:	681b      	ldr	r3, [r3, #0]
 80417ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80417b2:	2b00      	cmp	r3, #0
 80417b4:	d00a      	beq.n	80417cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80417b6:	4b52      	ldr	r3, [pc, #328]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80417b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80417bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80417c0:	687b      	ldr	r3, [r7, #4]
 80417c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80417c4:	494e      	ldr	r1, [pc, #312]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80417c6:	4313      	orrs	r3, r2
 80417c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80417cc:	687b      	ldr	r3, [r7, #4]
 80417ce:	681b      	ldr	r3, [r3, #0]
 80417d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80417d4:	2b00      	cmp	r3, #0
 80417d6:	d031      	beq.n	804183c <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80417d8:	687b      	ldr	r3, [r7, #4]
 80417da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80417dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80417e0:	d00e      	beq.n	8041800 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80417e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80417e6:	d814      	bhi.n	8041812 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80417e8:	2b00      	cmp	r3, #0
 80417ea:	d015      	beq.n	8041818 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80417ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80417f0:	d10f      	bne.n	8041812 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80417f2:	4b43      	ldr	r3, [pc, #268]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80417f4:	68db      	ldr	r3, [r3, #12]
 80417f6:	4a42      	ldr	r2, [pc, #264]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80417f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80417fc:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80417fe:	e00c      	b.n	804181a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8041800:	687b      	ldr	r3, [r7, #4]
 8041802:	3304      	adds	r3, #4
 8041804:	2100      	movs	r1, #0
 8041806:	4618      	mov	r0, r3
 8041808:	f000 f97c 	bl	8041b04 <RCCEx_PLLSAI1_Config>
 804180c:	4603      	mov	r3, r0
 804180e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8041810:	e003      	b.n	804181a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8041812:	2301      	movs	r3, #1
 8041814:	77fb      	strb	r3, [r7, #31]
        break;
 8041816:	e000      	b.n	804181a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8041818:	bf00      	nop
    }

    if (ret == HAL_OK)
 804181a:	7ffb      	ldrb	r3, [r7, #31]
 804181c:	2b00      	cmp	r3, #0
 804181e:	d10b      	bne.n	8041838 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8041820:	4b37      	ldr	r3, [pc, #220]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041826:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 804182a:	687b      	ldr	r3, [r7, #4]
 804182c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 804182e:	4934      	ldr	r1, [pc, #208]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041830:	4313      	orrs	r3, r2
 8041832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8041836:	e001      	b.n	804183c <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8041838:	7ffb      	ldrb	r3, [r7, #31]
 804183a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 804183c:	687b      	ldr	r3, [r7, #4]
 804183e:	681b      	ldr	r3, [r3, #0]
 8041840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041844:	2b00      	cmp	r3, #0
 8041846:	d00a      	beq.n	804185e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8041848:	4b2d      	ldr	r3, [pc, #180]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804184e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8041852:	687b      	ldr	r3, [r7, #4]
 8041854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041856:	492a      	ldr	r1, [pc, #168]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041858:	4313      	orrs	r3, r2
 804185a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 804185e:	687b      	ldr	r3, [r7, #4]
 8041860:	681b      	ldr	r3, [r3, #0]
 8041862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041866:	2b00      	cmp	r3, #0
 8041868:	d00a      	beq.n	8041880 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 804186a:	4b25      	ldr	r3, [pc, #148]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804186c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041870:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8041874:	687b      	ldr	r3, [r7, #4]
 8041876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041878:	4921      	ldr	r1, [pc, #132]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804187a:	4313      	orrs	r3, r2
 804187c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8041880:	687b      	ldr	r3, [r7, #4]
 8041882:	681b      	ldr	r3, [r3, #0]
 8041884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041888:	2b00      	cmp	r3, #0
 804188a:	d00a      	beq.n	80418a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 804188c:	4b1c      	ldr	r3, [pc, #112]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041892:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8041896:	687b      	ldr	r3, [r7, #4]
 8041898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804189a:	4919      	ldr	r1, [pc, #100]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804189c:	4313      	orrs	r3, r2
 804189e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80418a2:	687b      	ldr	r3, [r7, #4]
 80418a4:	681b      	ldr	r3, [r3, #0]
 80418a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80418aa:	2b00      	cmp	r3, #0
 80418ac:	d00a      	beq.n	80418c4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80418ae:	4b14      	ldr	r3, [pc, #80]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80418b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80418b4:	f023 0203 	bic.w	r2, r3, #3
 80418b8:	687b      	ldr	r3, [r7, #4]
 80418ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80418bc:	4910      	ldr	r1, [pc, #64]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80418be:	4313      	orrs	r3, r2
 80418c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80418c4:	687b      	ldr	r3, [r7, #4]
 80418c6:	681b      	ldr	r3, [r3, #0]
 80418c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80418cc:	2b00      	cmp	r3, #0
 80418ce:	d02b      	beq.n	8041928 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80418d0:	4b0b      	ldr	r3, [pc, #44]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80418d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80418d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80418da:	687b      	ldr	r3, [r7, #4]
 80418dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80418de:	4908      	ldr	r1, [pc, #32]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80418e0:	4313      	orrs	r3, r2
 80418e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80418e6:	687b      	ldr	r3, [r7, #4]
 80418e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80418ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80418ee:	d109      	bne.n	8041904 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80418f0:	4b03      	ldr	r3, [pc, #12]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80418f2:	68db      	ldr	r3, [r3, #12]
 80418f4:	4a02      	ldr	r2, [pc, #8]	; (8041900 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80418f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80418fa:	60d3      	str	r3, [r2, #12]
 80418fc:	e014      	b.n	8041928 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80418fe:	bf00      	nop
 8041900:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8041904:	687b      	ldr	r3, [r7, #4]
 8041906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 804190c:	d10c      	bne.n	8041928 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 804190e:	687b      	ldr	r3, [r7, #4]
 8041910:	3304      	adds	r3, #4
 8041912:	2101      	movs	r1, #1
 8041914:	4618      	mov	r0, r3
 8041916:	f000 f8f5 	bl	8041b04 <RCCEx_PLLSAI1_Config>
 804191a:	4603      	mov	r3, r0
 804191c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 804191e:	7ffb      	ldrb	r3, [r7, #31]
 8041920:	2b00      	cmp	r3, #0
 8041922:	d001      	beq.n	8041928 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8041924:	7ffb      	ldrb	r3, [r7, #31]
 8041926:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8041928:	687b      	ldr	r3, [r7, #4]
 804192a:	681b      	ldr	r3, [r3, #0]
 804192c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8041930:	2b00      	cmp	r3, #0
 8041932:	d04a      	beq.n	80419ca <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8041934:	687b      	ldr	r3, [r7, #4]
 8041936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 804193c:	d108      	bne.n	8041950 <HAL_RCCEx_PeriphCLKConfig+0x554>
 804193e:	4b70      	ldr	r3, [pc, #448]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041940:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041944:	4a6e      	ldr	r2, [pc, #440]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804194a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 804194e:	e012      	b.n	8041976 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8041950:	4b6b      	ldr	r3, [pc, #428]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041956:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 804195a:	687b      	ldr	r3, [r7, #4]
 804195c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804195e:	4968      	ldr	r1, [pc, #416]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041960:	4313      	orrs	r3, r2
 8041962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8041966:	4b66      	ldr	r3, [pc, #408]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041968:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804196c:	4a64      	ldr	r2, [pc, #400]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804196e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8041972:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8041976:	687b      	ldr	r3, [r7, #4]
 8041978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804197a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 804197e:	d10d      	bne.n	804199c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8041980:	687b      	ldr	r3, [r7, #4]
 8041982:	3304      	adds	r3, #4
 8041984:	2101      	movs	r1, #1
 8041986:	4618      	mov	r0, r3
 8041988:	f000 f8bc 	bl	8041b04 <RCCEx_PLLSAI1_Config>
 804198c:	4603      	mov	r3, r0
 804198e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8041990:	7ffb      	ldrb	r3, [r7, #31]
 8041992:	2b00      	cmp	r3, #0
 8041994:	d019      	beq.n	80419ca <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8041996:	7ffb      	ldrb	r3, [r7, #31]
 8041998:	77bb      	strb	r3, [r7, #30]
 804199a:	e016      	b.n	80419ca <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 804199c:	687b      	ldr	r3, [r7, #4]
 804199e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80419a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80419a4:	d106      	bne.n	80419b4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80419a6:	4b56      	ldr	r3, [pc, #344]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80419a8:	68db      	ldr	r3, [r3, #12]
 80419aa:	4a55      	ldr	r2, [pc, #340]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80419ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80419b0:	60d3      	str	r3, [r2, #12]
 80419b2:	e00a      	b.n	80419ca <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80419b4:	687b      	ldr	r3, [r7, #4]
 80419b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80419b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80419bc:	d105      	bne.n	80419ca <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80419be:	4b50      	ldr	r3, [pc, #320]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80419c0:	68db      	ldr	r3, [r3, #12]
 80419c2:	4a4f      	ldr	r2, [pc, #316]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80419c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80419c8:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80419ca:	687b      	ldr	r3, [r7, #4]
 80419cc:	681b      	ldr	r3, [r3, #0]
 80419ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80419d2:	2b00      	cmp	r3, #0
 80419d4:	d028      	beq.n	8041a28 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80419d6:	4b4a      	ldr	r3, [pc, #296]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80419d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80419dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80419e0:	687b      	ldr	r3, [r7, #4]
 80419e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80419e4:	4946      	ldr	r1, [pc, #280]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80419e6:	4313      	orrs	r3, r2
 80419e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80419ec:	687b      	ldr	r3, [r7, #4]
 80419ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80419f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80419f4:	d106      	bne.n	8041a04 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80419f6:	4b42      	ldr	r3, [pc, #264]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80419f8:	68db      	ldr	r3, [r3, #12]
 80419fa:	4a41      	ldr	r2, [pc, #260]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80419fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041a00:	60d3      	str	r3, [r2, #12]
 8041a02:	e011      	b.n	8041a28 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8041a04:	687b      	ldr	r3, [r7, #4]
 8041a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8041a08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8041a0c:	d10c      	bne.n	8041a28 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8041a0e:	687b      	ldr	r3, [r7, #4]
 8041a10:	3304      	adds	r3, #4
 8041a12:	2101      	movs	r1, #1
 8041a14:	4618      	mov	r0, r3
 8041a16:	f000 f875 	bl	8041b04 <RCCEx_PLLSAI1_Config>
 8041a1a:	4603      	mov	r3, r0
 8041a1c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8041a1e:	7ffb      	ldrb	r3, [r7, #31]
 8041a20:	2b00      	cmp	r3, #0
 8041a22:	d001      	beq.n	8041a28 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8041a24:	7ffb      	ldrb	r3, [r7, #31]
 8041a26:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8041a28:	687b      	ldr	r3, [r7, #4]
 8041a2a:	681b      	ldr	r3, [r3, #0]
 8041a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8041a30:	2b00      	cmp	r3, #0
 8041a32:	d01e      	beq.n	8041a72 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8041a34:	4b32      	ldr	r3, [pc, #200]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041a3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8041a3e:	687b      	ldr	r3, [r7, #4]
 8041a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041a44:	492e      	ldr	r1, [pc, #184]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041a46:	4313      	orrs	r3, r2
 8041a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8041a4c:	687b      	ldr	r3, [r7, #4]
 8041a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041a52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8041a56:	d10c      	bne.n	8041a72 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8041a58:	687b      	ldr	r3, [r7, #4]
 8041a5a:	3304      	adds	r3, #4
 8041a5c:	2102      	movs	r1, #2
 8041a5e:	4618      	mov	r0, r3
 8041a60:	f000 f850 	bl	8041b04 <RCCEx_PLLSAI1_Config>
 8041a64:	4603      	mov	r3, r0
 8041a66:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8041a68:	7ffb      	ldrb	r3, [r7, #31]
 8041a6a:	2b00      	cmp	r3, #0
 8041a6c:	d001      	beq.n	8041a72 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8041a6e:	7ffb      	ldrb	r3, [r7, #31]
 8041a70:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8041a72:	687b      	ldr	r3, [r7, #4]
 8041a74:	681b      	ldr	r3, [r3, #0]
 8041a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041a7a:	2b00      	cmp	r3, #0
 8041a7c:	d00b      	beq.n	8041a96 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8041a7e:	4b20      	ldr	r3, [pc, #128]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041a80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041a84:	f023 0204 	bic.w	r2, r3, #4
 8041a88:	687b      	ldr	r3, [r7, #4]
 8041a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041a8e:	491c      	ldr	r1, [pc, #112]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041a90:	4313      	orrs	r3, r2
 8041a92:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8041a96:	687b      	ldr	r3, [r7, #4]
 8041a98:	681b      	ldr	r3, [r3, #0]
 8041a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041a9e:	2b00      	cmp	r3, #0
 8041aa0:	d00b      	beq.n	8041aba <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8041aa2:	4b17      	ldr	r3, [pc, #92]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041aa8:	f023 0218 	bic.w	r2, r3, #24
 8041aac:	687b      	ldr	r3, [r7, #4]
 8041aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041ab2:	4913      	ldr	r1, [pc, #76]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041ab4:	4313      	orrs	r3, r2
 8041ab6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8041aba:	687b      	ldr	r3, [r7, #4]
 8041abc:	681b      	ldr	r3, [r3, #0]
 8041abe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8041ac2:	2b00      	cmp	r3, #0
 8041ac4:	d017      	beq.n	8041af6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8041ac6:	4b0e      	ldr	r3, [pc, #56]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041ac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041acc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8041ad0:	687b      	ldr	r3, [r7, #4]
 8041ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041ad6:	490a      	ldr	r1, [pc, #40]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041ad8:	4313      	orrs	r3, r2
 8041ada:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8041ade:	687b      	ldr	r3, [r7, #4]
 8041ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041ae4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8041ae8:	d105      	bne.n	8041af6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8041aea:	4b05      	ldr	r3, [pc, #20]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041aec:	68db      	ldr	r3, [r3, #12]
 8041aee:	4a04      	ldr	r2, [pc, #16]	; (8041b00 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041af4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8041af6:	7fbb      	ldrb	r3, [r7, #30]
}
 8041af8:	4618      	mov	r0, r3
 8041afa:	3720      	adds	r7, #32
 8041afc:	46bd      	mov	sp, r7
 8041afe:	bd80      	pop	{r7, pc}
 8041b00:	40021000 	.word	0x40021000

08041b04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8041b04:	b580      	push	{r7, lr}
 8041b06:	b084      	sub	sp, #16
 8041b08:	af00      	add	r7, sp, #0
 8041b0a:	6078      	str	r0, [r7, #4]
 8041b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8041b0e:	2300      	movs	r3, #0
 8041b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8041b12:	687b      	ldr	r3, [r7, #4]
 8041b14:	681b      	ldr	r3, [r3, #0]
 8041b16:	2b03      	cmp	r3, #3
 8041b18:	d018      	beq.n	8041b4c <RCCEx_PLLSAI1_Config+0x48>
 8041b1a:	2b03      	cmp	r3, #3
 8041b1c:	d81f      	bhi.n	8041b5e <RCCEx_PLLSAI1_Config+0x5a>
 8041b1e:	2b01      	cmp	r3, #1
 8041b20:	d002      	beq.n	8041b28 <RCCEx_PLLSAI1_Config+0x24>
 8041b22:	2b02      	cmp	r3, #2
 8041b24:	d009      	beq.n	8041b3a <RCCEx_PLLSAI1_Config+0x36>
 8041b26:	e01a      	b.n	8041b5e <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8041b28:	4b65      	ldr	r3, [pc, #404]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041b2a:	681b      	ldr	r3, [r3, #0]
 8041b2c:	f003 0302 	and.w	r3, r3, #2
 8041b30:	2b00      	cmp	r3, #0
 8041b32:	d117      	bne.n	8041b64 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8041b34:	2301      	movs	r3, #1
 8041b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041b38:	e014      	b.n	8041b64 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8041b3a:	4b61      	ldr	r3, [pc, #388]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041b3c:	681b      	ldr	r3, [r3, #0]
 8041b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041b42:	2b00      	cmp	r3, #0
 8041b44:	d110      	bne.n	8041b68 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8041b46:	2301      	movs	r3, #1
 8041b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041b4a:	e00d      	b.n	8041b68 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8041b4c:	4b5c      	ldr	r3, [pc, #368]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041b4e:	681b      	ldr	r3, [r3, #0]
 8041b50:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8041b54:	2b00      	cmp	r3, #0
 8041b56:	d109      	bne.n	8041b6c <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8041b58:	2301      	movs	r3, #1
 8041b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041b5c:	e006      	b.n	8041b6c <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8041b5e:	2301      	movs	r3, #1
 8041b60:	73fb      	strb	r3, [r7, #15]
      break;
 8041b62:	e004      	b.n	8041b6e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8041b64:	bf00      	nop
 8041b66:	e002      	b.n	8041b6e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8041b68:	bf00      	nop
 8041b6a:	e000      	b.n	8041b6e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8041b6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8041b6e:	7bfb      	ldrb	r3, [r7, #15]
 8041b70:	2b00      	cmp	r3, #0
 8041b72:	f040 809f 	bne.w	8041cb4 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8041b76:	4b52      	ldr	r3, [pc, #328]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041b78:	681b      	ldr	r3, [r3, #0]
 8041b7a:	4a51      	ldr	r2, [pc, #324]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041b7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8041b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041b82:	f7ff f841 	bl	8040c08 <HAL_GetTick>
 8041b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8041b88:	e00f      	b.n	8041baa <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8041b8a:	f7ff f83d 	bl	8040c08 <HAL_GetTick>
 8041b8e:	4602      	mov	r2, r0
 8041b90:	68bb      	ldr	r3, [r7, #8]
 8041b92:	1ad3      	subs	r3, r2, r3
 8041b94:	2b02      	cmp	r3, #2
 8041b96:	d908      	bls.n	8041baa <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8041b98:	4b49      	ldr	r3, [pc, #292]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041b9a:	681b      	ldr	r3, [r3, #0]
 8041b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041ba0:	2b00      	cmp	r3, #0
 8041ba2:	d009      	beq.n	8041bb8 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8041ba4:	2303      	movs	r3, #3
 8041ba6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8041ba8:	e006      	b.n	8041bb8 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8041baa:	4b45      	ldr	r3, [pc, #276]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041bac:	681b      	ldr	r3, [r3, #0]
 8041bae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041bb2:	2b00      	cmp	r3, #0
 8041bb4:	d1e9      	bne.n	8041b8a <RCCEx_PLLSAI1_Config+0x86>
 8041bb6:	e000      	b.n	8041bba <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8041bb8:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8041bba:	7bfb      	ldrb	r3, [r7, #15]
 8041bbc:	2b00      	cmp	r3, #0
 8041bbe:	d179      	bne.n	8041cb4 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8041bc0:	683b      	ldr	r3, [r7, #0]
 8041bc2:	2b00      	cmp	r3, #0
 8041bc4:	d116      	bne.n	8041bf4 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8041bc6:	4b3e      	ldr	r3, [pc, #248]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041bc8:	691a      	ldr	r2, [r3, #16]
 8041bca:	4b3e      	ldr	r3, [pc, #248]	; (8041cc4 <RCCEx_PLLSAI1_Config+0x1c0>)
 8041bcc:	4013      	ands	r3, r2
 8041bce:	687a      	ldr	r2, [r7, #4]
 8041bd0:	6892      	ldr	r2, [r2, #8]
 8041bd2:	0211      	lsls	r1, r2, #8
 8041bd4:	687a      	ldr	r2, [r7, #4]
 8041bd6:	68d2      	ldr	r2, [r2, #12]
 8041bd8:	06d2      	lsls	r2, r2, #27
 8041bda:	4311      	orrs	r1, r2
 8041bdc:	687a      	ldr	r2, [r7, #4]
 8041bde:	6852      	ldr	r2, [r2, #4]
 8041be0:	3a01      	subs	r2, #1
 8041be2:	0112      	lsls	r2, r2, #4
 8041be4:	4311      	orrs	r1, r2
 8041be6:	687a      	ldr	r2, [r7, #4]
 8041be8:	6812      	ldr	r2, [r2, #0]
 8041bea:	430a      	orrs	r2, r1
 8041bec:	4934      	ldr	r1, [pc, #208]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041bee:	4313      	orrs	r3, r2
 8041bf0:	610b      	str	r3, [r1, #16]
 8041bf2:	e033      	b.n	8041c5c <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8041bf4:	683b      	ldr	r3, [r7, #0]
 8041bf6:	2b01      	cmp	r3, #1
 8041bf8:	d118      	bne.n	8041c2c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8041bfa:	4b31      	ldr	r3, [pc, #196]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041bfc:	691a      	ldr	r2, [r3, #16]
 8041bfe:	4b32      	ldr	r3, [pc, #200]	; (8041cc8 <RCCEx_PLLSAI1_Config+0x1c4>)
 8041c00:	4013      	ands	r3, r2
 8041c02:	687a      	ldr	r2, [r7, #4]
 8041c04:	6892      	ldr	r2, [r2, #8]
 8041c06:	0211      	lsls	r1, r2, #8
 8041c08:	687a      	ldr	r2, [r7, #4]
 8041c0a:	6912      	ldr	r2, [r2, #16]
 8041c0c:	0852      	lsrs	r2, r2, #1
 8041c0e:	3a01      	subs	r2, #1
 8041c10:	0552      	lsls	r2, r2, #21
 8041c12:	4311      	orrs	r1, r2
 8041c14:	687a      	ldr	r2, [r7, #4]
 8041c16:	6852      	ldr	r2, [r2, #4]
 8041c18:	3a01      	subs	r2, #1
 8041c1a:	0112      	lsls	r2, r2, #4
 8041c1c:	4311      	orrs	r1, r2
 8041c1e:	687a      	ldr	r2, [r7, #4]
 8041c20:	6812      	ldr	r2, [r2, #0]
 8041c22:	430a      	orrs	r2, r1
 8041c24:	4926      	ldr	r1, [pc, #152]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041c26:	4313      	orrs	r3, r2
 8041c28:	610b      	str	r3, [r1, #16]
 8041c2a:	e017      	b.n	8041c5c <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8041c2c:	4b24      	ldr	r3, [pc, #144]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041c2e:	691a      	ldr	r2, [r3, #16]
 8041c30:	4b26      	ldr	r3, [pc, #152]	; (8041ccc <RCCEx_PLLSAI1_Config+0x1c8>)
 8041c32:	4013      	ands	r3, r2
 8041c34:	687a      	ldr	r2, [r7, #4]
 8041c36:	6892      	ldr	r2, [r2, #8]
 8041c38:	0211      	lsls	r1, r2, #8
 8041c3a:	687a      	ldr	r2, [r7, #4]
 8041c3c:	6952      	ldr	r2, [r2, #20]
 8041c3e:	0852      	lsrs	r2, r2, #1
 8041c40:	3a01      	subs	r2, #1
 8041c42:	0652      	lsls	r2, r2, #25
 8041c44:	4311      	orrs	r1, r2
 8041c46:	687a      	ldr	r2, [r7, #4]
 8041c48:	6852      	ldr	r2, [r2, #4]
 8041c4a:	3a01      	subs	r2, #1
 8041c4c:	0112      	lsls	r2, r2, #4
 8041c4e:	4311      	orrs	r1, r2
 8041c50:	687a      	ldr	r2, [r7, #4]
 8041c52:	6812      	ldr	r2, [r2, #0]
 8041c54:	430a      	orrs	r2, r1
 8041c56:	491a      	ldr	r1, [pc, #104]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041c58:	4313      	orrs	r3, r2
 8041c5a:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8041c5c:	4b18      	ldr	r3, [pc, #96]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041c5e:	681b      	ldr	r3, [r3, #0]
 8041c60:	4a17      	ldr	r2, [pc, #92]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041c62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8041c66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041c68:	f7fe ffce 	bl	8040c08 <HAL_GetTick>
 8041c6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8041c6e:	e00f      	b.n	8041c90 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8041c70:	f7fe ffca 	bl	8040c08 <HAL_GetTick>
 8041c74:	4602      	mov	r2, r0
 8041c76:	68bb      	ldr	r3, [r7, #8]
 8041c78:	1ad3      	subs	r3, r2, r3
 8041c7a:	2b02      	cmp	r3, #2
 8041c7c:	d908      	bls.n	8041c90 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8041c7e:	4b10      	ldr	r3, [pc, #64]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041c80:	681b      	ldr	r3, [r3, #0]
 8041c82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041c86:	2b00      	cmp	r3, #0
 8041c88:	d109      	bne.n	8041c9e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8041c8a:	2303      	movs	r3, #3
 8041c8c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8041c8e:	e006      	b.n	8041c9e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8041c90:	4b0b      	ldr	r3, [pc, #44]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041c92:	681b      	ldr	r3, [r3, #0]
 8041c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041c98:	2b00      	cmp	r3, #0
 8041c9a:	d0e9      	beq.n	8041c70 <RCCEx_PLLSAI1_Config+0x16c>
 8041c9c:	e000      	b.n	8041ca0 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8041c9e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8041ca0:	7bfb      	ldrb	r3, [r7, #15]
 8041ca2:	2b00      	cmp	r3, #0
 8041ca4:	d106      	bne.n	8041cb4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8041ca6:	4b06      	ldr	r3, [pc, #24]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041ca8:	691a      	ldr	r2, [r3, #16]
 8041caa:	687b      	ldr	r3, [r7, #4]
 8041cac:	699b      	ldr	r3, [r3, #24]
 8041cae:	4904      	ldr	r1, [pc, #16]	; (8041cc0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041cb0:	4313      	orrs	r3, r2
 8041cb2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8041cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8041cb6:	4618      	mov	r0, r3
 8041cb8:	3710      	adds	r7, #16
 8041cba:	46bd      	mov	sp, r7
 8041cbc:	bd80      	pop	{r7, pc}
 8041cbe:	bf00      	nop
 8041cc0:	40021000 	.word	0x40021000
 8041cc4:	07ff800c 	.word	0x07ff800c
 8041cc8:	ff9f800c 	.word	0xff9f800c
 8041ccc:	f9ff800c 	.word	0xf9ff800c

08041cd0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8041cd0:	b580      	push	{r7, lr}
 8041cd2:	b084      	sub	sp, #16
 8041cd4:	af00      	add	r7, sp, #0
 8041cd6:	6078      	str	r0, [r7, #4]
 8041cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8041cda:	2300      	movs	r3, #0
 8041cdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8041cde:	687b      	ldr	r3, [r7, #4]
 8041ce0:	681b      	ldr	r3, [r3, #0]
 8041ce2:	2b03      	cmp	r3, #3
 8041ce4:	d018      	beq.n	8041d18 <RCCEx_PLLSAI2_Config+0x48>
 8041ce6:	2b03      	cmp	r3, #3
 8041ce8:	d81f      	bhi.n	8041d2a <RCCEx_PLLSAI2_Config+0x5a>
 8041cea:	2b01      	cmp	r3, #1
 8041cec:	d002      	beq.n	8041cf4 <RCCEx_PLLSAI2_Config+0x24>
 8041cee:	2b02      	cmp	r3, #2
 8041cf0:	d009      	beq.n	8041d06 <RCCEx_PLLSAI2_Config+0x36>
 8041cf2:	e01a      	b.n	8041d2a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8041cf4:	4b4a      	ldr	r3, [pc, #296]	; (8041e20 <RCCEx_PLLSAI2_Config+0x150>)
 8041cf6:	681b      	ldr	r3, [r3, #0]
 8041cf8:	f003 0302 	and.w	r3, r3, #2
 8041cfc:	2b00      	cmp	r3, #0
 8041cfe:	d117      	bne.n	8041d30 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8041d00:	2301      	movs	r3, #1
 8041d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041d04:	e014      	b.n	8041d30 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8041d06:	4b46      	ldr	r3, [pc, #280]	; (8041e20 <RCCEx_PLLSAI2_Config+0x150>)
 8041d08:	681b      	ldr	r3, [r3, #0]
 8041d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041d0e:	2b00      	cmp	r3, #0
 8041d10:	d110      	bne.n	8041d34 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8041d12:	2301      	movs	r3, #1
 8041d14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041d16:	e00d      	b.n	8041d34 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8041d18:	4b41      	ldr	r3, [pc, #260]	; (8041e20 <RCCEx_PLLSAI2_Config+0x150>)
 8041d1a:	681b      	ldr	r3, [r3, #0]
 8041d1c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8041d20:	2b00      	cmp	r3, #0
 8041d22:	d109      	bne.n	8041d38 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8041d24:	2301      	movs	r3, #1
 8041d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041d28:	e006      	b.n	8041d38 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8041d2a:	2301      	movs	r3, #1
 8041d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8041d2e:	e004      	b.n	8041d3a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8041d30:	bf00      	nop
 8041d32:	e002      	b.n	8041d3a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8041d34:	bf00      	nop
 8041d36:	e000      	b.n	8041d3a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8041d38:	bf00      	nop
  }

  if (status == HAL_OK)
 8041d3a:	7bfb      	ldrb	r3, [r7, #15]
 8041d3c:	2b00      	cmp	r3, #0
 8041d3e:	d169      	bne.n	8041e14 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8041d40:	4b37      	ldr	r3, [pc, #220]	; (8041e20 <RCCEx_PLLSAI2_Config+0x150>)
 8041d42:	681b      	ldr	r3, [r3, #0]
 8041d44:	4a36      	ldr	r2, [pc, #216]	; (8041e20 <RCCEx_PLLSAI2_Config+0x150>)
 8041d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041d4c:	f7fe ff5c 	bl	8040c08 <HAL_GetTick>
 8041d50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8041d52:	e00f      	b.n	8041d74 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8041d54:	f7fe ff58 	bl	8040c08 <HAL_GetTick>
 8041d58:	4602      	mov	r2, r0
 8041d5a:	68bb      	ldr	r3, [r7, #8]
 8041d5c:	1ad3      	subs	r3, r2, r3
 8041d5e:	2b02      	cmp	r3, #2
 8041d60:	d908      	bls.n	8041d74 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8041d62:	4b2f      	ldr	r3, [pc, #188]	; (8041e20 <RCCEx_PLLSAI2_Config+0x150>)
 8041d64:	681b      	ldr	r3, [r3, #0]
 8041d66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8041d6a:	2b00      	cmp	r3, #0
 8041d6c:	d009      	beq.n	8041d82 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8041d6e:	2303      	movs	r3, #3
 8041d70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8041d72:	e006      	b.n	8041d82 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8041d74:	4b2a      	ldr	r3, [pc, #168]	; (8041e20 <RCCEx_PLLSAI2_Config+0x150>)
 8041d76:	681b      	ldr	r3, [r3, #0]
 8041d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8041d7c:	2b00      	cmp	r3, #0
 8041d7e:	d1e9      	bne.n	8041d54 <RCCEx_PLLSAI2_Config+0x84>
 8041d80:	e000      	b.n	8041d84 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8041d82:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8041d84:	7bfb      	ldrb	r3, [r7, #15]
 8041d86:	2b00      	cmp	r3, #0
 8041d88:	d144      	bne.n	8041e14 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8041d8a:	683b      	ldr	r3, [r7, #0]
 8041d8c:	2b00      	cmp	r3, #0
 8041d8e:	d115      	bne.n	8041dbc <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8041d90:	4b23      	ldr	r3, [pc, #140]	; (8041e20 <RCCEx_PLLSAI2_Config+0x150>)
 8041d92:	695a      	ldr	r2, [r3, #20]
 8041d94:	4b23      	ldr	r3, [pc, #140]	; (8041e24 <RCCEx_PLLSAI2_Config+0x154>)
 8041d96:	4013      	ands	r3, r2
 8041d98:	687a      	ldr	r2, [r7, #4]
 8041d9a:	6892      	ldr	r2, [r2, #8]
 8041d9c:	0211      	lsls	r1, r2, #8
 8041d9e:	687a      	ldr	r2, [r7, #4]
 8041da0:	68d2      	ldr	r2, [r2, #12]
 8041da2:	06d2      	lsls	r2, r2, #27
 8041da4:	4311      	orrs	r1, r2
 8041da6:	687a      	ldr	r2, [r7, #4]
 8041da8:	6852      	ldr	r2, [r2, #4]
 8041daa:	3a01      	subs	r2, #1
 8041dac:	0112      	lsls	r2, r2, #4
 8041dae:	4311      	orrs	r1, r2
 8041db0:	687a      	ldr	r2, [r7, #4]
 8041db2:	6812      	ldr	r2, [r2, #0]
 8041db4:	430a      	orrs	r2, r1
 8041db6:	491a      	ldr	r1, [pc, #104]	; (8041e20 <RCCEx_PLLSAI2_Config+0x150>)
 8041db8:	4313      	orrs	r3, r2
 8041dba:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8041dbc:	4b18      	ldr	r3, [pc, #96]	; (8041e20 <RCCEx_PLLSAI2_Config+0x150>)
 8041dbe:	681b      	ldr	r3, [r3, #0]
 8041dc0:	4a17      	ldr	r2, [pc, #92]	; (8041e20 <RCCEx_PLLSAI2_Config+0x150>)
 8041dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041dc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041dc8:	f7fe ff1e 	bl	8040c08 <HAL_GetTick>
 8041dcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8041dce:	e00f      	b.n	8041df0 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8041dd0:	f7fe ff1a 	bl	8040c08 <HAL_GetTick>
 8041dd4:	4602      	mov	r2, r0
 8041dd6:	68bb      	ldr	r3, [r7, #8]
 8041dd8:	1ad3      	subs	r3, r2, r3
 8041dda:	2b02      	cmp	r3, #2
 8041ddc:	d908      	bls.n	8041df0 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8041dde:	4b10      	ldr	r3, [pc, #64]	; (8041e20 <RCCEx_PLLSAI2_Config+0x150>)
 8041de0:	681b      	ldr	r3, [r3, #0]
 8041de2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8041de6:	2b00      	cmp	r3, #0
 8041de8:	d109      	bne.n	8041dfe <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8041dea:	2303      	movs	r3, #3
 8041dec:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8041dee:	e006      	b.n	8041dfe <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8041df0:	4b0b      	ldr	r3, [pc, #44]	; (8041e20 <RCCEx_PLLSAI2_Config+0x150>)
 8041df2:	681b      	ldr	r3, [r3, #0]
 8041df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8041df8:	2b00      	cmp	r3, #0
 8041dfa:	d0e9      	beq.n	8041dd0 <RCCEx_PLLSAI2_Config+0x100>
 8041dfc:	e000      	b.n	8041e00 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8041dfe:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8041e00:	7bfb      	ldrb	r3, [r7, #15]
 8041e02:	2b00      	cmp	r3, #0
 8041e04:	d106      	bne.n	8041e14 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8041e06:	4b06      	ldr	r3, [pc, #24]	; (8041e20 <RCCEx_PLLSAI2_Config+0x150>)
 8041e08:	695a      	ldr	r2, [r3, #20]
 8041e0a:	687b      	ldr	r3, [r7, #4]
 8041e0c:	691b      	ldr	r3, [r3, #16]
 8041e0e:	4904      	ldr	r1, [pc, #16]	; (8041e20 <RCCEx_PLLSAI2_Config+0x150>)
 8041e10:	4313      	orrs	r3, r2
 8041e12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8041e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8041e16:	4618      	mov	r0, r3
 8041e18:	3710      	adds	r7, #16
 8041e1a:	46bd      	mov	sp, r7
 8041e1c:	bd80      	pop	{r7, pc}
 8041e1e:	bf00      	nop
 8041e20:	40021000 	.word	0x40021000
 8041e24:	07ff800c 	.word	0x07ff800c

08041e28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8041e28:	b580      	push	{r7, lr}
 8041e2a:	b082      	sub	sp, #8
 8041e2c:	af00      	add	r7, sp, #0
 8041e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8041e30:	687b      	ldr	r3, [r7, #4]
 8041e32:	2b00      	cmp	r3, #0
 8041e34:	d101      	bne.n	8041e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8041e36:	2301      	movs	r3, #1
 8041e38:	e042      	b.n	8041ec0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8041e3a:	687b      	ldr	r3, [r7, #4]
 8041e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041e40:	2b00      	cmp	r3, #0
 8041e42:	d106      	bne.n	8041e52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8041e44:	687b      	ldr	r3, [r7, #4]
 8041e46:	2200      	movs	r2, #0
 8041e48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8041e4c:	6878      	ldr	r0, [r7, #4]
 8041e4e:	f7fe fdff 	bl	8040a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8041e52:	687b      	ldr	r3, [r7, #4]
 8041e54:	2224      	movs	r2, #36	; 0x24
 8041e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8041e5a:	687b      	ldr	r3, [r7, #4]
 8041e5c:	681b      	ldr	r3, [r3, #0]
 8041e5e:	681a      	ldr	r2, [r3, #0]
 8041e60:	687b      	ldr	r3, [r7, #4]
 8041e62:	681b      	ldr	r3, [r3, #0]
 8041e64:	f022 0201 	bic.w	r2, r2, #1
 8041e68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8041e6a:	6878      	ldr	r0, [r7, #4]
 8041e6c:	f000 f996 	bl	804219c <UART_SetConfig>
 8041e70:	4603      	mov	r3, r0
 8041e72:	2b01      	cmp	r3, #1
 8041e74:	d101      	bne.n	8041e7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8041e76:	2301      	movs	r3, #1
 8041e78:	e022      	b.n	8041ec0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8041e7a:	687b      	ldr	r3, [r7, #4]
 8041e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041e7e:	2b00      	cmp	r3, #0
 8041e80:	d002      	beq.n	8041e88 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8041e82:	6878      	ldr	r0, [r7, #4]
 8041e84:	f000 fc8a 	bl	804279c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8041e88:	687b      	ldr	r3, [r7, #4]
 8041e8a:	681b      	ldr	r3, [r3, #0]
 8041e8c:	685a      	ldr	r2, [r3, #4]
 8041e8e:	687b      	ldr	r3, [r7, #4]
 8041e90:	681b      	ldr	r3, [r3, #0]
 8041e92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8041e96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8041e98:	687b      	ldr	r3, [r7, #4]
 8041e9a:	681b      	ldr	r3, [r3, #0]
 8041e9c:	689a      	ldr	r2, [r3, #8]
 8041e9e:	687b      	ldr	r3, [r7, #4]
 8041ea0:	681b      	ldr	r3, [r3, #0]
 8041ea2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8041ea6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8041ea8:	687b      	ldr	r3, [r7, #4]
 8041eaa:	681b      	ldr	r3, [r3, #0]
 8041eac:	681a      	ldr	r2, [r3, #0]
 8041eae:	687b      	ldr	r3, [r7, #4]
 8041eb0:	681b      	ldr	r3, [r3, #0]
 8041eb2:	f042 0201 	orr.w	r2, r2, #1
 8041eb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8041eb8:	6878      	ldr	r0, [r7, #4]
 8041eba:	f000 fd11 	bl	80428e0 <UART_CheckIdleState>
 8041ebe:	4603      	mov	r3, r0
}
 8041ec0:	4618      	mov	r0, r3
 8041ec2:	3708      	adds	r7, #8
 8041ec4:	46bd      	mov	sp, r7
 8041ec6:	bd80      	pop	{r7, pc}

08041ec8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8041ec8:	b580      	push	{r7, lr}
 8041eca:	b08a      	sub	sp, #40	; 0x28
 8041ecc:	af02      	add	r7, sp, #8
 8041ece:	60f8      	str	r0, [r7, #12]
 8041ed0:	60b9      	str	r1, [r7, #8]
 8041ed2:	603b      	str	r3, [r7, #0]
 8041ed4:	4613      	mov	r3, r2
 8041ed6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8041ed8:	68fb      	ldr	r3, [r7, #12]
 8041eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041ede:	2b20      	cmp	r3, #32
 8041ee0:	f040 8083 	bne.w	8041fea <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8041ee4:	68bb      	ldr	r3, [r7, #8]
 8041ee6:	2b00      	cmp	r3, #0
 8041ee8:	d002      	beq.n	8041ef0 <HAL_UART_Transmit+0x28>
 8041eea:	88fb      	ldrh	r3, [r7, #6]
 8041eec:	2b00      	cmp	r3, #0
 8041eee:	d101      	bne.n	8041ef4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8041ef0:	2301      	movs	r3, #1
 8041ef2:	e07b      	b.n	8041fec <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8041ef4:	68fb      	ldr	r3, [r7, #12]
 8041ef6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8041efa:	2b01      	cmp	r3, #1
 8041efc:	d101      	bne.n	8041f02 <HAL_UART_Transmit+0x3a>
 8041efe:	2302      	movs	r3, #2
 8041f00:	e074      	b.n	8041fec <HAL_UART_Transmit+0x124>
 8041f02:	68fb      	ldr	r3, [r7, #12]
 8041f04:	2201      	movs	r2, #1
 8041f06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8041f0a:	68fb      	ldr	r3, [r7, #12]
 8041f0c:	2200      	movs	r2, #0
 8041f0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8041f12:	68fb      	ldr	r3, [r7, #12]
 8041f14:	2221      	movs	r2, #33	; 0x21
 8041f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8041f1a:	f7fe fe75 	bl	8040c08 <HAL_GetTick>
 8041f1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8041f20:	68fb      	ldr	r3, [r7, #12]
 8041f22:	88fa      	ldrh	r2, [r7, #6]
 8041f24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8041f28:	68fb      	ldr	r3, [r7, #12]
 8041f2a:	88fa      	ldrh	r2, [r7, #6]
 8041f2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8041f30:	68fb      	ldr	r3, [r7, #12]
 8041f32:	689b      	ldr	r3, [r3, #8]
 8041f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8041f38:	d108      	bne.n	8041f4c <HAL_UART_Transmit+0x84>
 8041f3a:	68fb      	ldr	r3, [r7, #12]
 8041f3c:	691b      	ldr	r3, [r3, #16]
 8041f3e:	2b00      	cmp	r3, #0
 8041f40:	d104      	bne.n	8041f4c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8041f42:	2300      	movs	r3, #0
 8041f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8041f46:	68bb      	ldr	r3, [r7, #8]
 8041f48:	61bb      	str	r3, [r7, #24]
 8041f4a:	e003      	b.n	8041f54 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8041f4c:	68bb      	ldr	r3, [r7, #8]
 8041f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8041f50:	2300      	movs	r3, #0
 8041f52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8041f54:	68fb      	ldr	r3, [r7, #12]
 8041f56:	2200      	movs	r2, #0
 8041f58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8041f5c:	e02c      	b.n	8041fb8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8041f5e:	683b      	ldr	r3, [r7, #0]
 8041f60:	9300      	str	r3, [sp, #0]
 8041f62:	697b      	ldr	r3, [r7, #20]
 8041f64:	2200      	movs	r2, #0
 8041f66:	2180      	movs	r1, #128	; 0x80
 8041f68:	68f8      	ldr	r0, [r7, #12]
 8041f6a:	f000 fd04 	bl	8042976 <UART_WaitOnFlagUntilTimeout>
 8041f6e:	4603      	mov	r3, r0
 8041f70:	2b00      	cmp	r3, #0
 8041f72:	d001      	beq.n	8041f78 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8041f74:	2303      	movs	r3, #3
 8041f76:	e039      	b.n	8041fec <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8041f78:	69fb      	ldr	r3, [r7, #28]
 8041f7a:	2b00      	cmp	r3, #0
 8041f7c:	d10b      	bne.n	8041f96 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8041f7e:	69bb      	ldr	r3, [r7, #24]
 8041f80:	881b      	ldrh	r3, [r3, #0]
 8041f82:	461a      	mov	r2, r3
 8041f84:	68fb      	ldr	r3, [r7, #12]
 8041f86:	681b      	ldr	r3, [r3, #0]
 8041f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8041f8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8041f8e:	69bb      	ldr	r3, [r7, #24]
 8041f90:	3302      	adds	r3, #2
 8041f92:	61bb      	str	r3, [r7, #24]
 8041f94:	e007      	b.n	8041fa6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8041f96:	69fb      	ldr	r3, [r7, #28]
 8041f98:	781a      	ldrb	r2, [r3, #0]
 8041f9a:	68fb      	ldr	r3, [r7, #12]
 8041f9c:	681b      	ldr	r3, [r3, #0]
 8041f9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8041fa0:	69fb      	ldr	r3, [r7, #28]
 8041fa2:	3301      	adds	r3, #1
 8041fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8041fa6:	68fb      	ldr	r3, [r7, #12]
 8041fa8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8041fac:	b29b      	uxth	r3, r3
 8041fae:	3b01      	subs	r3, #1
 8041fb0:	b29a      	uxth	r2, r3
 8041fb2:	68fb      	ldr	r3, [r7, #12]
 8041fb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8041fb8:	68fb      	ldr	r3, [r7, #12]
 8041fba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8041fbe:	b29b      	uxth	r3, r3
 8041fc0:	2b00      	cmp	r3, #0
 8041fc2:	d1cc      	bne.n	8041f5e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8041fc4:	683b      	ldr	r3, [r7, #0]
 8041fc6:	9300      	str	r3, [sp, #0]
 8041fc8:	697b      	ldr	r3, [r7, #20]
 8041fca:	2200      	movs	r2, #0
 8041fcc:	2140      	movs	r1, #64	; 0x40
 8041fce:	68f8      	ldr	r0, [r7, #12]
 8041fd0:	f000 fcd1 	bl	8042976 <UART_WaitOnFlagUntilTimeout>
 8041fd4:	4603      	mov	r3, r0
 8041fd6:	2b00      	cmp	r3, #0
 8041fd8:	d001      	beq.n	8041fde <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8041fda:	2303      	movs	r3, #3
 8041fdc:	e006      	b.n	8041fec <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8041fde:	68fb      	ldr	r3, [r7, #12]
 8041fe0:	2220      	movs	r2, #32
 8041fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8041fe6:	2300      	movs	r3, #0
 8041fe8:	e000      	b.n	8041fec <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8041fea:	2302      	movs	r3, #2
  }
}
 8041fec:	4618      	mov	r0, r3
 8041fee:	3720      	adds	r7, #32
 8041ff0:	46bd      	mov	sp, r7
 8041ff2:	bd80      	pop	{r7, pc}

08041ff4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8041ff4:	b580      	push	{r7, lr}
 8041ff6:	b08a      	sub	sp, #40	; 0x28
 8041ff8:	af02      	add	r7, sp, #8
 8041ffa:	60f8      	str	r0, [r7, #12]
 8041ffc:	60b9      	str	r1, [r7, #8]
 8041ffe:	603b      	str	r3, [r7, #0]
 8042000:	4613      	mov	r3, r2
 8042002:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8042004:	68fb      	ldr	r3, [r7, #12]
 8042006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804200a:	2b20      	cmp	r3, #32
 804200c:	f040 80c0 	bne.w	8042190 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8042010:	68bb      	ldr	r3, [r7, #8]
 8042012:	2b00      	cmp	r3, #0
 8042014:	d002      	beq.n	804201c <HAL_UART_Receive+0x28>
 8042016:	88fb      	ldrh	r3, [r7, #6]
 8042018:	2b00      	cmp	r3, #0
 804201a:	d101      	bne.n	8042020 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 804201c:	2301      	movs	r3, #1
 804201e:	e0b8      	b.n	8042192 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8042020:	68fb      	ldr	r3, [r7, #12]
 8042022:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8042026:	2b01      	cmp	r3, #1
 8042028:	d101      	bne.n	804202e <HAL_UART_Receive+0x3a>
 804202a:	2302      	movs	r3, #2
 804202c:	e0b1      	b.n	8042192 <HAL_UART_Receive+0x19e>
 804202e:	68fb      	ldr	r3, [r7, #12]
 8042030:	2201      	movs	r2, #1
 8042032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042036:	68fb      	ldr	r3, [r7, #12]
 8042038:	2200      	movs	r2, #0
 804203a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 804203e:	68fb      	ldr	r3, [r7, #12]
 8042040:	2222      	movs	r2, #34	; 0x22
 8042042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042046:	68fb      	ldr	r3, [r7, #12]
 8042048:	2200      	movs	r2, #0
 804204a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 804204c:	f7fe fddc 	bl	8040c08 <HAL_GetTick>
 8042050:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8042052:	68fb      	ldr	r3, [r7, #12]
 8042054:	88fa      	ldrh	r2, [r7, #6]
 8042056:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 804205a:	68fb      	ldr	r3, [r7, #12]
 804205c:	88fa      	ldrh	r2, [r7, #6]
 804205e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8042062:	68fb      	ldr	r3, [r7, #12]
 8042064:	689b      	ldr	r3, [r3, #8]
 8042066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804206a:	d10e      	bne.n	804208a <HAL_UART_Receive+0x96>
 804206c:	68fb      	ldr	r3, [r7, #12]
 804206e:	691b      	ldr	r3, [r3, #16]
 8042070:	2b00      	cmp	r3, #0
 8042072:	d105      	bne.n	8042080 <HAL_UART_Receive+0x8c>
 8042074:	68fb      	ldr	r3, [r7, #12]
 8042076:	f240 12ff 	movw	r2, #511	; 0x1ff
 804207a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 804207e:	e02d      	b.n	80420dc <HAL_UART_Receive+0xe8>
 8042080:	68fb      	ldr	r3, [r7, #12]
 8042082:	22ff      	movs	r2, #255	; 0xff
 8042084:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8042088:	e028      	b.n	80420dc <HAL_UART_Receive+0xe8>
 804208a:	68fb      	ldr	r3, [r7, #12]
 804208c:	689b      	ldr	r3, [r3, #8]
 804208e:	2b00      	cmp	r3, #0
 8042090:	d10d      	bne.n	80420ae <HAL_UART_Receive+0xba>
 8042092:	68fb      	ldr	r3, [r7, #12]
 8042094:	691b      	ldr	r3, [r3, #16]
 8042096:	2b00      	cmp	r3, #0
 8042098:	d104      	bne.n	80420a4 <HAL_UART_Receive+0xb0>
 804209a:	68fb      	ldr	r3, [r7, #12]
 804209c:	22ff      	movs	r2, #255	; 0xff
 804209e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80420a2:	e01b      	b.n	80420dc <HAL_UART_Receive+0xe8>
 80420a4:	68fb      	ldr	r3, [r7, #12]
 80420a6:	227f      	movs	r2, #127	; 0x7f
 80420a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80420ac:	e016      	b.n	80420dc <HAL_UART_Receive+0xe8>
 80420ae:	68fb      	ldr	r3, [r7, #12]
 80420b0:	689b      	ldr	r3, [r3, #8]
 80420b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80420b6:	d10d      	bne.n	80420d4 <HAL_UART_Receive+0xe0>
 80420b8:	68fb      	ldr	r3, [r7, #12]
 80420ba:	691b      	ldr	r3, [r3, #16]
 80420bc:	2b00      	cmp	r3, #0
 80420be:	d104      	bne.n	80420ca <HAL_UART_Receive+0xd6>
 80420c0:	68fb      	ldr	r3, [r7, #12]
 80420c2:	227f      	movs	r2, #127	; 0x7f
 80420c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80420c8:	e008      	b.n	80420dc <HAL_UART_Receive+0xe8>
 80420ca:	68fb      	ldr	r3, [r7, #12]
 80420cc:	223f      	movs	r2, #63	; 0x3f
 80420ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80420d2:	e003      	b.n	80420dc <HAL_UART_Receive+0xe8>
 80420d4:	68fb      	ldr	r3, [r7, #12]
 80420d6:	2200      	movs	r2, #0
 80420d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80420dc:	68fb      	ldr	r3, [r7, #12]
 80420de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80420e2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80420e4:	68fb      	ldr	r3, [r7, #12]
 80420e6:	689b      	ldr	r3, [r3, #8]
 80420e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80420ec:	d108      	bne.n	8042100 <HAL_UART_Receive+0x10c>
 80420ee:	68fb      	ldr	r3, [r7, #12]
 80420f0:	691b      	ldr	r3, [r3, #16]
 80420f2:	2b00      	cmp	r3, #0
 80420f4:	d104      	bne.n	8042100 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80420f6:	2300      	movs	r3, #0
 80420f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80420fa:	68bb      	ldr	r3, [r7, #8]
 80420fc:	61bb      	str	r3, [r7, #24]
 80420fe:	e003      	b.n	8042108 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8042100:	68bb      	ldr	r3, [r7, #8]
 8042102:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8042104:	2300      	movs	r3, #0
 8042106:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8042108:	68fb      	ldr	r3, [r7, #12]
 804210a:	2200      	movs	r2, #0
 804210c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8042110:	e032      	b.n	8042178 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8042112:	683b      	ldr	r3, [r7, #0]
 8042114:	9300      	str	r3, [sp, #0]
 8042116:	697b      	ldr	r3, [r7, #20]
 8042118:	2200      	movs	r2, #0
 804211a:	2120      	movs	r1, #32
 804211c:	68f8      	ldr	r0, [r7, #12]
 804211e:	f000 fc2a 	bl	8042976 <UART_WaitOnFlagUntilTimeout>
 8042122:	4603      	mov	r3, r0
 8042124:	2b00      	cmp	r3, #0
 8042126:	d001      	beq.n	804212c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8042128:	2303      	movs	r3, #3
 804212a:	e032      	b.n	8042192 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 804212c:	69fb      	ldr	r3, [r7, #28]
 804212e:	2b00      	cmp	r3, #0
 8042130:	d10c      	bne.n	804214c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8042132:	68fb      	ldr	r3, [r7, #12]
 8042134:	681b      	ldr	r3, [r3, #0]
 8042136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042138:	b29a      	uxth	r2, r3
 804213a:	8a7b      	ldrh	r3, [r7, #18]
 804213c:	4013      	ands	r3, r2
 804213e:	b29a      	uxth	r2, r3
 8042140:	69bb      	ldr	r3, [r7, #24]
 8042142:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8042144:	69bb      	ldr	r3, [r7, #24]
 8042146:	3302      	adds	r3, #2
 8042148:	61bb      	str	r3, [r7, #24]
 804214a:	e00c      	b.n	8042166 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 804214c:	68fb      	ldr	r3, [r7, #12]
 804214e:	681b      	ldr	r3, [r3, #0]
 8042150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042152:	b2da      	uxtb	r2, r3
 8042154:	8a7b      	ldrh	r3, [r7, #18]
 8042156:	b2db      	uxtb	r3, r3
 8042158:	4013      	ands	r3, r2
 804215a:	b2da      	uxtb	r2, r3
 804215c:	69fb      	ldr	r3, [r7, #28]
 804215e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8042160:	69fb      	ldr	r3, [r7, #28]
 8042162:	3301      	adds	r3, #1
 8042164:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8042166:	68fb      	ldr	r3, [r7, #12]
 8042168:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 804216c:	b29b      	uxth	r3, r3
 804216e:	3b01      	subs	r3, #1
 8042170:	b29a      	uxth	r2, r3
 8042172:	68fb      	ldr	r3, [r7, #12]
 8042174:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8042178:	68fb      	ldr	r3, [r7, #12]
 804217a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 804217e:	b29b      	uxth	r3, r3
 8042180:	2b00      	cmp	r3, #0
 8042182:	d1c6      	bne.n	8042112 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8042184:	68fb      	ldr	r3, [r7, #12]
 8042186:	2220      	movs	r2, #32
 8042188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 804218c:	2300      	movs	r3, #0
 804218e:	e000      	b.n	8042192 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8042190:	2302      	movs	r3, #2
  }
}
 8042192:	4618      	mov	r0, r3
 8042194:	3720      	adds	r7, #32
 8042196:	46bd      	mov	sp, r7
 8042198:	bd80      	pop	{r7, pc}
	...

0804219c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 804219c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80421a0:	b08c      	sub	sp, #48	; 0x30
 80421a2:	af00      	add	r7, sp, #0
 80421a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80421a6:	2300      	movs	r3, #0
 80421a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80421ac:	697b      	ldr	r3, [r7, #20]
 80421ae:	689a      	ldr	r2, [r3, #8]
 80421b0:	697b      	ldr	r3, [r7, #20]
 80421b2:	691b      	ldr	r3, [r3, #16]
 80421b4:	431a      	orrs	r2, r3
 80421b6:	697b      	ldr	r3, [r7, #20]
 80421b8:	695b      	ldr	r3, [r3, #20]
 80421ba:	431a      	orrs	r2, r3
 80421bc:	697b      	ldr	r3, [r7, #20]
 80421be:	69db      	ldr	r3, [r3, #28]
 80421c0:	4313      	orrs	r3, r2
 80421c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80421c4:	697b      	ldr	r3, [r7, #20]
 80421c6:	681b      	ldr	r3, [r3, #0]
 80421c8:	681a      	ldr	r2, [r3, #0]
 80421ca:	4baa      	ldr	r3, [pc, #680]	; (8042474 <UART_SetConfig+0x2d8>)
 80421cc:	4013      	ands	r3, r2
 80421ce:	697a      	ldr	r2, [r7, #20]
 80421d0:	6812      	ldr	r2, [r2, #0]
 80421d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80421d4:	430b      	orrs	r3, r1
 80421d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80421d8:	697b      	ldr	r3, [r7, #20]
 80421da:	681b      	ldr	r3, [r3, #0]
 80421dc:	685b      	ldr	r3, [r3, #4]
 80421de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80421e2:	697b      	ldr	r3, [r7, #20]
 80421e4:	68da      	ldr	r2, [r3, #12]
 80421e6:	697b      	ldr	r3, [r7, #20]
 80421e8:	681b      	ldr	r3, [r3, #0]
 80421ea:	430a      	orrs	r2, r1
 80421ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80421ee:	697b      	ldr	r3, [r7, #20]
 80421f0:	699b      	ldr	r3, [r3, #24]
 80421f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80421f4:	697b      	ldr	r3, [r7, #20]
 80421f6:	681b      	ldr	r3, [r3, #0]
 80421f8:	4a9f      	ldr	r2, [pc, #636]	; (8042478 <UART_SetConfig+0x2dc>)
 80421fa:	4293      	cmp	r3, r2
 80421fc:	d004      	beq.n	8042208 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80421fe:	697b      	ldr	r3, [r7, #20]
 8042200:	6a1b      	ldr	r3, [r3, #32]
 8042202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8042204:	4313      	orrs	r3, r2
 8042206:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8042208:	697b      	ldr	r3, [r7, #20]
 804220a:	681b      	ldr	r3, [r3, #0]
 804220c:	689b      	ldr	r3, [r3, #8]
 804220e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8042212:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8042216:	697a      	ldr	r2, [r7, #20]
 8042218:	6812      	ldr	r2, [r2, #0]
 804221a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 804221c:	430b      	orrs	r3, r1
 804221e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8042220:	697b      	ldr	r3, [r7, #20]
 8042222:	681b      	ldr	r3, [r3, #0]
 8042224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042226:	f023 010f 	bic.w	r1, r3, #15
 804222a:	697b      	ldr	r3, [r7, #20]
 804222c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804222e:	697b      	ldr	r3, [r7, #20]
 8042230:	681b      	ldr	r3, [r3, #0]
 8042232:	430a      	orrs	r2, r1
 8042234:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8042236:	697b      	ldr	r3, [r7, #20]
 8042238:	681b      	ldr	r3, [r3, #0]
 804223a:	4a90      	ldr	r2, [pc, #576]	; (804247c <UART_SetConfig+0x2e0>)
 804223c:	4293      	cmp	r3, r2
 804223e:	d125      	bne.n	804228c <UART_SetConfig+0xf0>
 8042240:	4b8f      	ldr	r3, [pc, #572]	; (8042480 <UART_SetConfig+0x2e4>)
 8042242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042246:	f003 0303 	and.w	r3, r3, #3
 804224a:	2b03      	cmp	r3, #3
 804224c:	d81a      	bhi.n	8042284 <UART_SetConfig+0xe8>
 804224e:	a201      	add	r2, pc, #4	; (adr r2, 8042254 <UART_SetConfig+0xb8>)
 8042250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042254:	08042265 	.word	0x08042265
 8042258:	08042275 	.word	0x08042275
 804225c:	0804226d 	.word	0x0804226d
 8042260:	0804227d 	.word	0x0804227d
 8042264:	2301      	movs	r3, #1
 8042266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804226a:	e116      	b.n	804249a <UART_SetConfig+0x2fe>
 804226c:	2302      	movs	r3, #2
 804226e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042272:	e112      	b.n	804249a <UART_SetConfig+0x2fe>
 8042274:	2304      	movs	r3, #4
 8042276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804227a:	e10e      	b.n	804249a <UART_SetConfig+0x2fe>
 804227c:	2308      	movs	r3, #8
 804227e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042282:	e10a      	b.n	804249a <UART_SetConfig+0x2fe>
 8042284:	2310      	movs	r3, #16
 8042286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804228a:	e106      	b.n	804249a <UART_SetConfig+0x2fe>
 804228c:	697b      	ldr	r3, [r7, #20]
 804228e:	681b      	ldr	r3, [r3, #0]
 8042290:	4a7c      	ldr	r2, [pc, #496]	; (8042484 <UART_SetConfig+0x2e8>)
 8042292:	4293      	cmp	r3, r2
 8042294:	d138      	bne.n	8042308 <UART_SetConfig+0x16c>
 8042296:	4b7a      	ldr	r3, [pc, #488]	; (8042480 <UART_SetConfig+0x2e4>)
 8042298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804229c:	f003 030c 	and.w	r3, r3, #12
 80422a0:	2b0c      	cmp	r3, #12
 80422a2:	d82d      	bhi.n	8042300 <UART_SetConfig+0x164>
 80422a4:	a201      	add	r2, pc, #4	; (adr r2, 80422ac <UART_SetConfig+0x110>)
 80422a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80422aa:	bf00      	nop
 80422ac:	080422e1 	.word	0x080422e1
 80422b0:	08042301 	.word	0x08042301
 80422b4:	08042301 	.word	0x08042301
 80422b8:	08042301 	.word	0x08042301
 80422bc:	080422f1 	.word	0x080422f1
 80422c0:	08042301 	.word	0x08042301
 80422c4:	08042301 	.word	0x08042301
 80422c8:	08042301 	.word	0x08042301
 80422cc:	080422e9 	.word	0x080422e9
 80422d0:	08042301 	.word	0x08042301
 80422d4:	08042301 	.word	0x08042301
 80422d8:	08042301 	.word	0x08042301
 80422dc:	080422f9 	.word	0x080422f9
 80422e0:	2300      	movs	r3, #0
 80422e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80422e6:	e0d8      	b.n	804249a <UART_SetConfig+0x2fe>
 80422e8:	2302      	movs	r3, #2
 80422ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80422ee:	e0d4      	b.n	804249a <UART_SetConfig+0x2fe>
 80422f0:	2304      	movs	r3, #4
 80422f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80422f6:	e0d0      	b.n	804249a <UART_SetConfig+0x2fe>
 80422f8:	2308      	movs	r3, #8
 80422fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80422fe:	e0cc      	b.n	804249a <UART_SetConfig+0x2fe>
 8042300:	2310      	movs	r3, #16
 8042302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042306:	e0c8      	b.n	804249a <UART_SetConfig+0x2fe>
 8042308:	697b      	ldr	r3, [r7, #20]
 804230a:	681b      	ldr	r3, [r3, #0]
 804230c:	4a5e      	ldr	r2, [pc, #376]	; (8042488 <UART_SetConfig+0x2ec>)
 804230e:	4293      	cmp	r3, r2
 8042310:	d125      	bne.n	804235e <UART_SetConfig+0x1c2>
 8042312:	4b5b      	ldr	r3, [pc, #364]	; (8042480 <UART_SetConfig+0x2e4>)
 8042314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042318:	f003 0330 	and.w	r3, r3, #48	; 0x30
 804231c:	2b30      	cmp	r3, #48	; 0x30
 804231e:	d016      	beq.n	804234e <UART_SetConfig+0x1b2>
 8042320:	2b30      	cmp	r3, #48	; 0x30
 8042322:	d818      	bhi.n	8042356 <UART_SetConfig+0x1ba>
 8042324:	2b20      	cmp	r3, #32
 8042326:	d00a      	beq.n	804233e <UART_SetConfig+0x1a2>
 8042328:	2b20      	cmp	r3, #32
 804232a:	d814      	bhi.n	8042356 <UART_SetConfig+0x1ba>
 804232c:	2b00      	cmp	r3, #0
 804232e:	d002      	beq.n	8042336 <UART_SetConfig+0x19a>
 8042330:	2b10      	cmp	r3, #16
 8042332:	d008      	beq.n	8042346 <UART_SetConfig+0x1aa>
 8042334:	e00f      	b.n	8042356 <UART_SetConfig+0x1ba>
 8042336:	2300      	movs	r3, #0
 8042338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804233c:	e0ad      	b.n	804249a <UART_SetConfig+0x2fe>
 804233e:	2302      	movs	r3, #2
 8042340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042344:	e0a9      	b.n	804249a <UART_SetConfig+0x2fe>
 8042346:	2304      	movs	r3, #4
 8042348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804234c:	e0a5      	b.n	804249a <UART_SetConfig+0x2fe>
 804234e:	2308      	movs	r3, #8
 8042350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042354:	e0a1      	b.n	804249a <UART_SetConfig+0x2fe>
 8042356:	2310      	movs	r3, #16
 8042358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804235c:	e09d      	b.n	804249a <UART_SetConfig+0x2fe>
 804235e:	697b      	ldr	r3, [r7, #20]
 8042360:	681b      	ldr	r3, [r3, #0]
 8042362:	4a4a      	ldr	r2, [pc, #296]	; (804248c <UART_SetConfig+0x2f0>)
 8042364:	4293      	cmp	r3, r2
 8042366:	d125      	bne.n	80423b4 <UART_SetConfig+0x218>
 8042368:	4b45      	ldr	r3, [pc, #276]	; (8042480 <UART_SetConfig+0x2e4>)
 804236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804236e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8042372:	2bc0      	cmp	r3, #192	; 0xc0
 8042374:	d016      	beq.n	80423a4 <UART_SetConfig+0x208>
 8042376:	2bc0      	cmp	r3, #192	; 0xc0
 8042378:	d818      	bhi.n	80423ac <UART_SetConfig+0x210>
 804237a:	2b80      	cmp	r3, #128	; 0x80
 804237c:	d00a      	beq.n	8042394 <UART_SetConfig+0x1f8>
 804237e:	2b80      	cmp	r3, #128	; 0x80
 8042380:	d814      	bhi.n	80423ac <UART_SetConfig+0x210>
 8042382:	2b00      	cmp	r3, #0
 8042384:	d002      	beq.n	804238c <UART_SetConfig+0x1f0>
 8042386:	2b40      	cmp	r3, #64	; 0x40
 8042388:	d008      	beq.n	804239c <UART_SetConfig+0x200>
 804238a:	e00f      	b.n	80423ac <UART_SetConfig+0x210>
 804238c:	2300      	movs	r3, #0
 804238e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042392:	e082      	b.n	804249a <UART_SetConfig+0x2fe>
 8042394:	2302      	movs	r3, #2
 8042396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804239a:	e07e      	b.n	804249a <UART_SetConfig+0x2fe>
 804239c:	2304      	movs	r3, #4
 804239e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80423a2:	e07a      	b.n	804249a <UART_SetConfig+0x2fe>
 80423a4:	2308      	movs	r3, #8
 80423a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80423aa:	e076      	b.n	804249a <UART_SetConfig+0x2fe>
 80423ac:	2310      	movs	r3, #16
 80423ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80423b2:	e072      	b.n	804249a <UART_SetConfig+0x2fe>
 80423b4:	697b      	ldr	r3, [r7, #20]
 80423b6:	681b      	ldr	r3, [r3, #0]
 80423b8:	4a35      	ldr	r2, [pc, #212]	; (8042490 <UART_SetConfig+0x2f4>)
 80423ba:	4293      	cmp	r3, r2
 80423bc:	d12a      	bne.n	8042414 <UART_SetConfig+0x278>
 80423be:	4b30      	ldr	r3, [pc, #192]	; (8042480 <UART_SetConfig+0x2e4>)
 80423c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80423c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80423c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80423cc:	d01a      	beq.n	8042404 <UART_SetConfig+0x268>
 80423ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80423d2:	d81b      	bhi.n	804240c <UART_SetConfig+0x270>
 80423d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80423d8:	d00c      	beq.n	80423f4 <UART_SetConfig+0x258>
 80423da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80423de:	d815      	bhi.n	804240c <UART_SetConfig+0x270>
 80423e0:	2b00      	cmp	r3, #0
 80423e2:	d003      	beq.n	80423ec <UART_SetConfig+0x250>
 80423e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80423e8:	d008      	beq.n	80423fc <UART_SetConfig+0x260>
 80423ea:	e00f      	b.n	804240c <UART_SetConfig+0x270>
 80423ec:	2300      	movs	r3, #0
 80423ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80423f2:	e052      	b.n	804249a <UART_SetConfig+0x2fe>
 80423f4:	2302      	movs	r3, #2
 80423f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80423fa:	e04e      	b.n	804249a <UART_SetConfig+0x2fe>
 80423fc:	2304      	movs	r3, #4
 80423fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042402:	e04a      	b.n	804249a <UART_SetConfig+0x2fe>
 8042404:	2308      	movs	r3, #8
 8042406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804240a:	e046      	b.n	804249a <UART_SetConfig+0x2fe>
 804240c:	2310      	movs	r3, #16
 804240e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042412:	e042      	b.n	804249a <UART_SetConfig+0x2fe>
 8042414:	697b      	ldr	r3, [r7, #20]
 8042416:	681b      	ldr	r3, [r3, #0]
 8042418:	4a17      	ldr	r2, [pc, #92]	; (8042478 <UART_SetConfig+0x2dc>)
 804241a:	4293      	cmp	r3, r2
 804241c:	d13a      	bne.n	8042494 <UART_SetConfig+0x2f8>
 804241e:	4b18      	ldr	r3, [pc, #96]	; (8042480 <UART_SetConfig+0x2e4>)
 8042420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042424:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8042428:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 804242c:	d01a      	beq.n	8042464 <UART_SetConfig+0x2c8>
 804242e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8042432:	d81b      	bhi.n	804246c <UART_SetConfig+0x2d0>
 8042434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8042438:	d00c      	beq.n	8042454 <UART_SetConfig+0x2b8>
 804243a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804243e:	d815      	bhi.n	804246c <UART_SetConfig+0x2d0>
 8042440:	2b00      	cmp	r3, #0
 8042442:	d003      	beq.n	804244c <UART_SetConfig+0x2b0>
 8042444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8042448:	d008      	beq.n	804245c <UART_SetConfig+0x2c0>
 804244a:	e00f      	b.n	804246c <UART_SetConfig+0x2d0>
 804244c:	2300      	movs	r3, #0
 804244e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042452:	e022      	b.n	804249a <UART_SetConfig+0x2fe>
 8042454:	2302      	movs	r3, #2
 8042456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804245a:	e01e      	b.n	804249a <UART_SetConfig+0x2fe>
 804245c:	2304      	movs	r3, #4
 804245e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042462:	e01a      	b.n	804249a <UART_SetConfig+0x2fe>
 8042464:	2308      	movs	r3, #8
 8042466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804246a:	e016      	b.n	804249a <UART_SetConfig+0x2fe>
 804246c:	2310      	movs	r3, #16
 804246e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042472:	e012      	b.n	804249a <UART_SetConfig+0x2fe>
 8042474:	cfff69f3 	.word	0xcfff69f3
 8042478:	40008000 	.word	0x40008000
 804247c:	40013800 	.word	0x40013800
 8042480:	40021000 	.word	0x40021000
 8042484:	40004400 	.word	0x40004400
 8042488:	40004800 	.word	0x40004800
 804248c:	40004c00 	.word	0x40004c00
 8042490:	40005000 	.word	0x40005000
 8042494:	2310      	movs	r3, #16
 8042496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 804249a:	697b      	ldr	r3, [r7, #20]
 804249c:	681b      	ldr	r3, [r3, #0]
 804249e:	4ab0      	ldr	r2, [pc, #704]	; (8042760 <UART_SetConfig+0x5c4>)
 80424a0:	4293      	cmp	r3, r2
 80424a2:	f040 809b 	bne.w	80425dc <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80424a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80424aa:	2b08      	cmp	r3, #8
 80424ac:	d827      	bhi.n	80424fe <UART_SetConfig+0x362>
 80424ae:	a201      	add	r2, pc, #4	; (adr r2, 80424b4 <UART_SetConfig+0x318>)
 80424b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80424b4:	080424d9 	.word	0x080424d9
 80424b8:	080424e1 	.word	0x080424e1
 80424bc:	080424e9 	.word	0x080424e9
 80424c0:	080424ff 	.word	0x080424ff
 80424c4:	080424ef 	.word	0x080424ef
 80424c8:	080424ff 	.word	0x080424ff
 80424cc:	080424ff 	.word	0x080424ff
 80424d0:	080424ff 	.word	0x080424ff
 80424d4:	080424f7 	.word	0x080424f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80424d8:	f7fe ff68 	bl	80413ac <HAL_RCC_GetPCLK1Freq>
 80424dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80424de:	e014      	b.n	804250a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80424e0:	f7fe ff78 	bl	80413d4 <HAL_RCC_GetPCLK2Freq>
 80424e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80424e6:	e010      	b.n	804250a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80424e8:	4b9e      	ldr	r3, [pc, #632]	; (8042764 <UART_SetConfig+0x5c8>)
 80424ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80424ec:	e00d      	b.n	804250a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80424ee:	f7fe fead 	bl	804124c <HAL_RCC_GetSysClockFreq>
 80424f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80424f4:	e009      	b.n	804250a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80424f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80424fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80424fc:	e005      	b.n	804250a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80424fe:	2300      	movs	r3, #0
 8042500:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8042502:	2301      	movs	r3, #1
 8042504:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8042508:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 804250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804250c:	2b00      	cmp	r3, #0
 804250e:	f000 8130 	beq.w	8042772 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8042512:	697b      	ldr	r3, [r7, #20]
 8042514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042516:	4a94      	ldr	r2, [pc, #592]	; (8042768 <UART_SetConfig+0x5cc>)
 8042518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804251c:	461a      	mov	r2, r3
 804251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042520:	fbb3 f3f2 	udiv	r3, r3, r2
 8042524:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8042526:	697b      	ldr	r3, [r7, #20]
 8042528:	685a      	ldr	r2, [r3, #4]
 804252a:	4613      	mov	r3, r2
 804252c:	005b      	lsls	r3, r3, #1
 804252e:	4413      	add	r3, r2
 8042530:	69ba      	ldr	r2, [r7, #24]
 8042532:	429a      	cmp	r2, r3
 8042534:	d305      	bcc.n	8042542 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8042536:	697b      	ldr	r3, [r7, #20]
 8042538:	685b      	ldr	r3, [r3, #4]
 804253a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 804253c:	69ba      	ldr	r2, [r7, #24]
 804253e:	429a      	cmp	r2, r3
 8042540:	d903      	bls.n	804254a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8042542:	2301      	movs	r3, #1
 8042544:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8042548:	e113      	b.n	8042772 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804254c:	2200      	movs	r2, #0
 804254e:	60bb      	str	r3, [r7, #8]
 8042550:	60fa      	str	r2, [r7, #12]
 8042552:	697b      	ldr	r3, [r7, #20]
 8042554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042556:	4a84      	ldr	r2, [pc, #528]	; (8042768 <UART_SetConfig+0x5cc>)
 8042558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804255c:	b29b      	uxth	r3, r3
 804255e:	2200      	movs	r2, #0
 8042560:	603b      	str	r3, [r7, #0]
 8042562:	607a      	str	r2, [r7, #4]
 8042564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8042568:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 804256c:	f7fd fe64 	bl	8040238 <__aeabi_uldivmod>
 8042570:	4602      	mov	r2, r0
 8042572:	460b      	mov	r3, r1
 8042574:	4610      	mov	r0, r2
 8042576:	4619      	mov	r1, r3
 8042578:	f04f 0200 	mov.w	r2, #0
 804257c:	f04f 0300 	mov.w	r3, #0
 8042580:	020b      	lsls	r3, r1, #8
 8042582:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8042586:	0202      	lsls	r2, r0, #8
 8042588:	6979      	ldr	r1, [r7, #20]
 804258a:	6849      	ldr	r1, [r1, #4]
 804258c:	0849      	lsrs	r1, r1, #1
 804258e:	2000      	movs	r0, #0
 8042590:	460c      	mov	r4, r1
 8042592:	4605      	mov	r5, r0
 8042594:	eb12 0804 	adds.w	r8, r2, r4
 8042598:	eb43 0905 	adc.w	r9, r3, r5
 804259c:	697b      	ldr	r3, [r7, #20]
 804259e:	685b      	ldr	r3, [r3, #4]
 80425a0:	2200      	movs	r2, #0
 80425a2:	469a      	mov	sl, r3
 80425a4:	4693      	mov	fp, r2
 80425a6:	4652      	mov	r2, sl
 80425a8:	465b      	mov	r3, fp
 80425aa:	4640      	mov	r0, r8
 80425ac:	4649      	mov	r1, r9
 80425ae:	f7fd fe43 	bl	8040238 <__aeabi_uldivmod>
 80425b2:	4602      	mov	r2, r0
 80425b4:	460b      	mov	r3, r1
 80425b6:	4613      	mov	r3, r2
 80425b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80425ba:	6a3b      	ldr	r3, [r7, #32]
 80425bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80425c0:	d308      	bcc.n	80425d4 <UART_SetConfig+0x438>
 80425c2:	6a3b      	ldr	r3, [r7, #32]
 80425c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80425c8:	d204      	bcs.n	80425d4 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80425ca:	697b      	ldr	r3, [r7, #20]
 80425cc:	681b      	ldr	r3, [r3, #0]
 80425ce:	6a3a      	ldr	r2, [r7, #32]
 80425d0:	60da      	str	r2, [r3, #12]
 80425d2:	e0ce      	b.n	8042772 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80425d4:	2301      	movs	r3, #1
 80425d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80425da:	e0ca      	b.n	8042772 <UART_SetConfig+0x5d6>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80425dc:	697b      	ldr	r3, [r7, #20]
 80425de:	69db      	ldr	r3, [r3, #28]
 80425e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80425e4:	d167      	bne.n	80426b6 <UART_SetConfig+0x51a>
  {
    switch (clocksource)
 80425e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80425ea:	2b08      	cmp	r3, #8
 80425ec:	d827      	bhi.n	804263e <UART_SetConfig+0x4a2>
 80425ee:	a201      	add	r2, pc, #4	; (adr r2, 80425f4 <UART_SetConfig+0x458>)
 80425f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80425f4:	08042619 	.word	0x08042619
 80425f8:	08042621 	.word	0x08042621
 80425fc:	08042629 	.word	0x08042629
 8042600:	0804263f 	.word	0x0804263f
 8042604:	0804262f 	.word	0x0804262f
 8042608:	0804263f 	.word	0x0804263f
 804260c:	0804263f 	.word	0x0804263f
 8042610:	0804263f 	.word	0x0804263f
 8042614:	08042637 	.word	0x08042637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042618:	f7fe fec8 	bl	80413ac <HAL_RCC_GetPCLK1Freq>
 804261c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 804261e:	e014      	b.n	804264a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042620:	f7fe fed8 	bl	80413d4 <HAL_RCC_GetPCLK2Freq>
 8042624:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8042626:	e010      	b.n	804264a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042628:	4b4e      	ldr	r3, [pc, #312]	; (8042764 <UART_SetConfig+0x5c8>)
 804262a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 804262c:	e00d      	b.n	804264a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804262e:	f7fe fe0d 	bl	804124c <HAL_RCC_GetSysClockFreq>
 8042632:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8042634:	e009      	b.n	804264a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804263a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 804263c:	e005      	b.n	804264a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 804263e:	2300      	movs	r3, #0
 8042640:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8042642:	2301      	movs	r3, #1
 8042644:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8042648:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 804264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804264c:	2b00      	cmp	r3, #0
 804264e:	f000 8090 	beq.w	8042772 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8042652:	697b      	ldr	r3, [r7, #20]
 8042654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042656:	4a44      	ldr	r2, [pc, #272]	; (8042768 <UART_SetConfig+0x5cc>)
 8042658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804265c:	461a      	mov	r2, r3
 804265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042660:	fbb3 f3f2 	udiv	r3, r3, r2
 8042664:	005a      	lsls	r2, r3, #1
 8042666:	697b      	ldr	r3, [r7, #20]
 8042668:	685b      	ldr	r3, [r3, #4]
 804266a:	085b      	lsrs	r3, r3, #1
 804266c:	441a      	add	r2, r3
 804266e:	697b      	ldr	r3, [r7, #20]
 8042670:	685b      	ldr	r3, [r3, #4]
 8042672:	fbb2 f3f3 	udiv	r3, r2, r3
 8042676:	b29b      	uxth	r3, r3
 8042678:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804267a:	6a3b      	ldr	r3, [r7, #32]
 804267c:	2b0f      	cmp	r3, #15
 804267e:	d916      	bls.n	80426ae <UART_SetConfig+0x512>
 8042680:	6a3b      	ldr	r3, [r7, #32]
 8042682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042686:	d212      	bcs.n	80426ae <UART_SetConfig+0x512>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8042688:	6a3b      	ldr	r3, [r7, #32]
 804268a:	b29b      	uxth	r3, r3
 804268c:	f023 030f 	bic.w	r3, r3, #15
 8042690:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8042692:	6a3b      	ldr	r3, [r7, #32]
 8042694:	085b      	lsrs	r3, r3, #1
 8042696:	b29b      	uxth	r3, r3
 8042698:	f003 0307 	and.w	r3, r3, #7
 804269c:	b29a      	uxth	r2, r3
 804269e:	8bfb      	ldrh	r3, [r7, #30]
 80426a0:	4313      	orrs	r3, r2
 80426a2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80426a4:	697b      	ldr	r3, [r7, #20]
 80426a6:	681b      	ldr	r3, [r3, #0]
 80426a8:	8bfa      	ldrh	r2, [r7, #30]
 80426aa:	60da      	str	r2, [r3, #12]
 80426ac:	e061      	b.n	8042772 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80426ae:	2301      	movs	r3, #1
 80426b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80426b4:	e05d      	b.n	8042772 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80426b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80426ba:	2b08      	cmp	r3, #8
 80426bc:	d827      	bhi.n	804270e <UART_SetConfig+0x572>
 80426be:	a201      	add	r2, pc, #4	; (adr r2, 80426c4 <UART_SetConfig+0x528>)
 80426c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80426c4:	080426e9 	.word	0x080426e9
 80426c8:	080426f1 	.word	0x080426f1
 80426cc:	080426f9 	.word	0x080426f9
 80426d0:	0804270f 	.word	0x0804270f
 80426d4:	080426ff 	.word	0x080426ff
 80426d8:	0804270f 	.word	0x0804270f
 80426dc:	0804270f 	.word	0x0804270f
 80426e0:	0804270f 	.word	0x0804270f
 80426e4:	08042707 	.word	0x08042707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80426e8:	f7fe fe60 	bl	80413ac <HAL_RCC_GetPCLK1Freq>
 80426ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80426ee:	e014      	b.n	804271a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80426f0:	f7fe fe70 	bl	80413d4 <HAL_RCC_GetPCLK2Freq>
 80426f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80426f6:	e010      	b.n	804271a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80426f8:	4b1a      	ldr	r3, [pc, #104]	; (8042764 <UART_SetConfig+0x5c8>)
 80426fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80426fc:	e00d      	b.n	804271a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80426fe:	f7fe fda5 	bl	804124c <HAL_RCC_GetSysClockFreq>
 8042702:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8042704:	e009      	b.n	804271a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804270a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 804270c:	e005      	b.n	804271a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 804270e:	2300      	movs	r3, #0
 8042710:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8042712:	2301      	movs	r3, #1
 8042714:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8042718:	bf00      	nop
    }

    if (pclk != 0U)
 804271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804271c:	2b00      	cmp	r3, #0
 804271e:	d028      	beq.n	8042772 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8042720:	697b      	ldr	r3, [r7, #20]
 8042722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042724:	4a10      	ldr	r2, [pc, #64]	; (8042768 <UART_SetConfig+0x5cc>)
 8042726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804272a:	461a      	mov	r2, r3
 804272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804272e:	fbb3 f2f2 	udiv	r2, r3, r2
 8042732:	697b      	ldr	r3, [r7, #20]
 8042734:	685b      	ldr	r3, [r3, #4]
 8042736:	085b      	lsrs	r3, r3, #1
 8042738:	441a      	add	r2, r3
 804273a:	697b      	ldr	r3, [r7, #20]
 804273c:	685b      	ldr	r3, [r3, #4]
 804273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8042742:	b29b      	uxth	r3, r3
 8042744:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8042746:	6a3b      	ldr	r3, [r7, #32]
 8042748:	2b0f      	cmp	r3, #15
 804274a:	d90f      	bls.n	804276c <UART_SetConfig+0x5d0>
 804274c:	6a3b      	ldr	r3, [r7, #32]
 804274e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042752:	d20b      	bcs.n	804276c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = usartdiv;
 8042754:	697b      	ldr	r3, [r7, #20]
 8042756:	681b      	ldr	r3, [r3, #0]
 8042758:	6a3a      	ldr	r2, [r7, #32]
 804275a:	60da      	str	r2, [r3, #12]
 804275c:	e009      	b.n	8042772 <UART_SetConfig+0x5d6>
 804275e:	bf00      	nop
 8042760:	40008000 	.word	0x40008000
 8042764:	00f42400 	.word	0x00f42400
 8042768:	08044a34 	.word	0x08044a34
      }
      else
      {
        ret = HAL_ERROR;
 804276c:	2301      	movs	r3, #1
 804276e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8042772:	697b      	ldr	r3, [r7, #20]
 8042774:	2201      	movs	r2, #1
 8042776:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 804277a:	697b      	ldr	r3, [r7, #20]
 804277c:	2201      	movs	r2, #1
 804277e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8042782:	697b      	ldr	r3, [r7, #20]
 8042784:	2200      	movs	r2, #0
 8042786:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8042788:	697b      	ldr	r3, [r7, #20]
 804278a:	2200      	movs	r2, #0
 804278c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 804278e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8042792:	4618      	mov	r0, r3
 8042794:	3730      	adds	r7, #48	; 0x30
 8042796:	46bd      	mov	sp, r7
 8042798:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0804279c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 804279c:	b480      	push	{r7}
 804279e:	b083      	sub	sp, #12
 80427a0:	af00      	add	r7, sp, #0
 80427a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80427a4:	687b      	ldr	r3, [r7, #4]
 80427a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80427a8:	f003 0301 	and.w	r3, r3, #1
 80427ac:	2b00      	cmp	r3, #0
 80427ae:	d00a      	beq.n	80427c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80427b0:	687b      	ldr	r3, [r7, #4]
 80427b2:	681b      	ldr	r3, [r3, #0]
 80427b4:	685b      	ldr	r3, [r3, #4]
 80427b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80427ba:	687b      	ldr	r3, [r7, #4]
 80427bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80427be:	687b      	ldr	r3, [r7, #4]
 80427c0:	681b      	ldr	r3, [r3, #0]
 80427c2:	430a      	orrs	r2, r1
 80427c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80427c6:	687b      	ldr	r3, [r7, #4]
 80427c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80427ca:	f003 0302 	and.w	r3, r3, #2
 80427ce:	2b00      	cmp	r3, #0
 80427d0:	d00a      	beq.n	80427e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80427d2:	687b      	ldr	r3, [r7, #4]
 80427d4:	681b      	ldr	r3, [r3, #0]
 80427d6:	685b      	ldr	r3, [r3, #4]
 80427d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80427dc:	687b      	ldr	r3, [r7, #4]
 80427de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80427e0:	687b      	ldr	r3, [r7, #4]
 80427e2:	681b      	ldr	r3, [r3, #0]
 80427e4:	430a      	orrs	r2, r1
 80427e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80427e8:	687b      	ldr	r3, [r7, #4]
 80427ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80427ec:	f003 0304 	and.w	r3, r3, #4
 80427f0:	2b00      	cmp	r3, #0
 80427f2:	d00a      	beq.n	804280a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80427f4:	687b      	ldr	r3, [r7, #4]
 80427f6:	681b      	ldr	r3, [r3, #0]
 80427f8:	685b      	ldr	r3, [r3, #4]
 80427fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80427fe:	687b      	ldr	r3, [r7, #4]
 8042800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8042802:	687b      	ldr	r3, [r7, #4]
 8042804:	681b      	ldr	r3, [r3, #0]
 8042806:	430a      	orrs	r2, r1
 8042808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 804280a:	687b      	ldr	r3, [r7, #4]
 804280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804280e:	f003 0308 	and.w	r3, r3, #8
 8042812:	2b00      	cmp	r3, #0
 8042814:	d00a      	beq.n	804282c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8042816:	687b      	ldr	r3, [r7, #4]
 8042818:	681b      	ldr	r3, [r3, #0]
 804281a:	685b      	ldr	r3, [r3, #4]
 804281c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8042820:	687b      	ldr	r3, [r7, #4]
 8042822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8042824:	687b      	ldr	r3, [r7, #4]
 8042826:	681b      	ldr	r3, [r3, #0]
 8042828:	430a      	orrs	r2, r1
 804282a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 804282c:	687b      	ldr	r3, [r7, #4]
 804282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042830:	f003 0310 	and.w	r3, r3, #16
 8042834:	2b00      	cmp	r3, #0
 8042836:	d00a      	beq.n	804284e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8042838:	687b      	ldr	r3, [r7, #4]
 804283a:	681b      	ldr	r3, [r3, #0]
 804283c:	689b      	ldr	r3, [r3, #8]
 804283e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8042842:	687b      	ldr	r3, [r7, #4]
 8042844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8042846:	687b      	ldr	r3, [r7, #4]
 8042848:	681b      	ldr	r3, [r3, #0]
 804284a:	430a      	orrs	r2, r1
 804284c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 804284e:	687b      	ldr	r3, [r7, #4]
 8042850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042852:	f003 0320 	and.w	r3, r3, #32
 8042856:	2b00      	cmp	r3, #0
 8042858:	d00a      	beq.n	8042870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 804285a:	687b      	ldr	r3, [r7, #4]
 804285c:	681b      	ldr	r3, [r3, #0]
 804285e:	689b      	ldr	r3, [r3, #8]
 8042860:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8042864:	687b      	ldr	r3, [r7, #4]
 8042866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8042868:	687b      	ldr	r3, [r7, #4]
 804286a:	681b      	ldr	r3, [r3, #0]
 804286c:	430a      	orrs	r2, r1
 804286e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8042870:	687b      	ldr	r3, [r7, #4]
 8042872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042878:	2b00      	cmp	r3, #0
 804287a:	d01a      	beq.n	80428b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 804287c:	687b      	ldr	r3, [r7, #4]
 804287e:	681b      	ldr	r3, [r3, #0]
 8042880:	685b      	ldr	r3, [r3, #4]
 8042882:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8042886:	687b      	ldr	r3, [r7, #4]
 8042888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804288a:	687b      	ldr	r3, [r7, #4]
 804288c:	681b      	ldr	r3, [r3, #0]
 804288e:	430a      	orrs	r2, r1
 8042890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8042892:	687b      	ldr	r3, [r7, #4]
 8042894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804289a:	d10a      	bne.n	80428b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 804289c:	687b      	ldr	r3, [r7, #4]
 804289e:	681b      	ldr	r3, [r3, #0]
 80428a0:	685b      	ldr	r3, [r3, #4]
 80428a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80428a6:	687b      	ldr	r3, [r7, #4]
 80428a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80428aa:	687b      	ldr	r3, [r7, #4]
 80428ac:	681b      	ldr	r3, [r3, #0]
 80428ae:	430a      	orrs	r2, r1
 80428b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80428b2:	687b      	ldr	r3, [r7, #4]
 80428b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80428b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80428ba:	2b00      	cmp	r3, #0
 80428bc:	d00a      	beq.n	80428d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80428be:	687b      	ldr	r3, [r7, #4]
 80428c0:	681b      	ldr	r3, [r3, #0]
 80428c2:	685b      	ldr	r3, [r3, #4]
 80428c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80428c8:	687b      	ldr	r3, [r7, #4]
 80428ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80428cc:	687b      	ldr	r3, [r7, #4]
 80428ce:	681b      	ldr	r3, [r3, #0]
 80428d0:	430a      	orrs	r2, r1
 80428d2:	605a      	str	r2, [r3, #4]
  }
}
 80428d4:	bf00      	nop
 80428d6:	370c      	adds	r7, #12
 80428d8:	46bd      	mov	sp, r7
 80428da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80428de:	4770      	bx	lr

080428e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80428e0:	b580      	push	{r7, lr}
 80428e2:	b086      	sub	sp, #24
 80428e4:	af02      	add	r7, sp, #8
 80428e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80428e8:	687b      	ldr	r3, [r7, #4]
 80428ea:	2200      	movs	r2, #0
 80428ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80428f0:	f7fe f98a 	bl	8040c08 <HAL_GetTick>
 80428f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80428f6:	687b      	ldr	r3, [r7, #4]
 80428f8:	681b      	ldr	r3, [r3, #0]
 80428fa:	681b      	ldr	r3, [r3, #0]
 80428fc:	f003 0308 	and.w	r3, r3, #8
 8042900:	2b08      	cmp	r3, #8
 8042902:	d10e      	bne.n	8042922 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8042908:	9300      	str	r3, [sp, #0]
 804290a:	68fb      	ldr	r3, [r7, #12]
 804290c:	2200      	movs	r2, #0
 804290e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8042912:	6878      	ldr	r0, [r7, #4]
 8042914:	f000 f82f 	bl	8042976 <UART_WaitOnFlagUntilTimeout>
 8042918:	4603      	mov	r3, r0
 804291a:	2b00      	cmp	r3, #0
 804291c:	d001      	beq.n	8042922 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 804291e:	2303      	movs	r3, #3
 8042920:	e025      	b.n	804296e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8042922:	687b      	ldr	r3, [r7, #4]
 8042924:	681b      	ldr	r3, [r3, #0]
 8042926:	681b      	ldr	r3, [r3, #0]
 8042928:	f003 0304 	and.w	r3, r3, #4
 804292c:	2b04      	cmp	r3, #4
 804292e:	d10e      	bne.n	804294e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8042934:	9300      	str	r3, [sp, #0]
 8042936:	68fb      	ldr	r3, [r7, #12]
 8042938:	2200      	movs	r2, #0
 804293a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 804293e:	6878      	ldr	r0, [r7, #4]
 8042940:	f000 f819 	bl	8042976 <UART_WaitOnFlagUntilTimeout>
 8042944:	4603      	mov	r3, r0
 8042946:	2b00      	cmp	r3, #0
 8042948:	d001      	beq.n	804294e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 804294a:	2303      	movs	r3, #3
 804294c:	e00f      	b.n	804296e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 804294e:	687b      	ldr	r3, [r7, #4]
 8042950:	2220      	movs	r2, #32
 8042952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8042956:	687b      	ldr	r3, [r7, #4]
 8042958:	2220      	movs	r2, #32
 804295a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804295e:	687b      	ldr	r3, [r7, #4]
 8042960:	2200      	movs	r2, #0
 8042962:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8042964:	687b      	ldr	r3, [r7, #4]
 8042966:	2200      	movs	r2, #0
 8042968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804296c:	2300      	movs	r3, #0
}
 804296e:	4618      	mov	r0, r3
 8042970:	3710      	adds	r7, #16
 8042972:	46bd      	mov	sp, r7
 8042974:	bd80      	pop	{r7, pc}

08042976 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8042976:	b580      	push	{r7, lr}
 8042978:	b084      	sub	sp, #16
 804297a:	af00      	add	r7, sp, #0
 804297c:	60f8      	str	r0, [r7, #12]
 804297e:	60b9      	str	r1, [r7, #8]
 8042980:	603b      	str	r3, [r7, #0]
 8042982:	4613      	mov	r3, r2
 8042984:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042986:	e062      	b.n	8042a4e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042988:	69bb      	ldr	r3, [r7, #24]
 804298a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804298e:	d05e      	beq.n	8042a4e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8042990:	f7fe f93a 	bl	8040c08 <HAL_GetTick>
 8042994:	4602      	mov	r2, r0
 8042996:	683b      	ldr	r3, [r7, #0]
 8042998:	1ad3      	subs	r3, r2, r3
 804299a:	69ba      	ldr	r2, [r7, #24]
 804299c:	429a      	cmp	r2, r3
 804299e:	d302      	bcc.n	80429a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80429a0:	69bb      	ldr	r3, [r7, #24]
 80429a2:	2b00      	cmp	r3, #0
 80429a4:	d11d      	bne.n	80429e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80429a6:	68fb      	ldr	r3, [r7, #12]
 80429a8:	681b      	ldr	r3, [r3, #0]
 80429aa:	681a      	ldr	r2, [r3, #0]
 80429ac:	68fb      	ldr	r3, [r7, #12]
 80429ae:	681b      	ldr	r3, [r3, #0]
 80429b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80429b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80429b6:	68fb      	ldr	r3, [r7, #12]
 80429b8:	681b      	ldr	r3, [r3, #0]
 80429ba:	689a      	ldr	r2, [r3, #8]
 80429bc:	68fb      	ldr	r3, [r7, #12]
 80429be:	681b      	ldr	r3, [r3, #0]
 80429c0:	f022 0201 	bic.w	r2, r2, #1
 80429c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80429c6:	68fb      	ldr	r3, [r7, #12]
 80429c8:	2220      	movs	r2, #32
 80429ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80429ce:	68fb      	ldr	r3, [r7, #12]
 80429d0:	2220      	movs	r2, #32
 80429d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80429d6:	68fb      	ldr	r3, [r7, #12]
 80429d8:	2200      	movs	r2, #0
 80429da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80429de:	2303      	movs	r3, #3
 80429e0:	e045      	b.n	8042a6e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80429e2:	68fb      	ldr	r3, [r7, #12]
 80429e4:	681b      	ldr	r3, [r3, #0]
 80429e6:	681b      	ldr	r3, [r3, #0]
 80429e8:	f003 0304 	and.w	r3, r3, #4
 80429ec:	2b00      	cmp	r3, #0
 80429ee:	d02e      	beq.n	8042a4e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80429f0:	68fb      	ldr	r3, [r7, #12]
 80429f2:	681b      	ldr	r3, [r3, #0]
 80429f4:	69db      	ldr	r3, [r3, #28]
 80429f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80429fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80429fe:	d126      	bne.n	8042a4e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8042a00:	68fb      	ldr	r3, [r7, #12]
 8042a02:	681b      	ldr	r3, [r3, #0]
 8042a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042a08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8042a0a:	68fb      	ldr	r3, [r7, #12]
 8042a0c:	681b      	ldr	r3, [r3, #0]
 8042a0e:	681a      	ldr	r2, [r3, #0]
 8042a10:	68fb      	ldr	r3, [r7, #12]
 8042a12:	681b      	ldr	r3, [r3, #0]
 8042a14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8042a18:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042a1a:	68fb      	ldr	r3, [r7, #12]
 8042a1c:	681b      	ldr	r3, [r3, #0]
 8042a1e:	689a      	ldr	r2, [r3, #8]
 8042a20:	68fb      	ldr	r3, [r7, #12]
 8042a22:	681b      	ldr	r3, [r3, #0]
 8042a24:	f022 0201 	bic.w	r2, r2, #1
 8042a28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8042a2a:	68fb      	ldr	r3, [r7, #12]
 8042a2c:	2220      	movs	r2, #32
 8042a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8042a32:	68fb      	ldr	r3, [r7, #12]
 8042a34:	2220      	movs	r2, #32
 8042a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8042a3a:	68fb      	ldr	r3, [r7, #12]
 8042a3c:	2220      	movs	r2, #32
 8042a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8042a42:	68fb      	ldr	r3, [r7, #12]
 8042a44:	2200      	movs	r2, #0
 8042a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8042a4a:	2303      	movs	r3, #3
 8042a4c:	e00f      	b.n	8042a6e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042a4e:	68fb      	ldr	r3, [r7, #12]
 8042a50:	681b      	ldr	r3, [r3, #0]
 8042a52:	69da      	ldr	r2, [r3, #28]
 8042a54:	68bb      	ldr	r3, [r7, #8]
 8042a56:	4013      	ands	r3, r2
 8042a58:	68ba      	ldr	r2, [r7, #8]
 8042a5a:	429a      	cmp	r2, r3
 8042a5c:	bf0c      	ite	eq
 8042a5e:	2301      	moveq	r3, #1
 8042a60:	2300      	movne	r3, #0
 8042a62:	b2db      	uxtb	r3, r3
 8042a64:	461a      	mov	r2, r3
 8042a66:	79fb      	ldrb	r3, [r7, #7]
 8042a68:	429a      	cmp	r2, r3
 8042a6a:	d08d      	beq.n	8042988 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8042a6c:	2300      	movs	r3, #0
}
 8042a6e:	4618      	mov	r0, r3
 8042a70:	3710      	adds	r7, #16
 8042a72:	46bd      	mov	sp, r7
 8042a74:	bd80      	pop	{r7, pc}

08042a76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8042a76:	b480      	push	{r7}
 8042a78:	b085      	sub	sp, #20
 8042a7a:	af00      	add	r7, sp, #0
 8042a7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8042a7e:	687b      	ldr	r3, [r7, #4]
 8042a80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8042a84:	2b01      	cmp	r3, #1
 8042a86:	d101      	bne.n	8042a8c <HAL_UARTEx_DisableFifoMode+0x16>
 8042a88:	2302      	movs	r3, #2
 8042a8a:	e027      	b.n	8042adc <HAL_UARTEx_DisableFifoMode+0x66>
 8042a8c:	687b      	ldr	r3, [r7, #4]
 8042a8e:	2201      	movs	r2, #1
 8042a90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8042a94:	687b      	ldr	r3, [r7, #4]
 8042a96:	2224      	movs	r2, #36	; 0x24
 8042a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8042a9c:	687b      	ldr	r3, [r7, #4]
 8042a9e:	681b      	ldr	r3, [r3, #0]
 8042aa0:	681b      	ldr	r3, [r3, #0]
 8042aa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8042aa4:	687b      	ldr	r3, [r7, #4]
 8042aa6:	681b      	ldr	r3, [r3, #0]
 8042aa8:	681a      	ldr	r2, [r3, #0]
 8042aaa:	687b      	ldr	r3, [r7, #4]
 8042aac:	681b      	ldr	r3, [r3, #0]
 8042aae:	f022 0201 	bic.w	r2, r2, #1
 8042ab2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8042ab4:	68fb      	ldr	r3, [r7, #12]
 8042ab6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8042aba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8042abc:	687b      	ldr	r3, [r7, #4]
 8042abe:	2200      	movs	r2, #0
 8042ac0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8042ac2:	687b      	ldr	r3, [r7, #4]
 8042ac4:	681b      	ldr	r3, [r3, #0]
 8042ac6:	68fa      	ldr	r2, [r7, #12]
 8042ac8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8042aca:	687b      	ldr	r3, [r7, #4]
 8042acc:	2220      	movs	r2, #32
 8042ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8042ad2:	687b      	ldr	r3, [r7, #4]
 8042ad4:	2200      	movs	r2, #0
 8042ad6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8042ada:	2300      	movs	r3, #0
}
 8042adc:	4618      	mov	r0, r3
 8042ade:	3714      	adds	r7, #20
 8042ae0:	46bd      	mov	sp, r7
 8042ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ae6:	4770      	bx	lr

08042ae8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8042ae8:	b580      	push	{r7, lr}
 8042aea:	b084      	sub	sp, #16
 8042aec:	af00      	add	r7, sp, #0
 8042aee:	6078      	str	r0, [r7, #4]
 8042af0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8042af2:	687b      	ldr	r3, [r7, #4]
 8042af4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8042af8:	2b01      	cmp	r3, #1
 8042afa:	d101      	bne.n	8042b00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8042afc:	2302      	movs	r3, #2
 8042afe:	e02d      	b.n	8042b5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8042b00:	687b      	ldr	r3, [r7, #4]
 8042b02:	2201      	movs	r2, #1
 8042b04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8042b08:	687b      	ldr	r3, [r7, #4]
 8042b0a:	2224      	movs	r2, #36	; 0x24
 8042b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8042b10:	687b      	ldr	r3, [r7, #4]
 8042b12:	681b      	ldr	r3, [r3, #0]
 8042b14:	681b      	ldr	r3, [r3, #0]
 8042b16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8042b18:	687b      	ldr	r3, [r7, #4]
 8042b1a:	681b      	ldr	r3, [r3, #0]
 8042b1c:	681a      	ldr	r2, [r3, #0]
 8042b1e:	687b      	ldr	r3, [r7, #4]
 8042b20:	681b      	ldr	r3, [r3, #0]
 8042b22:	f022 0201 	bic.w	r2, r2, #1
 8042b26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8042b28:	687b      	ldr	r3, [r7, #4]
 8042b2a:	681b      	ldr	r3, [r3, #0]
 8042b2c:	689b      	ldr	r3, [r3, #8]
 8042b2e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8042b32:	687b      	ldr	r3, [r7, #4]
 8042b34:	681b      	ldr	r3, [r3, #0]
 8042b36:	683a      	ldr	r2, [r7, #0]
 8042b38:	430a      	orrs	r2, r1
 8042b3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8042b3c:	6878      	ldr	r0, [r7, #4]
 8042b3e:	f000 f84f 	bl	8042be0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8042b42:	687b      	ldr	r3, [r7, #4]
 8042b44:	681b      	ldr	r3, [r3, #0]
 8042b46:	68fa      	ldr	r2, [r7, #12]
 8042b48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8042b4a:	687b      	ldr	r3, [r7, #4]
 8042b4c:	2220      	movs	r2, #32
 8042b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8042b52:	687b      	ldr	r3, [r7, #4]
 8042b54:	2200      	movs	r2, #0
 8042b56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8042b5a:	2300      	movs	r3, #0
}
 8042b5c:	4618      	mov	r0, r3
 8042b5e:	3710      	adds	r7, #16
 8042b60:	46bd      	mov	sp, r7
 8042b62:	bd80      	pop	{r7, pc}

08042b64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8042b64:	b580      	push	{r7, lr}
 8042b66:	b084      	sub	sp, #16
 8042b68:	af00      	add	r7, sp, #0
 8042b6a:	6078      	str	r0, [r7, #4]
 8042b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8042b6e:	687b      	ldr	r3, [r7, #4]
 8042b70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8042b74:	2b01      	cmp	r3, #1
 8042b76:	d101      	bne.n	8042b7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8042b78:	2302      	movs	r3, #2
 8042b7a:	e02d      	b.n	8042bd8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8042b7c:	687b      	ldr	r3, [r7, #4]
 8042b7e:	2201      	movs	r2, #1
 8042b80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8042b84:	687b      	ldr	r3, [r7, #4]
 8042b86:	2224      	movs	r2, #36	; 0x24
 8042b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8042b8c:	687b      	ldr	r3, [r7, #4]
 8042b8e:	681b      	ldr	r3, [r3, #0]
 8042b90:	681b      	ldr	r3, [r3, #0]
 8042b92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8042b94:	687b      	ldr	r3, [r7, #4]
 8042b96:	681b      	ldr	r3, [r3, #0]
 8042b98:	681a      	ldr	r2, [r3, #0]
 8042b9a:	687b      	ldr	r3, [r7, #4]
 8042b9c:	681b      	ldr	r3, [r3, #0]
 8042b9e:	f022 0201 	bic.w	r2, r2, #1
 8042ba2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8042ba4:	687b      	ldr	r3, [r7, #4]
 8042ba6:	681b      	ldr	r3, [r3, #0]
 8042ba8:	689b      	ldr	r3, [r3, #8]
 8042baa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8042bae:	687b      	ldr	r3, [r7, #4]
 8042bb0:	681b      	ldr	r3, [r3, #0]
 8042bb2:	683a      	ldr	r2, [r7, #0]
 8042bb4:	430a      	orrs	r2, r1
 8042bb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8042bb8:	6878      	ldr	r0, [r7, #4]
 8042bba:	f000 f811 	bl	8042be0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8042bbe:	687b      	ldr	r3, [r7, #4]
 8042bc0:	681b      	ldr	r3, [r3, #0]
 8042bc2:	68fa      	ldr	r2, [r7, #12]
 8042bc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8042bc6:	687b      	ldr	r3, [r7, #4]
 8042bc8:	2220      	movs	r2, #32
 8042bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8042bce:	687b      	ldr	r3, [r7, #4]
 8042bd0:	2200      	movs	r2, #0
 8042bd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8042bd6:	2300      	movs	r3, #0
}
 8042bd8:	4618      	mov	r0, r3
 8042bda:	3710      	adds	r7, #16
 8042bdc:	46bd      	mov	sp, r7
 8042bde:	bd80      	pop	{r7, pc}

08042be0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8042be0:	b480      	push	{r7}
 8042be2:	b085      	sub	sp, #20
 8042be4:	af00      	add	r7, sp, #0
 8042be6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8042be8:	687b      	ldr	r3, [r7, #4]
 8042bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042bec:	2b00      	cmp	r3, #0
 8042bee:	d108      	bne.n	8042c02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8042bf0:	687b      	ldr	r3, [r7, #4]
 8042bf2:	2201      	movs	r2, #1
 8042bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8042bf8:	687b      	ldr	r3, [r7, #4]
 8042bfa:	2201      	movs	r2, #1
 8042bfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8042c00:	e031      	b.n	8042c66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8042c02:	2308      	movs	r3, #8
 8042c04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8042c06:	2308      	movs	r3, #8
 8042c08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8042c0a:	687b      	ldr	r3, [r7, #4]
 8042c0c:	681b      	ldr	r3, [r3, #0]
 8042c0e:	689b      	ldr	r3, [r3, #8]
 8042c10:	0e5b      	lsrs	r3, r3, #25
 8042c12:	b2db      	uxtb	r3, r3
 8042c14:	f003 0307 	and.w	r3, r3, #7
 8042c18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8042c1a:	687b      	ldr	r3, [r7, #4]
 8042c1c:	681b      	ldr	r3, [r3, #0]
 8042c1e:	689b      	ldr	r3, [r3, #8]
 8042c20:	0f5b      	lsrs	r3, r3, #29
 8042c22:	b2db      	uxtb	r3, r3
 8042c24:	f003 0307 	and.w	r3, r3, #7
 8042c28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8042c2a:	7bbb      	ldrb	r3, [r7, #14]
 8042c2c:	7b3a      	ldrb	r2, [r7, #12]
 8042c2e:	4911      	ldr	r1, [pc, #68]	; (8042c74 <UARTEx_SetNbDataToProcess+0x94>)
 8042c30:	5c8a      	ldrb	r2, [r1, r2]
 8042c32:	fb02 f303 	mul.w	r3, r2, r3
 8042c36:	7b3a      	ldrb	r2, [r7, #12]
 8042c38:	490f      	ldr	r1, [pc, #60]	; (8042c78 <UARTEx_SetNbDataToProcess+0x98>)
 8042c3a:	5c8a      	ldrb	r2, [r1, r2]
 8042c3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8042c40:	b29a      	uxth	r2, r3
 8042c42:	687b      	ldr	r3, [r7, #4]
 8042c44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8042c48:	7bfb      	ldrb	r3, [r7, #15]
 8042c4a:	7b7a      	ldrb	r2, [r7, #13]
 8042c4c:	4909      	ldr	r1, [pc, #36]	; (8042c74 <UARTEx_SetNbDataToProcess+0x94>)
 8042c4e:	5c8a      	ldrb	r2, [r1, r2]
 8042c50:	fb02 f303 	mul.w	r3, r2, r3
 8042c54:	7b7a      	ldrb	r2, [r7, #13]
 8042c56:	4908      	ldr	r1, [pc, #32]	; (8042c78 <UARTEx_SetNbDataToProcess+0x98>)
 8042c58:	5c8a      	ldrb	r2, [r1, r2]
 8042c5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8042c5e:	b29a      	uxth	r2, r3
 8042c60:	687b      	ldr	r3, [r7, #4]
 8042c62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8042c66:	bf00      	nop
 8042c68:	3714      	adds	r7, #20
 8042c6a:	46bd      	mov	sp, r7
 8042c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c70:	4770      	bx	lr
 8042c72:	bf00      	nop
 8042c74:	08044a4c 	.word	0x08044a4c
 8042c78:	08044a54 	.word	0x08044a54

08042c7c <__errno>:
 8042c7c:	4b01      	ldr	r3, [pc, #4]	; (8042c84 <__errno+0x8>)
 8042c7e:	6818      	ldr	r0, [r3, #0]
 8042c80:	4770      	bx	lr
 8042c82:	bf00      	nop
 8042c84:	2001800c 	.word	0x2001800c

08042c88 <__libc_init_array>:
 8042c88:	b570      	push	{r4, r5, r6, lr}
 8042c8a:	4d0d      	ldr	r5, [pc, #52]	; (8042cc0 <__libc_init_array+0x38>)
 8042c8c:	2600      	movs	r6, #0
 8042c8e:	4c0d      	ldr	r4, [pc, #52]	; (8042cc4 <__libc_init_array+0x3c>)
 8042c90:	1b64      	subs	r4, r4, r5
 8042c92:	10a4      	asrs	r4, r4, #2
 8042c94:	42a6      	cmp	r6, r4
 8042c96:	d109      	bne.n	8042cac <__libc_init_array+0x24>
 8042c98:	4d0b      	ldr	r5, [pc, #44]	; (8042cc8 <__libc_init_array+0x40>)
 8042c9a:	2600      	movs	r6, #0
 8042c9c:	4c0b      	ldr	r4, [pc, #44]	; (8042ccc <__libc_init_array+0x44>)
 8042c9e:	f001 fe33 	bl	8044908 <_init>
 8042ca2:	1b64      	subs	r4, r4, r5
 8042ca4:	10a4      	asrs	r4, r4, #2
 8042ca6:	42a6      	cmp	r6, r4
 8042ca8:	d105      	bne.n	8042cb6 <__libc_init_array+0x2e>
 8042caa:	bd70      	pop	{r4, r5, r6, pc}
 8042cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8042cb0:	3601      	adds	r6, #1
 8042cb2:	4798      	blx	r3
 8042cb4:	e7ee      	b.n	8042c94 <__libc_init_array+0xc>
 8042cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8042cba:	3601      	adds	r6, #1
 8042cbc:	4798      	blx	r3
 8042cbe:	e7f2      	b.n	8042ca6 <__libc_init_array+0x1e>
 8042cc0:	08044c18 	.word	0x08044c18
 8042cc4:	08044c18 	.word	0x08044c18
 8042cc8:	08044c18 	.word	0x08044c18
 8042ccc:	08044c1c 	.word	0x08044c1c

08042cd0 <memset>:
 8042cd0:	4402      	add	r2, r0
 8042cd2:	4603      	mov	r3, r0
 8042cd4:	4293      	cmp	r3, r2
 8042cd6:	d100      	bne.n	8042cda <memset+0xa>
 8042cd8:	4770      	bx	lr
 8042cda:	f803 1b01 	strb.w	r1, [r3], #1
 8042cde:	e7f9      	b.n	8042cd4 <memset+0x4>

08042ce0 <iscanf>:
 8042ce0:	b40f      	push	{r0, r1, r2, r3}
 8042ce2:	4b0a      	ldr	r3, [pc, #40]	; (8042d0c <iscanf+0x2c>)
 8042ce4:	b513      	push	{r0, r1, r4, lr}
 8042ce6:	681c      	ldr	r4, [r3, #0]
 8042ce8:	b124      	cbz	r4, 8042cf4 <iscanf+0x14>
 8042cea:	69a3      	ldr	r3, [r4, #24]
 8042cec:	b913      	cbnz	r3, 8042cf4 <iscanf+0x14>
 8042cee:	4620      	mov	r0, r4
 8042cf0:	f000 fa24 	bl	804313c <__sinit>
 8042cf4:	ab05      	add	r3, sp, #20
 8042cf6:	9a04      	ldr	r2, [sp, #16]
 8042cf8:	6861      	ldr	r1, [r4, #4]
 8042cfa:	4620      	mov	r0, r4
 8042cfc:	9301      	str	r3, [sp, #4]
 8042cfe:	f001 f8bf 	bl	8043e80 <_vfiscanf_r>
 8042d02:	b002      	add	sp, #8
 8042d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8042d08:	b004      	add	sp, #16
 8042d0a:	4770      	bx	lr
 8042d0c:	2001800c 	.word	0x2001800c

08042d10 <setbuf>:
 8042d10:	2900      	cmp	r1, #0
 8042d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8042d16:	bf0c      	ite	eq
 8042d18:	2202      	moveq	r2, #2
 8042d1a:	2200      	movne	r2, #0
 8042d1c:	f000 b800 	b.w	8042d20 <setvbuf>

08042d20 <setvbuf>:
 8042d20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8042d24:	461d      	mov	r5, r3
 8042d26:	4b5c      	ldr	r3, [pc, #368]	; (8042e98 <setvbuf+0x178>)
 8042d28:	4604      	mov	r4, r0
 8042d2a:	460e      	mov	r6, r1
 8042d2c:	681f      	ldr	r7, [r3, #0]
 8042d2e:	4690      	mov	r8, r2
 8042d30:	b127      	cbz	r7, 8042d3c <setvbuf+0x1c>
 8042d32:	69bb      	ldr	r3, [r7, #24]
 8042d34:	b913      	cbnz	r3, 8042d3c <setvbuf+0x1c>
 8042d36:	4638      	mov	r0, r7
 8042d38:	f000 fa00 	bl	804313c <__sinit>
 8042d3c:	4b57      	ldr	r3, [pc, #348]	; (8042e9c <setvbuf+0x17c>)
 8042d3e:	429c      	cmp	r4, r3
 8042d40:	d167      	bne.n	8042e12 <setvbuf+0xf2>
 8042d42:	687c      	ldr	r4, [r7, #4]
 8042d44:	f1b8 0f02 	cmp.w	r8, #2
 8042d48:	d006      	beq.n	8042d58 <setvbuf+0x38>
 8042d4a:	f1b8 0f01 	cmp.w	r8, #1
 8042d4e:	f200 809e 	bhi.w	8042e8e <setvbuf+0x16e>
 8042d52:	2d00      	cmp	r5, #0
 8042d54:	f2c0 809b 	blt.w	8042e8e <setvbuf+0x16e>
 8042d58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8042d5a:	07db      	lsls	r3, r3, #31
 8042d5c:	d405      	bmi.n	8042d6a <setvbuf+0x4a>
 8042d5e:	89a3      	ldrh	r3, [r4, #12]
 8042d60:	0598      	lsls	r0, r3, #22
 8042d62:	d402      	bmi.n	8042d6a <setvbuf+0x4a>
 8042d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8042d66:	f000 faa4 	bl	80432b2 <__retarget_lock_acquire_recursive>
 8042d6a:	4621      	mov	r1, r4
 8042d6c:	4638      	mov	r0, r7
 8042d6e:	f000 f93f 	bl	8042ff0 <_fflush_r>
 8042d72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8042d74:	b141      	cbz	r1, 8042d88 <setvbuf+0x68>
 8042d76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8042d7a:	4299      	cmp	r1, r3
 8042d7c:	d002      	beq.n	8042d84 <setvbuf+0x64>
 8042d7e:	4638      	mov	r0, r7
 8042d80:	f000 fb06 	bl	8043390 <_free_r>
 8042d84:	2300      	movs	r3, #0
 8042d86:	6363      	str	r3, [r4, #52]	; 0x34
 8042d88:	2300      	movs	r3, #0
 8042d8a:	61a3      	str	r3, [r4, #24]
 8042d8c:	6063      	str	r3, [r4, #4]
 8042d8e:	89a3      	ldrh	r3, [r4, #12]
 8042d90:	0619      	lsls	r1, r3, #24
 8042d92:	d503      	bpl.n	8042d9c <setvbuf+0x7c>
 8042d94:	6921      	ldr	r1, [r4, #16]
 8042d96:	4638      	mov	r0, r7
 8042d98:	f000 fafa 	bl	8043390 <_free_r>
 8042d9c:	89a3      	ldrh	r3, [r4, #12]
 8042d9e:	f1b8 0f02 	cmp.w	r8, #2
 8042da2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8042da6:	f023 0303 	bic.w	r3, r3, #3
 8042daa:	81a3      	strh	r3, [r4, #12]
 8042dac:	d06b      	beq.n	8042e86 <setvbuf+0x166>
 8042dae:	ab01      	add	r3, sp, #4
 8042db0:	466a      	mov	r2, sp
 8042db2:	4621      	mov	r1, r4
 8042db4:	4638      	mov	r0, r7
 8042db6:	f000 fa7e 	bl	80432b6 <__swhatbuf_r>
 8042dba:	89a3      	ldrh	r3, [r4, #12]
 8042dbc:	4318      	orrs	r0, r3
 8042dbe:	81a0      	strh	r0, [r4, #12]
 8042dc0:	2d00      	cmp	r5, #0
 8042dc2:	d130      	bne.n	8042e26 <setvbuf+0x106>
 8042dc4:	9d00      	ldr	r5, [sp, #0]
 8042dc6:	4628      	mov	r0, r5
 8042dc8:	f000 fada 	bl	8043380 <malloc>
 8042dcc:	4606      	mov	r6, r0
 8042dce:	2800      	cmp	r0, #0
 8042dd0:	d154      	bne.n	8042e7c <setvbuf+0x15c>
 8042dd2:	f8dd 9000 	ldr.w	r9, [sp]
 8042dd6:	45a9      	cmp	r9, r5
 8042dd8:	d149      	bne.n	8042e6e <setvbuf+0x14e>
 8042dda:	f04f 35ff 	mov.w	r5, #4294967295
 8042dde:	2200      	movs	r2, #0
 8042de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8042de4:	60a2      	str	r2, [r4, #8]
 8042de6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8042dea:	f043 0302 	orr.w	r3, r3, #2
 8042dee:	6022      	str	r2, [r4, #0]
 8042df0:	6122      	str	r2, [r4, #16]
 8042df2:	2201      	movs	r2, #1
 8042df4:	81a3      	strh	r3, [r4, #12]
 8042df6:	6162      	str	r2, [r4, #20]
 8042df8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8042dfa:	07d2      	lsls	r2, r2, #31
 8042dfc:	d405      	bmi.n	8042e0a <setvbuf+0xea>
 8042dfe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8042e02:	d102      	bne.n	8042e0a <setvbuf+0xea>
 8042e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8042e06:	f000 fa55 	bl	80432b4 <__retarget_lock_release_recursive>
 8042e0a:	4628      	mov	r0, r5
 8042e0c:	b003      	add	sp, #12
 8042e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8042e12:	4b23      	ldr	r3, [pc, #140]	; (8042ea0 <setvbuf+0x180>)
 8042e14:	429c      	cmp	r4, r3
 8042e16:	d101      	bne.n	8042e1c <setvbuf+0xfc>
 8042e18:	68bc      	ldr	r4, [r7, #8]
 8042e1a:	e793      	b.n	8042d44 <setvbuf+0x24>
 8042e1c:	4b21      	ldr	r3, [pc, #132]	; (8042ea4 <setvbuf+0x184>)
 8042e1e:	429c      	cmp	r4, r3
 8042e20:	bf08      	it	eq
 8042e22:	68fc      	ldreq	r4, [r7, #12]
 8042e24:	e78e      	b.n	8042d44 <setvbuf+0x24>
 8042e26:	2e00      	cmp	r6, #0
 8042e28:	d0cd      	beq.n	8042dc6 <setvbuf+0xa6>
 8042e2a:	69bb      	ldr	r3, [r7, #24]
 8042e2c:	b913      	cbnz	r3, 8042e34 <setvbuf+0x114>
 8042e2e:	4638      	mov	r0, r7
 8042e30:	f000 f984 	bl	804313c <__sinit>
 8042e34:	f1b8 0f01 	cmp.w	r8, #1
 8042e38:	6026      	str	r6, [r4, #0]
 8042e3a:	bf02      	ittt	eq
 8042e3c:	89a3      	ldrheq	r3, [r4, #12]
 8042e3e:	f043 0301 	orreq.w	r3, r3, #1
 8042e42:	81a3      	strheq	r3, [r4, #12]
 8042e44:	89a2      	ldrh	r2, [r4, #12]
 8042e46:	f012 0308 	ands.w	r3, r2, #8
 8042e4a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8042e4e:	d01c      	beq.n	8042e8a <setvbuf+0x16a>
 8042e50:	07d3      	lsls	r3, r2, #31
 8042e52:	bf45      	ittet	mi
 8042e54:	2300      	movmi	r3, #0
 8042e56:	426d      	negmi	r5, r5
 8042e58:	60a5      	strpl	r5, [r4, #8]
 8042e5a:	60a3      	strmi	r3, [r4, #8]
 8042e5c:	bf48      	it	mi
 8042e5e:	61a5      	strmi	r5, [r4, #24]
 8042e60:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8042e62:	f015 0501 	ands.w	r5, r5, #1
 8042e66:	d115      	bne.n	8042e94 <setvbuf+0x174>
 8042e68:	f412 7f00 	tst.w	r2, #512	; 0x200
 8042e6c:	e7c9      	b.n	8042e02 <setvbuf+0xe2>
 8042e6e:	4648      	mov	r0, r9
 8042e70:	f000 fa86 	bl	8043380 <malloc>
 8042e74:	4606      	mov	r6, r0
 8042e76:	2800      	cmp	r0, #0
 8042e78:	d0af      	beq.n	8042dda <setvbuf+0xba>
 8042e7a:	464d      	mov	r5, r9
 8042e7c:	89a3      	ldrh	r3, [r4, #12]
 8042e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8042e82:	81a3      	strh	r3, [r4, #12]
 8042e84:	e7d1      	b.n	8042e2a <setvbuf+0x10a>
 8042e86:	2500      	movs	r5, #0
 8042e88:	e7a9      	b.n	8042dde <setvbuf+0xbe>
 8042e8a:	60a3      	str	r3, [r4, #8]
 8042e8c:	e7e8      	b.n	8042e60 <setvbuf+0x140>
 8042e8e:	f04f 35ff 	mov.w	r5, #4294967295
 8042e92:	e7ba      	b.n	8042e0a <setvbuf+0xea>
 8042e94:	2500      	movs	r5, #0
 8042e96:	e7b8      	b.n	8042e0a <setvbuf+0xea>
 8042e98:	2001800c 	.word	0x2001800c
 8042e9c:	08044a80 	.word	0x08044a80
 8042ea0:	08044aa0 	.word	0x08044aa0
 8042ea4:	08044a60 	.word	0x08044a60

08042ea8 <siprintf>:
 8042ea8:	b40e      	push	{r1, r2, r3}
 8042eaa:	b500      	push	{lr}
 8042eac:	b09c      	sub	sp, #112	; 0x70
 8042eae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8042eb2:	ab1d      	add	r3, sp, #116	; 0x74
 8042eb4:	9002      	str	r0, [sp, #8]
 8042eb6:	9006      	str	r0, [sp, #24]
 8042eb8:	9107      	str	r1, [sp, #28]
 8042eba:	9104      	str	r1, [sp, #16]
 8042ebc:	4808      	ldr	r0, [pc, #32]	; (8042ee0 <siprintf+0x38>)
 8042ebe:	4909      	ldr	r1, [pc, #36]	; (8042ee4 <siprintf+0x3c>)
 8042ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8042ec4:	9105      	str	r1, [sp, #20]
 8042ec6:	a902      	add	r1, sp, #8
 8042ec8:	6800      	ldr	r0, [r0, #0]
 8042eca:	9301      	str	r3, [sp, #4]
 8042ecc:	f000 fb9c 	bl	8043608 <_svfiprintf_r>
 8042ed0:	9b02      	ldr	r3, [sp, #8]
 8042ed2:	2200      	movs	r2, #0
 8042ed4:	701a      	strb	r2, [r3, #0]
 8042ed6:	b01c      	add	sp, #112	; 0x70
 8042ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8042edc:	b003      	add	sp, #12
 8042ede:	4770      	bx	lr
 8042ee0:	2001800c 	.word	0x2001800c
 8042ee4:	ffff0208 	.word	0xffff0208

08042ee8 <__sflush_r>:
 8042ee8:	898a      	ldrh	r2, [r1, #12]
 8042eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8042eee:	4605      	mov	r5, r0
 8042ef0:	0710      	lsls	r0, r2, #28
 8042ef2:	460c      	mov	r4, r1
 8042ef4:	d458      	bmi.n	8042fa8 <__sflush_r+0xc0>
 8042ef6:	684b      	ldr	r3, [r1, #4]
 8042ef8:	2b00      	cmp	r3, #0
 8042efa:	dc05      	bgt.n	8042f08 <__sflush_r+0x20>
 8042efc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8042efe:	2b00      	cmp	r3, #0
 8042f00:	dc02      	bgt.n	8042f08 <__sflush_r+0x20>
 8042f02:	2000      	movs	r0, #0
 8042f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8042f08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8042f0a:	2e00      	cmp	r6, #0
 8042f0c:	d0f9      	beq.n	8042f02 <__sflush_r+0x1a>
 8042f0e:	2300      	movs	r3, #0
 8042f10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8042f14:	682f      	ldr	r7, [r5, #0]
 8042f16:	602b      	str	r3, [r5, #0]
 8042f18:	d032      	beq.n	8042f80 <__sflush_r+0x98>
 8042f1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8042f1c:	89a3      	ldrh	r3, [r4, #12]
 8042f1e:	075a      	lsls	r2, r3, #29
 8042f20:	d505      	bpl.n	8042f2e <__sflush_r+0x46>
 8042f22:	6863      	ldr	r3, [r4, #4]
 8042f24:	1ac0      	subs	r0, r0, r3
 8042f26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8042f28:	b10b      	cbz	r3, 8042f2e <__sflush_r+0x46>
 8042f2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8042f2c:	1ac0      	subs	r0, r0, r3
 8042f2e:	2300      	movs	r3, #0
 8042f30:	4602      	mov	r2, r0
 8042f32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8042f34:	4628      	mov	r0, r5
 8042f36:	6a21      	ldr	r1, [r4, #32]
 8042f38:	47b0      	blx	r6
 8042f3a:	1c43      	adds	r3, r0, #1
 8042f3c:	89a3      	ldrh	r3, [r4, #12]
 8042f3e:	d106      	bne.n	8042f4e <__sflush_r+0x66>
 8042f40:	6829      	ldr	r1, [r5, #0]
 8042f42:	291d      	cmp	r1, #29
 8042f44:	d82c      	bhi.n	8042fa0 <__sflush_r+0xb8>
 8042f46:	4a29      	ldr	r2, [pc, #164]	; (8042fec <__sflush_r+0x104>)
 8042f48:	40ca      	lsrs	r2, r1
 8042f4a:	07d6      	lsls	r6, r2, #31
 8042f4c:	d528      	bpl.n	8042fa0 <__sflush_r+0xb8>
 8042f4e:	2200      	movs	r2, #0
 8042f50:	04d9      	lsls	r1, r3, #19
 8042f52:	6062      	str	r2, [r4, #4]
 8042f54:	6922      	ldr	r2, [r4, #16]
 8042f56:	6022      	str	r2, [r4, #0]
 8042f58:	d504      	bpl.n	8042f64 <__sflush_r+0x7c>
 8042f5a:	1c42      	adds	r2, r0, #1
 8042f5c:	d101      	bne.n	8042f62 <__sflush_r+0x7a>
 8042f5e:	682b      	ldr	r3, [r5, #0]
 8042f60:	b903      	cbnz	r3, 8042f64 <__sflush_r+0x7c>
 8042f62:	6560      	str	r0, [r4, #84]	; 0x54
 8042f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8042f66:	602f      	str	r7, [r5, #0]
 8042f68:	2900      	cmp	r1, #0
 8042f6a:	d0ca      	beq.n	8042f02 <__sflush_r+0x1a>
 8042f6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8042f70:	4299      	cmp	r1, r3
 8042f72:	d002      	beq.n	8042f7a <__sflush_r+0x92>
 8042f74:	4628      	mov	r0, r5
 8042f76:	f000 fa0b 	bl	8043390 <_free_r>
 8042f7a:	2000      	movs	r0, #0
 8042f7c:	6360      	str	r0, [r4, #52]	; 0x34
 8042f7e:	e7c1      	b.n	8042f04 <__sflush_r+0x1c>
 8042f80:	6a21      	ldr	r1, [r4, #32]
 8042f82:	2301      	movs	r3, #1
 8042f84:	4628      	mov	r0, r5
 8042f86:	47b0      	blx	r6
 8042f88:	1c41      	adds	r1, r0, #1
 8042f8a:	d1c7      	bne.n	8042f1c <__sflush_r+0x34>
 8042f8c:	682b      	ldr	r3, [r5, #0]
 8042f8e:	2b00      	cmp	r3, #0
 8042f90:	d0c4      	beq.n	8042f1c <__sflush_r+0x34>
 8042f92:	2b1d      	cmp	r3, #29
 8042f94:	d001      	beq.n	8042f9a <__sflush_r+0xb2>
 8042f96:	2b16      	cmp	r3, #22
 8042f98:	d101      	bne.n	8042f9e <__sflush_r+0xb6>
 8042f9a:	602f      	str	r7, [r5, #0]
 8042f9c:	e7b1      	b.n	8042f02 <__sflush_r+0x1a>
 8042f9e:	89a3      	ldrh	r3, [r4, #12]
 8042fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8042fa4:	81a3      	strh	r3, [r4, #12]
 8042fa6:	e7ad      	b.n	8042f04 <__sflush_r+0x1c>
 8042fa8:	690f      	ldr	r7, [r1, #16]
 8042faa:	2f00      	cmp	r7, #0
 8042fac:	d0a9      	beq.n	8042f02 <__sflush_r+0x1a>
 8042fae:	0793      	lsls	r3, r2, #30
 8042fb0:	680e      	ldr	r6, [r1, #0]
 8042fb2:	600f      	str	r7, [r1, #0]
 8042fb4:	bf0c      	ite	eq
 8042fb6:	694b      	ldreq	r3, [r1, #20]
 8042fb8:	2300      	movne	r3, #0
 8042fba:	eba6 0807 	sub.w	r8, r6, r7
 8042fbe:	608b      	str	r3, [r1, #8]
 8042fc0:	f1b8 0f00 	cmp.w	r8, #0
 8042fc4:	dd9d      	ble.n	8042f02 <__sflush_r+0x1a>
 8042fc6:	4643      	mov	r3, r8
 8042fc8:	463a      	mov	r2, r7
 8042fca:	6a21      	ldr	r1, [r4, #32]
 8042fcc:	4628      	mov	r0, r5
 8042fce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8042fd0:	47b0      	blx	r6
 8042fd2:	2800      	cmp	r0, #0
 8042fd4:	dc06      	bgt.n	8042fe4 <__sflush_r+0xfc>
 8042fd6:	89a3      	ldrh	r3, [r4, #12]
 8042fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8042fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8042fe0:	81a3      	strh	r3, [r4, #12]
 8042fe2:	e78f      	b.n	8042f04 <__sflush_r+0x1c>
 8042fe4:	4407      	add	r7, r0
 8042fe6:	eba8 0800 	sub.w	r8, r8, r0
 8042fea:	e7e9      	b.n	8042fc0 <__sflush_r+0xd8>
 8042fec:	20400001 	.word	0x20400001

08042ff0 <_fflush_r>:
 8042ff0:	b538      	push	{r3, r4, r5, lr}
 8042ff2:	690b      	ldr	r3, [r1, #16]
 8042ff4:	4605      	mov	r5, r0
 8042ff6:	460c      	mov	r4, r1
 8042ff8:	b913      	cbnz	r3, 8043000 <_fflush_r+0x10>
 8042ffa:	2500      	movs	r5, #0
 8042ffc:	4628      	mov	r0, r5
 8042ffe:	bd38      	pop	{r3, r4, r5, pc}
 8043000:	b118      	cbz	r0, 804300a <_fflush_r+0x1a>
 8043002:	6983      	ldr	r3, [r0, #24]
 8043004:	b90b      	cbnz	r3, 804300a <_fflush_r+0x1a>
 8043006:	f000 f899 	bl	804313c <__sinit>
 804300a:	4b14      	ldr	r3, [pc, #80]	; (804305c <_fflush_r+0x6c>)
 804300c:	429c      	cmp	r4, r3
 804300e:	d11b      	bne.n	8043048 <_fflush_r+0x58>
 8043010:	686c      	ldr	r4, [r5, #4]
 8043012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8043016:	2b00      	cmp	r3, #0
 8043018:	d0ef      	beq.n	8042ffa <_fflush_r+0xa>
 804301a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 804301c:	07d0      	lsls	r0, r2, #31
 804301e:	d404      	bmi.n	804302a <_fflush_r+0x3a>
 8043020:	0599      	lsls	r1, r3, #22
 8043022:	d402      	bmi.n	804302a <_fflush_r+0x3a>
 8043024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8043026:	f000 f944 	bl	80432b2 <__retarget_lock_acquire_recursive>
 804302a:	4628      	mov	r0, r5
 804302c:	4621      	mov	r1, r4
 804302e:	f7ff ff5b 	bl	8042ee8 <__sflush_r>
 8043032:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8043034:	4605      	mov	r5, r0
 8043036:	07da      	lsls	r2, r3, #31
 8043038:	d4e0      	bmi.n	8042ffc <_fflush_r+0xc>
 804303a:	89a3      	ldrh	r3, [r4, #12]
 804303c:	059b      	lsls	r3, r3, #22
 804303e:	d4dd      	bmi.n	8042ffc <_fflush_r+0xc>
 8043040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8043042:	f000 f937 	bl	80432b4 <__retarget_lock_release_recursive>
 8043046:	e7d9      	b.n	8042ffc <_fflush_r+0xc>
 8043048:	4b05      	ldr	r3, [pc, #20]	; (8043060 <_fflush_r+0x70>)
 804304a:	429c      	cmp	r4, r3
 804304c:	d101      	bne.n	8043052 <_fflush_r+0x62>
 804304e:	68ac      	ldr	r4, [r5, #8]
 8043050:	e7df      	b.n	8043012 <_fflush_r+0x22>
 8043052:	4b04      	ldr	r3, [pc, #16]	; (8043064 <_fflush_r+0x74>)
 8043054:	429c      	cmp	r4, r3
 8043056:	bf08      	it	eq
 8043058:	68ec      	ldreq	r4, [r5, #12]
 804305a:	e7da      	b.n	8043012 <_fflush_r+0x22>
 804305c:	08044a80 	.word	0x08044a80
 8043060:	08044aa0 	.word	0x08044aa0
 8043064:	08044a60 	.word	0x08044a60

08043068 <fflush>:
 8043068:	4601      	mov	r1, r0
 804306a:	b920      	cbnz	r0, 8043076 <fflush+0xe>
 804306c:	4b04      	ldr	r3, [pc, #16]	; (8043080 <fflush+0x18>)
 804306e:	4905      	ldr	r1, [pc, #20]	; (8043084 <fflush+0x1c>)
 8043070:	6818      	ldr	r0, [r3, #0]
 8043072:	f000 b8fe 	b.w	8043272 <_fwalk_reent>
 8043076:	4b04      	ldr	r3, [pc, #16]	; (8043088 <fflush+0x20>)
 8043078:	6818      	ldr	r0, [r3, #0]
 804307a:	f7ff bfb9 	b.w	8042ff0 <_fflush_r>
 804307e:	bf00      	nop
 8043080:	08044a5c 	.word	0x08044a5c
 8043084:	08042ff1 	.word	0x08042ff1
 8043088:	2001800c 	.word	0x2001800c

0804308c <std>:
 804308c:	2300      	movs	r3, #0
 804308e:	b510      	push	{r4, lr}
 8043090:	4604      	mov	r4, r0
 8043092:	6083      	str	r3, [r0, #8]
 8043094:	8181      	strh	r1, [r0, #12]
 8043096:	4619      	mov	r1, r3
 8043098:	6643      	str	r3, [r0, #100]	; 0x64
 804309a:	81c2      	strh	r2, [r0, #14]
 804309c:	2208      	movs	r2, #8
 804309e:	6183      	str	r3, [r0, #24]
 80430a0:	e9c0 3300 	strd	r3, r3, [r0]
 80430a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80430a8:	305c      	adds	r0, #92	; 0x5c
 80430aa:	f7ff fe11 	bl	8042cd0 <memset>
 80430ae:	4b05      	ldr	r3, [pc, #20]	; (80430c4 <std+0x38>)
 80430b0:	6224      	str	r4, [r4, #32]
 80430b2:	6263      	str	r3, [r4, #36]	; 0x24
 80430b4:	4b04      	ldr	r3, [pc, #16]	; (80430c8 <std+0x3c>)
 80430b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80430b8:	4b04      	ldr	r3, [pc, #16]	; (80430cc <std+0x40>)
 80430ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80430bc:	4b04      	ldr	r3, [pc, #16]	; (80430d0 <std+0x44>)
 80430be:	6323      	str	r3, [r4, #48]	; 0x30
 80430c0:	bd10      	pop	{r4, pc}
 80430c2:	bf00      	nop
 80430c4:	0804432d 	.word	0x0804432d
 80430c8:	0804434f 	.word	0x0804434f
 80430cc:	08044387 	.word	0x08044387
 80430d0:	080443ab 	.word	0x080443ab

080430d4 <_cleanup_r>:
 80430d4:	4901      	ldr	r1, [pc, #4]	; (80430dc <_cleanup_r+0x8>)
 80430d6:	f000 b8cc 	b.w	8043272 <_fwalk_reent>
 80430da:	bf00      	nop
 80430dc:	08042ff1 	.word	0x08042ff1

080430e0 <__sfmoreglue>:
 80430e0:	b570      	push	{r4, r5, r6, lr}
 80430e2:	2268      	movs	r2, #104	; 0x68
 80430e4:	1e4d      	subs	r5, r1, #1
 80430e6:	460e      	mov	r6, r1
 80430e8:	4355      	muls	r5, r2
 80430ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80430ee:	f000 f9bb 	bl	8043468 <_malloc_r>
 80430f2:	4604      	mov	r4, r0
 80430f4:	b140      	cbz	r0, 8043108 <__sfmoreglue+0x28>
 80430f6:	2100      	movs	r1, #0
 80430f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80430fc:	e9c0 1600 	strd	r1, r6, [r0]
 8043100:	300c      	adds	r0, #12
 8043102:	60a0      	str	r0, [r4, #8]
 8043104:	f7ff fde4 	bl	8042cd0 <memset>
 8043108:	4620      	mov	r0, r4
 804310a:	bd70      	pop	{r4, r5, r6, pc}

0804310c <__sfp_lock_acquire>:
 804310c:	4801      	ldr	r0, [pc, #4]	; (8043114 <__sfp_lock_acquire+0x8>)
 804310e:	f000 b8d0 	b.w	80432b2 <__retarget_lock_acquire_recursive>
 8043112:	bf00      	nop
 8043114:	20018129 	.word	0x20018129

08043118 <__sfp_lock_release>:
 8043118:	4801      	ldr	r0, [pc, #4]	; (8043120 <__sfp_lock_release+0x8>)
 804311a:	f000 b8cb 	b.w	80432b4 <__retarget_lock_release_recursive>
 804311e:	bf00      	nop
 8043120:	20018129 	.word	0x20018129

08043124 <__sinit_lock_acquire>:
 8043124:	4801      	ldr	r0, [pc, #4]	; (804312c <__sinit_lock_acquire+0x8>)
 8043126:	f000 b8c4 	b.w	80432b2 <__retarget_lock_acquire_recursive>
 804312a:	bf00      	nop
 804312c:	2001812a 	.word	0x2001812a

08043130 <__sinit_lock_release>:
 8043130:	4801      	ldr	r0, [pc, #4]	; (8043138 <__sinit_lock_release+0x8>)
 8043132:	f000 b8bf 	b.w	80432b4 <__retarget_lock_release_recursive>
 8043136:	bf00      	nop
 8043138:	2001812a 	.word	0x2001812a

0804313c <__sinit>:
 804313c:	b510      	push	{r4, lr}
 804313e:	4604      	mov	r4, r0
 8043140:	f7ff fff0 	bl	8043124 <__sinit_lock_acquire>
 8043144:	69a3      	ldr	r3, [r4, #24]
 8043146:	b11b      	cbz	r3, 8043150 <__sinit+0x14>
 8043148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804314c:	f7ff bff0 	b.w	8043130 <__sinit_lock_release>
 8043150:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8043154:	6523      	str	r3, [r4, #80]	; 0x50
 8043156:	4620      	mov	r0, r4
 8043158:	4b12      	ldr	r3, [pc, #72]	; (80431a4 <__sinit+0x68>)
 804315a:	4a13      	ldr	r2, [pc, #76]	; (80431a8 <__sinit+0x6c>)
 804315c:	681b      	ldr	r3, [r3, #0]
 804315e:	62a2      	str	r2, [r4, #40]	; 0x28
 8043160:	42a3      	cmp	r3, r4
 8043162:	bf04      	itt	eq
 8043164:	2301      	moveq	r3, #1
 8043166:	61a3      	streq	r3, [r4, #24]
 8043168:	f000 f820 	bl	80431ac <__sfp>
 804316c:	6060      	str	r0, [r4, #4]
 804316e:	4620      	mov	r0, r4
 8043170:	f000 f81c 	bl	80431ac <__sfp>
 8043174:	60a0      	str	r0, [r4, #8]
 8043176:	4620      	mov	r0, r4
 8043178:	f000 f818 	bl	80431ac <__sfp>
 804317c:	2200      	movs	r2, #0
 804317e:	2104      	movs	r1, #4
 8043180:	60e0      	str	r0, [r4, #12]
 8043182:	6860      	ldr	r0, [r4, #4]
 8043184:	f7ff ff82 	bl	804308c <std>
 8043188:	2201      	movs	r2, #1
 804318a:	2109      	movs	r1, #9
 804318c:	68a0      	ldr	r0, [r4, #8]
 804318e:	f7ff ff7d 	bl	804308c <std>
 8043192:	2202      	movs	r2, #2
 8043194:	2112      	movs	r1, #18
 8043196:	68e0      	ldr	r0, [r4, #12]
 8043198:	f7ff ff78 	bl	804308c <std>
 804319c:	2301      	movs	r3, #1
 804319e:	61a3      	str	r3, [r4, #24]
 80431a0:	e7d2      	b.n	8043148 <__sinit+0xc>
 80431a2:	bf00      	nop
 80431a4:	08044a5c 	.word	0x08044a5c
 80431a8:	080430d5 	.word	0x080430d5

080431ac <__sfp>:
 80431ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80431ae:	4607      	mov	r7, r0
 80431b0:	f7ff ffac 	bl	804310c <__sfp_lock_acquire>
 80431b4:	4b1e      	ldr	r3, [pc, #120]	; (8043230 <__sfp+0x84>)
 80431b6:	681e      	ldr	r6, [r3, #0]
 80431b8:	69b3      	ldr	r3, [r6, #24]
 80431ba:	b913      	cbnz	r3, 80431c2 <__sfp+0x16>
 80431bc:	4630      	mov	r0, r6
 80431be:	f7ff ffbd 	bl	804313c <__sinit>
 80431c2:	3648      	adds	r6, #72	; 0x48
 80431c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80431c8:	3b01      	subs	r3, #1
 80431ca:	d503      	bpl.n	80431d4 <__sfp+0x28>
 80431cc:	6833      	ldr	r3, [r6, #0]
 80431ce:	b30b      	cbz	r3, 8043214 <__sfp+0x68>
 80431d0:	6836      	ldr	r6, [r6, #0]
 80431d2:	e7f7      	b.n	80431c4 <__sfp+0x18>
 80431d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80431d8:	b9d5      	cbnz	r5, 8043210 <__sfp+0x64>
 80431da:	4b16      	ldr	r3, [pc, #88]	; (8043234 <__sfp+0x88>)
 80431dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80431e0:	6665      	str	r5, [r4, #100]	; 0x64
 80431e2:	60e3      	str	r3, [r4, #12]
 80431e4:	f000 f864 	bl	80432b0 <__retarget_lock_init_recursive>
 80431e8:	f7ff ff96 	bl	8043118 <__sfp_lock_release>
 80431ec:	2208      	movs	r2, #8
 80431ee:	4629      	mov	r1, r5
 80431f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80431f4:	6025      	str	r5, [r4, #0]
 80431f6:	61a5      	str	r5, [r4, #24]
 80431f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80431fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8043200:	f7ff fd66 	bl	8042cd0 <memset>
 8043204:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8043208:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 804320c:	4620      	mov	r0, r4
 804320e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8043210:	3468      	adds	r4, #104	; 0x68
 8043212:	e7d9      	b.n	80431c8 <__sfp+0x1c>
 8043214:	2104      	movs	r1, #4
 8043216:	4638      	mov	r0, r7
 8043218:	f7ff ff62 	bl	80430e0 <__sfmoreglue>
 804321c:	4604      	mov	r4, r0
 804321e:	6030      	str	r0, [r6, #0]
 8043220:	2800      	cmp	r0, #0
 8043222:	d1d5      	bne.n	80431d0 <__sfp+0x24>
 8043224:	f7ff ff78 	bl	8043118 <__sfp_lock_release>
 8043228:	230c      	movs	r3, #12
 804322a:	603b      	str	r3, [r7, #0]
 804322c:	e7ee      	b.n	804320c <__sfp+0x60>
 804322e:	bf00      	nop
 8043230:	08044a5c 	.word	0x08044a5c
 8043234:	ffff0001 	.word	0xffff0001

08043238 <_fwalk>:
 8043238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804323c:	460f      	mov	r7, r1
 804323e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8043242:	2600      	movs	r6, #0
 8043244:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8043248:	f1b8 0801 	subs.w	r8, r8, #1
 804324c:	d505      	bpl.n	804325a <_fwalk+0x22>
 804324e:	6824      	ldr	r4, [r4, #0]
 8043250:	2c00      	cmp	r4, #0
 8043252:	d1f7      	bne.n	8043244 <_fwalk+0xc>
 8043254:	4630      	mov	r0, r6
 8043256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804325a:	89ab      	ldrh	r3, [r5, #12]
 804325c:	2b01      	cmp	r3, #1
 804325e:	d906      	bls.n	804326e <_fwalk+0x36>
 8043260:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8043264:	3301      	adds	r3, #1
 8043266:	d002      	beq.n	804326e <_fwalk+0x36>
 8043268:	4628      	mov	r0, r5
 804326a:	47b8      	blx	r7
 804326c:	4306      	orrs	r6, r0
 804326e:	3568      	adds	r5, #104	; 0x68
 8043270:	e7ea      	b.n	8043248 <_fwalk+0x10>

08043272 <_fwalk_reent>:
 8043272:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8043276:	4606      	mov	r6, r0
 8043278:	4688      	mov	r8, r1
 804327a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 804327e:	2700      	movs	r7, #0
 8043280:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8043284:	f1b9 0901 	subs.w	r9, r9, #1
 8043288:	d505      	bpl.n	8043296 <_fwalk_reent+0x24>
 804328a:	6824      	ldr	r4, [r4, #0]
 804328c:	2c00      	cmp	r4, #0
 804328e:	d1f7      	bne.n	8043280 <_fwalk_reent+0xe>
 8043290:	4638      	mov	r0, r7
 8043292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8043296:	89ab      	ldrh	r3, [r5, #12]
 8043298:	2b01      	cmp	r3, #1
 804329a:	d907      	bls.n	80432ac <_fwalk_reent+0x3a>
 804329c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80432a0:	3301      	adds	r3, #1
 80432a2:	d003      	beq.n	80432ac <_fwalk_reent+0x3a>
 80432a4:	4629      	mov	r1, r5
 80432a6:	4630      	mov	r0, r6
 80432a8:	47c0      	blx	r8
 80432aa:	4307      	orrs	r7, r0
 80432ac:	3568      	adds	r5, #104	; 0x68
 80432ae:	e7e9      	b.n	8043284 <_fwalk_reent+0x12>

080432b0 <__retarget_lock_init_recursive>:
 80432b0:	4770      	bx	lr

080432b2 <__retarget_lock_acquire_recursive>:
 80432b2:	4770      	bx	lr

080432b4 <__retarget_lock_release_recursive>:
 80432b4:	4770      	bx	lr

080432b6 <__swhatbuf_r>:
 80432b6:	b570      	push	{r4, r5, r6, lr}
 80432b8:	460e      	mov	r6, r1
 80432ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80432be:	b096      	sub	sp, #88	; 0x58
 80432c0:	4614      	mov	r4, r2
 80432c2:	2900      	cmp	r1, #0
 80432c4:	461d      	mov	r5, r3
 80432c6:	da08      	bge.n	80432da <__swhatbuf_r+0x24>
 80432c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80432cc:	2200      	movs	r2, #0
 80432ce:	602a      	str	r2, [r5, #0]
 80432d0:	061a      	lsls	r2, r3, #24
 80432d2:	d410      	bmi.n	80432f6 <__swhatbuf_r+0x40>
 80432d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80432d8:	e00e      	b.n	80432f8 <__swhatbuf_r+0x42>
 80432da:	466a      	mov	r2, sp
 80432dc:	f001 fa54 	bl	8044788 <_fstat_r>
 80432e0:	2800      	cmp	r0, #0
 80432e2:	dbf1      	blt.n	80432c8 <__swhatbuf_r+0x12>
 80432e4:	9a01      	ldr	r2, [sp, #4]
 80432e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80432ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80432ee:	425a      	negs	r2, r3
 80432f0:	415a      	adcs	r2, r3
 80432f2:	602a      	str	r2, [r5, #0]
 80432f4:	e7ee      	b.n	80432d4 <__swhatbuf_r+0x1e>
 80432f6:	2340      	movs	r3, #64	; 0x40
 80432f8:	2000      	movs	r0, #0
 80432fa:	6023      	str	r3, [r4, #0]
 80432fc:	b016      	add	sp, #88	; 0x58
 80432fe:	bd70      	pop	{r4, r5, r6, pc}

08043300 <__smakebuf_r>:
 8043300:	898b      	ldrh	r3, [r1, #12]
 8043302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8043304:	079d      	lsls	r5, r3, #30
 8043306:	4606      	mov	r6, r0
 8043308:	460c      	mov	r4, r1
 804330a:	d507      	bpl.n	804331c <__smakebuf_r+0x1c>
 804330c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8043310:	6023      	str	r3, [r4, #0]
 8043312:	6123      	str	r3, [r4, #16]
 8043314:	2301      	movs	r3, #1
 8043316:	6163      	str	r3, [r4, #20]
 8043318:	b002      	add	sp, #8
 804331a:	bd70      	pop	{r4, r5, r6, pc}
 804331c:	ab01      	add	r3, sp, #4
 804331e:	466a      	mov	r2, sp
 8043320:	f7ff ffc9 	bl	80432b6 <__swhatbuf_r>
 8043324:	9900      	ldr	r1, [sp, #0]
 8043326:	4605      	mov	r5, r0
 8043328:	4630      	mov	r0, r6
 804332a:	f000 f89d 	bl	8043468 <_malloc_r>
 804332e:	b948      	cbnz	r0, 8043344 <__smakebuf_r+0x44>
 8043330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8043334:	059a      	lsls	r2, r3, #22
 8043336:	d4ef      	bmi.n	8043318 <__smakebuf_r+0x18>
 8043338:	f023 0303 	bic.w	r3, r3, #3
 804333c:	f043 0302 	orr.w	r3, r3, #2
 8043340:	81a3      	strh	r3, [r4, #12]
 8043342:	e7e3      	b.n	804330c <__smakebuf_r+0xc>
 8043344:	4b0d      	ldr	r3, [pc, #52]	; (804337c <__smakebuf_r+0x7c>)
 8043346:	62b3      	str	r3, [r6, #40]	; 0x28
 8043348:	89a3      	ldrh	r3, [r4, #12]
 804334a:	6020      	str	r0, [r4, #0]
 804334c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8043350:	6120      	str	r0, [r4, #16]
 8043352:	81a3      	strh	r3, [r4, #12]
 8043354:	9b00      	ldr	r3, [sp, #0]
 8043356:	6163      	str	r3, [r4, #20]
 8043358:	9b01      	ldr	r3, [sp, #4]
 804335a:	b15b      	cbz	r3, 8043374 <__smakebuf_r+0x74>
 804335c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8043360:	4630      	mov	r0, r6
 8043362:	f001 fa23 	bl	80447ac <_isatty_r>
 8043366:	b128      	cbz	r0, 8043374 <__smakebuf_r+0x74>
 8043368:	89a3      	ldrh	r3, [r4, #12]
 804336a:	f023 0303 	bic.w	r3, r3, #3
 804336e:	f043 0301 	orr.w	r3, r3, #1
 8043372:	81a3      	strh	r3, [r4, #12]
 8043374:	89a0      	ldrh	r0, [r4, #12]
 8043376:	4305      	orrs	r5, r0
 8043378:	81a5      	strh	r5, [r4, #12]
 804337a:	e7cd      	b.n	8043318 <__smakebuf_r+0x18>
 804337c:	080430d5 	.word	0x080430d5

08043380 <malloc>:
 8043380:	4b02      	ldr	r3, [pc, #8]	; (804338c <malloc+0xc>)
 8043382:	4601      	mov	r1, r0
 8043384:	6818      	ldr	r0, [r3, #0]
 8043386:	f000 b86f 	b.w	8043468 <_malloc_r>
 804338a:	bf00      	nop
 804338c:	2001800c 	.word	0x2001800c

08043390 <_free_r>:
 8043390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8043392:	2900      	cmp	r1, #0
 8043394:	d043      	beq.n	804341e <_free_r+0x8e>
 8043396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804339a:	1f0c      	subs	r4, r1, #4
 804339c:	9001      	str	r0, [sp, #4]
 804339e:	2b00      	cmp	r3, #0
 80433a0:	bfb8      	it	lt
 80433a2:	18e4      	addlt	r4, r4, r3
 80433a4:	f001 fa5a 	bl	804485c <__malloc_lock>
 80433a8:	4a1e      	ldr	r2, [pc, #120]	; (8043424 <_free_r+0x94>)
 80433aa:	9801      	ldr	r0, [sp, #4]
 80433ac:	6813      	ldr	r3, [r2, #0]
 80433ae:	b933      	cbnz	r3, 80433be <_free_r+0x2e>
 80433b0:	6063      	str	r3, [r4, #4]
 80433b2:	6014      	str	r4, [r2, #0]
 80433b4:	b003      	add	sp, #12
 80433b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80433ba:	f001 ba55 	b.w	8044868 <__malloc_unlock>
 80433be:	42a3      	cmp	r3, r4
 80433c0:	d908      	bls.n	80433d4 <_free_r+0x44>
 80433c2:	6825      	ldr	r5, [r4, #0]
 80433c4:	1961      	adds	r1, r4, r5
 80433c6:	428b      	cmp	r3, r1
 80433c8:	bf01      	itttt	eq
 80433ca:	6819      	ldreq	r1, [r3, #0]
 80433cc:	685b      	ldreq	r3, [r3, #4]
 80433ce:	1949      	addeq	r1, r1, r5
 80433d0:	6021      	streq	r1, [r4, #0]
 80433d2:	e7ed      	b.n	80433b0 <_free_r+0x20>
 80433d4:	461a      	mov	r2, r3
 80433d6:	685b      	ldr	r3, [r3, #4]
 80433d8:	b10b      	cbz	r3, 80433de <_free_r+0x4e>
 80433da:	42a3      	cmp	r3, r4
 80433dc:	d9fa      	bls.n	80433d4 <_free_r+0x44>
 80433de:	6811      	ldr	r1, [r2, #0]
 80433e0:	1855      	adds	r5, r2, r1
 80433e2:	42a5      	cmp	r5, r4
 80433e4:	d10b      	bne.n	80433fe <_free_r+0x6e>
 80433e6:	6824      	ldr	r4, [r4, #0]
 80433e8:	4421      	add	r1, r4
 80433ea:	1854      	adds	r4, r2, r1
 80433ec:	6011      	str	r1, [r2, #0]
 80433ee:	42a3      	cmp	r3, r4
 80433f0:	d1e0      	bne.n	80433b4 <_free_r+0x24>
 80433f2:	681c      	ldr	r4, [r3, #0]
 80433f4:	685b      	ldr	r3, [r3, #4]
 80433f6:	4421      	add	r1, r4
 80433f8:	6053      	str	r3, [r2, #4]
 80433fa:	6011      	str	r1, [r2, #0]
 80433fc:	e7da      	b.n	80433b4 <_free_r+0x24>
 80433fe:	d902      	bls.n	8043406 <_free_r+0x76>
 8043400:	230c      	movs	r3, #12
 8043402:	6003      	str	r3, [r0, #0]
 8043404:	e7d6      	b.n	80433b4 <_free_r+0x24>
 8043406:	6825      	ldr	r5, [r4, #0]
 8043408:	1961      	adds	r1, r4, r5
 804340a:	428b      	cmp	r3, r1
 804340c:	bf02      	ittt	eq
 804340e:	6819      	ldreq	r1, [r3, #0]
 8043410:	685b      	ldreq	r3, [r3, #4]
 8043412:	1949      	addeq	r1, r1, r5
 8043414:	6063      	str	r3, [r4, #4]
 8043416:	bf08      	it	eq
 8043418:	6021      	streq	r1, [r4, #0]
 804341a:	6054      	str	r4, [r2, #4]
 804341c:	e7ca      	b.n	80433b4 <_free_r+0x24>
 804341e:	b003      	add	sp, #12
 8043420:	bd30      	pop	{r4, r5, pc}
 8043422:	bf00      	nop
 8043424:	2001812c 	.word	0x2001812c

08043428 <sbrk_aligned>:
 8043428:	b570      	push	{r4, r5, r6, lr}
 804342a:	4e0e      	ldr	r6, [pc, #56]	; (8043464 <sbrk_aligned+0x3c>)
 804342c:	460c      	mov	r4, r1
 804342e:	4605      	mov	r5, r0
 8043430:	6831      	ldr	r1, [r6, #0]
 8043432:	b911      	cbnz	r1, 804343a <sbrk_aligned+0x12>
 8043434:	f000 ff32 	bl	804429c <_sbrk_r>
 8043438:	6030      	str	r0, [r6, #0]
 804343a:	4621      	mov	r1, r4
 804343c:	4628      	mov	r0, r5
 804343e:	f000 ff2d 	bl	804429c <_sbrk_r>
 8043442:	1c43      	adds	r3, r0, #1
 8043444:	d00a      	beq.n	804345c <sbrk_aligned+0x34>
 8043446:	1cc4      	adds	r4, r0, #3
 8043448:	f024 0403 	bic.w	r4, r4, #3
 804344c:	42a0      	cmp	r0, r4
 804344e:	d007      	beq.n	8043460 <sbrk_aligned+0x38>
 8043450:	1a21      	subs	r1, r4, r0
 8043452:	4628      	mov	r0, r5
 8043454:	f000 ff22 	bl	804429c <_sbrk_r>
 8043458:	3001      	adds	r0, #1
 804345a:	d101      	bne.n	8043460 <sbrk_aligned+0x38>
 804345c:	f04f 34ff 	mov.w	r4, #4294967295
 8043460:	4620      	mov	r0, r4
 8043462:	bd70      	pop	{r4, r5, r6, pc}
 8043464:	20018130 	.word	0x20018130

08043468 <_malloc_r>:
 8043468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804346c:	1ccd      	adds	r5, r1, #3
 804346e:	4607      	mov	r7, r0
 8043470:	f025 0503 	bic.w	r5, r5, #3
 8043474:	3508      	adds	r5, #8
 8043476:	2d0c      	cmp	r5, #12
 8043478:	bf38      	it	cc
 804347a:	250c      	movcc	r5, #12
 804347c:	2d00      	cmp	r5, #0
 804347e:	db01      	blt.n	8043484 <_malloc_r+0x1c>
 8043480:	42a9      	cmp	r1, r5
 8043482:	d905      	bls.n	8043490 <_malloc_r+0x28>
 8043484:	230c      	movs	r3, #12
 8043486:	2600      	movs	r6, #0
 8043488:	603b      	str	r3, [r7, #0]
 804348a:	4630      	mov	r0, r6
 804348c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8043490:	4e2e      	ldr	r6, [pc, #184]	; (804354c <_malloc_r+0xe4>)
 8043492:	f001 f9e3 	bl	804485c <__malloc_lock>
 8043496:	6833      	ldr	r3, [r6, #0]
 8043498:	461c      	mov	r4, r3
 804349a:	bb34      	cbnz	r4, 80434ea <_malloc_r+0x82>
 804349c:	4629      	mov	r1, r5
 804349e:	4638      	mov	r0, r7
 80434a0:	f7ff ffc2 	bl	8043428 <sbrk_aligned>
 80434a4:	1c43      	adds	r3, r0, #1
 80434a6:	4604      	mov	r4, r0
 80434a8:	d14d      	bne.n	8043546 <_malloc_r+0xde>
 80434aa:	6834      	ldr	r4, [r6, #0]
 80434ac:	4626      	mov	r6, r4
 80434ae:	2e00      	cmp	r6, #0
 80434b0:	d140      	bne.n	8043534 <_malloc_r+0xcc>
 80434b2:	6823      	ldr	r3, [r4, #0]
 80434b4:	4631      	mov	r1, r6
 80434b6:	4638      	mov	r0, r7
 80434b8:	eb04 0803 	add.w	r8, r4, r3
 80434bc:	f000 feee 	bl	804429c <_sbrk_r>
 80434c0:	4580      	cmp	r8, r0
 80434c2:	d13a      	bne.n	804353a <_malloc_r+0xd2>
 80434c4:	6821      	ldr	r1, [r4, #0]
 80434c6:	3503      	adds	r5, #3
 80434c8:	4638      	mov	r0, r7
 80434ca:	1a6d      	subs	r5, r5, r1
 80434cc:	f025 0503 	bic.w	r5, r5, #3
 80434d0:	3508      	adds	r5, #8
 80434d2:	2d0c      	cmp	r5, #12
 80434d4:	bf38      	it	cc
 80434d6:	250c      	movcc	r5, #12
 80434d8:	4629      	mov	r1, r5
 80434da:	f7ff ffa5 	bl	8043428 <sbrk_aligned>
 80434de:	3001      	adds	r0, #1
 80434e0:	d02b      	beq.n	804353a <_malloc_r+0xd2>
 80434e2:	6823      	ldr	r3, [r4, #0]
 80434e4:	442b      	add	r3, r5
 80434e6:	6023      	str	r3, [r4, #0]
 80434e8:	e00e      	b.n	8043508 <_malloc_r+0xa0>
 80434ea:	6822      	ldr	r2, [r4, #0]
 80434ec:	1b52      	subs	r2, r2, r5
 80434ee:	d41e      	bmi.n	804352e <_malloc_r+0xc6>
 80434f0:	2a0b      	cmp	r2, #11
 80434f2:	d916      	bls.n	8043522 <_malloc_r+0xba>
 80434f4:	1961      	adds	r1, r4, r5
 80434f6:	42a3      	cmp	r3, r4
 80434f8:	6025      	str	r5, [r4, #0]
 80434fa:	bf18      	it	ne
 80434fc:	6059      	strne	r1, [r3, #4]
 80434fe:	6863      	ldr	r3, [r4, #4]
 8043500:	bf08      	it	eq
 8043502:	6031      	streq	r1, [r6, #0]
 8043504:	5162      	str	r2, [r4, r5]
 8043506:	604b      	str	r3, [r1, #4]
 8043508:	f104 060b 	add.w	r6, r4, #11
 804350c:	4638      	mov	r0, r7
 804350e:	f001 f9ab 	bl	8044868 <__malloc_unlock>
 8043512:	1d23      	adds	r3, r4, #4
 8043514:	f026 0607 	bic.w	r6, r6, #7
 8043518:	1af2      	subs	r2, r6, r3
 804351a:	d0b6      	beq.n	804348a <_malloc_r+0x22>
 804351c:	1b9b      	subs	r3, r3, r6
 804351e:	50a3      	str	r3, [r4, r2]
 8043520:	e7b3      	b.n	804348a <_malloc_r+0x22>
 8043522:	6862      	ldr	r2, [r4, #4]
 8043524:	42a3      	cmp	r3, r4
 8043526:	bf0c      	ite	eq
 8043528:	6032      	streq	r2, [r6, #0]
 804352a:	605a      	strne	r2, [r3, #4]
 804352c:	e7ec      	b.n	8043508 <_malloc_r+0xa0>
 804352e:	4623      	mov	r3, r4
 8043530:	6864      	ldr	r4, [r4, #4]
 8043532:	e7b2      	b.n	804349a <_malloc_r+0x32>
 8043534:	4634      	mov	r4, r6
 8043536:	6876      	ldr	r6, [r6, #4]
 8043538:	e7b9      	b.n	80434ae <_malloc_r+0x46>
 804353a:	230c      	movs	r3, #12
 804353c:	4638      	mov	r0, r7
 804353e:	603b      	str	r3, [r7, #0]
 8043540:	f001 f992 	bl	8044868 <__malloc_unlock>
 8043544:	e7a1      	b.n	804348a <_malloc_r+0x22>
 8043546:	6025      	str	r5, [r4, #0]
 8043548:	e7de      	b.n	8043508 <_malloc_r+0xa0>
 804354a:	bf00      	nop
 804354c:	2001812c 	.word	0x2001812c

08043550 <__ssputs_r>:
 8043550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8043554:	688e      	ldr	r6, [r1, #8]
 8043556:	4682      	mov	sl, r0
 8043558:	460c      	mov	r4, r1
 804355a:	4690      	mov	r8, r2
 804355c:	429e      	cmp	r6, r3
 804355e:	461f      	mov	r7, r3
 8043560:	d838      	bhi.n	80435d4 <__ssputs_r+0x84>
 8043562:	898a      	ldrh	r2, [r1, #12]
 8043564:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8043568:	d032      	beq.n	80435d0 <__ssputs_r+0x80>
 804356a:	6825      	ldr	r5, [r4, #0]
 804356c:	3301      	adds	r3, #1
 804356e:	6909      	ldr	r1, [r1, #16]
 8043570:	eba5 0901 	sub.w	r9, r5, r1
 8043574:	6965      	ldr	r5, [r4, #20]
 8043576:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 804357a:	444b      	add	r3, r9
 804357c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8043580:	106d      	asrs	r5, r5, #1
 8043582:	429d      	cmp	r5, r3
 8043584:	bf38      	it	cc
 8043586:	461d      	movcc	r5, r3
 8043588:	0553      	lsls	r3, r2, #21
 804358a:	d531      	bpl.n	80435f0 <__ssputs_r+0xa0>
 804358c:	4629      	mov	r1, r5
 804358e:	f7ff ff6b 	bl	8043468 <_malloc_r>
 8043592:	4606      	mov	r6, r0
 8043594:	b950      	cbnz	r0, 80435ac <__ssputs_r+0x5c>
 8043596:	230c      	movs	r3, #12
 8043598:	f04f 30ff 	mov.w	r0, #4294967295
 804359c:	f8ca 3000 	str.w	r3, [sl]
 80435a0:	89a3      	ldrh	r3, [r4, #12]
 80435a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80435a6:	81a3      	strh	r3, [r4, #12]
 80435a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80435ac:	464a      	mov	r2, r9
 80435ae:	6921      	ldr	r1, [r4, #16]
 80435b0:	f001 f92c 	bl	804480c <memcpy>
 80435b4:	89a3      	ldrh	r3, [r4, #12]
 80435b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80435ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80435be:	81a3      	strh	r3, [r4, #12]
 80435c0:	6126      	str	r6, [r4, #16]
 80435c2:	444e      	add	r6, r9
 80435c4:	6165      	str	r5, [r4, #20]
 80435c6:	eba5 0509 	sub.w	r5, r5, r9
 80435ca:	6026      	str	r6, [r4, #0]
 80435cc:	463e      	mov	r6, r7
 80435ce:	60a5      	str	r5, [r4, #8]
 80435d0:	42be      	cmp	r6, r7
 80435d2:	d900      	bls.n	80435d6 <__ssputs_r+0x86>
 80435d4:	463e      	mov	r6, r7
 80435d6:	4632      	mov	r2, r6
 80435d8:	4641      	mov	r1, r8
 80435da:	6820      	ldr	r0, [r4, #0]
 80435dc:	f001 f923 	bl	8044826 <memmove>
 80435e0:	68a3      	ldr	r3, [r4, #8]
 80435e2:	2000      	movs	r0, #0
 80435e4:	1b9b      	subs	r3, r3, r6
 80435e6:	60a3      	str	r3, [r4, #8]
 80435e8:	6823      	ldr	r3, [r4, #0]
 80435ea:	4433      	add	r3, r6
 80435ec:	6023      	str	r3, [r4, #0]
 80435ee:	e7db      	b.n	80435a8 <__ssputs_r+0x58>
 80435f0:	462a      	mov	r2, r5
 80435f2:	f001 f93f 	bl	8044874 <_realloc_r>
 80435f6:	4606      	mov	r6, r0
 80435f8:	2800      	cmp	r0, #0
 80435fa:	d1e1      	bne.n	80435c0 <__ssputs_r+0x70>
 80435fc:	6921      	ldr	r1, [r4, #16]
 80435fe:	4650      	mov	r0, sl
 8043600:	f7ff fec6 	bl	8043390 <_free_r>
 8043604:	e7c7      	b.n	8043596 <__ssputs_r+0x46>
	...

08043608 <_svfiprintf_r>:
 8043608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804360c:	4698      	mov	r8, r3
 804360e:	898b      	ldrh	r3, [r1, #12]
 8043610:	b09d      	sub	sp, #116	; 0x74
 8043612:	4607      	mov	r7, r0
 8043614:	061b      	lsls	r3, r3, #24
 8043616:	460d      	mov	r5, r1
 8043618:	4614      	mov	r4, r2
 804361a:	d50e      	bpl.n	804363a <_svfiprintf_r+0x32>
 804361c:	690b      	ldr	r3, [r1, #16]
 804361e:	b963      	cbnz	r3, 804363a <_svfiprintf_r+0x32>
 8043620:	2140      	movs	r1, #64	; 0x40
 8043622:	f7ff ff21 	bl	8043468 <_malloc_r>
 8043626:	6028      	str	r0, [r5, #0]
 8043628:	6128      	str	r0, [r5, #16]
 804362a:	b920      	cbnz	r0, 8043636 <_svfiprintf_r+0x2e>
 804362c:	230c      	movs	r3, #12
 804362e:	603b      	str	r3, [r7, #0]
 8043630:	f04f 30ff 	mov.w	r0, #4294967295
 8043634:	e0d1      	b.n	80437da <_svfiprintf_r+0x1d2>
 8043636:	2340      	movs	r3, #64	; 0x40
 8043638:	616b      	str	r3, [r5, #20]
 804363a:	2300      	movs	r3, #0
 804363c:	f8cd 800c 	str.w	r8, [sp, #12]
 8043640:	f04f 0901 	mov.w	r9, #1
 8043644:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80437f4 <_svfiprintf_r+0x1ec>
 8043648:	9309      	str	r3, [sp, #36]	; 0x24
 804364a:	2320      	movs	r3, #32
 804364c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8043650:	2330      	movs	r3, #48	; 0x30
 8043652:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8043656:	4623      	mov	r3, r4
 8043658:	469a      	mov	sl, r3
 804365a:	f813 2b01 	ldrb.w	r2, [r3], #1
 804365e:	b10a      	cbz	r2, 8043664 <_svfiprintf_r+0x5c>
 8043660:	2a25      	cmp	r2, #37	; 0x25
 8043662:	d1f9      	bne.n	8043658 <_svfiprintf_r+0x50>
 8043664:	ebba 0b04 	subs.w	fp, sl, r4
 8043668:	d00b      	beq.n	8043682 <_svfiprintf_r+0x7a>
 804366a:	465b      	mov	r3, fp
 804366c:	4622      	mov	r2, r4
 804366e:	4629      	mov	r1, r5
 8043670:	4638      	mov	r0, r7
 8043672:	f7ff ff6d 	bl	8043550 <__ssputs_r>
 8043676:	3001      	adds	r0, #1
 8043678:	f000 80aa 	beq.w	80437d0 <_svfiprintf_r+0x1c8>
 804367c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804367e:	445a      	add	r2, fp
 8043680:	9209      	str	r2, [sp, #36]	; 0x24
 8043682:	f89a 3000 	ldrb.w	r3, [sl]
 8043686:	2b00      	cmp	r3, #0
 8043688:	f000 80a2 	beq.w	80437d0 <_svfiprintf_r+0x1c8>
 804368c:	2300      	movs	r3, #0
 804368e:	f04f 32ff 	mov.w	r2, #4294967295
 8043692:	f10a 0a01 	add.w	sl, sl, #1
 8043696:	9304      	str	r3, [sp, #16]
 8043698:	9307      	str	r3, [sp, #28]
 804369a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804369e:	931a      	str	r3, [sp, #104]	; 0x68
 80436a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80436a4:	4654      	mov	r4, sl
 80436a6:	2205      	movs	r2, #5
 80436a8:	4852      	ldr	r0, [pc, #328]	; (80437f4 <_svfiprintf_r+0x1ec>)
 80436aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80436ae:	f001 f89f 	bl	80447f0 <memchr>
 80436b2:	9a04      	ldr	r2, [sp, #16]
 80436b4:	b9d8      	cbnz	r0, 80436ee <_svfiprintf_r+0xe6>
 80436b6:	06d0      	lsls	r0, r2, #27
 80436b8:	bf44      	itt	mi
 80436ba:	2320      	movmi	r3, #32
 80436bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80436c0:	0711      	lsls	r1, r2, #28
 80436c2:	bf44      	itt	mi
 80436c4:	232b      	movmi	r3, #43	; 0x2b
 80436c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80436ca:	f89a 3000 	ldrb.w	r3, [sl]
 80436ce:	2b2a      	cmp	r3, #42	; 0x2a
 80436d0:	d015      	beq.n	80436fe <_svfiprintf_r+0xf6>
 80436d2:	9a07      	ldr	r2, [sp, #28]
 80436d4:	4654      	mov	r4, sl
 80436d6:	2000      	movs	r0, #0
 80436d8:	f04f 0c0a 	mov.w	ip, #10
 80436dc:	4621      	mov	r1, r4
 80436de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80436e2:	3b30      	subs	r3, #48	; 0x30
 80436e4:	2b09      	cmp	r3, #9
 80436e6:	d94e      	bls.n	8043786 <_svfiprintf_r+0x17e>
 80436e8:	b1b0      	cbz	r0, 8043718 <_svfiprintf_r+0x110>
 80436ea:	9207      	str	r2, [sp, #28]
 80436ec:	e014      	b.n	8043718 <_svfiprintf_r+0x110>
 80436ee:	eba0 0308 	sub.w	r3, r0, r8
 80436f2:	46a2      	mov	sl, r4
 80436f4:	fa09 f303 	lsl.w	r3, r9, r3
 80436f8:	4313      	orrs	r3, r2
 80436fa:	9304      	str	r3, [sp, #16]
 80436fc:	e7d2      	b.n	80436a4 <_svfiprintf_r+0x9c>
 80436fe:	9b03      	ldr	r3, [sp, #12]
 8043700:	1d19      	adds	r1, r3, #4
 8043702:	681b      	ldr	r3, [r3, #0]
 8043704:	2b00      	cmp	r3, #0
 8043706:	9103      	str	r1, [sp, #12]
 8043708:	bfbb      	ittet	lt
 804370a:	425b      	neglt	r3, r3
 804370c:	f042 0202 	orrlt.w	r2, r2, #2
 8043710:	9307      	strge	r3, [sp, #28]
 8043712:	9307      	strlt	r3, [sp, #28]
 8043714:	bfb8      	it	lt
 8043716:	9204      	strlt	r2, [sp, #16]
 8043718:	7823      	ldrb	r3, [r4, #0]
 804371a:	2b2e      	cmp	r3, #46	; 0x2e
 804371c:	d10c      	bne.n	8043738 <_svfiprintf_r+0x130>
 804371e:	7863      	ldrb	r3, [r4, #1]
 8043720:	2b2a      	cmp	r3, #42	; 0x2a
 8043722:	d135      	bne.n	8043790 <_svfiprintf_r+0x188>
 8043724:	9b03      	ldr	r3, [sp, #12]
 8043726:	3402      	adds	r4, #2
 8043728:	1d1a      	adds	r2, r3, #4
 804372a:	681b      	ldr	r3, [r3, #0]
 804372c:	2b00      	cmp	r3, #0
 804372e:	9203      	str	r2, [sp, #12]
 8043730:	bfb8      	it	lt
 8043732:	f04f 33ff 	movlt.w	r3, #4294967295
 8043736:	9305      	str	r3, [sp, #20]
 8043738:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8043804 <_svfiprintf_r+0x1fc>
 804373c:	2203      	movs	r2, #3
 804373e:	7821      	ldrb	r1, [r4, #0]
 8043740:	4650      	mov	r0, sl
 8043742:	f001 f855 	bl	80447f0 <memchr>
 8043746:	b140      	cbz	r0, 804375a <_svfiprintf_r+0x152>
 8043748:	2340      	movs	r3, #64	; 0x40
 804374a:	eba0 000a 	sub.w	r0, r0, sl
 804374e:	3401      	adds	r4, #1
 8043750:	fa03 f000 	lsl.w	r0, r3, r0
 8043754:	9b04      	ldr	r3, [sp, #16]
 8043756:	4303      	orrs	r3, r0
 8043758:	9304      	str	r3, [sp, #16]
 804375a:	f814 1b01 	ldrb.w	r1, [r4], #1
 804375e:	2206      	movs	r2, #6
 8043760:	4825      	ldr	r0, [pc, #148]	; (80437f8 <_svfiprintf_r+0x1f0>)
 8043762:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8043766:	f001 f843 	bl	80447f0 <memchr>
 804376a:	2800      	cmp	r0, #0
 804376c:	d038      	beq.n	80437e0 <_svfiprintf_r+0x1d8>
 804376e:	4b23      	ldr	r3, [pc, #140]	; (80437fc <_svfiprintf_r+0x1f4>)
 8043770:	bb1b      	cbnz	r3, 80437ba <_svfiprintf_r+0x1b2>
 8043772:	9b03      	ldr	r3, [sp, #12]
 8043774:	3307      	adds	r3, #7
 8043776:	f023 0307 	bic.w	r3, r3, #7
 804377a:	3308      	adds	r3, #8
 804377c:	9303      	str	r3, [sp, #12]
 804377e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8043780:	4433      	add	r3, r6
 8043782:	9309      	str	r3, [sp, #36]	; 0x24
 8043784:	e767      	b.n	8043656 <_svfiprintf_r+0x4e>
 8043786:	fb0c 3202 	mla	r2, ip, r2, r3
 804378a:	460c      	mov	r4, r1
 804378c:	2001      	movs	r0, #1
 804378e:	e7a5      	b.n	80436dc <_svfiprintf_r+0xd4>
 8043790:	2300      	movs	r3, #0
 8043792:	3401      	adds	r4, #1
 8043794:	f04f 0c0a 	mov.w	ip, #10
 8043798:	4619      	mov	r1, r3
 804379a:	9305      	str	r3, [sp, #20]
 804379c:	4620      	mov	r0, r4
 804379e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80437a2:	3a30      	subs	r2, #48	; 0x30
 80437a4:	2a09      	cmp	r2, #9
 80437a6:	d903      	bls.n	80437b0 <_svfiprintf_r+0x1a8>
 80437a8:	2b00      	cmp	r3, #0
 80437aa:	d0c5      	beq.n	8043738 <_svfiprintf_r+0x130>
 80437ac:	9105      	str	r1, [sp, #20]
 80437ae:	e7c3      	b.n	8043738 <_svfiprintf_r+0x130>
 80437b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80437b4:	4604      	mov	r4, r0
 80437b6:	2301      	movs	r3, #1
 80437b8:	e7f0      	b.n	804379c <_svfiprintf_r+0x194>
 80437ba:	ab03      	add	r3, sp, #12
 80437bc:	462a      	mov	r2, r5
 80437be:	a904      	add	r1, sp, #16
 80437c0:	4638      	mov	r0, r7
 80437c2:	9300      	str	r3, [sp, #0]
 80437c4:	4b0e      	ldr	r3, [pc, #56]	; (8043800 <_svfiprintf_r+0x1f8>)
 80437c6:	e000      	b.n	80437ca <_svfiprintf_r+0x1c2>
 80437c8:	bf00      	nop
 80437ca:	1c42      	adds	r2, r0, #1
 80437cc:	4606      	mov	r6, r0
 80437ce:	d1d6      	bne.n	804377e <_svfiprintf_r+0x176>
 80437d0:	89ab      	ldrh	r3, [r5, #12]
 80437d2:	065b      	lsls	r3, r3, #25
 80437d4:	f53f af2c 	bmi.w	8043630 <_svfiprintf_r+0x28>
 80437d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80437da:	b01d      	add	sp, #116	; 0x74
 80437dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80437e0:	ab03      	add	r3, sp, #12
 80437e2:	462a      	mov	r2, r5
 80437e4:	a904      	add	r1, sp, #16
 80437e6:	4638      	mov	r0, r7
 80437e8:	9300      	str	r3, [sp, #0]
 80437ea:	4b05      	ldr	r3, [pc, #20]	; (8043800 <_svfiprintf_r+0x1f8>)
 80437ec:	f000 f87c 	bl	80438e8 <_printf_i>
 80437f0:	e7eb      	b.n	80437ca <_svfiprintf_r+0x1c2>
 80437f2:	bf00      	nop
 80437f4:	08044ac0 	.word	0x08044ac0
 80437f8:	08044aca 	.word	0x08044aca
 80437fc:	00000000 	.word	0x00000000
 8043800:	08043551 	.word	0x08043551
 8043804:	08044ac6 	.word	0x08044ac6

08043808 <_printf_common>:
 8043808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804380c:	4616      	mov	r6, r2
 804380e:	4699      	mov	r9, r3
 8043810:	688a      	ldr	r2, [r1, #8]
 8043812:	4607      	mov	r7, r0
 8043814:	690b      	ldr	r3, [r1, #16]
 8043816:	460c      	mov	r4, r1
 8043818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 804381c:	4293      	cmp	r3, r2
 804381e:	bfb8      	it	lt
 8043820:	4613      	movlt	r3, r2
 8043822:	6033      	str	r3, [r6, #0]
 8043824:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8043828:	b10a      	cbz	r2, 804382e <_printf_common+0x26>
 804382a:	3301      	adds	r3, #1
 804382c:	6033      	str	r3, [r6, #0]
 804382e:	6823      	ldr	r3, [r4, #0]
 8043830:	0699      	lsls	r1, r3, #26
 8043832:	bf42      	ittt	mi
 8043834:	6833      	ldrmi	r3, [r6, #0]
 8043836:	3302      	addmi	r3, #2
 8043838:	6033      	strmi	r3, [r6, #0]
 804383a:	6825      	ldr	r5, [r4, #0]
 804383c:	f015 0506 	ands.w	r5, r5, #6
 8043840:	d106      	bne.n	8043850 <_printf_common+0x48>
 8043842:	f104 0a19 	add.w	sl, r4, #25
 8043846:	68e3      	ldr	r3, [r4, #12]
 8043848:	6832      	ldr	r2, [r6, #0]
 804384a:	1a9b      	subs	r3, r3, r2
 804384c:	42ab      	cmp	r3, r5
 804384e:	dc29      	bgt.n	80438a4 <_printf_common+0x9c>
 8043850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8043854:	1e13      	subs	r3, r2, #0
 8043856:	6822      	ldr	r2, [r4, #0]
 8043858:	bf18      	it	ne
 804385a:	2301      	movne	r3, #1
 804385c:	0692      	lsls	r2, r2, #26
 804385e:	d42e      	bmi.n	80438be <_printf_common+0xb6>
 8043860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8043864:	4649      	mov	r1, r9
 8043866:	4638      	mov	r0, r7
 8043868:	47c0      	blx	r8
 804386a:	3001      	adds	r0, #1
 804386c:	d021      	beq.n	80438b2 <_printf_common+0xaa>
 804386e:	6823      	ldr	r3, [r4, #0]
 8043870:	341a      	adds	r4, #26
 8043872:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8043876:	f003 0306 	and.w	r3, r3, #6
 804387a:	6832      	ldr	r2, [r6, #0]
 804387c:	2600      	movs	r6, #0
 804387e:	2b04      	cmp	r3, #4
 8043880:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8043884:	bf08      	it	eq
 8043886:	1aad      	subeq	r5, r5, r2
 8043888:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 804388c:	bf14      	ite	ne
 804388e:	2500      	movne	r5, #0
 8043890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8043894:	4293      	cmp	r3, r2
 8043896:	bfc4      	itt	gt
 8043898:	1a9b      	subgt	r3, r3, r2
 804389a:	18ed      	addgt	r5, r5, r3
 804389c:	42b5      	cmp	r5, r6
 804389e:	d11a      	bne.n	80438d6 <_printf_common+0xce>
 80438a0:	2000      	movs	r0, #0
 80438a2:	e008      	b.n	80438b6 <_printf_common+0xae>
 80438a4:	2301      	movs	r3, #1
 80438a6:	4652      	mov	r2, sl
 80438a8:	4649      	mov	r1, r9
 80438aa:	4638      	mov	r0, r7
 80438ac:	47c0      	blx	r8
 80438ae:	3001      	adds	r0, #1
 80438b0:	d103      	bne.n	80438ba <_printf_common+0xb2>
 80438b2:	f04f 30ff 	mov.w	r0, #4294967295
 80438b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80438ba:	3501      	adds	r5, #1
 80438bc:	e7c3      	b.n	8043846 <_printf_common+0x3e>
 80438be:	18e1      	adds	r1, r4, r3
 80438c0:	1c5a      	adds	r2, r3, #1
 80438c2:	2030      	movs	r0, #48	; 0x30
 80438c4:	3302      	adds	r3, #2
 80438c6:	4422      	add	r2, r4
 80438c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80438cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80438d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80438d4:	e7c4      	b.n	8043860 <_printf_common+0x58>
 80438d6:	2301      	movs	r3, #1
 80438d8:	4622      	mov	r2, r4
 80438da:	4649      	mov	r1, r9
 80438dc:	4638      	mov	r0, r7
 80438de:	47c0      	blx	r8
 80438e0:	3001      	adds	r0, #1
 80438e2:	d0e6      	beq.n	80438b2 <_printf_common+0xaa>
 80438e4:	3601      	adds	r6, #1
 80438e6:	e7d9      	b.n	804389c <_printf_common+0x94>

080438e8 <_printf_i>:
 80438e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80438ec:	7e0f      	ldrb	r7, [r1, #24]
 80438ee:	4691      	mov	r9, r2
 80438f0:	4680      	mov	r8, r0
 80438f2:	460c      	mov	r4, r1
 80438f4:	2f78      	cmp	r7, #120	; 0x78
 80438f6:	469a      	mov	sl, r3
 80438f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80438fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80438fe:	d807      	bhi.n	8043910 <_printf_i+0x28>
 8043900:	2f62      	cmp	r7, #98	; 0x62
 8043902:	d80a      	bhi.n	804391a <_printf_i+0x32>
 8043904:	2f00      	cmp	r7, #0
 8043906:	f000 80d8 	beq.w	8043aba <_printf_i+0x1d2>
 804390a:	2f58      	cmp	r7, #88	; 0x58
 804390c:	f000 80a3 	beq.w	8043a56 <_printf_i+0x16e>
 8043910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8043914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8043918:	e03a      	b.n	8043990 <_printf_i+0xa8>
 804391a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 804391e:	2b15      	cmp	r3, #21
 8043920:	d8f6      	bhi.n	8043910 <_printf_i+0x28>
 8043922:	a101      	add	r1, pc, #4	; (adr r1, 8043928 <_printf_i+0x40>)
 8043924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8043928:	08043981 	.word	0x08043981
 804392c:	08043995 	.word	0x08043995
 8043930:	08043911 	.word	0x08043911
 8043934:	08043911 	.word	0x08043911
 8043938:	08043911 	.word	0x08043911
 804393c:	08043911 	.word	0x08043911
 8043940:	08043995 	.word	0x08043995
 8043944:	08043911 	.word	0x08043911
 8043948:	08043911 	.word	0x08043911
 804394c:	08043911 	.word	0x08043911
 8043950:	08043911 	.word	0x08043911
 8043954:	08043aa1 	.word	0x08043aa1
 8043958:	080439c5 	.word	0x080439c5
 804395c:	08043a83 	.word	0x08043a83
 8043960:	08043911 	.word	0x08043911
 8043964:	08043911 	.word	0x08043911
 8043968:	08043ac3 	.word	0x08043ac3
 804396c:	08043911 	.word	0x08043911
 8043970:	080439c5 	.word	0x080439c5
 8043974:	08043911 	.word	0x08043911
 8043978:	08043911 	.word	0x08043911
 804397c:	08043a8b 	.word	0x08043a8b
 8043980:	682b      	ldr	r3, [r5, #0]
 8043982:	1d1a      	adds	r2, r3, #4
 8043984:	681b      	ldr	r3, [r3, #0]
 8043986:	602a      	str	r2, [r5, #0]
 8043988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804398c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8043990:	2301      	movs	r3, #1
 8043992:	e0a3      	b.n	8043adc <_printf_i+0x1f4>
 8043994:	6820      	ldr	r0, [r4, #0]
 8043996:	6829      	ldr	r1, [r5, #0]
 8043998:	0606      	lsls	r6, r0, #24
 804399a:	f101 0304 	add.w	r3, r1, #4
 804399e:	d50a      	bpl.n	80439b6 <_printf_i+0xce>
 80439a0:	680e      	ldr	r6, [r1, #0]
 80439a2:	602b      	str	r3, [r5, #0]
 80439a4:	2e00      	cmp	r6, #0
 80439a6:	da03      	bge.n	80439b0 <_printf_i+0xc8>
 80439a8:	232d      	movs	r3, #45	; 0x2d
 80439aa:	4276      	negs	r6, r6
 80439ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80439b0:	485e      	ldr	r0, [pc, #376]	; (8043b2c <_printf_i+0x244>)
 80439b2:	230a      	movs	r3, #10
 80439b4:	e019      	b.n	80439ea <_printf_i+0x102>
 80439b6:	680e      	ldr	r6, [r1, #0]
 80439b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80439bc:	602b      	str	r3, [r5, #0]
 80439be:	bf18      	it	ne
 80439c0:	b236      	sxthne	r6, r6
 80439c2:	e7ef      	b.n	80439a4 <_printf_i+0xbc>
 80439c4:	682b      	ldr	r3, [r5, #0]
 80439c6:	6820      	ldr	r0, [r4, #0]
 80439c8:	1d19      	adds	r1, r3, #4
 80439ca:	6029      	str	r1, [r5, #0]
 80439cc:	0601      	lsls	r1, r0, #24
 80439ce:	d501      	bpl.n	80439d4 <_printf_i+0xec>
 80439d0:	681e      	ldr	r6, [r3, #0]
 80439d2:	e002      	b.n	80439da <_printf_i+0xf2>
 80439d4:	0646      	lsls	r6, r0, #25
 80439d6:	d5fb      	bpl.n	80439d0 <_printf_i+0xe8>
 80439d8:	881e      	ldrh	r6, [r3, #0]
 80439da:	2f6f      	cmp	r7, #111	; 0x6f
 80439dc:	4853      	ldr	r0, [pc, #332]	; (8043b2c <_printf_i+0x244>)
 80439de:	bf0c      	ite	eq
 80439e0:	2308      	moveq	r3, #8
 80439e2:	230a      	movne	r3, #10
 80439e4:	2100      	movs	r1, #0
 80439e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80439ea:	6865      	ldr	r5, [r4, #4]
 80439ec:	2d00      	cmp	r5, #0
 80439ee:	60a5      	str	r5, [r4, #8]
 80439f0:	bfa2      	ittt	ge
 80439f2:	6821      	ldrge	r1, [r4, #0]
 80439f4:	f021 0104 	bicge.w	r1, r1, #4
 80439f8:	6021      	strge	r1, [r4, #0]
 80439fa:	b90e      	cbnz	r6, 8043a00 <_printf_i+0x118>
 80439fc:	2d00      	cmp	r5, #0
 80439fe:	d04d      	beq.n	8043a9c <_printf_i+0x1b4>
 8043a00:	4615      	mov	r5, r2
 8043a02:	fbb6 f1f3 	udiv	r1, r6, r3
 8043a06:	fb03 6711 	mls	r7, r3, r1, r6
 8043a0a:	5dc7      	ldrb	r7, [r0, r7]
 8043a0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8043a10:	4637      	mov	r7, r6
 8043a12:	460e      	mov	r6, r1
 8043a14:	42bb      	cmp	r3, r7
 8043a16:	d9f4      	bls.n	8043a02 <_printf_i+0x11a>
 8043a18:	2b08      	cmp	r3, #8
 8043a1a:	d10b      	bne.n	8043a34 <_printf_i+0x14c>
 8043a1c:	6823      	ldr	r3, [r4, #0]
 8043a1e:	07de      	lsls	r6, r3, #31
 8043a20:	d508      	bpl.n	8043a34 <_printf_i+0x14c>
 8043a22:	6923      	ldr	r3, [r4, #16]
 8043a24:	6861      	ldr	r1, [r4, #4]
 8043a26:	4299      	cmp	r1, r3
 8043a28:	bfde      	ittt	le
 8043a2a:	2330      	movle	r3, #48	; 0x30
 8043a2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8043a30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8043a34:	1b52      	subs	r2, r2, r5
 8043a36:	6122      	str	r2, [r4, #16]
 8043a38:	464b      	mov	r3, r9
 8043a3a:	aa03      	add	r2, sp, #12
 8043a3c:	4621      	mov	r1, r4
 8043a3e:	4640      	mov	r0, r8
 8043a40:	f8cd a000 	str.w	sl, [sp]
 8043a44:	f7ff fee0 	bl	8043808 <_printf_common>
 8043a48:	3001      	adds	r0, #1
 8043a4a:	d14c      	bne.n	8043ae6 <_printf_i+0x1fe>
 8043a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8043a50:	b004      	add	sp, #16
 8043a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8043a56:	4835      	ldr	r0, [pc, #212]	; (8043b2c <_printf_i+0x244>)
 8043a58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8043a5c:	6829      	ldr	r1, [r5, #0]
 8043a5e:	6823      	ldr	r3, [r4, #0]
 8043a60:	f851 6b04 	ldr.w	r6, [r1], #4
 8043a64:	6029      	str	r1, [r5, #0]
 8043a66:	061d      	lsls	r5, r3, #24
 8043a68:	d514      	bpl.n	8043a94 <_printf_i+0x1ac>
 8043a6a:	07df      	lsls	r7, r3, #31
 8043a6c:	bf44      	itt	mi
 8043a6e:	f043 0320 	orrmi.w	r3, r3, #32
 8043a72:	6023      	strmi	r3, [r4, #0]
 8043a74:	b91e      	cbnz	r6, 8043a7e <_printf_i+0x196>
 8043a76:	6823      	ldr	r3, [r4, #0]
 8043a78:	f023 0320 	bic.w	r3, r3, #32
 8043a7c:	6023      	str	r3, [r4, #0]
 8043a7e:	2310      	movs	r3, #16
 8043a80:	e7b0      	b.n	80439e4 <_printf_i+0xfc>
 8043a82:	6823      	ldr	r3, [r4, #0]
 8043a84:	f043 0320 	orr.w	r3, r3, #32
 8043a88:	6023      	str	r3, [r4, #0]
 8043a8a:	2378      	movs	r3, #120	; 0x78
 8043a8c:	4828      	ldr	r0, [pc, #160]	; (8043b30 <_printf_i+0x248>)
 8043a8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8043a92:	e7e3      	b.n	8043a5c <_printf_i+0x174>
 8043a94:	0659      	lsls	r1, r3, #25
 8043a96:	bf48      	it	mi
 8043a98:	b2b6      	uxthmi	r6, r6
 8043a9a:	e7e6      	b.n	8043a6a <_printf_i+0x182>
 8043a9c:	4615      	mov	r5, r2
 8043a9e:	e7bb      	b.n	8043a18 <_printf_i+0x130>
 8043aa0:	682b      	ldr	r3, [r5, #0]
 8043aa2:	6826      	ldr	r6, [r4, #0]
 8043aa4:	1d18      	adds	r0, r3, #4
 8043aa6:	6961      	ldr	r1, [r4, #20]
 8043aa8:	6028      	str	r0, [r5, #0]
 8043aaa:	0635      	lsls	r5, r6, #24
 8043aac:	681b      	ldr	r3, [r3, #0]
 8043aae:	d501      	bpl.n	8043ab4 <_printf_i+0x1cc>
 8043ab0:	6019      	str	r1, [r3, #0]
 8043ab2:	e002      	b.n	8043aba <_printf_i+0x1d2>
 8043ab4:	0670      	lsls	r0, r6, #25
 8043ab6:	d5fb      	bpl.n	8043ab0 <_printf_i+0x1c8>
 8043ab8:	8019      	strh	r1, [r3, #0]
 8043aba:	2300      	movs	r3, #0
 8043abc:	4615      	mov	r5, r2
 8043abe:	6123      	str	r3, [r4, #16]
 8043ac0:	e7ba      	b.n	8043a38 <_printf_i+0x150>
 8043ac2:	682b      	ldr	r3, [r5, #0]
 8043ac4:	2100      	movs	r1, #0
 8043ac6:	1d1a      	adds	r2, r3, #4
 8043ac8:	602a      	str	r2, [r5, #0]
 8043aca:	681d      	ldr	r5, [r3, #0]
 8043acc:	6862      	ldr	r2, [r4, #4]
 8043ace:	4628      	mov	r0, r5
 8043ad0:	f000 fe8e 	bl	80447f0 <memchr>
 8043ad4:	b108      	cbz	r0, 8043ada <_printf_i+0x1f2>
 8043ad6:	1b40      	subs	r0, r0, r5
 8043ad8:	6060      	str	r0, [r4, #4]
 8043ada:	6863      	ldr	r3, [r4, #4]
 8043adc:	6123      	str	r3, [r4, #16]
 8043ade:	2300      	movs	r3, #0
 8043ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8043ae4:	e7a8      	b.n	8043a38 <_printf_i+0x150>
 8043ae6:	6923      	ldr	r3, [r4, #16]
 8043ae8:	462a      	mov	r2, r5
 8043aea:	4649      	mov	r1, r9
 8043aec:	4640      	mov	r0, r8
 8043aee:	47d0      	blx	sl
 8043af0:	3001      	adds	r0, #1
 8043af2:	d0ab      	beq.n	8043a4c <_printf_i+0x164>
 8043af4:	6823      	ldr	r3, [r4, #0]
 8043af6:	079b      	lsls	r3, r3, #30
 8043af8:	d413      	bmi.n	8043b22 <_printf_i+0x23a>
 8043afa:	68e0      	ldr	r0, [r4, #12]
 8043afc:	9b03      	ldr	r3, [sp, #12]
 8043afe:	4298      	cmp	r0, r3
 8043b00:	bfb8      	it	lt
 8043b02:	4618      	movlt	r0, r3
 8043b04:	e7a4      	b.n	8043a50 <_printf_i+0x168>
 8043b06:	2301      	movs	r3, #1
 8043b08:	4632      	mov	r2, r6
 8043b0a:	4649      	mov	r1, r9
 8043b0c:	4640      	mov	r0, r8
 8043b0e:	47d0      	blx	sl
 8043b10:	3001      	adds	r0, #1
 8043b12:	d09b      	beq.n	8043a4c <_printf_i+0x164>
 8043b14:	3501      	adds	r5, #1
 8043b16:	68e3      	ldr	r3, [r4, #12]
 8043b18:	9903      	ldr	r1, [sp, #12]
 8043b1a:	1a5b      	subs	r3, r3, r1
 8043b1c:	42ab      	cmp	r3, r5
 8043b1e:	dcf2      	bgt.n	8043b06 <_printf_i+0x21e>
 8043b20:	e7eb      	b.n	8043afa <_printf_i+0x212>
 8043b22:	2500      	movs	r5, #0
 8043b24:	f104 0619 	add.w	r6, r4, #25
 8043b28:	e7f5      	b.n	8043b16 <_printf_i+0x22e>
 8043b2a:	bf00      	nop
 8043b2c:	08044ad1 	.word	0x08044ad1
 8043b30:	08044ae2 	.word	0x08044ae2

08043b34 <__svfiscanf_r>:
 8043b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8043b38:	461d      	mov	r5, r3
 8043b3a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8043b3c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8043b40:	4606      	mov	r6, r0
 8043b42:	07df      	lsls	r7, r3, #31
 8043b44:	460c      	mov	r4, r1
 8043b46:	4692      	mov	sl, r2
 8043b48:	d405      	bmi.n	8043b56 <__svfiscanf_r+0x22>
 8043b4a:	898b      	ldrh	r3, [r1, #12]
 8043b4c:	0598      	lsls	r0, r3, #22
 8043b4e:	d402      	bmi.n	8043b56 <__svfiscanf_r+0x22>
 8043b50:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8043b52:	f7ff fbae 	bl	80432b2 <__retarget_lock_acquire_recursive>
 8043b56:	2300      	movs	r3, #0
 8043b58:	f10d 0804 	add.w	r8, sp, #4
 8043b5c:	4fa6      	ldr	r7, [pc, #664]	; (8043df8 <__svfiscanf_r+0x2c4>)
 8043b5e:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8043e04 <__svfiscanf_r+0x2d0>
 8043b62:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8043b66:	9500      	str	r5, [sp, #0]
 8043b68:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8043b6c:	4ba3      	ldr	r3, [pc, #652]	; (8043dfc <__svfiscanf_r+0x2c8>)
 8043b6e:	93a0      	str	r3, [sp, #640]	; 0x280
 8043b70:	4ba3      	ldr	r3, [pc, #652]	; (8043e00 <__svfiscanf_r+0x2cc>)
 8043b72:	93a1      	str	r3, [sp, #644]	; 0x284
 8043b74:	f89a 3000 	ldrb.w	r3, [sl]
 8043b78:	2b00      	cmp	r3, #0
 8043b7a:	f000 8173 	beq.w	8043e64 <__svfiscanf_r+0x330>
 8043b7e:	5dd9      	ldrb	r1, [r3, r7]
 8043b80:	f10a 0501 	add.w	r5, sl, #1
 8043b84:	f011 0108 	ands.w	r1, r1, #8
 8043b88:	d019      	beq.n	8043bbe <__svfiscanf_r+0x8a>
 8043b8a:	6863      	ldr	r3, [r4, #4]
 8043b8c:	2b00      	cmp	r3, #0
 8043b8e:	dd0f      	ble.n	8043bb0 <__svfiscanf_r+0x7c>
 8043b90:	6823      	ldr	r3, [r4, #0]
 8043b92:	781a      	ldrb	r2, [r3, #0]
 8043b94:	5cba      	ldrb	r2, [r7, r2]
 8043b96:	0711      	lsls	r1, r2, #28
 8043b98:	d401      	bmi.n	8043b9e <__svfiscanf_r+0x6a>
 8043b9a:	46aa      	mov	sl, r5
 8043b9c:	e7ea      	b.n	8043b74 <__svfiscanf_r+0x40>
 8043b9e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8043ba0:	3301      	adds	r3, #1
 8043ba2:	3201      	adds	r2, #1
 8043ba4:	6023      	str	r3, [r4, #0]
 8043ba6:	9245      	str	r2, [sp, #276]	; 0x114
 8043ba8:	6862      	ldr	r2, [r4, #4]
 8043baa:	3a01      	subs	r2, #1
 8043bac:	6062      	str	r2, [r4, #4]
 8043bae:	e7ec      	b.n	8043b8a <__svfiscanf_r+0x56>
 8043bb0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8043bb2:	4621      	mov	r1, r4
 8043bb4:	4630      	mov	r0, r6
 8043bb6:	4798      	blx	r3
 8043bb8:	2800      	cmp	r0, #0
 8043bba:	d0e9      	beq.n	8043b90 <__svfiscanf_r+0x5c>
 8043bbc:	e7ed      	b.n	8043b9a <__svfiscanf_r+0x66>
 8043bbe:	2b25      	cmp	r3, #37	; 0x25
 8043bc0:	d012      	beq.n	8043be8 <__svfiscanf_r+0xb4>
 8043bc2:	469a      	mov	sl, r3
 8043bc4:	6863      	ldr	r3, [r4, #4]
 8043bc6:	2b00      	cmp	r3, #0
 8043bc8:	f340 8095 	ble.w	8043cf6 <__svfiscanf_r+0x1c2>
 8043bcc:	6822      	ldr	r2, [r4, #0]
 8043bce:	7813      	ldrb	r3, [r2, #0]
 8043bd0:	4553      	cmp	r3, sl
 8043bd2:	f040 8147 	bne.w	8043e64 <__svfiscanf_r+0x330>
 8043bd6:	6863      	ldr	r3, [r4, #4]
 8043bd8:	3201      	adds	r2, #1
 8043bda:	3b01      	subs	r3, #1
 8043bdc:	6022      	str	r2, [r4, #0]
 8043bde:	6063      	str	r3, [r4, #4]
 8043be0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8043be2:	3301      	adds	r3, #1
 8043be4:	9345      	str	r3, [sp, #276]	; 0x114
 8043be6:	e7d8      	b.n	8043b9a <__svfiscanf_r+0x66>
 8043be8:	9141      	str	r1, [sp, #260]	; 0x104
 8043bea:	220a      	movs	r2, #10
 8043bec:	9143      	str	r1, [sp, #268]	; 0x10c
 8043bee:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8043bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8043bf4:	bf02      	ittt	eq
 8043bf6:	2310      	moveq	r3, #16
 8043bf8:	f10a 0502 	addeq.w	r5, sl, #2
 8043bfc:	9341      	streq	r3, [sp, #260]	; 0x104
 8043bfe:	46aa      	mov	sl, r5
 8043c00:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8043c04:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8043c08:	2b09      	cmp	r3, #9
 8043c0a:	d91e      	bls.n	8043c4a <__svfiscanf_r+0x116>
 8043c0c:	2203      	movs	r2, #3
 8043c0e:	487d      	ldr	r0, [pc, #500]	; (8043e04 <__svfiscanf_r+0x2d0>)
 8043c10:	f000 fdee 	bl	80447f0 <memchr>
 8043c14:	b140      	cbz	r0, 8043c28 <__svfiscanf_r+0xf4>
 8043c16:	2301      	movs	r3, #1
 8043c18:	eba0 0009 	sub.w	r0, r0, r9
 8043c1c:	4655      	mov	r5, sl
 8043c1e:	fa03 f000 	lsl.w	r0, r3, r0
 8043c22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8043c24:	4318      	orrs	r0, r3
 8043c26:	9041      	str	r0, [sp, #260]	; 0x104
 8043c28:	f815 3b01 	ldrb.w	r3, [r5], #1
 8043c2c:	2b78      	cmp	r3, #120	; 0x78
 8043c2e:	d807      	bhi.n	8043c40 <__svfiscanf_r+0x10c>
 8043c30:	2b57      	cmp	r3, #87	; 0x57
 8043c32:	d811      	bhi.n	8043c58 <__svfiscanf_r+0x124>
 8043c34:	2b25      	cmp	r3, #37	; 0x25
 8043c36:	d0c4      	beq.n	8043bc2 <__svfiscanf_r+0x8e>
 8043c38:	d858      	bhi.n	8043cec <__svfiscanf_r+0x1b8>
 8043c3a:	2b00      	cmp	r3, #0
 8043c3c:	f000 80c9 	beq.w	8043dd2 <__svfiscanf_r+0x29e>
 8043c40:	2303      	movs	r3, #3
 8043c42:	9347      	str	r3, [sp, #284]	; 0x11c
 8043c44:	230a      	movs	r3, #10
 8043c46:	9342      	str	r3, [sp, #264]	; 0x108
 8043c48:	e07c      	b.n	8043d44 <__svfiscanf_r+0x210>
 8043c4a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8043c4c:	4655      	mov	r5, sl
 8043c4e:	fb02 1103 	mla	r1, r2, r3, r1
 8043c52:	3930      	subs	r1, #48	; 0x30
 8043c54:	9143      	str	r1, [sp, #268]	; 0x10c
 8043c56:	e7d2      	b.n	8043bfe <__svfiscanf_r+0xca>
 8043c58:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8043c5c:	2a20      	cmp	r2, #32
 8043c5e:	d8ef      	bhi.n	8043c40 <__svfiscanf_r+0x10c>
 8043c60:	a101      	add	r1, pc, #4	; (adr r1, 8043c68 <__svfiscanf_r+0x134>)
 8043c62:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8043c66:	bf00      	nop
 8043c68:	08043d2f 	.word	0x08043d2f
 8043c6c:	08043c41 	.word	0x08043c41
 8043c70:	08043c41 	.word	0x08043c41
 8043c74:	08043d8d 	.word	0x08043d8d
 8043c78:	08043c41 	.word	0x08043c41
 8043c7c:	08043c41 	.word	0x08043c41
 8043c80:	08043c41 	.word	0x08043c41
 8043c84:	08043c41 	.word	0x08043c41
 8043c88:	08043c41 	.word	0x08043c41
 8043c8c:	08043c41 	.word	0x08043c41
 8043c90:	08043c41 	.word	0x08043c41
 8043c94:	08043da3 	.word	0x08043da3
 8043c98:	08043d79 	.word	0x08043d79
 8043c9c:	08043cf3 	.word	0x08043cf3
 8043ca0:	08043cf3 	.word	0x08043cf3
 8043ca4:	08043cf3 	.word	0x08043cf3
 8043ca8:	08043c41 	.word	0x08043c41
 8043cac:	08043d7d 	.word	0x08043d7d
 8043cb0:	08043c41 	.word	0x08043c41
 8043cb4:	08043c41 	.word	0x08043c41
 8043cb8:	08043c41 	.word	0x08043c41
 8043cbc:	08043c41 	.word	0x08043c41
 8043cc0:	08043db3 	.word	0x08043db3
 8043cc4:	08043d85 	.word	0x08043d85
 8043cc8:	08043d27 	.word	0x08043d27
 8043ccc:	08043c41 	.word	0x08043c41
 8043cd0:	08043c41 	.word	0x08043c41
 8043cd4:	08043daf 	.word	0x08043daf
 8043cd8:	08043c41 	.word	0x08043c41
 8043cdc:	08043d79 	.word	0x08043d79
 8043ce0:	08043c41 	.word	0x08043c41
 8043ce4:	08043c41 	.word	0x08043c41
 8043ce8:	08043d2f 	.word	0x08043d2f
 8043cec:	3b45      	subs	r3, #69	; 0x45
 8043cee:	2b02      	cmp	r3, #2
 8043cf0:	d8a6      	bhi.n	8043c40 <__svfiscanf_r+0x10c>
 8043cf2:	2305      	movs	r3, #5
 8043cf4:	e025      	b.n	8043d42 <__svfiscanf_r+0x20e>
 8043cf6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8043cf8:	4621      	mov	r1, r4
 8043cfa:	4630      	mov	r0, r6
 8043cfc:	4798      	blx	r3
 8043cfe:	2800      	cmp	r0, #0
 8043d00:	f43f af64 	beq.w	8043bcc <__svfiscanf_r+0x98>
 8043d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8043d06:	07da      	lsls	r2, r3, #31
 8043d08:	f140 80a4 	bpl.w	8043e54 <__svfiscanf_r+0x320>
 8043d0c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8043d0e:	2800      	cmp	r0, #0
 8043d10:	d068      	beq.n	8043de4 <__svfiscanf_r+0x2b0>
 8043d12:	89a3      	ldrh	r3, [r4, #12]
 8043d14:	f013 0f40 	tst.w	r3, #64	; 0x40
 8043d18:	bf18      	it	ne
 8043d1a:	f04f 30ff 	movne.w	r0, #4294967295
 8043d1e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8043d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8043d26:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8043d28:	f042 0220 	orr.w	r2, r2, #32
 8043d2c:	9241      	str	r2, [sp, #260]	; 0x104
 8043d2e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8043d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8043d34:	9241      	str	r2, [sp, #260]	; 0x104
 8043d36:	2210      	movs	r2, #16
 8043d38:	2b6f      	cmp	r3, #111	; 0x6f
 8043d3a:	9242      	str	r2, [sp, #264]	; 0x108
 8043d3c:	bf34      	ite	cc
 8043d3e:	2303      	movcc	r3, #3
 8043d40:	2304      	movcs	r3, #4
 8043d42:	9347      	str	r3, [sp, #284]	; 0x11c
 8043d44:	6863      	ldr	r3, [r4, #4]
 8043d46:	2b00      	cmp	r3, #0
 8043d48:	dd4f      	ble.n	8043dea <__svfiscanf_r+0x2b6>
 8043d4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8043d4c:	065b      	lsls	r3, r3, #25
 8043d4e:	d404      	bmi.n	8043d5a <__svfiscanf_r+0x226>
 8043d50:	6823      	ldr	r3, [r4, #0]
 8043d52:	781a      	ldrb	r2, [r3, #0]
 8043d54:	5cba      	ldrb	r2, [r7, r2]
 8043d56:	0710      	lsls	r0, r2, #28
 8043d58:	d456      	bmi.n	8043e08 <__svfiscanf_r+0x2d4>
 8043d5a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8043d5c:	2b02      	cmp	r3, #2
 8043d5e:	dc65      	bgt.n	8043e2c <__svfiscanf_r+0x2f8>
 8043d60:	466b      	mov	r3, sp
 8043d62:	4622      	mov	r2, r4
 8043d64:	a941      	add	r1, sp, #260	; 0x104
 8043d66:	4630      	mov	r0, r6
 8043d68:	f000 f8b2 	bl	8043ed0 <_scanf_chars>
 8043d6c:	2801      	cmp	r0, #1
 8043d6e:	d079      	beq.n	8043e64 <__svfiscanf_r+0x330>
 8043d70:	2802      	cmp	r0, #2
 8043d72:	f47f af12 	bne.w	8043b9a <__svfiscanf_r+0x66>
 8043d76:	e7c5      	b.n	8043d04 <__svfiscanf_r+0x1d0>
 8043d78:	220a      	movs	r2, #10
 8043d7a:	e7dd      	b.n	8043d38 <__svfiscanf_r+0x204>
 8043d7c:	2300      	movs	r3, #0
 8043d7e:	9342      	str	r3, [sp, #264]	; 0x108
 8043d80:	2303      	movs	r3, #3
 8043d82:	e7de      	b.n	8043d42 <__svfiscanf_r+0x20e>
 8043d84:	2308      	movs	r3, #8
 8043d86:	9342      	str	r3, [sp, #264]	; 0x108
 8043d88:	2304      	movs	r3, #4
 8043d8a:	e7da      	b.n	8043d42 <__svfiscanf_r+0x20e>
 8043d8c:	4629      	mov	r1, r5
 8043d8e:	4640      	mov	r0, r8
 8043d90:	f000 fa94 	bl	80442bc <__sccl>
 8043d94:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8043d96:	4605      	mov	r5, r0
 8043d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8043d9c:	9341      	str	r3, [sp, #260]	; 0x104
 8043d9e:	2301      	movs	r3, #1
 8043da0:	e7cf      	b.n	8043d42 <__svfiscanf_r+0x20e>
 8043da2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8043da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8043da8:	9341      	str	r3, [sp, #260]	; 0x104
 8043daa:	2300      	movs	r3, #0
 8043dac:	e7c9      	b.n	8043d42 <__svfiscanf_r+0x20e>
 8043dae:	2302      	movs	r3, #2
 8043db0:	e7c7      	b.n	8043d42 <__svfiscanf_r+0x20e>
 8043db2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8043db4:	06c3      	lsls	r3, r0, #27
 8043db6:	f53f aef0 	bmi.w	8043b9a <__svfiscanf_r+0x66>
 8043dba:	9b00      	ldr	r3, [sp, #0]
 8043dbc:	f010 0f01 	tst.w	r0, #1
 8043dc0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8043dc2:	f103 0104 	add.w	r1, r3, #4
 8043dc6:	9100      	str	r1, [sp, #0]
 8043dc8:	681b      	ldr	r3, [r3, #0]
 8043dca:	bf14      	ite	ne
 8043dcc:	801a      	strhne	r2, [r3, #0]
 8043dce:	601a      	streq	r2, [r3, #0]
 8043dd0:	e6e3      	b.n	8043b9a <__svfiscanf_r+0x66>
 8043dd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8043dd4:	07d8      	lsls	r0, r3, #31
 8043dd6:	d405      	bmi.n	8043de4 <__svfiscanf_r+0x2b0>
 8043dd8:	89a3      	ldrh	r3, [r4, #12]
 8043dda:	0599      	lsls	r1, r3, #22
 8043ddc:	d402      	bmi.n	8043de4 <__svfiscanf_r+0x2b0>
 8043dde:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8043de0:	f7ff fa68 	bl	80432b4 <__retarget_lock_release_recursive>
 8043de4:	f04f 30ff 	mov.w	r0, #4294967295
 8043de8:	e799      	b.n	8043d1e <__svfiscanf_r+0x1ea>
 8043dea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8043dec:	4621      	mov	r1, r4
 8043dee:	4630      	mov	r0, r6
 8043df0:	4798      	blx	r3
 8043df2:	2800      	cmp	r0, #0
 8043df4:	d0a9      	beq.n	8043d4a <__svfiscanf_r+0x216>
 8043df6:	e785      	b.n	8043d04 <__svfiscanf_r+0x1d0>
 8043df8:	08044b0f 	.word	0x08044b0f
 8043dfc:	08044615 	.word	0x08044615
 8043e00:	08044189 	.word	0x08044189
 8043e04:	08044ac6 	.word	0x08044ac6
 8043e08:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8043e0a:	3201      	adds	r2, #1
 8043e0c:	9245      	str	r2, [sp, #276]	; 0x114
 8043e0e:	6862      	ldr	r2, [r4, #4]
 8043e10:	3a01      	subs	r2, #1
 8043e12:	2a00      	cmp	r2, #0
 8043e14:	6062      	str	r2, [r4, #4]
 8043e16:	dd02      	ble.n	8043e1e <__svfiscanf_r+0x2ea>
 8043e18:	3301      	adds	r3, #1
 8043e1a:	6023      	str	r3, [r4, #0]
 8043e1c:	e798      	b.n	8043d50 <__svfiscanf_r+0x21c>
 8043e1e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8043e20:	4621      	mov	r1, r4
 8043e22:	4630      	mov	r0, r6
 8043e24:	4798      	blx	r3
 8043e26:	2800      	cmp	r0, #0
 8043e28:	d092      	beq.n	8043d50 <__svfiscanf_r+0x21c>
 8043e2a:	e76b      	b.n	8043d04 <__svfiscanf_r+0x1d0>
 8043e2c:	2b04      	cmp	r3, #4
 8043e2e:	dc06      	bgt.n	8043e3e <__svfiscanf_r+0x30a>
 8043e30:	466b      	mov	r3, sp
 8043e32:	4622      	mov	r2, r4
 8043e34:	a941      	add	r1, sp, #260	; 0x104
 8043e36:	4630      	mov	r0, r6
 8043e38:	f000 f8a4 	bl	8043f84 <_scanf_i>
 8043e3c:	e796      	b.n	8043d6c <__svfiscanf_r+0x238>
 8043e3e:	4b0f      	ldr	r3, [pc, #60]	; (8043e7c <__svfiscanf_r+0x348>)
 8043e40:	2b00      	cmp	r3, #0
 8043e42:	f43f aeaa 	beq.w	8043b9a <__svfiscanf_r+0x66>
 8043e46:	466b      	mov	r3, sp
 8043e48:	4622      	mov	r2, r4
 8043e4a:	a941      	add	r1, sp, #260	; 0x104
 8043e4c:	4630      	mov	r0, r6
 8043e4e:	e000      	b.n	8043e52 <__svfiscanf_r+0x31e>
 8043e50:	bf00      	nop
 8043e52:	e78b      	b.n	8043d6c <__svfiscanf_r+0x238>
 8043e54:	89a3      	ldrh	r3, [r4, #12]
 8043e56:	0599      	lsls	r1, r3, #22
 8043e58:	f53f af58 	bmi.w	8043d0c <__svfiscanf_r+0x1d8>
 8043e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8043e5e:	f7ff fa29 	bl	80432b4 <__retarget_lock_release_recursive>
 8043e62:	e753      	b.n	8043d0c <__svfiscanf_r+0x1d8>
 8043e64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8043e66:	07da      	lsls	r2, r3, #31
 8043e68:	d405      	bmi.n	8043e76 <__svfiscanf_r+0x342>
 8043e6a:	89a3      	ldrh	r3, [r4, #12]
 8043e6c:	059b      	lsls	r3, r3, #22
 8043e6e:	d402      	bmi.n	8043e76 <__svfiscanf_r+0x342>
 8043e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8043e72:	f7ff fa1f 	bl	80432b4 <__retarget_lock_release_recursive>
 8043e76:	9844      	ldr	r0, [sp, #272]	; 0x110
 8043e78:	e751      	b.n	8043d1e <__svfiscanf_r+0x1ea>
 8043e7a:	bf00      	nop
 8043e7c:	00000000 	.word	0x00000000

08043e80 <_vfiscanf_r>:
 8043e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8043e82:	460c      	mov	r4, r1
 8043e84:	4605      	mov	r5, r0
 8043e86:	b138      	cbz	r0, 8043e98 <_vfiscanf_r+0x18>
 8043e88:	6981      	ldr	r1, [r0, #24]
 8043e8a:	b929      	cbnz	r1, 8043e98 <_vfiscanf_r+0x18>
 8043e8c:	e9cd 2300 	strd	r2, r3, [sp]
 8043e90:	f7ff f954 	bl	804313c <__sinit>
 8043e94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8043e98:	490a      	ldr	r1, [pc, #40]	; (8043ec4 <_vfiscanf_r+0x44>)
 8043e9a:	428c      	cmp	r4, r1
 8043e9c:	d107      	bne.n	8043eae <_vfiscanf_r+0x2e>
 8043e9e:	686c      	ldr	r4, [r5, #4]
 8043ea0:	4621      	mov	r1, r4
 8043ea2:	4628      	mov	r0, r5
 8043ea4:	b003      	add	sp, #12
 8043ea6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8043eaa:	f7ff be43 	b.w	8043b34 <__svfiscanf_r>
 8043eae:	4906      	ldr	r1, [pc, #24]	; (8043ec8 <_vfiscanf_r+0x48>)
 8043eb0:	428c      	cmp	r4, r1
 8043eb2:	d101      	bne.n	8043eb8 <_vfiscanf_r+0x38>
 8043eb4:	68ac      	ldr	r4, [r5, #8]
 8043eb6:	e7f3      	b.n	8043ea0 <_vfiscanf_r+0x20>
 8043eb8:	4904      	ldr	r1, [pc, #16]	; (8043ecc <_vfiscanf_r+0x4c>)
 8043eba:	428c      	cmp	r4, r1
 8043ebc:	bf08      	it	eq
 8043ebe:	68ec      	ldreq	r4, [r5, #12]
 8043ec0:	e7ee      	b.n	8043ea0 <_vfiscanf_r+0x20>
 8043ec2:	bf00      	nop
 8043ec4:	08044a80 	.word	0x08044a80
 8043ec8:	08044aa0 	.word	0x08044aa0
 8043ecc:	08044a60 	.word	0x08044a60

08043ed0 <_scanf_chars>:
 8043ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8043ed4:	4615      	mov	r5, r2
 8043ed6:	688a      	ldr	r2, [r1, #8]
 8043ed8:	4680      	mov	r8, r0
 8043eda:	460c      	mov	r4, r1
 8043edc:	b932      	cbnz	r2, 8043eec <_scanf_chars+0x1c>
 8043ede:	698a      	ldr	r2, [r1, #24]
 8043ee0:	2a00      	cmp	r2, #0
 8043ee2:	bf0c      	ite	eq
 8043ee4:	2201      	moveq	r2, #1
 8043ee6:	f04f 32ff 	movne.w	r2, #4294967295
 8043eea:	608a      	str	r2, [r1, #8]
 8043eec:	6822      	ldr	r2, [r4, #0]
 8043eee:	2700      	movs	r7, #0
 8043ef0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8043f80 <_scanf_chars+0xb0>
 8043ef4:	06d1      	lsls	r1, r2, #27
 8043ef6:	bf5f      	itttt	pl
 8043ef8:	681a      	ldrpl	r2, [r3, #0]
 8043efa:	1d11      	addpl	r1, r2, #4
 8043efc:	6019      	strpl	r1, [r3, #0]
 8043efe:	6816      	ldrpl	r6, [r2, #0]
 8043f00:	69a0      	ldr	r0, [r4, #24]
 8043f02:	b188      	cbz	r0, 8043f28 <_scanf_chars+0x58>
 8043f04:	2801      	cmp	r0, #1
 8043f06:	d107      	bne.n	8043f18 <_scanf_chars+0x48>
 8043f08:	682a      	ldr	r2, [r5, #0]
 8043f0a:	7811      	ldrb	r1, [r2, #0]
 8043f0c:	6962      	ldr	r2, [r4, #20]
 8043f0e:	5c52      	ldrb	r2, [r2, r1]
 8043f10:	b952      	cbnz	r2, 8043f28 <_scanf_chars+0x58>
 8043f12:	2f00      	cmp	r7, #0
 8043f14:	d031      	beq.n	8043f7a <_scanf_chars+0xaa>
 8043f16:	e022      	b.n	8043f5e <_scanf_chars+0x8e>
 8043f18:	2802      	cmp	r0, #2
 8043f1a:	d120      	bne.n	8043f5e <_scanf_chars+0x8e>
 8043f1c:	682b      	ldr	r3, [r5, #0]
 8043f1e:	781b      	ldrb	r3, [r3, #0]
 8043f20:	f813 3009 	ldrb.w	r3, [r3, r9]
 8043f24:	071b      	lsls	r3, r3, #28
 8043f26:	d41a      	bmi.n	8043f5e <_scanf_chars+0x8e>
 8043f28:	6823      	ldr	r3, [r4, #0]
 8043f2a:	3701      	adds	r7, #1
 8043f2c:	06da      	lsls	r2, r3, #27
 8043f2e:	bf5e      	ittt	pl
 8043f30:	682b      	ldrpl	r3, [r5, #0]
 8043f32:	781b      	ldrbpl	r3, [r3, #0]
 8043f34:	f806 3b01 	strbpl.w	r3, [r6], #1
 8043f38:	682a      	ldr	r2, [r5, #0]
 8043f3a:	686b      	ldr	r3, [r5, #4]
 8043f3c:	3201      	adds	r2, #1
 8043f3e:	3b01      	subs	r3, #1
 8043f40:	602a      	str	r2, [r5, #0]
 8043f42:	68a2      	ldr	r2, [r4, #8]
 8043f44:	606b      	str	r3, [r5, #4]
 8043f46:	3a01      	subs	r2, #1
 8043f48:	60a2      	str	r2, [r4, #8]
 8043f4a:	b142      	cbz	r2, 8043f5e <_scanf_chars+0x8e>
 8043f4c:	2b00      	cmp	r3, #0
 8043f4e:	dcd7      	bgt.n	8043f00 <_scanf_chars+0x30>
 8043f50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8043f54:	4629      	mov	r1, r5
 8043f56:	4640      	mov	r0, r8
 8043f58:	4798      	blx	r3
 8043f5a:	2800      	cmp	r0, #0
 8043f5c:	d0d0      	beq.n	8043f00 <_scanf_chars+0x30>
 8043f5e:	6823      	ldr	r3, [r4, #0]
 8043f60:	f013 0310 	ands.w	r3, r3, #16
 8043f64:	d105      	bne.n	8043f72 <_scanf_chars+0xa2>
 8043f66:	68e2      	ldr	r2, [r4, #12]
 8043f68:	3201      	adds	r2, #1
 8043f6a:	60e2      	str	r2, [r4, #12]
 8043f6c:	69a2      	ldr	r2, [r4, #24]
 8043f6e:	b102      	cbz	r2, 8043f72 <_scanf_chars+0xa2>
 8043f70:	7033      	strb	r3, [r6, #0]
 8043f72:	6923      	ldr	r3, [r4, #16]
 8043f74:	2000      	movs	r0, #0
 8043f76:	443b      	add	r3, r7
 8043f78:	6123      	str	r3, [r4, #16]
 8043f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8043f7e:	bf00      	nop
 8043f80:	08044b0f 	.word	0x08044b0f

08043f84 <_scanf_i>:
 8043f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8043f88:	4698      	mov	r8, r3
 8043f8a:	b087      	sub	sp, #28
 8043f8c:	4b75      	ldr	r3, [pc, #468]	; (8044164 <_scanf_i+0x1e0>)
 8043f8e:	460c      	mov	r4, r1
 8043f90:	4682      	mov	sl, r0
 8043f92:	4616      	mov	r6, r2
 8043f94:	4627      	mov	r7, r4
 8043f96:	f04f 0b00 	mov.w	fp, #0
 8043f9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8043f9e:	ab03      	add	r3, sp, #12
 8043fa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8043fa4:	4b70      	ldr	r3, [pc, #448]	; (8044168 <_scanf_i+0x1e4>)
 8043fa6:	69a1      	ldr	r1, [r4, #24]
 8043fa8:	4a70      	ldr	r2, [pc, #448]	; (804416c <_scanf_i+0x1e8>)
 8043faa:	2903      	cmp	r1, #3
 8043fac:	bf18      	it	ne
 8043fae:	461a      	movne	r2, r3
 8043fb0:	68a3      	ldr	r3, [r4, #8]
 8043fb2:	9201      	str	r2, [sp, #4]
 8043fb4:	1e5a      	subs	r2, r3, #1
 8043fb6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8043fba:	bf89      	itett	hi
 8043fbc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8043fc0:	f04f 0900 	movls.w	r9, #0
 8043fc4:	eb03 0905 	addhi.w	r9, r3, r5
 8043fc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8043fcc:	bf88      	it	hi
 8043fce:	60a3      	strhi	r3, [r4, #8]
 8043fd0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8043fd4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8043fd8:	463d      	mov	r5, r7
 8043fda:	6023      	str	r3, [r4, #0]
 8043fdc:	6831      	ldr	r1, [r6, #0]
 8043fde:	ab03      	add	r3, sp, #12
 8043fe0:	2202      	movs	r2, #2
 8043fe2:	7809      	ldrb	r1, [r1, #0]
 8043fe4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8043fe8:	f000 fc02 	bl	80447f0 <memchr>
 8043fec:	b328      	cbz	r0, 804403a <_scanf_i+0xb6>
 8043fee:	f1bb 0f01 	cmp.w	fp, #1
 8043ff2:	d159      	bne.n	80440a8 <_scanf_i+0x124>
 8043ff4:	6862      	ldr	r2, [r4, #4]
 8043ff6:	b92a      	cbnz	r2, 8044004 <_scanf_i+0x80>
 8043ff8:	6822      	ldr	r2, [r4, #0]
 8043ffa:	2308      	movs	r3, #8
 8043ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8044000:	6063      	str	r3, [r4, #4]
 8044002:	6022      	str	r2, [r4, #0]
 8044004:	6822      	ldr	r2, [r4, #0]
 8044006:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 804400a:	6022      	str	r2, [r4, #0]
 804400c:	68a2      	ldr	r2, [r4, #8]
 804400e:	1e51      	subs	r1, r2, #1
 8044010:	60a1      	str	r1, [r4, #8]
 8044012:	b192      	cbz	r2, 804403a <_scanf_i+0xb6>
 8044014:	6832      	ldr	r2, [r6, #0]
 8044016:	1c51      	adds	r1, r2, #1
 8044018:	6031      	str	r1, [r6, #0]
 804401a:	7812      	ldrb	r2, [r2, #0]
 804401c:	f805 2b01 	strb.w	r2, [r5], #1
 8044020:	6872      	ldr	r2, [r6, #4]
 8044022:	3a01      	subs	r2, #1
 8044024:	2a00      	cmp	r2, #0
 8044026:	6072      	str	r2, [r6, #4]
 8044028:	dc07      	bgt.n	804403a <_scanf_i+0xb6>
 804402a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 804402e:	4631      	mov	r1, r6
 8044030:	4650      	mov	r0, sl
 8044032:	4790      	blx	r2
 8044034:	2800      	cmp	r0, #0
 8044036:	f040 8085 	bne.w	8044144 <_scanf_i+0x1c0>
 804403a:	f10b 0b01 	add.w	fp, fp, #1
 804403e:	f1bb 0f03 	cmp.w	fp, #3
 8044042:	d1cb      	bne.n	8043fdc <_scanf_i+0x58>
 8044044:	6863      	ldr	r3, [r4, #4]
 8044046:	b90b      	cbnz	r3, 804404c <_scanf_i+0xc8>
 8044048:	230a      	movs	r3, #10
 804404a:	6063      	str	r3, [r4, #4]
 804404c:	6863      	ldr	r3, [r4, #4]
 804404e:	f04f 0b00 	mov.w	fp, #0
 8044052:	4947      	ldr	r1, [pc, #284]	; (8044170 <_scanf_i+0x1ec>)
 8044054:	6960      	ldr	r0, [r4, #20]
 8044056:	1ac9      	subs	r1, r1, r3
 8044058:	f000 f930 	bl	80442bc <__sccl>
 804405c:	68a3      	ldr	r3, [r4, #8]
 804405e:	6822      	ldr	r2, [r4, #0]
 8044060:	2b00      	cmp	r3, #0
 8044062:	d03d      	beq.n	80440e0 <_scanf_i+0x15c>
 8044064:	6831      	ldr	r1, [r6, #0]
 8044066:	6960      	ldr	r0, [r4, #20]
 8044068:	f891 c000 	ldrb.w	ip, [r1]
 804406c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8044070:	2800      	cmp	r0, #0
 8044072:	d035      	beq.n	80440e0 <_scanf_i+0x15c>
 8044074:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8044078:	d124      	bne.n	80440c4 <_scanf_i+0x140>
 804407a:	0510      	lsls	r0, r2, #20
 804407c:	d522      	bpl.n	80440c4 <_scanf_i+0x140>
 804407e:	f10b 0b01 	add.w	fp, fp, #1
 8044082:	f1b9 0f00 	cmp.w	r9, #0
 8044086:	d003      	beq.n	8044090 <_scanf_i+0x10c>
 8044088:	3301      	adds	r3, #1
 804408a:	f109 39ff 	add.w	r9, r9, #4294967295
 804408e:	60a3      	str	r3, [r4, #8]
 8044090:	6873      	ldr	r3, [r6, #4]
 8044092:	3b01      	subs	r3, #1
 8044094:	2b00      	cmp	r3, #0
 8044096:	6073      	str	r3, [r6, #4]
 8044098:	dd1b      	ble.n	80440d2 <_scanf_i+0x14e>
 804409a:	6833      	ldr	r3, [r6, #0]
 804409c:	3301      	adds	r3, #1
 804409e:	6033      	str	r3, [r6, #0]
 80440a0:	68a3      	ldr	r3, [r4, #8]
 80440a2:	3b01      	subs	r3, #1
 80440a4:	60a3      	str	r3, [r4, #8]
 80440a6:	e7d9      	b.n	804405c <_scanf_i+0xd8>
 80440a8:	f1bb 0f02 	cmp.w	fp, #2
 80440ac:	d1ae      	bne.n	804400c <_scanf_i+0x88>
 80440ae:	6822      	ldr	r2, [r4, #0]
 80440b0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80440b4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80440b8:	d1bf      	bne.n	804403a <_scanf_i+0xb6>
 80440ba:	2310      	movs	r3, #16
 80440bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80440c0:	6063      	str	r3, [r4, #4]
 80440c2:	e7a2      	b.n	804400a <_scanf_i+0x86>
 80440c4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80440c8:	6022      	str	r2, [r4, #0]
 80440ca:	780b      	ldrb	r3, [r1, #0]
 80440cc:	f805 3b01 	strb.w	r3, [r5], #1
 80440d0:	e7de      	b.n	8044090 <_scanf_i+0x10c>
 80440d2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80440d6:	4631      	mov	r1, r6
 80440d8:	4650      	mov	r0, sl
 80440da:	4798      	blx	r3
 80440dc:	2800      	cmp	r0, #0
 80440de:	d0df      	beq.n	80440a0 <_scanf_i+0x11c>
 80440e0:	6823      	ldr	r3, [r4, #0]
 80440e2:	05db      	lsls	r3, r3, #23
 80440e4:	d50d      	bpl.n	8044102 <_scanf_i+0x17e>
 80440e6:	42bd      	cmp	r5, r7
 80440e8:	d909      	bls.n	80440fe <_scanf_i+0x17a>
 80440ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80440ee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80440f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80440f6:	4632      	mov	r2, r6
 80440f8:	464d      	mov	r5, r9
 80440fa:	4650      	mov	r0, sl
 80440fc:	4798      	blx	r3
 80440fe:	42bd      	cmp	r5, r7
 8044100:	d02d      	beq.n	804415e <_scanf_i+0x1da>
 8044102:	6822      	ldr	r2, [r4, #0]
 8044104:	f012 0210 	ands.w	r2, r2, #16
 8044108:	d113      	bne.n	8044132 <_scanf_i+0x1ae>
 804410a:	4639      	mov	r1, r7
 804410c:	702a      	strb	r2, [r5, #0]
 804410e:	4650      	mov	r0, sl
 8044110:	6863      	ldr	r3, [r4, #4]
 8044112:	9e01      	ldr	r6, [sp, #4]
 8044114:	47b0      	blx	r6
 8044116:	6821      	ldr	r1, [r4, #0]
 8044118:	f8d8 3000 	ldr.w	r3, [r8]
 804411c:	f011 0f20 	tst.w	r1, #32
 8044120:	d013      	beq.n	804414a <_scanf_i+0x1c6>
 8044122:	1d1a      	adds	r2, r3, #4
 8044124:	f8c8 2000 	str.w	r2, [r8]
 8044128:	681b      	ldr	r3, [r3, #0]
 804412a:	6018      	str	r0, [r3, #0]
 804412c:	68e3      	ldr	r3, [r4, #12]
 804412e:	3301      	adds	r3, #1
 8044130:	60e3      	str	r3, [r4, #12]
 8044132:	1bed      	subs	r5, r5, r7
 8044134:	2000      	movs	r0, #0
 8044136:	44ab      	add	fp, r5
 8044138:	6925      	ldr	r5, [r4, #16]
 804413a:	445d      	add	r5, fp
 804413c:	6125      	str	r5, [r4, #16]
 804413e:	b007      	add	sp, #28
 8044140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8044144:	f04f 0b00 	mov.w	fp, #0
 8044148:	e7ca      	b.n	80440e0 <_scanf_i+0x15c>
 804414a:	1d1a      	adds	r2, r3, #4
 804414c:	f011 0f01 	tst.w	r1, #1
 8044150:	f8c8 2000 	str.w	r2, [r8]
 8044154:	681b      	ldr	r3, [r3, #0]
 8044156:	bf14      	ite	ne
 8044158:	8018      	strhne	r0, [r3, #0]
 804415a:	6018      	streq	r0, [r3, #0]
 804415c:	e7e6      	b.n	804412c <_scanf_i+0x1a8>
 804415e:	2001      	movs	r0, #1
 8044160:	e7ed      	b.n	804413e <_scanf_i+0x1ba>
 8044162:	bf00      	nop
 8044164:	080449d0 	.word	0x080449d0
 8044168:	080445a1 	.word	0x080445a1
 804416c:	080444b9 	.word	0x080444b9
 8044170:	08044b0c 	.word	0x08044b0c

08044174 <lflush>:
 8044174:	8983      	ldrh	r3, [r0, #12]
 8044176:	f003 0309 	and.w	r3, r3, #9
 804417a:	2b09      	cmp	r3, #9
 804417c:	d101      	bne.n	8044182 <lflush+0xe>
 804417e:	f7fe bf73 	b.w	8043068 <fflush>
 8044182:	2000      	movs	r0, #0
 8044184:	4770      	bx	lr
	...

08044188 <__srefill_r>:
 8044188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804418a:	460c      	mov	r4, r1
 804418c:	4605      	mov	r5, r0
 804418e:	b118      	cbz	r0, 8044198 <__srefill_r+0x10>
 8044190:	6983      	ldr	r3, [r0, #24]
 8044192:	b90b      	cbnz	r3, 8044198 <__srefill_r+0x10>
 8044194:	f7fe ffd2 	bl	804313c <__sinit>
 8044198:	4b3b      	ldr	r3, [pc, #236]	; (8044288 <__srefill_r+0x100>)
 804419a:	429c      	cmp	r4, r3
 804419c:	d10a      	bne.n	80441b4 <__srefill_r+0x2c>
 804419e:	686c      	ldr	r4, [r5, #4]
 80441a0:	2300      	movs	r3, #0
 80441a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80441a6:	6063      	str	r3, [r4, #4]
 80441a8:	89a3      	ldrh	r3, [r4, #12]
 80441aa:	069e      	lsls	r6, r3, #26
 80441ac:	d50c      	bpl.n	80441c8 <__srefill_r+0x40>
 80441ae:	f04f 30ff 	mov.w	r0, #4294967295
 80441b2:	e066      	b.n	8044282 <__srefill_r+0xfa>
 80441b4:	4b35      	ldr	r3, [pc, #212]	; (804428c <__srefill_r+0x104>)
 80441b6:	429c      	cmp	r4, r3
 80441b8:	d101      	bne.n	80441be <__srefill_r+0x36>
 80441ba:	68ac      	ldr	r4, [r5, #8]
 80441bc:	e7f0      	b.n	80441a0 <__srefill_r+0x18>
 80441be:	4b34      	ldr	r3, [pc, #208]	; (8044290 <__srefill_r+0x108>)
 80441c0:	429c      	cmp	r4, r3
 80441c2:	bf08      	it	eq
 80441c4:	68ec      	ldreq	r4, [r5, #12]
 80441c6:	e7eb      	b.n	80441a0 <__srefill_r+0x18>
 80441c8:	0758      	lsls	r0, r3, #29
 80441ca:	d448      	bmi.n	804425e <__srefill_r+0xd6>
 80441cc:	06d9      	lsls	r1, r3, #27
 80441ce:	d405      	bmi.n	80441dc <__srefill_r+0x54>
 80441d0:	2309      	movs	r3, #9
 80441d2:	602b      	str	r3, [r5, #0]
 80441d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80441d8:	81a3      	strh	r3, [r4, #12]
 80441da:	e7e8      	b.n	80441ae <__srefill_r+0x26>
 80441dc:	071a      	lsls	r2, r3, #28
 80441de:	d50b      	bpl.n	80441f8 <__srefill_r+0x70>
 80441e0:	4621      	mov	r1, r4
 80441e2:	4628      	mov	r0, r5
 80441e4:	f7fe ff04 	bl	8042ff0 <_fflush_r>
 80441e8:	2800      	cmp	r0, #0
 80441ea:	d1e0      	bne.n	80441ae <__srefill_r+0x26>
 80441ec:	89a3      	ldrh	r3, [r4, #12]
 80441ee:	60a0      	str	r0, [r4, #8]
 80441f0:	f023 0308 	bic.w	r3, r3, #8
 80441f4:	61a0      	str	r0, [r4, #24]
 80441f6:	81a3      	strh	r3, [r4, #12]
 80441f8:	89a3      	ldrh	r3, [r4, #12]
 80441fa:	f043 0304 	orr.w	r3, r3, #4
 80441fe:	81a3      	strh	r3, [r4, #12]
 8044200:	6923      	ldr	r3, [r4, #16]
 8044202:	b91b      	cbnz	r3, 804420c <__srefill_r+0x84>
 8044204:	4621      	mov	r1, r4
 8044206:	4628      	mov	r0, r5
 8044208:	f7ff f87a 	bl	8043300 <__smakebuf_r>
 804420c:	89a6      	ldrh	r6, [r4, #12]
 804420e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8044212:	07b3      	lsls	r3, r6, #30
 8044214:	d00f      	beq.n	8044236 <__srefill_r+0xae>
 8044216:	2301      	movs	r3, #1
 8044218:	f006 0609 	and.w	r6, r6, #9
 804421c:	491d      	ldr	r1, [pc, #116]	; (8044294 <__srefill_r+0x10c>)
 804421e:	81a3      	strh	r3, [r4, #12]
 8044220:	4b1d      	ldr	r3, [pc, #116]	; (8044298 <__srefill_r+0x110>)
 8044222:	6818      	ldr	r0, [r3, #0]
 8044224:	f7ff f808 	bl	8043238 <_fwalk>
 8044228:	2e09      	cmp	r6, #9
 804422a:	81a7      	strh	r7, [r4, #12]
 804422c:	d103      	bne.n	8044236 <__srefill_r+0xae>
 804422e:	4621      	mov	r1, r4
 8044230:	4628      	mov	r0, r5
 8044232:	f7fe fe59 	bl	8042ee8 <__sflush_r>
 8044236:	6922      	ldr	r2, [r4, #16]
 8044238:	4628      	mov	r0, r5
 804423a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 804423c:	6963      	ldr	r3, [r4, #20]
 804423e:	6a21      	ldr	r1, [r4, #32]
 8044240:	6022      	str	r2, [r4, #0]
 8044242:	47b0      	blx	r6
 8044244:	2800      	cmp	r0, #0
 8044246:	6060      	str	r0, [r4, #4]
 8044248:	dc1c      	bgt.n	8044284 <__srefill_r+0xfc>
 804424a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804424e:	bf17      	itett	ne
 8044250:	2200      	movne	r2, #0
 8044252:	f043 0320 	orreq.w	r3, r3, #32
 8044256:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 804425a:	6062      	strne	r2, [r4, #4]
 804425c:	e7bc      	b.n	80441d8 <__srefill_r+0x50>
 804425e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8044260:	2900      	cmp	r1, #0
 8044262:	d0cd      	beq.n	8044200 <__srefill_r+0x78>
 8044264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8044268:	4299      	cmp	r1, r3
 804426a:	d002      	beq.n	8044272 <__srefill_r+0xea>
 804426c:	4628      	mov	r0, r5
 804426e:	f7ff f88f 	bl	8043390 <_free_r>
 8044272:	2000      	movs	r0, #0
 8044274:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8044276:	6360      	str	r0, [r4, #52]	; 0x34
 8044278:	6063      	str	r3, [r4, #4]
 804427a:	2b00      	cmp	r3, #0
 804427c:	d0c0      	beq.n	8044200 <__srefill_r+0x78>
 804427e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8044280:	6023      	str	r3, [r4, #0]
 8044282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8044284:	2000      	movs	r0, #0
 8044286:	e7fc      	b.n	8044282 <__srefill_r+0xfa>
 8044288:	08044a80 	.word	0x08044a80
 804428c:	08044aa0 	.word	0x08044aa0
 8044290:	08044a60 	.word	0x08044a60
 8044294:	08044175 	.word	0x08044175
 8044298:	08044a5c 	.word	0x08044a5c

0804429c <_sbrk_r>:
 804429c:	b538      	push	{r3, r4, r5, lr}
 804429e:	2300      	movs	r3, #0
 80442a0:	4d05      	ldr	r5, [pc, #20]	; (80442b8 <_sbrk_r+0x1c>)
 80442a2:	4604      	mov	r4, r0
 80442a4:	4608      	mov	r0, r1
 80442a6:	602b      	str	r3, [r5, #0]
 80442a8:	f7fc fb5a 	bl	8040960 <_sbrk>
 80442ac:	1c43      	adds	r3, r0, #1
 80442ae:	d102      	bne.n	80442b6 <_sbrk_r+0x1a>
 80442b0:	682b      	ldr	r3, [r5, #0]
 80442b2:	b103      	cbz	r3, 80442b6 <_sbrk_r+0x1a>
 80442b4:	6023      	str	r3, [r4, #0]
 80442b6:	bd38      	pop	{r3, r4, r5, pc}
 80442b8:	20018134 	.word	0x20018134

080442bc <__sccl>:
 80442bc:	b570      	push	{r4, r5, r6, lr}
 80442be:	780b      	ldrb	r3, [r1, #0]
 80442c0:	4604      	mov	r4, r0
 80442c2:	2b5e      	cmp	r3, #94	; 0x5e
 80442c4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80442c8:	bf13      	iteet	ne
 80442ca:	1c48      	addne	r0, r1, #1
 80442cc:	1c88      	addeq	r0, r1, #2
 80442ce:	784b      	ldrbeq	r3, [r1, #1]
 80442d0:	2200      	movne	r2, #0
 80442d2:	bf08      	it	eq
 80442d4:	2201      	moveq	r2, #1
 80442d6:	1e61      	subs	r1, r4, #1
 80442d8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80442dc:	42a9      	cmp	r1, r5
 80442de:	d1fb      	bne.n	80442d8 <__sccl+0x1c>
 80442e0:	b90b      	cbnz	r3, 80442e6 <__sccl+0x2a>
 80442e2:	3801      	subs	r0, #1
 80442e4:	bd70      	pop	{r4, r5, r6, pc}
 80442e6:	f082 0201 	eor.w	r2, r2, #1
 80442ea:	4605      	mov	r5, r0
 80442ec:	54e2      	strb	r2, [r4, r3]
 80442ee:	4628      	mov	r0, r5
 80442f0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80442f4:	292d      	cmp	r1, #45	; 0x2d
 80442f6:	d006      	beq.n	8044306 <__sccl+0x4a>
 80442f8:	295d      	cmp	r1, #93	; 0x5d
 80442fa:	d0f3      	beq.n	80442e4 <__sccl+0x28>
 80442fc:	b909      	cbnz	r1, 8044302 <__sccl+0x46>
 80442fe:	4628      	mov	r0, r5
 8044300:	e7f0      	b.n	80442e4 <__sccl+0x28>
 8044302:	460b      	mov	r3, r1
 8044304:	e7f1      	b.n	80442ea <__sccl+0x2e>
 8044306:	786e      	ldrb	r6, [r5, #1]
 8044308:	2e5d      	cmp	r6, #93	; 0x5d
 804430a:	d0fa      	beq.n	8044302 <__sccl+0x46>
 804430c:	42b3      	cmp	r3, r6
 804430e:	dcf8      	bgt.n	8044302 <__sccl+0x46>
 8044310:	3502      	adds	r5, #2
 8044312:	4619      	mov	r1, r3
 8044314:	3101      	adds	r1, #1
 8044316:	428e      	cmp	r6, r1
 8044318:	5462      	strb	r2, [r4, r1]
 804431a:	dcfb      	bgt.n	8044314 <__sccl+0x58>
 804431c:	1af1      	subs	r1, r6, r3
 804431e:	1c58      	adds	r0, r3, #1
 8044320:	3901      	subs	r1, #1
 8044322:	42b3      	cmp	r3, r6
 8044324:	bfa8      	it	ge
 8044326:	2100      	movge	r1, #0
 8044328:	1843      	adds	r3, r0, r1
 804432a:	e7e0      	b.n	80442ee <__sccl+0x32>

0804432c <__sread>:
 804432c:	b510      	push	{r4, lr}
 804432e:	460c      	mov	r4, r1
 8044330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8044334:	f000 face 	bl	80448d4 <_read_r>
 8044338:	2800      	cmp	r0, #0
 804433a:	bfab      	itete	ge
 804433c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804433e:	89a3      	ldrhlt	r3, [r4, #12]
 8044340:	181b      	addge	r3, r3, r0
 8044342:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8044346:	bfac      	ite	ge
 8044348:	6563      	strge	r3, [r4, #84]	; 0x54
 804434a:	81a3      	strhlt	r3, [r4, #12]
 804434c:	bd10      	pop	{r4, pc}

0804434e <__swrite>:
 804434e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8044352:	461f      	mov	r7, r3
 8044354:	898b      	ldrh	r3, [r1, #12]
 8044356:	4605      	mov	r5, r0
 8044358:	460c      	mov	r4, r1
 804435a:	05db      	lsls	r3, r3, #23
 804435c:	4616      	mov	r6, r2
 804435e:	d505      	bpl.n	804436c <__swrite+0x1e>
 8044360:	2302      	movs	r3, #2
 8044362:	2200      	movs	r2, #0
 8044364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8044368:	f000 fa30 	bl	80447cc <_lseek_r>
 804436c:	89a3      	ldrh	r3, [r4, #12]
 804436e:	4632      	mov	r2, r6
 8044370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8044374:	4628      	mov	r0, r5
 8044376:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804437a:	81a3      	strh	r3, [r4, #12]
 804437c:	463b      	mov	r3, r7
 804437e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8044382:	f000 b9df 	b.w	8044744 <_write_r>

08044386 <__sseek>:
 8044386:	b510      	push	{r4, lr}
 8044388:	460c      	mov	r4, r1
 804438a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804438e:	f000 fa1d 	bl	80447cc <_lseek_r>
 8044392:	1c43      	adds	r3, r0, #1
 8044394:	89a3      	ldrh	r3, [r4, #12]
 8044396:	bf15      	itete	ne
 8044398:	6560      	strne	r0, [r4, #84]	; 0x54
 804439a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804439e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80443a2:	81a3      	strheq	r3, [r4, #12]
 80443a4:	bf18      	it	ne
 80443a6:	81a3      	strhne	r3, [r4, #12]
 80443a8:	bd10      	pop	{r4, pc}

080443aa <__sclose>:
 80443aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80443ae:	f000 b9db 	b.w	8044768 <_close_r>
	...

080443b4 <_strtol_l.constprop.0>:
 80443b4:	2b01      	cmp	r3, #1
 80443b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80443ba:	d001      	beq.n	80443c0 <_strtol_l.constprop.0+0xc>
 80443bc:	2b24      	cmp	r3, #36	; 0x24
 80443be:	d906      	bls.n	80443ce <_strtol_l.constprop.0+0x1a>
 80443c0:	f7fe fc5c 	bl	8042c7c <__errno>
 80443c4:	2316      	movs	r3, #22
 80443c6:	6003      	str	r3, [r0, #0]
 80443c8:	2000      	movs	r0, #0
 80443ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80443ce:	460d      	mov	r5, r1
 80443d0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 80444b4 <_strtol_l.constprop.0+0x100>
 80443d4:	462e      	mov	r6, r5
 80443d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80443da:	f814 700c 	ldrb.w	r7, [r4, ip]
 80443de:	f017 0708 	ands.w	r7, r7, #8
 80443e2:	d1f7      	bne.n	80443d4 <_strtol_l.constprop.0+0x20>
 80443e4:	2c2d      	cmp	r4, #45	; 0x2d
 80443e6:	d132      	bne.n	804444e <_strtol_l.constprop.0+0x9a>
 80443e8:	782c      	ldrb	r4, [r5, #0]
 80443ea:	2701      	movs	r7, #1
 80443ec:	1cb5      	adds	r5, r6, #2
 80443ee:	2b00      	cmp	r3, #0
 80443f0:	d05b      	beq.n	80444aa <_strtol_l.constprop.0+0xf6>
 80443f2:	2b10      	cmp	r3, #16
 80443f4:	d109      	bne.n	804440a <_strtol_l.constprop.0+0x56>
 80443f6:	2c30      	cmp	r4, #48	; 0x30
 80443f8:	d107      	bne.n	804440a <_strtol_l.constprop.0+0x56>
 80443fa:	782c      	ldrb	r4, [r5, #0]
 80443fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8044400:	2c58      	cmp	r4, #88	; 0x58
 8044402:	d14d      	bne.n	80444a0 <_strtol_l.constprop.0+0xec>
 8044404:	786c      	ldrb	r4, [r5, #1]
 8044406:	2310      	movs	r3, #16
 8044408:	3502      	adds	r5, #2
 804440a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 804440e:	f04f 0c00 	mov.w	ip, #0
 8044412:	f108 38ff 	add.w	r8, r8, #4294967295
 8044416:	4666      	mov	r6, ip
 8044418:	fbb8 f9f3 	udiv	r9, r8, r3
 804441c:	fb03 8a19 	mls	sl, r3, r9, r8
 8044420:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8044424:	f1be 0f09 	cmp.w	lr, #9
 8044428:	d816      	bhi.n	8044458 <_strtol_l.constprop.0+0xa4>
 804442a:	4674      	mov	r4, lr
 804442c:	42a3      	cmp	r3, r4
 804442e:	dd24      	ble.n	804447a <_strtol_l.constprop.0+0xc6>
 8044430:	f1bc 0f00 	cmp.w	ip, #0
 8044434:	db1e      	blt.n	8044474 <_strtol_l.constprop.0+0xc0>
 8044436:	45b1      	cmp	r9, r6
 8044438:	d31c      	bcc.n	8044474 <_strtol_l.constprop.0+0xc0>
 804443a:	d101      	bne.n	8044440 <_strtol_l.constprop.0+0x8c>
 804443c:	45a2      	cmp	sl, r4
 804443e:	db19      	blt.n	8044474 <_strtol_l.constprop.0+0xc0>
 8044440:	fb06 4603 	mla	r6, r6, r3, r4
 8044444:	f04f 0c01 	mov.w	ip, #1
 8044448:	f815 4b01 	ldrb.w	r4, [r5], #1
 804444c:	e7e8      	b.n	8044420 <_strtol_l.constprop.0+0x6c>
 804444e:	2c2b      	cmp	r4, #43	; 0x2b
 8044450:	bf04      	itt	eq
 8044452:	782c      	ldrbeq	r4, [r5, #0]
 8044454:	1cb5      	addeq	r5, r6, #2
 8044456:	e7ca      	b.n	80443ee <_strtol_l.constprop.0+0x3a>
 8044458:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 804445c:	f1be 0f19 	cmp.w	lr, #25
 8044460:	d801      	bhi.n	8044466 <_strtol_l.constprop.0+0xb2>
 8044462:	3c37      	subs	r4, #55	; 0x37
 8044464:	e7e2      	b.n	804442c <_strtol_l.constprop.0+0x78>
 8044466:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 804446a:	f1be 0f19 	cmp.w	lr, #25
 804446e:	d804      	bhi.n	804447a <_strtol_l.constprop.0+0xc6>
 8044470:	3c57      	subs	r4, #87	; 0x57
 8044472:	e7db      	b.n	804442c <_strtol_l.constprop.0+0x78>
 8044474:	f04f 3cff 	mov.w	ip, #4294967295
 8044478:	e7e6      	b.n	8044448 <_strtol_l.constprop.0+0x94>
 804447a:	f1bc 0f00 	cmp.w	ip, #0
 804447e:	da05      	bge.n	804448c <_strtol_l.constprop.0+0xd8>
 8044480:	2322      	movs	r3, #34	; 0x22
 8044482:	4646      	mov	r6, r8
 8044484:	6003      	str	r3, [r0, #0]
 8044486:	b942      	cbnz	r2, 804449a <_strtol_l.constprop.0+0xe6>
 8044488:	4630      	mov	r0, r6
 804448a:	e79e      	b.n	80443ca <_strtol_l.constprop.0+0x16>
 804448c:	b107      	cbz	r7, 8044490 <_strtol_l.constprop.0+0xdc>
 804448e:	4276      	negs	r6, r6
 8044490:	2a00      	cmp	r2, #0
 8044492:	d0f9      	beq.n	8044488 <_strtol_l.constprop.0+0xd4>
 8044494:	f1bc 0f00 	cmp.w	ip, #0
 8044498:	d000      	beq.n	804449c <_strtol_l.constprop.0+0xe8>
 804449a:	1e69      	subs	r1, r5, #1
 804449c:	6011      	str	r1, [r2, #0]
 804449e:	e7f3      	b.n	8044488 <_strtol_l.constprop.0+0xd4>
 80444a0:	2430      	movs	r4, #48	; 0x30
 80444a2:	2b00      	cmp	r3, #0
 80444a4:	d1b1      	bne.n	804440a <_strtol_l.constprop.0+0x56>
 80444a6:	2308      	movs	r3, #8
 80444a8:	e7af      	b.n	804440a <_strtol_l.constprop.0+0x56>
 80444aa:	2c30      	cmp	r4, #48	; 0x30
 80444ac:	d0a5      	beq.n	80443fa <_strtol_l.constprop.0+0x46>
 80444ae:	230a      	movs	r3, #10
 80444b0:	e7ab      	b.n	804440a <_strtol_l.constprop.0+0x56>
 80444b2:	bf00      	nop
 80444b4:	08044b0f 	.word	0x08044b0f

080444b8 <_strtol_r>:
 80444b8:	f7ff bf7c 	b.w	80443b4 <_strtol_l.constprop.0>

080444bc <_strtoul_l.constprop.0>:
 80444bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80444c0:	4686      	mov	lr, r0
 80444c2:	460d      	mov	r5, r1
 80444c4:	4f35      	ldr	r7, [pc, #212]	; (804459c <_strtoul_l.constprop.0+0xe0>)
 80444c6:	4628      	mov	r0, r5
 80444c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80444cc:	5de6      	ldrb	r6, [r4, r7]
 80444ce:	f016 0608 	ands.w	r6, r6, #8
 80444d2:	d1f8      	bne.n	80444c6 <_strtoul_l.constprop.0+0xa>
 80444d4:	2c2d      	cmp	r4, #45	; 0x2d
 80444d6:	d12f      	bne.n	8044538 <_strtoul_l.constprop.0+0x7c>
 80444d8:	782c      	ldrb	r4, [r5, #0]
 80444da:	2601      	movs	r6, #1
 80444dc:	1c85      	adds	r5, r0, #2
 80444de:	2b00      	cmp	r3, #0
 80444e0:	d057      	beq.n	8044592 <_strtoul_l.constprop.0+0xd6>
 80444e2:	2b10      	cmp	r3, #16
 80444e4:	d109      	bne.n	80444fa <_strtoul_l.constprop.0+0x3e>
 80444e6:	2c30      	cmp	r4, #48	; 0x30
 80444e8:	d107      	bne.n	80444fa <_strtoul_l.constprop.0+0x3e>
 80444ea:	7828      	ldrb	r0, [r5, #0]
 80444ec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80444f0:	2858      	cmp	r0, #88	; 0x58
 80444f2:	d149      	bne.n	8044588 <_strtoul_l.constprop.0+0xcc>
 80444f4:	786c      	ldrb	r4, [r5, #1]
 80444f6:	2310      	movs	r3, #16
 80444f8:	3502      	adds	r5, #2
 80444fa:	f04f 38ff 	mov.w	r8, #4294967295
 80444fe:	2700      	movs	r7, #0
 8044500:	fbb8 f8f3 	udiv	r8, r8, r3
 8044504:	fb03 f908 	mul.w	r9, r3, r8
 8044508:	4638      	mov	r0, r7
 804450a:	ea6f 0909 	mvn.w	r9, r9
 804450e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8044512:	f1bc 0f09 	cmp.w	ip, #9
 8044516:	d814      	bhi.n	8044542 <_strtoul_l.constprop.0+0x86>
 8044518:	4664      	mov	r4, ip
 804451a:	42a3      	cmp	r3, r4
 804451c:	dd22      	ble.n	8044564 <_strtoul_l.constprop.0+0xa8>
 804451e:	2f00      	cmp	r7, #0
 8044520:	db1d      	blt.n	804455e <_strtoul_l.constprop.0+0xa2>
 8044522:	4580      	cmp	r8, r0
 8044524:	d31b      	bcc.n	804455e <_strtoul_l.constprop.0+0xa2>
 8044526:	d101      	bne.n	804452c <_strtoul_l.constprop.0+0x70>
 8044528:	45a1      	cmp	r9, r4
 804452a:	db18      	blt.n	804455e <_strtoul_l.constprop.0+0xa2>
 804452c:	fb00 4003 	mla	r0, r0, r3, r4
 8044530:	2701      	movs	r7, #1
 8044532:	f815 4b01 	ldrb.w	r4, [r5], #1
 8044536:	e7ea      	b.n	804450e <_strtoul_l.constprop.0+0x52>
 8044538:	2c2b      	cmp	r4, #43	; 0x2b
 804453a:	bf04      	itt	eq
 804453c:	782c      	ldrbeq	r4, [r5, #0]
 804453e:	1c85      	addeq	r5, r0, #2
 8044540:	e7cd      	b.n	80444de <_strtoul_l.constprop.0+0x22>
 8044542:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8044546:	f1bc 0f19 	cmp.w	ip, #25
 804454a:	d801      	bhi.n	8044550 <_strtoul_l.constprop.0+0x94>
 804454c:	3c37      	subs	r4, #55	; 0x37
 804454e:	e7e4      	b.n	804451a <_strtoul_l.constprop.0+0x5e>
 8044550:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8044554:	f1bc 0f19 	cmp.w	ip, #25
 8044558:	d804      	bhi.n	8044564 <_strtoul_l.constprop.0+0xa8>
 804455a:	3c57      	subs	r4, #87	; 0x57
 804455c:	e7dd      	b.n	804451a <_strtoul_l.constprop.0+0x5e>
 804455e:	f04f 37ff 	mov.w	r7, #4294967295
 8044562:	e7e6      	b.n	8044532 <_strtoul_l.constprop.0+0x76>
 8044564:	2f00      	cmp	r7, #0
 8044566:	da07      	bge.n	8044578 <_strtoul_l.constprop.0+0xbc>
 8044568:	2322      	movs	r3, #34	; 0x22
 804456a:	f04f 30ff 	mov.w	r0, #4294967295
 804456e:	f8ce 3000 	str.w	r3, [lr]
 8044572:	b932      	cbnz	r2, 8044582 <_strtoul_l.constprop.0+0xc6>
 8044574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8044578:	b106      	cbz	r6, 804457c <_strtoul_l.constprop.0+0xc0>
 804457a:	4240      	negs	r0, r0
 804457c:	2a00      	cmp	r2, #0
 804457e:	d0f9      	beq.n	8044574 <_strtoul_l.constprop.0+0xb8>
 8044580:	b107      	cbz	r7, 8044584 <_strtoul_l.constprop.0+0xc8>
 8044582:	1e69      	subs	r1, r5, #1
 8044584:	6011      	str	r1, [r2, #0]
 8044586:	e7f5      	b.n	8044574 <_strtoul_l.constprop.0+0xb8>
 8044588:	2430      	movs	r4, #48	; 0x30
 804458a:	2b00      	cmp	r3, #0
 804458c:	d1b5      	bne.n	80444fa <_strtoul_l.constprop.0+0x3e>
 804458e:	2308      	movs	r3, #8
 8044590:	e7b3      	b.n	80444fa <_strtoul_l.constprop.0+0x3e>
 8044592:	2c30      	cmp	r4, #48	; 0x30
 8044594:	d0a9      	beq.n	80444ea <_strtoul_l.constprop.0+0x2e>
 8044596:	230a      	movs	r3, #10
 8044598:	e7af      	b.n	80444fa <_strtoul_l.constprop.0+0x3e>
 804459a:	bf00      	nop
 804459c:	08044b0f 	.word	0x08044b0f

080445a0 <_strtoul_r>:
 80445a0:	f7ff bf8c 	b.w	80444bc <_strtoul_l.constprop.0>

080445a4 <__submore>:
 80445a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80445a8:	460c      	mov	r4, r1
 80445aa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80445ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80445b0:	4299      	cmp	r1, r3
 80445b2:	d11a      	bne.n	80445ea <__submore+0x46>
 80445b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80445b8:	f7fe ff56 	bl	8043468 <_malloc_r>
 80445bc:	b918      	cbnz	r0, 80445c6 <__submore+0x22>
 80445be:	f04f 30ff 	mov.w	r0, #4294967295
 80445c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80445c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80445ca:	6360      	str	r0, [r4, #52]	; 0x34
 80445cc:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80445d0:	63a3      	str	r3, [r4, #56]	; 0x38
 80445d2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80445d6:	7083      	strb	r3, [r0, #2]
 80445d8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80445dc:	7043      	strb	r3, [r0, #1]
 80445de:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80445e2:	7003      	strb	r3, [r0, #0]
 80445e4:	6020      	str	r0, [r4, #0]
 80445e6:	2000      	movs	r0, #0
 80445e8:	e7eb      	b.n	80445c2 <__submore+0x1e>
 80445ea:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80445ec:	0077      	lsls	r7, r6, #1
 80445ee:	463a      	mov	r2, r7
 80445f0:	f000 f940 	bl	8044874 <_realloc_r>
 80445f4:	4605      	mov	r5, r0
 80445f6:	2800      	cmp	r0, #0
 80445f8:	d0e1      	beq.n	80445be <__submore+0x1a>
 80445fa:	eb00 0806 	add.w	r8, r0, r6
 80445fe:	4601      	mov	r1, r0
 8044600:	4632      	mov	r2, r6
 8044602:	4640      	mov	r0, r8
 8044604:	f000 f902 	bl	804480c <memcpy>
 8044608:	f8c4 8000 	str.w	r8, [r4]
 804460c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8044610:	e7e9      	b.n	80445e6 <__submore+0x42>
	...

08044614 <_ungetc_r>:
 8044614:	b570      	push	{r4, r5, r6, lr}
 8044616:	4614      	mov	r4, r2
 8044618:	1c4a      	adds	r2, r1, #1
 804461a:	4606      	mov	r6, r0
 804461c:	460d      	mov	r5, r1
 804461e:	d103      	bne.n	8044628 <_ungetc_r+0x14>
 8044620:	f04f 35ff 	mov.w	r5, #4294967295
 8044624:	4628      	mov	r0, r5
 8044626:	bd70      	pop	{r4, r5, r6, pc}
 8044628:	b118      	cbz	r0, 8044632 <_ungetc_r+0x1e>
 804462a:	6983      	ldr	r3, [r0, #24]
 804462c:	b90b      	cbnz	r3, 8044632 <_ungetc_r+0x1e>
 804462e:	f7fe fd85 	bl	804313c <__sinit>
 8044632:	4b41      	ldr	r3, [pc, #260]	; (8044738 <_ungetc_r+0x124>)
 8044634:	429c      	cmp	r4, r3
 8044636:	d11d      	bne.n	8044674 <_ungetc_r+0x60>
 8044638:	6874      	ldr	r4, [r6, #4]
 804463a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804463c:	07db      	lsls	r3, r3, #31
 804463e:	d405      	bmi.n	804464c <_ungetc_r+0x38>
 8044640:	89a3      	ldrh	r3, [r4, #12]
 8044642:	0598      	lsls	r0, r3, #22
 8044644:	d402      	bmi.n	804464c <_ungetc_r+0x38>
 8044646:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8044648:	f7fe fe33 	bl	80432b2 <__retarget_lock_acquire_recursive>
 804464c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8044650:	f023 0320 	bic.w	r3, r3, #32
 8044654:	0759      	lsls	r1, r3, #29
 8044656:	b29a      	uxth	r2, r3
 8044658:	81a3      	strh	r3, [r4, #12]
 804465a:	d42d      	bmi.n	80446b8 <_ungetc_r+0xa4>
 804465c:	06d3      	lsls	r3, r2, #27
 804465e:	d413      	bmi.n	8044688 <_ungetc_r+0x74>
 8044660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8044662:	07dd      	lsls	r5, r3, #31
 8044664:	d4dc      	bmi.n	8044620 <_ungetc_r+0xc>
 8044666:	f412 7f00 	tst.w	r2, #512	; 0x200
 804466a:	d1d9      	bne.n	8044620 <_ungetc_r+0xc>
 804466c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804466e:	f7fe fe21 	bl	80432b4 <__retarget_lock_release_recursive>
 8044672:	e7d5      	b.n	8044620 <_ungetc_r+0xc>
 8044674:	4b31      	ldr	r3, [pc, #196]	; (804473c <_ungetc_r+0x128>)
 8044676:	429c      	cmp	r4, r3
 8044678:	d101      	bne.n	804467e <_ungetc_r+0x6a>
 804467a:	68b4      	ldr	r4, [r6, #8]
 804467c:	e7dd      	b.n	804463a <_ungetc_r+0x26>
 804467e:	4b30      	ldr	r3, [pc, #192]	; (8044740 <_ungetc_r+0x12c>)
 8044680:	429c      	cmp	r4, r3
 8044682:	bf08      	it	eq
 8044684:	68f4      	ldreq	r4, [r6, #12]
 8044686:	e7d8      	b.n	804463a <_ungetc_r+0x26>
 8044688:	0710      	lsls	r0, r2, #28
 804468a:	d511      	bpl.n	80446b0 <_ungetc_r+0x9c>
 804468c:	4621      	mov	r1, r4
 804468e:	4630      	mov	r0, r6
 8044690:	f7fe fcae 	bl	8042ff0 <_fflush_r>
 8044694:	b130      	cbz	r0, 80446a4 <_ungetc_r+0x90>
 8044696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8044698:	07d9      	lsls	r1, r3, #31
 804469a:	d4c1      	bmi.n	8044620 <_ungetc_r+0xc>
 804469c:	89a3      	ldrh	r3, [r4, #12]
 804469e:	f413 7f00 	tst.w	r3, #512	; 0x200
 80446a2:	e7e2      	b.n	804466a <_ungetc_r+0x56>
 80446a4:	89a3      	ldrh	r3, [r4, #12]
 80446a6:	60a0      	str	r0, [r4, #8]
 80446a8:	f023 0308 	bic.w	r3, r3, #8
 80446ac:	61a0      	str	r0, [r4, #24]
 80446ae:	81a3      	strh	r3, [r4, #12]
 80446b0:	89a3      	ldrh	r3, [r4, #12]
 80446b2:	f043 0304 	orr.w	r3, r3, #4
 80446b6:	81a3      	strh	r3, [r4, #12]
 80446b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80446ba:	b2ed      	uxtb	r5, r5
 80446bc:	6862      	ldr	r2, [r4, #4]
 80446be:	b1d3      	cbz	r3, 80446f6 <_ungetc_r+0xe2>
 80446c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80446c2:	4293      	cmp	r3, r2
 80446c4:	dc05      	bgt.n	80446d2 <_ungetc_r+0xbe>
 80446c6:	4621      	mov	r1, r4
 80446c8:	4630      	mov	r0, r6
 80446ca:	f7ff ff6b 	bl	80445a4 <__submore>
 80446ce:	2800      	cmp	r0, #0
 80446d0:	d1e1      	bne.n	8044696 <_ungetc_r+0x82>
 80446d2:	6823      	ldr	r3, [r4, #0]
 80446d4:	1e5a      	subs	r2, r3, #1
 80446d6:	6022      	str	r2, [r4, #0]
 80446d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80446dc:	6863      	ldr	r3, [r4, #4]
 80446de:	3301      	adds	r3, #1
 80446e0:	6063      	str	r3, [r4, #4]
 80446e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80446e4:	07da      	lsls	r2, r3, #31
 80446e6:	d49d      	bmi.n	8044624 <_ungetc_r+0x10>
 80446e8:	89a3      	ldrh	r3, [r4, #12]
 80446ea:	059b      	lsls	r3, r3, #22
 80446ec:	d49a      	bmi.n	8044624 <_ungetc_r+0x10>
 80446ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80446f0:	f7fe fde0 	bl	80432b4 <__retarget_lock_release_recursive>
 80446f4:	e796      	b.n	8044624 <_ungetc_r+0x10>
 80446f6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80446f8:	6920      	ldr	r0, [r4, #16]
 80446fa:	6823      	ldr	r3, [r4, #0]
 80446fc:	f001 0101 	and.w	r1, r1, #1
 8044700:	b160      	cbz	r0, 804471c <_ungetc_r+0x108>
 8044702:	4298      	cmp	r0, r3
 8044704:	d20a      	bcs.n	804471c <_ungetc_r+0x108>
 8044706:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 804470a:	42a8      	cmp	r0, r5
 804470c:	d106      	bne.n	804471c <_ungetc_r+0x108>
 804470e:	3b01      	subs	r3, #1
 8044710:	3201      	adds	r2, #1
 8044712:	6023      	str	r3, [r4, #0]
 8044714:	6062      	str	r2, [r4, #4]
 8044716:	2900      	cmp	r1, #0
 8044718:	d184      	bne.n	8044624 <_ungetc_r+0x10>
 804471a:	e7e5      	b.n	80446e8 <_ungetc_r+0xd4>
 804471c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8044720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8044724:	6363      	str	r3, [r4, #52]	; 0x34
 8044726:	2303      	movs	r3, #3
 8044728:	63a3      	str	r3, [r4, #56]	; 0x38
 804472a:	4623      	mov	r3, r4
 804472c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8044730:	6023      	str	r3, [r4, #0]
 8044732:	2301      	movs	r3, #1
 8044734:	6063      	str	r3, [r4, #4]
 8044736:	e7ee      	b.n	8044716 <_ungetc_r+0x102>
 8044738:	08044a80 	.word	0x08044a80
 804473c:	08044aa0 	.word	0x08044aa0
 8044740:	08044a60 	.word	0x08044a60

08044744 <_write_r>:
 8044744:	b538      	push	{r3, r4, r5, lr}
 8044746:	4604      	mov	r4, r0
 8044748:	4d06      	ldr	r5, [pc, #24]	; (8044764 <_write_r+0x20>)
 804474a:	4608      	mov	r0, r1
 804474c:	4611      	mov	r1, r2
 804474e:	2200      	movs	r2, #0
 8044750:	602a      	str	r2, [r5, #0]
 8044752:	461a      	mov	r2, r3
 8044754:	f7fc f8b3 	bl	80408be <_write>
 8044758:	1c43      	adds	r3, r0, #1
 804475a:	d102      	bne.n	8044762 <_write_r+0x1e>
 804475c:	682b      	ldr	r3, [r5, #0]
 804475e:	b103      	cbz	r3, 8044762 <_write_r+0x1e>
 8044760:	6023      	str	r3, [r4, #0]
 8044762:	bd38      	pop	{r3, r4, r5, pc}
 8044764:	20018134 	.word	0x20018134

08044768 <_close_r>:
 8044768:	b538      	push	{r3, r4, r5, lr}
 804476a:	2300      	movs	r3, #0
 804476c:	4d05      	ldr	r5, [pc, #20]	; (8044784 <_close_r+0x1c>)
 804476e:	4604      	mov	r4, r0
 8044770:	4608      	mov	r0, r1
 8044772:	602b      	str	r3, [r5, #0]
 8044774:	f7fc f8bf 	bl	80408f6 <_close>
 8044778:	1c43      	adds	r3, r0, #1
 804477a:	d102      	bne.n	8044782 <_close_r+0x1a>
 804477c:	682b      	ldr	r3, [r5, #0]
 804477e:	b103      	cbz	r3, 8044782 <_close_r+0x1a>
 8044780:	6023      	str	r3, [r4, #0]
 8044782:	bd38      	pop	{r3, r4, r5, pc}
 8044784:	20018134 	.word	0x20018134

08044788 <_fstat_r>:
 8044788:	b538      	push	{r3, r4, r5, lr}
 804478a:	2300      	movs	r3, #0
 804478c:	4d06      	ldr	r5, [pc, #24]	; (80447a8 <_fstat_r+0x20>)
 804478e:	4604      	mov	r4, r0
 8044790:	4608      	mov	r0, r1
 8044792:	4611      	mov	r1, r2
 8044794:	602b      	str	r3, [r5, #0]
 8044796:	f7fc f8ba 	bl	804090e <_fstat>
 804479a:	1c43      	adds	r3, r0, #1
 804479c:	d102      	bne.n	80447a4 <_fstat_r+0x1c>
 804479e:	682b      	ldr	r3, [r5, #0]
 80447a0:	b103      	cbz	r3, 80447a4 <_fstat_r+0x1c>
 80447a2:	6023      	str	r3, [r4, #0]
 80447a4:	bd38      	pop	{r3, r4, r5, pc}
 80447a6:	bf00      	nop
 80447a8:	20018134 	.word	0x20018134

080447ac <_isatty_r>:
 80447ac:	b538      	push	{r3, r4, r5, lr}
 80447ae:	2300      	movs	r3, #0
 80447b0:	4d05      	ldr	r5, [pc, #20]	; (80447c8 <_isatty_r+0x1c>)
 80447b2:	4604      	mov	r4, r0
 80447b4:	4608      	mov	r0, r1
 80447b6:	602b      	str	r3, [r5, #0]
 80447b8:	f7fc f8b9 	bl	804092e <_isatty>
 80447bc:	1c43      	adds	r3, r0, #1
 80447be:	d102      	bne.n	80447c6 <_isatty_r+0x1a>
 80447c0:	682b      	ldr	r3, [r5, #0]
 80447c2:	b103      	cbz	r3, 80447c6 <_isatty_r+0x1a>
 80447c4:	6023      	str	r3, [r4, #0]
 80447c6:	bd38      	pop	{r3, r4, r5, pc}
 80447c8:	20018134 	.word	0x20018134

080447cc <_lseek_r>:
 80447cc:	b538      	push	{r3, r4, r5, lr}
 80447ce:	4604      	mov	r4, r0
 80447d0:	4d06      	ldr	r5, [pc, #24]	; (80447ec <_lseek_r+0x20>)
 80447d2:	4608      	mov	r0, r1
 80447d4:	4611      	mov	r1, r2
 80447d6:	2200      	movs	r2, #0
 80447d8:	602a      	str	r2, [r5, #0]
 80447da:	461a      	mov	r2, r3
 80447dc:	f7fc f8b2 	bl	8040944 <_lseek>
 80447e0:	1c43      	adds	r3, r0, #1
 80447e2:	d102      	bne.n	80447ea <_lseek_r+0x1e>
 80447e4:	682b      	ldr	r3, [r5, #0]
 80447e6:	b103      	cbz	r3, 80447ea <_lseek_r+0x1e>
 80447e8:	6023      	str	r3, [r4, #0]
 80447ea:	bd38      	pop	{r3, r4, r5, pc}
 80447ec:	20018134 	.word	0x20018134

080447f0 <memchr>:
 80447f0:	b2c9      	uxtb	r1, r1
 80447f2:	4402      	add	r2, r0
 80447f4:	b510      	push	{r4, lr}
 80447f6:	4290      	cmp	r0, r2
 80447f8:	4603      	mov	r3, r0
 80447fa:	d101      	bne.n	8044800 <memchr+0x10>
 80447fc:	2300      	movs	r3, #0
 80447fe:	e003      	b.n	8044808 <memchr+0x18>
 8044800:	781c      	ldrb	r4, [r3, #0]
 8044802:	3001      	adds	r0, #1
 8044804:	428c      	cmp	r4, r1
 8044806:	d1f6      	bne.n	80447f6 <memchr+0x6>
 8044808:	4618      	mov	r0, r3
 804480a:	bd10      	pop	{r4, pc}

0804480c <memcpy>:
 804480c:	440a      	add	r2, r1
 804480e:	1e43      	subs	r3, r0, #1
 8044810:	4291      	cmp	r1, r2
 8044812:	d100      	bne.n	8044816 <memcpy+0xa>
 8044814:	4770      	bx	lr
 8044816:	b510      	push	{r4, lr}
 8044818:	f811 4b01 	ldrb.w	r4, [r1], #1
 804481c:	4291      	cmp	r1, r2
 804481e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8044822:	d1f9      	bne.n	8044818 <memcpy+0xc>
 8044824:	bd10      	pop	{r4, pc}

08044826 <memmove>:
 8044826:	4288      	cmp	r0, r1
 8044828:	b510      	push	{r4, lr}
 804482a:	eb01 0402 	add.w	r4, r1, r2
 804482e:	d902      	bls.n	8044836 <memmove+0x10>
 8044830:	4284      	cmp	r4, r0
 8044832:	4623      	mov	r3, r4
 8044834:	d807      	bhi.n	8044846 <memmove+0x20>
 8044836:	1e43      	subs	r3, r0, #1
 8044838:	42a1      	cmp	r1, r4
 804483a:	d008      	beq.n	804484e <memmove+0x28>
 804483c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8044840:	f803 2f01 	strb.w	r2, [r3, #1]!
 8044844:	e7f8      	b.n	8044838 <memmove+0x12>
 8044846:	4402      	add	r2, r0
 8044848:	4601      	mov	r1, r0
 804484a:	428a      	cmp	r2, r1
 804484c:	d100      	bne.n	8044850 <memmove+0x2a>
 804484e:	bd10      	pop	{r4, pc}
 8044850:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8044854:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8044858:	e7f7      	b.n	804484a <memmove+0x24>
	...

0804485c <__malloc_lock>:
 804485c:	4801      	ldr	r0, [pc, #4]	; (8044864 <__malloc_lock+0x8>)
 804485e:	f7fe bd28 	b.w	80432b2 <__retarget_lock_acquire_recursive>
 8044862:	bf00      	nop
 8044864:	20018128 	.word	0x20018128

08044868 <__malloc_unlock>:
 8044868:	4801      	ldr	r0, [pc, #4]	; (8044870 <__malloc_unlock+0x8>)
 804486a:	f7fe bd23 	b.w	80432b4 <__retarget_lock_release_recursive>
 804486e:	bf00      	nop
 8044870:	20018128 	.word	0x20018128

08044874 <_realloc_r>:
 8044874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8044878:	4680      	mov	r8, r0
 804487a:	4614      	mov	r4, r2
 804487c:	460e      	mov	r6, r1
 804487e:	b921      	cbnz	r1, 804488a <_realloc_r+0x16>
 8044880:	4611      	mov	r1, r2
 8044882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8044886:	f7fe bdef 	b.w	8043468 <_malloc_r>
 804488a:	b92a      	cbnz	r2, 8044898 <_realloc_r+0x24>
 804488c:	4625      	mov	r5, r4
 804488e:	f7fe fd7f 	bl	8043390 <_free_r>
 8044892:	4628      	mov	r0, r5
 8044894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8044898:	f000 f82e 	bl	80448f8 <_malloc_usable_size_r>
 804489c:	4284      	cmp	r4, r0
 804489e:	4607      	mov	r7, r0
 80448a0:	d802      	bhi.n	80448a8 <_realloc_r+0x34>
 80448a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80448a6:	d812      	bhi.n	80448ce <_realloc_r+0x5a>
 80448a8:	4621      	mov	r1, r4
 80448aa:	4640      	mov	r0, r8
 80448ac:	f7fe fddc 	bl	8043468 <_malloc_r>
 80448b0:	4605      	mov	r5, r0
 80448b2:	2800      	cmp	r0, #0
 80448b4:	d0ed      	beq.n	8044892 <_realloc_r+0x1e>
 80448b6:	42bc      	cmp	r4, r7
 80448b8:	4622      	mov	r2, r4
 80448ba:	4631      	mov	r1, r6
 80448bc:	bf28      	it	cs
 80448be:	463a      	movcs	r2, r7
 80448c0:	f7ff ffa4 	bl	804480c <memcpy>
 80448c4:	4631      	mov	r1, r6
 80448c6:	4640      	mov	r0, r8
 80448c8:	f7fe fd62 	bl	8043390 <_free_r>
 80448cc:	e7e1      	b.n	8044892 <_realloc_r+0x1e>
 80448ce:	4635      	mov	r5, r6
 80448d0:	e7df      	b.n	8044892 <_realloc_r+0x1e>
	...

080448d4 <_read_r>:
 80448d4:	b538      	push	{r3, r4, r5, lr}
 80448d6:	4604      	mov	r4, r0
 80448d8:	4d06      	ldr	r5, [pc, #24]	; (80448f4 <_read_r+0x20>)
 80448da:	4608      	mov	r0, r1
 80448dc:	4611      	mov	r1, r2
 80448de:	2200      	movs	r2, #0
 80448e0:	602a      	str	r2, [r5, #0]
 80448e2:	461a      	mov	r2, r3
 80448e4:	f7fb ffce 	bl	8040884 <_read>
 80448e8:	1c43      	adds	r3, r0, #1
 80448ea:	d102      	bne.n	80448f2 <_read_r+0x1e>
 80448ec:	682b      	ldr	r3, [r5, #0]
 80448ee:	b103      	cbz	r3, 80448f2 <_read_r+0x1e>
 80448f0:	6023      	str	r3, [r4, #0]
 80448f2:	bd38      	pop	{r3, r4, r5, pc}
 80448f4:	20018134 	.word	0x20018134

080448f8 <_malloc_usable_size_r>:
 80448f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80448fc:	1f18      	subs	r0, r3, #4
 80448fe:	2b00      	cmp	r3, #0
 8044900:	bfbc      	itt	lt
 8044902:	580b      	ldrlt	r3, [r1, r0]
 8044904:	18c0      	addlt	r0, r0, r3
 8044906:	4770      	bx	lr

08044908 <_init>:
 8044908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804490a:	bf00      	nop
 804490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804490e:	bc08      	pop	{r3}
 8044910:	469e      	mov	lr, r3
 8044912:	4770      	bx	lr

08044914 <_fini>:
 8044914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8044916:	bf00      	nop
 8044918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804491a:	bc08      	pop	{r3}
 804491c:	469e      	mov	lr, r3
 804491e:	4770      	bx	lr

08044920 <__PinCompare_NSE_veneer>:
 8044920:	b401      	push	{r0}
 8044922:	4802      	ldr	r0, [pc, #8]	; (804492c <__PinCompare_NSE_veneer+0xc>)
 8044924:	4684      	mov	ip, r0
 8044926:	bc01      	pop	{r0}
 8044928:	4760      	bx	ip
 804492a:	bf00      	nop
 804492c:	0c03e019 	.word	0x0c03e019

08044930 <__SECURE_RegisterCallback_veneer>:
 8044930:	b401      	push	{r0}
 8044932:	4802      	ldr	r0, [pc, #8]	; (804493c <__SECURE_RegisterCallback_veneer+0xc>)
 8044934:	4684      	mov	ip, r0
 8044936:	bc01      	pop	{r0}
 8044938:	4760      	bx	ip
 804493a:	bf00      	nop
 804493c:	0c03e021 	.word	0x0c03e021

08044940 <__SECURE_SystemCoreClockUpdate_veneer>:
 8044940:	b401      	push	{r0}
 8044942:	4802      	ldr	r0, [pc, #8]	; (804494c <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 8044944:	4684      	mov	ip, r0
 8044946:	bc01      	pop	{r0}
 8044948:	4760      	bx	ip
 804494a:	bf00      	nop
 804494c:	0c03e009 	.word	0x0c03e009

08044950 <__Access_Nok_toggle_veneer>:
 8044950:	b401      	push	{r0}
 8044952:	4802      	ldr	r0, [pc, #8]	; (804495c <__Access_Nok_toggle_veneer+0xc>)
 8044954:	4684      	mov	ip, r0
 8044956:	bc01      	pop	{r0}
 8044958:	4760      	bx	ip
 804495a:	bf00      	nop
 804495c:	0c03e039 	.word	0x0c03e039

08044960 <__DbgConsole_Printf_NSE_veneer>:
 8044960:	b401      	push	{r0}
 8044962:	4802      	ldr	r0, [pc, #8]	; (804496c <__DbgConsole_Printf_NSE_veneer+0xc>)
 8044964:	4684      	mov	ip, r0
 8044966:	bc01      	pop	{r0}
 8044968:	4760      	bx	ip
 804496a:	bf00      	nop
 804496c:	0c03e001 	.word	0x0c03e001

08044970 <__Access_ok_toggle_veneer>:
 8044970:	b401      	push	{r0}
 8044972:	4802      	ldr	r0, [pc, #8]	; (804497c <__Access_ok_toggle_veneer+0xc>)
 8044974:	4684      	mov	ip, r0
 8044976:	bc01      	pop	{r0}
 8044978:	4760      	bx	ip
 804497a:	bf00      	nop
 804497c:	0c03e029 	.word	0x0c03e029
